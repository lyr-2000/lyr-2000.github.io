<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>展示index on Even - A super concise theme for Hugo</title>
    <link>http://doc.lyr-2000.xyz/</link>
    <description>Recent content in 展示index on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>lyr</copyright>
    <lastBuildDate>Sat, 14 Aug 2021 22:42:48 +0800</lastBuildDate>
    
	<atom:link href="http://doc.lyr-2000.xyz/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于</title>
      <link>http://doc.lyr-2000.xyz/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/about/</guid>
      <description>欢迎来到我的文档站 github地址 个人博客地址 特此声明： 本站所有内容来自 网友总结，该站只用于个人学习复习用。 🎁致谢 ❤️感谢小游提供的各种笔记</description>
    </item>
    
    <item>
      <title>arp协议原理</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/arp%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 17 Aug 2021 21:43:55 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/arp%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86/</guid>
      <description>arp 协议原理 一、什么是ARP协议 ARP协议，全称“Address Resolution Protocol”,中文名是地址解析协议，使用ARP协议可实现通过IP地址获</description>
    </item>
    
    <item>
      <title>http-basics</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/http-basics/</link>
      <pubDate>Tue, 17 Aug 2021 21:43:55 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/http-basics/</guid>
      <description>1. web及网络基础 1.1. 通过HTTP访问web[C/S] 1.2. TCP/IP四层模型 1.2.1. 数据包的封装 1.3. TCP/IP协议族 1.3.1. 负责传输的IP协议 使用ARP协</description>
    </item>
    
    <item>
      <title>http-code</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/http-code/</link>
      <pubDate>Tue, 17 Aug 2021 21:43:55 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/http-code/</guid>
      <description>4. HTTP状态码 状态码即服务器返回的请求结果。 状态码 类型 说明 1xx Informational(信息性状态码) 接收的请求正在处理 2xx Success(</description>
    </item>
    
    <item>
      <title>http实体数据</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/http%E5%AE%9E%E4%BD%93%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Tue, 17 Aug 2021 21:43:55 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/http%E5%AE%9E%E4%BD%93%E6%95%B0%E6%8D%AE/</guid>
      <description>我们了解了 HTTP 报文的结构，知道一个 HTTP 报文是由“header+body”组成的。但那时我们主要研究的是 header，没有涉及到 body。所以，“</description>
    </item>
    
    <item>
      <title>ip</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/ip/</link>
      <pubDate>Tue, 17 Aug 2021 21:43:55 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/ip/</guid>
      <description>1. IP基础 TCP/IP的心脏是互联网层，这一层主要有IP和ICMP两个协议组成，在OSI参考模型中为第三层（网络层）。网络层的主要作用是实现</description>
    </item>
    
    <item>
      <title>tcp 和 ip 分层</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcp-ip%E5%88%86%E5%B1%82/</link>
      <pubDate>Tue, 17 Aug 2021 21:43:55 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcp-ip%E5%88%86%E5%B1%82/</guid>
      <description>TCP/IP 网络分层模型 还是先从 TCP/IP 协议开始讲起，一是因为它非常经典，二是因为它是目前事实上的网络通信标准，研究它的实用价值最大。 TCP/IP 当初的设计者真的是非</description>
    </item>
    
    <item>
      <title>tcp-basics</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/tcpip-basics/</link>
      <pubDate>Tue, 17 Aug 2021 21:43:55 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/tcpip-basics/</guid>
      <description>1. 基础知识 1.1. 协议 计算机与网络设备要相互通信，必须基于相同的方法。比如，如何探测到通信目标，使用哪种语言通信，如何结束通信等规则要事先确定。 不</description>
    </item>
    
    <item>
      <title>tcp-message</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/http-message/</link>
      <pubDate>Tue, 17 Aug 2021 21:43:55 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/http-message/</guid>
      <description>3. HTTP报文 3.1. HTTP报文 用于HTTP协议交互的信息被称为HTTP报文，客户端的HTTP报文叫做请求报文，服务端的叫做响应报文。报文大致分</description>
    </item>
    
    <item>
      <title>tcp/udp</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/tcp-udp/</link>
      <pubDate>Tue, 17 Aug 2021 21:43:55 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcpip/tcp-udp/</guid>
      <description>1. 传输层的作用 1.1. 传输层的定义 IP首部有个协议字段，用来标识传输层协议，识别数据是TCP的内容还是UDP的内容。同样，传输层，为了识别数据应该</description>
    </item>
    
    <item>
      <title>网络协议_</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE_/</link>
      <pubDate>Tue, 17 Aug 2021 21:43:55 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE_/</guid>
      <description>协议三要素 当然，这种协议还是更接近人类语言，机器不能直接读懂，需要进行翻译，翻译的工作教给编译器，也就是程序员常说的 compile。这个过程</description>
    </item>
    
    <item>
      <title>计算机网络八股文</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/</link>
      <pubDate>Tue, 17 Aug 2021 21:43:55 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/</guid>
      <description>作者：peonyX 链接：https://www.nowcoder.com/discuss/723383?source_id=profile_</description>
    </item>
    
    <item>
      <title>计算机网络简介</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/http%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 17 Aug 2021 21:43:55 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/http%E7%AE%80%E4%BB%8B/</guid>
      <description>TCP 协议是“Transmission Control Protocol”的缩写，意思是“传输控制协议”，它位于 IP 协议之上，基于 IP 协议提供可靠的、字节流形式的通</description>
    </item>
    
    <item>
      <title>0到n-1中缺失的数字</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%88%86or%E6%9F%A5%E6%89%BE/0%E5%88%B0n-1%E4%B8%AD%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%88%86or%E6%9F%A5%E6%89%BE/0%E5%88%B0n-1%E4%B8%AD%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>一个长度为 n−1 的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围 $0 $ 到 $ n−1 $ 之内。 在范围 0 到 n−1 的 n 个数字中有且只有一个数字</description>
    </item>
    
    <item>
      <title>apache_kafaka原理</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/apache_kafaka%E9%AB%98%E6%80%A7%E8%83%BDio%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/apache_kafaka%E9%AB%98%E6%80%A7%E8%83%BDio%E5%8E%9F%E7%90%86/</guid>
      <description>Kafka如何实现高性能IO？ 总结 批量消息提升服务器处理能力【buffer缓存】 使用批量消息提升服务端处理能力 我们知道，批量处理是一种非常有</description>
    </item>
    
    <item>
      <title>AQS源码问题</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/aqs%E6%BA%90%E7%A0%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/aqs%E6%BA%90%E7%A0%81%E9%97%AE%E9%A2%98/</guid>
      <description>AQS 实现原理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 static final class Node { // waitStatus值 static final int CANCELLED = 1; static final int SIGNAL = -1; static final int CONDITION = -2; static final int PROPAGATE = -3; // 节点的</description>
    </item>
    
    <item>
      <title>bash基础</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80/</guid>
      <description>linux 系统中一般默认使用 bash， 文件开头需要些 #! /bin/bash , 指定 bash为脚本解释器 运行的几种方式： 可执行文件执行，需要脚本有执行权限 chmod + x test.sh &amp;amp;&amp;amp; ./test.sh 解释</description>
    </item>
    
    <item>
      <title>bean的生命周期</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>bean是生命周期 主要有四个，实例化Instantiation，属性赋值Populate，初始化Initialization，销毁Destr</description>
    </item>
    
    <item>
      <title>concurrentHashMap使用场景</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/concurrenthashmap%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/concurrenthashmap%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</guid>
      <description>如果对数据有强一致要求，则需使用 Hashtable；在大部分场景通常都是弱一致性的情况下，使用 ConcurrentHashMap 即可；如果数据量在千万级别，且存在大量增删改</description>
    </item>
    
    <item>
      <title>cpp学习和使用【文件api使用】</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/cpp%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/cpp%E5%AD%A6%E4%B9%A0/</guid>
      <description>open 函数 api学习 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // #include&amp;lt;bits/stdc++.h&amp;gt; #include&amp;lt;sys/types.h&amp;gt;#include&amp;lt;sys/stat.h&amp;gt;#include&amp;lt;fcntl.h&amp;gt;#include&amp;lt;unistd.h&amp;gt;#include&amp;lt;stdlib.h&amp;gt; #include&amp;lt;stdio.h&amp;gt; // #include &amp;lt;iostream&amp;gt; // using namespace std; int main(void) { int fd = 0; //打开 已经存在的文件 fd</description>
    </item>
    
    <item>
      <title>c语言基础原理</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/</guid>
      <description>应用程序内存基本构成 一个应用程序的内存基本上由：栈区、堆区、数据区（静态存储区）和程序代码区组成。 栈区（Stack Sagment） 在调用函数</description>
    </item>
    
    <item>
      <title>dockerfile原理</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/dockerfile%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/dockerfile%E5%8E%9F%E7%90%86/</guid>
      <description>什么是dockerfile 为开发团队提供完全一致的开发环境 拿所构建的镜像通过 Dockerfile文件构建一个新的镜像开始工作 部署时，无缝移植</description>
    </item>
    
    <item>
      <title>eggjs学习记录</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/react%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/koa%E6%80%BB%E7%BB%93/eggjs%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/react%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/koa%E6%80%BB%E7%BB%93/eggjs%E5%AD%A6%E4%B9%A0/</guid>
      <description>eggjs 学习总结 生成验证码 1 2 3 4 yarn add svg-captcha yarn add cookie-parser 添加session 支持 1 2 yarn add egg-session 验证码跨域问题解决 这个贼坑， cookie 讲究同源策略，要相同端口相同域名， 我的</description>
    </item>
    
    <item>
      <title>ftp命令以及原理</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/ftp%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/ftp%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid>
      <description>ftp 使用总结 ftp 使用教程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ftp ip # 通过 ftp 连接远程服务器 # 图形界面搞的太慢了， 还是命令快 # l表示 local local</description>
    </item>
    
    <item>
      <title>git学习</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/git%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/git%E5%AD%A6%E4%B9%A0/</guid>
      <description>git 有3个状态 工作区 -&amp;gt; 暂存区 -&amp;gt; 版本库 练习 git 网站 有一个head 指针指向 当前暂存区的节点， 如果我提交新代码到暂存区 就新增加一个节点，内容复制到新节</description>
    </item>
    
    <item>
      <title>golang 垃圾回收机制</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/golang%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/golang%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</guid>
      <description>三色标记法原理 垃圾回收(Garbage Collection，简称GC)是编程语言中提供的自动的内存管理机制，自动释放不需要的对象，让出存储器</description>
    </item>
    
    <item>
      <title>go语言并发模型</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/</guid>
      <description>参考的文档教程 基础知识和结论 Java使用的是一对一线程模型，所以它的一个线程对应于一个内核线程，调度完全交给操作系统来处理； Go语言使用的是</description>
    </item>
    
    <item>
      <title>hugo github actions部署</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/hugo-github-actions/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/hugo-github-actions/</guid>
      <description>hugo github actions 部署配置</description>
    </item>
    
    <item>
      <title>IO方面的知识</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/io%E6%96%B9%E9%9D%A2%E7%9A%84%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/io%E6%96%B9%E9%9D%A2%E7%9A%84%E7%9F%A5%E8%AF%86/</guid>
      <description>linux 文件系统相关 像一家公司要做 To B 的生意，发现客户多种多样，众口难调，不同的地域不一样，不同的行业不一样。如果你不懂某个地方的规矩，根本卖不出</description>
    </item>
    
    <item>
      <title>java gc 垃圾回收机制</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java-gc/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java-gc/</guid>
      <description>内存布局 常见的垃圾回收算法 GC 的一些名词 Minor GC 新生代空间，eden,survivor 区域回收的叫做minor GC Major GC 清理Tenured区， 用于回收</description>
    </item>
    
    <item>
      <title>java spring全家桶</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java-spring%E5%85%A8%E5%AE%B6%E6%A1%B6/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java-spring%E5%85%A8%E5%AE%B6%E6%A1%B6/</guid>
      <description>springmvc怎么处理json数据 ajax请求 通过 HandlerAdapter 处理 这个 数据，</description>
    </item>
    
    <item>
      <title>JAVA 调优工具</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/java-%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/java-%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7/</guid>
      <description>java 调优工具</description>
    </item>
    
    <item>
      <title>java_优化_字符串优化的方法</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/java_%E4%BC%98%E5%8C%96_%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BC%98%E5%8C%96%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/java_%E4%BC%98%E5%8C%96_%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BC%98%E5%8C%96%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>有什么优化的手段呢？ 字符串拼接用 StringBuilder stringBuffer intern 优化常用字符串 这个案例来自一位 Twitter 工程师在 QCon 全球软件开发大会上的演讲，他们想到的解决方法，就是使用 String.intern 来节</description>
    </item>
    
    <item>
      <title>java_优化_容器优化</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/java_%E4%BC%98%E5%8C%96_%E5%AE%B9%E5%99%A8%E4%BC%98%E5%8C%96/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/java_%E4%BC%98%E5%8C%96_%E5%AE%B9%E5%99%A8%E4%BC%98%E5%8C%96/</guid>
      <description>arraylist换成线程安全的copyOnwriteList就可以解决线程不安全问题? copyOnwriteList更适合某一时间段统一新</description>
    </item>
    
    <item>
      <title>java_多线程_锁优化</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/java_%E5%A4%9A%E7%BA%BF%E7%A8%8B_%E9%94%81%E4%BC%98%E5%8C%96/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/java_%E5%A4%9A%E7%BA%BF%E7%A8%8B_%E9%94%81%E4%BC%98%E5%8C%96/</guid>
      <description>**在并发编程中，多个线程访问同一个共享资源时，我们必须考虑如何维护数据的原子性。**在 JDK1.5 之前，Java 是依靠 Synchronized 关键字实现锁功能来做到这点的</description>
    </item>
    
    <item>
      <title>java八股_垃圾回收</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%89%9B%E5%AE%A2%E9%80%89%E6%8B%A9%E9%A2%98%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/java/java%E5%85%AB%E8%82%A1%E9%A2%98_%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%89%9B%E5%AE%A2%E9%80%89%E6%8B%A9%E9%A2%98%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/java/java%E5%85%AB%E8%82%A1%E9%A2%98_%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid>
      <description>java 八股 垃圾回收 SurvivorRatio 2个survivor 区 和 Eden区的比值，默认值为8，即$ Eden区: From区域:TO 区域 = 8:1:1 $</description>
    </item>
    
    <item>
      <title>java多线程上下文切换</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98/</guid>
      <description>其实在单个处理器的时期，操作系统就能处理多线程并发任务。处理器给每个线程分配 CPU 时间片（Time Slice），线程在分配获得的时间片内执行任务</description>
    </item>
    
    <item>
      <title>java多线程避免死锁</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%81%BF%E5%85%8D%E6%AD%BB%E9%94%81%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%81%BF%E5%85%8D%E6%AD%BB%E9%94%81%E6%93%8D%E4%BD%9C/</guid>
      <description>java 多线程避免死锁 面向对象思想里面有一个很重要的特性是封装，封装的通俗解释就是将属性和实现细节封装在对象内部，外界对象只能通过目标对象提供的公</description>
    </item>
    
    <item>
      <title>java并发八股</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E5%B9%B6%E5%8F%91%E5%85%AB%E8%82%A1/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E5%B9%B6%E5%8F%91%E5%85%AB%E8%82%A1/</guid>
      <description>java 并发八股文 面试题网站 线程生命周期 当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，它要经</description>
    </item>
    
    <item>
      <title>java并发编程基础学习</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</guid>
      <description>并发编程需要解决的问题 从性能角度讲，我们为了提高执行一定计算机任务的效率，所以IO等待的时候不能让cpu闲着，所以我们把任务拆分交替执行，有</description>
    </item>
    
    <item>
      <title>java语言八股</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%85%AB%E8%82%A1/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%85%AB%E8%82%A1/</guid>
      <description>重新 equals 一定要重新 hashCode 并发编程三要素 原子性，不可分割 有序性， 程序执行顺序和代码顺序保持一致 可见性【可用性】， 一个线程对共享变量的修改，另一个线程</description>
    </item>
    
    <item>
      <title>JMM</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/jmm/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/jmm/</guid>
      <description>JMM JMM是什么 JMM是一种规范，目的是解决由于多线程通过共享内存进行通信时，存在的本地内存数据不一致、编译器会对代码指令重排序、处理器会对代</description>
    </item>
    
    <item>
      <title>JVM 加载类的 方式</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/jvm%E5%8A%A0%E8%BD%BD%E7%B1%BB/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/jvm%E5%8A%A0%E8%BD%BD%E7%B1%BB/</guid>
      <description>加载类的方式 加载类的方式有以下几种： 1）从本地系统直接加载 2）通过网络下载.class文件 3）从zip，jar等归档文件中加载.class文</description>
    </item>
    
    <item>
      <title>jvm什么时候进行垃圾回收</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</guid>
      <description>什么是 JNI java native interface，api 底层实现是 c 和 c++ java GC root 有哪些 Class Thread ，活着的线程 Stack Local , java 方法的Local变量参数 JNI local Jni Global monitor Used , 用于同步的监</description>
    </item>
    
    <item>
      <title>JVM全集</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/jvm%E5%85%A8%E9%9B%86/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/jvm%E5%85%A8%E9%9B%86/</guid>
      <description>JMM JMM是什么 JMM是一种规范，目的是解决由于多线程通过共享内存进行通信时，存在的本地内存数据不一致、编译器会对代码指令重排序、处理器会对代</description>
    </item>
    
    <item>
      <title>jvm编程理论</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA/</guid>
      <description>在 Java 语言中，Sun 公司的工程师们对 String 对象做了大量的优化，来节约内存空间，提升 String 对象在系统中的性能。一起来看看优化过程，如下图所示： 工程师将 char[]</description>
    </item>
    
    <item>
      <title>kali的优势</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/kali-linux%E5%AD%A6%E4%B9%A0/kali%E7%9A%84%E4%BC%98%E5%8A%BF/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/kali-linux%E5%AD%A6%E4%B9%A0/kali%E7%9A%84%E4%BC%98%E5%8A%BF/</guid>
      <description>免责声明： 切勿使用教程中的内容进行违法活动，后果自负 开源，免费，可以给任何人使用 广泛支持无线协议 在安全环境中开发 GPG 签名包和存储库 kali 可以用于各</description>
    </item>
    
    <item>
      <title>linux file permission</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/linix-file-permission/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/linix-file-permission/</guid>
      <description>1. Linux文件管理 Linux中的所有数据都被保存在文件中，所有的文件被分配到不同的目录。目录是一种类似于树的结构，称为文件系统。 1.1. 文件类型</description>
    </item>
    
    <item>
      <title>linux file storage_inode</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/linux_file_storage_inode/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/linux_file_storage_inode/</guid>
      <description>文件存储结构 大部分的Linux文件系统（如ext2、ext3）规定，一个文件由目录项、inode和数据块组成 目录项：包括文件名和inode节</description>
    </item>
    
    <item>
      <title>linux inode原理</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/linux_inode%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/linux_inode%E5%8E%9F%E7%90%86/</guid>
      <description>什么是 inode inode包含很多的文件元信息，但不包含文件名，例如：字节数、属主UserID、属组GroupID、读写执行权限、时间戳等。 而文件名</description>
    </item>
    
    <item>
      <title>linux x86架构【linux体系学习】</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/linux-x86%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/linux-x86%E6%9E%B6%E6%9E%84/</guid>
      <description>linux x86架构 CPU 对于一个计算机来讲，最核心的就是CPU（Central Processing Unit，中央处理器）。这是这台计算机的大脑，所有的设备都围绕它展开。</description>
    </item>
    
    <item>
      <title>linux下MYSQL crud commands</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/mysql/crud_commands/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/mysql/crud_commands/</guid>
      <description>4. 表内容操作 4.1. 增 1 2 3 4 5 6 insert into 表 (列名,列名...) values (值,值,...) insert into 表 (列名,列名...) values (值,值,...),(值,值,值...</description>
    </item>
    
    <item>
      <title>linux下MYSQL table-operation</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/mysql/table-operation/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/mysql/table-operation/</guid>
      <description>2. 数据库操作 1 2 3 4 5 6 7 8 #创建数据库 create database &amp;lt;数据库名&amp;gt; #显示数据库 show databases #删除数据 drop database &amp;lt;数据库名&amp;gt; 3. 数据表操作 3.1. 创建</description>
    </item>
    
    <item>
      <title>linux下MYSQL的管理</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/mysql/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/mysql/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/</guid>
      <description>1. 系统管理 1.1. 连接mysql 格式： mysql -h主机地址 -u用户名 －p用户密码 1 2 3 4 5 6 7 8 #连接本地 mysql -h&amp;lt;localhost/127.0.0.1&amp;gt; -u用户名 －p用户密码 #连接远程 mysql -h&amp;l</description>
    </item>
    
    <item>
      <title>linux下的MTU</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/linux%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/linux%E4%B8%8B%E7%9A%84-mtu/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/linux%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/linux%E4%B8%8B%E7%9A%84-mtu/</guid>
      <description>1 2 3 4 ifconfig :&amp;lt;&amp;lt;EOF eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500 EOF 由命令可知： linux下的 MTU 为 1500 个字节 1 2 net.ipv4.tcp_sack = 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ping -s 1460 -M do baidu.com :&amp;lt;&amp;lt;EOF PING baidu.com (220.181.38.148) 1460(1488) bytes of</description>
    </item>
    
    <item>
      <title>linux文件读写API</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/linux%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99api/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/linux%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99api/</guid>
      <description>虚拟地址空间原理 学习视频 Linux 为每个运行程序（进程） 操作系统都会为其分配一个 0 ~ 4G 的地址空间 (虚拟地址空间) 进程： 正在运行的程序 Linux 下 可执行文件格</description>
    </item>
    
    <item>
      <title>linux调优_系统负载</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E8%B0%83%E4%BC%98_%E7%B3%BB%E7%BB%9F%E8%B4%9F%E8%BD%BD/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E8%B0%83%E4%BC%98_%E7%B3%BB%E7%BB%9F%E8%B4%9F%E8%BD%BD/</guid>
      <description>常见的 调优命令 top uptime</description>
    </item>
    
    <item>
      <title>linux部署前端程序</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF-node%E7%A8%8B%E5%BA%8F%E7%AD%89/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF-node%E7%A8%8B%E5%BA%8F%E7%AD%89/</guid>
      <description>linux 下部署前端程序总结 上来就删除 yarn.lock, package-lock.json 等文件 yarn 安装依赖 yarn dev 运行 即可</description>
    </item>
    
    <item>
      <title>LongAdder源码</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/longadder-%E6%BA%90%E7%A0%81/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/longadder-%E6%BA%90%E7%A0%81/</guid>
      <description>LongAdder源码学习 学习视频参考 在 JDK1.8 中，Java 提供了一个新的原子类 LongAdder。LongAdder 在高并发场景下会比 AtomicInteger 和 AtomicLong 的性</description>
    </item>
    
    <item>
      <title>makefile原理</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/makefile%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/makefile%E5%8E%9F%E7%90%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title>maven传递依赖</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/maven%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/maven%E7%9B%B8%E5%85%B3/</guid>
      <description>maven 传递依赖 相关参考博客</description>
    </item>
    
    <item>
      <title>mysql开发注意事项</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/mysql%E5%BC%80%E5%8F%91%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/mysql%E5%BC%80%E5%8F%91%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>MySQL 数据库开发的三十六条军规 一、核心军规(5) 1.1 尽量不在数据库做运算 别让脚趾头想事情，那是脑瓜子的职责 让数据库多做她擅长的事: 尽量不在数据库做</description>
    </item>
    
    <item>
      <title>mysql相关</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/mysql%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/mysql%E7%9B%B8%E5%85%B3/</guid>
      <description>mysql慢查询怎么优化 检查是否走了索引，如果没有，优化 SQL 利用索引 检查 利用的索引是否是最优索引，没有的话，尽量用最优索引 检查所查字段是否是必</description>
    </item>
    
    <item>
      <title>mysql索引原理</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/mysql-%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/mysql-%E7%B4%A2%E5%BC%95/</guid>
      <description>mysql 索引原理 什么是回表 回表的概念，去根据索引搜索到 数据，但是索引中没有要查找的数据，就要去定位到那个行，去把数据行中的数据搜索出来【这个就是回</description>
    </item>
    
    <item>
      <title>neo4j基本概念</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/neo4j/neo4j%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/neo4j/neo4j%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description>neo4j 基本概念 参考学习教程 neo4j的数据模型 neo4j cql 图数据库 通过apache lucene 索引 支持unique 约束 包含一个用于执行 cql 命令的 UI： NEO4J 数据库浏览器</description>
    </item>
    
    <item>
      <title>netty线程模型【nio-reactor】</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/netty-%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8Bnio-reactor%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/netty-%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8Bnio-reactor%E6%A8%A1%E5%9E%8B/</guid>
      <description>NIO原理 设置一个场景， 从 socket里面读取数据，读到 &amp;lsquo;\n&amp;rsquo; 为止，把读到的数据写入到另一个 socket里面，这个就是 c 和 java nio的2种实现 ne</description>
    </item>
    
    <item>
      <title>nj模板引擎</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/nodejs/nj%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/nodejs/nj%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</guid>
      <description>nj模板引擎 学习教程 官网地址 1 2 3 4 5 6 7 8 //配置模板引擎 config.view = { defaultExtension:&amp;#39;.nj&amp;#39;, defaultViewEngine:&amp;#39;nunjucks&amp;#39;, }</description>
    </item>
    
    <item>
      <title>nmap工具使用</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/kali-linux%E5%AD%A6%E4%B9%A0/nmap%E6%89%AB%E6%8F%8F%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/kali-linux%E5%AD%A6%E4%B9%A0/nmap%E6%89%AB%E6%8F%8F%E5%8E%9F%E7%90%86/</guid>
      <description>nmap工具原理 1 nmap扫描主要有 TCP 全连接扫描（会被扫描机器留下记录）， 半连接扫描（不会留下记录） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 :&amp;lt;&amp;lt;EOF SCAN TECHNIQUES:</description>
    </item>
    
    <item>
      <title>nodejs调用服务器命令脚本</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/nodejs/nodejs-%E8%B0%83%E7%94%A8-python%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/nodejs/nodejs-%E8%B0%83%E7%94%A8-python%E8%84%9A%E6%9C%AC/</guid>
      <description>ljudge框架 https://github.com/quark-zju/ljudge</description>
    </item>
    
    <item>
      <title>OJ 环境安装</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/oj%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/oj%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</guid>
      <description>安装OJ 环境的过程 安装的文档 2.1、安装安全计算模型 libseccomp RunC 默认的编译配置是支持 seccomp 的，所以我们需要先安装libseccomp, 如果是centos</description>
    </item>
    
    <item>
      <title>python实现判题程序</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%9C%AC/python%E5%AE%9E%E7%8E%B0%E5%88%A4%E9%A2%98%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%9C%AC/python%E5%AE%9E%E7%8E%B0%E5%88%A4%E9%A2%98%E7%A8%8B%E5%BA%8F/</guid>
      <description>python 脚本总结 python判题程序 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55</description>
    </item>
    
    <item>
      <title>react配置记录</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/react%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/react%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E9%85%8D%E7%BD%AE/</guid>
      <description>react 代码配置笔记 next 安装 ant-design 过程 1 2 3 4 5 6 7 8 9 10 yarn add @zeit/next-css # 安装 可以在 react 上写 css的框架 yarn add antd # 安装 ant-design yarn add babel-plugin-import # 安装 babel 按需加载 1 2 3 4 5 6 7 8 9 10 11</description>
    </item>
    
    <item>
      <title>redis conf 配置</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis-conf-cn/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis-conf-cn/</guid>
      <description>以下为redis.conf的文件的中文描述，整理于网络 1 2 3 4 5 6 7 8 9 10 11 12 # Redis 配置文件示例 # 注意单位: 当需要配置内存大小时, 可能需要指定</description>
    </item>
    
    <item>
      <title>redis介绍</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis-introduction/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis-introduction/</guid>
      <description>1. redis是什么？（what） Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作数据库，高速缓存和消息队列代理。它支持字</description>
    </item>
    
    <item>
      <title>redis哨兵集群使用</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis-sentinel/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis-sentinel/</guid>
      <description>1. 部署Redis集群 redis的安装及配置参考[redis部署] 本文以创建一主二从的集群为例。 1.1 部署与配置 先创建sentinel目录，在该目</description>
    </item>
    
    <item>
      <title>redis数据结构</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>redis 为什么最大 512M redis中用int来修饰len字段，int为4个字节，也就是32位，那么最大能表示 $2^32$ 次方。所以2^32/8/1024/102</description>
    </item>
    
    <item>
      <title>redis部署过程</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis-cluster/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis-cluster/</guid>
      <description>1. Redis部署 以下以Linux系统为例 1.1 下载和编译 1 2 3 4 $ wget http://download.redis.io/releases/redis-4.0.7.tar.gz $ tar xzf redis-4.0.7.tar.gz $ cd redis-4.0.7 $ make 编译完成后会在src目录下生成Redis服务端程序red</description>
    </item>
    
    <item>
      <title>redis配置 英文版</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis-conf-en/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/mysql/%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis-conf-en/</guid>
      <description>本文来自redis 官方配置文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Redis configuration file example. # # Note that in order to read the configuration file, Redis must be # started with the file path as first argument: # # ./redis-server /path/to/redis.conf # Note on units: when</description>
    </item>
    
    <item>
      <title>semaphore_信号量</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/semaphore_%E4%BF%A1%E5%8F%B7%E9%87%8F/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/semaphore_%E4%BF%A1%E5%8F%B7%E9%87%8F/</guid>
      <description>信号量的使用方法 我的共享资源有多个， 需要限制同时访问共享资源的线程上限</description>
    </item>
    
    <item>
      <title>shell-array</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-array/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-array/</guid>
      <description>1. 字符串 字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以</description>
    </item>
    
    <item>
      <title>shell-char</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-char/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-char/</guid>
      <description>1. shell运算符 Bash 支持很多运算符，包括算数运算符、关系运算符、布尔运算符、字符串运算符和文件测试运算符。 awk 和 expr，expr 最常用 例如，</description>
    </item>
    
    <item>
      <title>shell-echo</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-echo/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-echo/</guid>
      <description>1. echo echo是Shell的一个内部指令，用于在屏幕上打印出指定的字符串。命令格式： 1 echo arg 您可以使用echo实现更复杂的输出格式控制。 1.1. 显示转</description>
    </item>
    
    <item>
      <title>shell-function</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-function/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-function/</guid>
      <description>1. 函数定义 函数可以让我们将一个复杂功能划分成若干模块，让程序结构更加清晰，代码重复利用率更高。Shell 也支持函数。Shell 函数必须先定义</description>
    </item>
    
    <item>
      <title>shell-if</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-if/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-if/</guid>
      <description>1. if语句 if 语句通过关系运算符判断表达式的真假来决定执行哪个分支。Shell 有三种 if &amp;hellip; else 语句： if &amp;hellip; fi 语句； if &amp;hellip; else &amp;hellip; fi 语句； if &amp;hellip; elif &amp;hellip; else &amp;hellip; fi 语句</description>
    </item>
    
    <item>
      <title>shell-introduct</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-introduction/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-introduction/</guid>
      <description>1. shell简介 shell是用户和Linux内核之间的一层代理，解释用户输入的命令，传递给内核。 shell是一种脚本语言（解释性语言）。 Sh</description>
    </item>
    
    <item>
      <title>shell-loop</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-loop/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-loop/</guid>
      <description>1. for for循环一般格式为： 1 2 3 4 5 6 7 for 变量 in 列表 do command1 command2 ... commandN done 列表是一组值（数字、字符串等）组成的序列，每个值通过空格分隔。每循环一次，就</description>
    </item>
    
    <item>
      <title>shell-stdout</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-stdout/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-stdout/</guid>
      <description>Unix 命令默认从标准输入设备(stdin)获取输入，将结果输出到标准输出设备(stdout)显示。一般情况下，标准输入设备就是键盘，标准输出设备</description>
    </item>
    
    <item>
      <title>shell-var</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-var/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E5%91%BD%E4%BB%A4%E7%BB%86%E5%88%86/shell-var/</guid>
      <description>1. shell变量 Shell支持自定义变量。 1.1. 定义变量 定义变量时，变量名不加美元符号（$），如： 1 variableName=&amp;#34;value&amp;#34; 注意，变量名和等号之间不能有空格，这可能和</description>
    </item>
    
    <item>
      <title>shell编程相关</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/</guid>
      <description>shell 函数调用 1 2 3 4 5 6 7 8 9 10 11 12 func() { name=yxc echo &amp;#34;Hello $name&amp;#34; return 123 } output=$(func) ret=$? echo &amp;#34;output = $output&amp;#34; echo &amp;#34;return = $ret&amp;#34; 输出结果： 1 2 output = Hello yxc return = 123 文件重定向原理 每个进程默认打开3个文件描</description>
    </item>
    
    <item>
      <title>shiro框架使用总结</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/shiro%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/shiro%E6%A1%86%E6%9E%B6/</guid>
      <description>shiro使用总结 口述： 自定义一个 realm 调用 login 方法，shiro 自动 去从 realm 里面获取用户信息， 然后 我这个 realm 注入 usermapper ，userMapper 或者 userService 获取 用户</description>
    </item>
    
    <item>
      <title>spring事务隔离级别</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/spring%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/spring%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</guid>
      <description>作者：牛客636793145号 链接：https://www.nowcoder.com/discuss/650653 来源：牛客网 spring事</description>
    </item>
    
    <item>
      <title>sql注入漏洞</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%9E%84%E5%BB%BA/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%9E%84%E5%BB%BA/</guid>
      <description>举个例子 1 2 3 4 select * from test where name = &amp;#39;test&amp;#39; and &amp;#39;1&amp;#39; = &amp;#39;1&amp;#39; # 程序的输入参数是 : test&amp;#39; and &amp;#39;1&amp;#39; = &amp;#39;1 # 技巧总结： test&amp;#39; and &amp;#39;1&amp;#39; = &amp;#39;1&amp;#39; --action=search SQL 注入的不同类型 时间盲注的用法 通过注入特定语句</description>
    </item>
    
    <item>
      <title>strTOint</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E5%AD%97%E7%AC%A6%E4%B8%B2/strtoint/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E5%AD%97%E7%AC%A6%E4%B8%B2/strtoint/</guid>
      <description>请你写一个函数 StrToInt，实现把字符串转换成整数这个功能。 当然，不能使用 atoi 或者其他类似的库函数。 样例 1 2 3 输入：&amp;#34;123&amp;#3</description>
    </item>
    
    <item>
      <title>SYN 泛洪攻击</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/syn-%E6%B3%9B%E6%B4%AA%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/syn-%E6%B3%9B%E6%B4%AA%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86/</guid>
      <description>几种泛洪攻击原理 syn泛洪攻击 ack泛洪攻击 http泛洪攻击 slowloris 攻击 查看 系统 tcp连接状态 1 netstat -an | grep tcp syn泛洪的原理 客户端疯狂发送 syn 和服务器</description>
    </item>
    
    <item>
      <title>synchronized锁优化</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/synchronized%E9%94%81%E4%BC%98%E5%8C%96_%E9%94%81%E5%81%8F%E5%90%91%E7%AD%89/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/synchronized%E9%94%81%E4%BC%98%E5%8C%96_%E9%94%81%E5%81%8F%E5%90%91%E7%AD%89/</guid>
      <description>学习视频参考 偏向锁撤销情景 调用 hashCode 调用waitNotify 多线程访问【升级为轻量级锁，要先撤销偏向锁】 锁消除和锁粗化 消除的 话，会对代码进行逃逸</description>
    </item>
    
    <item>
      <title>tcp理解刷题</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%89%9B%E5%AE%A2%E9%80%89%E6%8B%A9%E9%A2%98%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcp%E7%90%86%E8%A7%A3%E9%A2%98/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%89%9B%E5%AE%A2%E9%80%89%E6%8B%A9%E9%A2%98%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcp%E7%90%86%E8%A7%A3%E9%A2%98/</guid>
      <description>题目1. 主机甲向主机乙发送一个(SYN=1,seq=11220)的TCP段,期望与主机乙建立TCP连接,若主机乙接受该连接请求,则主机乙向主</description>
    </item>
    
    <item>
      <title>tmux学习</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/tmux/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/tmux/</guid>
      <description>tmux 学习 百度介绍 使用快捷键 左右分屏 ：Ctrl + b, % (分割当前窗口) 上下分屏 ：Ctrl + b, &amp;quot; (分割当前窗口) 关闭分屏 ：Ctrl + b, x (关闭所在分</description>
    </item>
    
    <item>
      <title>useradd 和 adduser</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/useradd-%E5%92%8C-adduser%E7%9A%84%E5%8C%BA%E5%88%AB%E9%87%8D%E7%82%B9%E7%90%86%E8%A7%A3/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/useradd-%E5%92%8C-adduser%E7%9A%84%E5%8C%BA%E5%88%AB%E9%87%8D%E7%82%B9%E7%90%86%E8%A7%A3/</guid>
      <description>useradd 和 adduser 的区别 在root权限下，useradd只是创建了一个用户名，如 （useradd +用户名 ），它并没有在/home目录下创建同名文件夹，也</description>
    </item>
    
    <item>
      <title>vb脚本总结使用</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/windows10%E5%AD%A6%E4%B9%A0/vbscript%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/windows10%E5%AD%A6%E4%B9%A0/vbscript%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>vim学习_可视模式【复制多行】</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/%E5%8F%AF%E8%A7%86%E6%A8%A1%E5%BC%8F%E9%AA%9A%E6%93%8D%E4%BD%9C%E5%A4%8D%E5%88%B6%E5%A4%9A%E8%A1%8C/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/%E5%8F%AF%E8%A7%86%E6%A8%A1%E5%BC%8F%E9%AA%9A%E6%93%8D%E4%BD%9C%E5%A4%8D%E5%88%B6%E5%A4%9A%E8%A1%8C/</guid>
      <description>可视模式 1、可视模式命令简介 在普通模式下输入 v（小写），进入字符选择模式，就可以移动光标，光标走过的地方就会选取。再次按下v后就会取消选取。</description>
    </item>
    
    <item>
      <title>vim快捷键</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/vim%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/vim%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>1. vi的模式 1.1. 普通模式 由Shell进入vi编辑器时，首先进入普通模式。在普通模式下，从键盘输入任何字符都被当作命令来解释。普通模式下没有任何</description>
    </item>
    
    <item>
      <title>vim配置 .vimrc</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/vim%E9%85%8D%E7%BD%AE-.vimrc/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/vim%E9%85%8D%E7%BD%AE-.vimrc/</guid>
      <description>vimrc 中文版 由 https://blog.51cto.com/zpf666/2335640 转载 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62</description>
    </item>
    
    <item>
      <title>zookeeper基础学习0</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/zookeeper/zookeeper%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/zookeeper/zookeeper%E5%9F%BA%E7%A1%80/</guid>
      <description>zookeeper 是什么 zookeeper 解决了什么问题? ZooKeeper是—个开源的分布式协同服务系统。 ZooKeeper的 设计目标是将那些复杂且容易出错的分布式协同服</description>
    </item>
    
    <item>
      <title>不修改数组找出重复元素</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%81%8D%E5%8E%86/%E4%B8%8D%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%81%8D%E5%8E%86/%E4%B8%8D%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</guid>
      <description>给定一个长度为 $n+1$ 的数组nums，数组中所有的数均在 $1∼n$的范围内，其中 $n≥1$。 请找出数组中任意一个重复的数，但不能修改输入的数组。 样</description>
    </item>
    
    <item>
      <title>不用加减乘除实现加法</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E5%8A%A0%E6%B3%95/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E5%8A%A0%E6%B3%95/</guid>
      <description>写一个函数，求两个整数之和，要求在函数体内不得使用 ＋、－、×、÷＋、－、×、÷ 四则运算符号。 样例 1 2 3 输入：num1 = 1 , num2 = 2 输出：3 代码</description>
    </item>
    
    <item>
      <title>为什么要用react</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8react/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8react/</guid>
      <description>为什么要用 react react的历史背景 react 很简单 1个新的概念 4个必须的API 单向数据流 完善的错误提示 react解决了UI 细节的问题 数据模型怎么解决？</description>
    </item>
    
    <item>
      <title>主动信息收集原理</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/kali-linux%E5%AD%A6%E4%B9%A0/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/kali-linux%E5%AD%A6%E4%B9%A0/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%8E%9F%E7%90%86/</guid>
      <description>主动信息收集学习 基于ping探测 基于nmap扫描方式 使用 scapy 定制数据包进行高级扫描 僵尸扫描 主动信息收集原理 直接与目标系统交互通信 无法避免留下访</description>
    </item>
    
    <item>
      <title>二叉搜索树转链表</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BD%AC%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid>
      <description>二叉搜索树转链表 输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。 要求不能创建任何新的结点，只能调整树中结点指针的指向。 注意： 需要</description>
    </item>
    
    <item>
      <title>二叉树的下一个节点</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9/</guid>
      <description>二叉树的下一个节点 给定一棵二叉树的其中一个节点，请找出中序遍历序列的下一个节点。 注意： 如果给定的节点是中序遍历序列的最后一个，则返回空节点;</description>
    </item>
    
    <item>
      <title>二叉树的后序遍历序列</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/</guid>
      <description>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。 如果是则返回true，否则返回false。 假设输入的数组的任意两个数字都互不</description>
    </item>
    
    <item>
      <title>二维数组查找</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%88%86or%E6%9F%A5%E6%89%BE/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%88%86or%E6%9F%A5%E6%89%BE/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</guid>
      <description>二维数组查找 在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。 请完成一个函数，输入这样的一个二维数组</description>
    </item>
    
    <item>
      <title>二进制中1的个数</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</guid>
      <description>解题思路 $n&amp;amp;(n-1) 的结果为 110&amp;amp;101 ,得到 100,$ $n&amp;amp;(n-1),可以去掉一个1$ 1 2 3 4 5 6 7 8 9 10 11 class Solution { public: int NumberOf1(int n) { int res = 0; while(n) { res++; n = n&amp;amp;(n-1); } return res; } };</description>
    </item>
    
    <item>
      <title>什么是KOA</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/react%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/koa%E6%80%BB%E7%BB%93/%E4%BB%80%E4%B9%88%E6%98%AFkoa/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/react%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/koa%E6%80%BB%E7%BB%93/%E4%BB%80%E4%B9%88%E6%98%AFkoa/</guid>
      <description>koa 的相关使用 koa 是个 基于后端 的框架 学习视频 这里使用 egg 框架 1 2 3 4 5 6 7 8 9 10 yarn add egg-init -g egg-init --type=simple ## 安装 配置 yarn # run npm run dev 连接 MYSQL 1 2 3 4 5 6 # 安装 egg-mysql 库 yarn add</description>
    </item>
    
    <item>
      <title>什么是linux的文件系统</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E4%BB%80%E4%B9%88%E6%98%AFlinux%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E4%BB%80%E4%B9%88%E6%98%AFlinux%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</guid>
      <description>linux文件系统学习 学习教程1 学习教程2 linux内核学习教程 说话大声的教程，好用,EXT文件详解 文件系统的种类 U盘： FAT32 windows NTFS linux： EXT</description>
    </item>
    
    <item>
      <title>从1到n中 1出现的次数</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%8E1%E5%88%B0n%E4%B8%AD1%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%8E1%E5%88%B0n%E4%B8%AD1%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</guid>
      <description>输入一个整数 n ，求从 1 到 n 这 n 个整数的十进制表示中 1 出现的次数。 例如输入 12 ，从 1 到 12 这些整数中包含 “1” 的数字有 1，10，1 ，10，11 和 12</description>
    </item>
    
    <item>
      <title>从尾到头打印链表</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</guid>
      <description>从尾到头打印链表 输入一个链表的头结点，按照 从尾到头 的顺序返回节点的值。 返回的结果用数组存储。 样例 1 2 输入：[2, 3, 5] 返回：[5, 3, 2] 1 2 3 4</description>
    </item>
    
    <item>
      <title>会话管理</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86/</guid>
      <description>jwt原理 jwt 是以 . 作为区分， 如果 使用 pyjwt 对密钥进行爆破，爆破出密钥，就能对 JWT 进行篡改了【伪造签名】 水平权限【权限控制】</description>
    </item>
    
    <item>
      <title>使用vim后遇到的一些问题【必知必会】</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/%E4%BD%BF%E7%94%A8vim%E5%90%8E%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/vim%E5%AD%A6%E4%B9%A0/%E4%BD%BF%E7%94%A8vim%E5%90%8E%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</guid>
      <description>使用vim的问题总结 1. 从网页复制的 yml到编辑器，编辑器缩进不对 解决的文章 解决vi/vim中粘贴会在行首多很多缩进和空格的问题 解决办法： 在拷</description>
    </item>
    
    <item>
      <title>其他快捷键记录</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/windows10%E5%AD%A6%E4%B9%A0/%E5%85%B6%E4%BB%96%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/windows10%E5%AD%A6%E4%B9%A0/%E5%85%B6%E4%BB%96%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B0%E5%BD%95/</guid>
      <description>插入模式和覆盖模式 按 insert 键 ，可以 改为插入模式和覆盖模式： 插入模式，直接插入字符 覆盖模式，后面的被前面覆盖 快速选中一行【块】 shift + home shift + end shift + 上下</description>
    </item>
    
    <item>
      <title>删除链表重复节点</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E9%87%8D%E5%A4%8D%E8%8A%82%E7%82%B9/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E9%87%8D%E5%A4%8D%E8%8A%82%E7%82%B9/</guid>
      <description>在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留。 样例1 1 2 3 输入：1-&amp;gt;2-&amp;gt;3-&amp;gt;3-&amp;</description>
    </item>
    
    <item>
      <title>剪绳子</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/%E5%89%AA%E7%BB%B3%E5%AD%90/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/%E5%89%AA%E7%BB%B3%E5%AD%90/</guid>
      <description>剪绳子 给你一根长度为 n 绳子，请把绳子剪成 m 段（m、n 都是整数，$2≤n≤58$ 并且 $m≥2$ ）。 每段的绳子的长度记为$ k[1]、k[2]、…</description>
    </item>
    
    <item>
      <title>包含min函数的栈</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%A0%88/%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%A0%88/%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/</guid>
      <description>包含min函数的栈 设计一个支持push，pop，top等操作并且可以在$O(1)$时间内检索出最小元素的堆栈。 push(x)–将元素x插入栈</description>
    </item>
    
    <item>
      <title>协程的原理</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%8E%9F%E7%90%86/</guid>
      <description>1:1 线程模型 以上我提到的内核线程（Kernel-Level Thread, KLT）是由操作系统内核支持的线程，内核通过调度器对线程进行调度，并负责完成线程的</description>
    </item>
    
    <item>
      <title>合并两个排序链表</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/</guid>
      <description>解题思路 归并排序 解题代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public: ListNode* merge(ListNode*</description>
    </item>
    
    <item>
      <title>圆圈中最后一个数【小米笔试题】</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E6%95%B0%E5%B0%8F%E7%B1%B3%E7%AC%94%E8%AF%95%E9%A2%98/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E6%95%B0%E5%B0%8F%E7%B1%B3%E7%AC%94%E8%AF%95%E9%A2%98/</guid>
      <description>$0,1,&amp;hellip;,n-1$ 这 n 个数字 $(n&amp;gt;0) $ 排成一个圆圈，从数字 0 开始每次从这个圆圈里删除第 $ m $ 个数字。 求出这个圆圈里剩下的最后一个数字。 样例 1 2 3 输入：n=5 , m=3 输</description>
    </item>
    
    <item>
      <title>垃圾回收机制</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</guid>
      <description>垃圾回收机制 讲一下堆常见的分配策略 对象优先在Eden区分配 第一次垃圾回收后，如果s区放不下，那么只能通过==分配担保机制==把新生代的对象提</description>
    </item>
    
    <item>
      <title>基于ping 命令探测学习</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/kali-linux%E5%AD%A6%E4%B9%A0/ping%E5%91%BD%E4%BB%A4%E6%8E%A2%E6%B5%8B/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/kali-linux%E5%AD%A6%E4%B9%A0/ping%E5%91%BD%E4%BB%A4%E6%8E%A2%E6%B5%8B/</guid>
      <description>免责声明： 这个是我学习网络的笔记，不要拿笔记上的方法来做坏事,后果自负 hping3使用方法 hping3 hping 是 面向命令行的用于生成和解析TCP/IP协议数</description>
    </item>
    
    <item>
      <title>基础命令</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</guid>
      <description>基础命令 chmod ， change mod 修改模式，比如 chmod a+x app.sh cd , change directory , 切换目录 ls -l, 用列表的方式展示【 -l 表示 一行一个，列表的方式】 chown ,change owner ,改变所属用户 chgrp,change group ,改变所属组</description>
    </item>
    
    <item>
      <title>复制链表</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E5%A4%8D%E5%88%B6%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E5%A4%8D%E5%88%B6%E9%93%BE%E8%A1%A8/</guid>
      <description>请实现一个函数可以复制一个复杂链表。 在复杂链表中，每个结点除了有一个指针指向下一个结点外，还有一个额外的指针指向链表中的任意结点或者null</description>
    </item>
    
    <item>
      <title>头插法，翻转链表</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E5%A4%B4%E6%8F%92%E6%B3%95_%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E5%A4%B4%E6%8F%92%E6%B3%95_%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid>
      <description>定义一个函数，输入一个链表的头结点，反转该链表并输出反转后链表的头结点。 思考题： 请同时实现迭代版本和递归版本。 样例 1 2 3 输入:1-&amp;gt;2</description>
    </item>
    
    <item>
      <title>子序列的数目</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E6%95%B0%E7%9B%AE/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E6%95%B0%E7%9B%AE/</guid>
      <description>剑指 Offer II 097. 子序列的数目 Difficulty: 困难 给定一个字符串 s和一个字符串 t ，计算在 s 的子序列中 t 出现的个数。 字符串的一个 子序列 是指，通过删除一些（也可以不删</description>
    </item>
    
    <item>
      <title>安装unbuntu子系统学习</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/windows10%E5%AD%A6%E4%B9%A0/%E5%AE%89%E8%A3%85unbuntu%E5%AD%90%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/windows10%E5%AD%A6%E4%B9%A0/%E5%AE%89%E8%A3%85unbuntu%E5%AD%90%E7%B3%BB%E7%BB%9F/</guid>
      <description>安装unbuntu子系统笔记 开启虚拟化，开启 windows子系统配置 安装软件【略】 修改root密码 1 2 sudo passwd root # 设置新密码 设置国内 apt镜像源</description>
    </item>
    
    <item>
      <title>定位死锁的工具</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E9%9D%A2%E8%AF%95%E5%BF%85%E9%97%AE_%E5%AE%9A%E4%BD%8D%E6%A3%80%E6%B5%8B%E6%AD%BB%E9%94%81/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E9%9D%A2%E8%AF%95%E5%BF%85%E9%97%AE_%E5%AE%9A%E4%BD%8D%E6%A3%80%E6%B5%8B%E6%AD%BB%E9%94%81/</guid>
      <description>定位死锁的工具 如何定位死锁呢？ 可以用 jps 和 jstack 打印内存的信息 学习视频 怎么防止死锁【java编程】 作者：peonyX 链接：https://www.</description>
    </item>
    
    <item>
      <title>实战脚本语言【词法分析】</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/</guid>
      <description>词法分析原理 学习课程- 华南理工大学- 刘欣欣 参考教程 参考学习的课程 js 版本的课程 计算机编译的过程 词法分析 语法分析 中间代码生成 优化 目标代码产生 词法</description>
    </item>
    
    <item>
      <title>对称二叉树</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>请实现一个函数，用来判断一棵二叉树是不是对称的。 如果一棵二叉树和它的镜像一样，那么它是对称的。 样例 1 2 3 4 5 6 7 8 9 10 11 12 13 如下图所示二叉树</description>
    </item>
    
    <item>
      <title>封装websocket api 【golang后端】</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%9C%AC/%E5%B0%81%E8%A3%85websocketapi/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%9C%AC/%E5%B0%81%E8%A3%85websocketapi/</guid>
      <description>封装websocket api 参考的相关文章 参考github的 example golang 后台 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38</description>
    </item>
    
    <item>
      <title>常见协议刷题</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%89%9B%E5%AE%A2%E9%80%89%E6%8B%A9%E9%A2%98%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%B8%B8%E8%A7%81%E5%8D%8F%E8%AE%AE%E5%88%B7%E9%A2%98/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%89%9B%E5%AE%A2%E9%80%89%E6%8B%A9%E9%A2%98%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%B8%B8%E8%A7%81%E5%8D%8F%E8%AE%AE%E5%88%B7%E9%A2%98/</guid>
      <description>常见协议刷题 ICMP 协议 ICMP有两种报文：差错报文、询问报文 ICMP差错报文用于目标主机或到目标主机路径上的路由器向源主机报告差错和异常情况。 五</description>
    </item>
    
    <item>
      <title>并发垃圾回收</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid>
      <description>cms 收集器 CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器，基于并发“标记清理”实现,在标记清理过程</description>
    </item>
    
    <item>
      <title>并发相关理论</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%90%86%E8%AE%BA/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%9A%84%E7%9B%B8%E5%85%B3%E7%90%86%E8%AE%BA/</guid>
      <description>相关概念 死锁 活锁 那是不是所有的代码都需要认真分析一遍是否存在这三个问题呢？当然不是，其实只有一种情况需要：存在共享数据并且该数据会发生变化，</description>
    </item>
    
    <item>
      <title>并发，锁</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/%E5%B9%B6%E5%8F%91_%E9%94%81/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/%E5%B9%B6%E5%8F%91_%E9%94%81/</guid>
      <description>乐观锁 需要对表的设计增加额外的字段，增加了数据库的冗余，另外，当应用并发量高的时候，version值在频繁变化，则会导致大量请求失败，影响系</description>
    </item>
    
    <item>
      <title>序列化二叉树</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>序列化二叉树 请实现两个函数，分别用来序列化和反序列化二叉树。 您需要确保二叉树可以序列化为字符串，并且可以将此字符串反序列化为原始树结构。 样例</description>
    </item>
    
    <item>
      <title>微服务架构</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/</guid>
      <description>SOA 架构 SOA是什么？SOA全英文是Service-Oriented Architecture，中文意思是中文面向服务编程，是一种思想，一种方法</description>
    </item>
    
    <item>
      <title>找出数组中重复的数字</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%81%8D%E5%8E%86/%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%81%8D%E5%8E%86/%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>找出数组中重复的数字 给定一个长度为 nn 的整数数组 nums，数组中所有的数字都在 $0∼n−1$ 的范围内。 数组中某些数字是重复的，但不知道有几个数</description>
    </item>
    
    <item>
      <title>把数组排成最小的数</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E8%B4%AA%E5%BF%83/%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E8%B4%AA%E5%BF%83/%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/</guid>
      <description>输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。 例如输入数组 [3,32,321][3,32,32</description>
    </item>
    
    <item>
      <title>抽象类和接口区别</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3%E5%8C%BA%E5%88%AB/</guid>
      <description>作者：牛客636793145号 链接：https://www.nowcoder.com/discuss/650653 来源：牛客网 接口和抽象类的</description>
    </item>
    
    <item>
      <title>操作系统八股文</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%85%AB%E8%82%A1%E6%96%87/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%85%AB%E8%82%A1%E6%96%87/</guid>
      <description>进程的几种状态 就绪： 当进程已分配到除CPU以外的所有必要的资源，只要获得处理机便可立即执行，这时的进程状态称为就绪状态。 执行： 当进程已获得处</description>
    </item>
    
    <item>
      <title>操作系统常见的题</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%89%9B%E5%AE%A2%E9%80%89%E6%8B%A9%E9%A2%98%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9C%BA%E6%99%AF%E9%A2%98/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%89%9B%E5%AE%A2%E9%80%89%E6%8B%A9%E9%A2%98%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9C%BA%E6%99%AF%E9%A2%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title>数值的整数次方</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/</guid>
      <description>实现函数double Power(double base, int exponent)，求base的 exponent次方。 不得使用库函数，同时不需要考虑大数问题。 只要输出结果与答案的</description>
    </item>
    
    <item>
      <title>数字的排列</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%90%9C%E7%B4%A2/%E6%95%B0%E5%AD%97%E7%9A%84%E6%8E%92%E5%88%97%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%90%9C%E7%B4%A2/%E6%95%B0%E5%AD%97%E7%9A%84%E6%8E%92%E5%88%97%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</guid>
      <description>数字的排列问题 输入一组数字（可能包含重复数字），输出其所有的排列方式。 样例 1 2 3 4 5 6 7 8 9 10 11 输入：[1,2,3] 输出： [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ] 去</description>
    </item>
    
    <item>
      <title>数字翻译为字符串</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>给定一个数字，我们按照如下规则把它翻译为字符串： 0 翻译成 a，1 翻译成 b，……， 11 翻译成 l，……，25 翻译成 z。 一个数字可能有多个翻译。 例如 12258</description>
    </item>
    
    <item>
      <title>数据包常量刷题</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%89%9B%E5%AE%A2%E9%80%89%E6%8B%A9%E9%A2%98%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E5%8C%85%E5%B8%B8%E9%87%8F%E5%88%B7%E9%A2%98/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%89%9B%E5%AE%A2%E9%80%89%E6%8B%A9%E9%A2%98%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E5%8C%85%E5%B8%B8%E9%87%8F%E5%88%B7%E9%A2%98/</guid>
      <description>数据包记录 ，必刷 IP 数据包最大长度为 65535B(64K字节) 牛客题目链接</description>
    </item>
    
    <item>
      <title>数据流的中位数</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E5%AE%B9%E5%99%A8/%E6%95%B0%E6%8D%AE%E6%B5%81%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E5%AE%B9%E5%99%A8/%E6%95%B0%E6%8D%AE%E6%B5%81%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</guid>
      <description>数据流的中位数 如何得到一个数据流中的中位数？ 如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。 如果从数据流中读出偶</description>
    </item>
    
    <item>
      <title>数组中出现次数超过一半的数字</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%88%86or%E6%9F%A5%E6%89%BE/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%88%86or%E6%9F%A5%E6%89%BE/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。 假设数组非空，并且一定存在满足条件的数字。 思考题： 假设要求只能使用 $ O(n) $的时间</description>
    </item>
    
    <item>
      <title>文件原理</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE/</guid>
      <description>文件查找 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 find ./ -name &amp;#34;dir0&amp;#34; find ./ -name “*.txt” | xargs rm (删除当前目录下所有以txt结尾的文件) find /home -size +512k 查大于512k的</description>
    </item>
    
    <item>
      <title>旋转数组的最小数字</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%88%86or%E6%9F%A5%E6%89%BE/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%88%86or%E6%9F%A5%E6%89%BE/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</guid>
      <description>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个升序的数组的一个旋转，输出旋转数组的最小元素。 例如数组 { $3,4,5,1,2$} 为{ $1,2,3,4,5$ }</description>
    </item>
    
    <item>
      <title>最小的k个数</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E5%AE%B9%E5%99%A8/%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E5%AE%B9%E5%99%A8/%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/</guid>
      <description>最小的 k个数 输入 n 个整数，找出其中最小的 k 个数。 注意： 输出数组内元素请按从小到大顺序排序; 数据范围 $1≤k≤n≤1000$ 样例 1 2 3 输入：[</description>
    </item>
    
    <item>
      <title>最近公共祖先</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</guid>
      <description>给出一个二叉树，输入两个树节点，求它们的最低公共祖先。 一个树节点的祖先节点包括它本身。 注意： 输入的二叉树不为空； 输入的两个节点一定不为空，且</description>
    </item>
    
    <item>
      <title>最重要的JVM参数指南</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84jvm%E5%8F%82%E6%95%B0%E6%8C%87%E5%8D%97/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84jvm%E5%8F%82%E6%95%B0%E6%8C%87%E5%8D%97/</guid>
      <description>1.概述 在本篇文章中，你将掌握最常用的 JVM 参数配置。如果对于下面提到了一些概念比如堆、 2.堆内存相关 Java 虚拟机所管理的内存中最大的一块，Java</description>
    </item>
    
    <item>
      <title>机器人的运动范围</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%90%9C%E7%B4%A2/%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%90%9C%E7%B4%A2/%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/</guid>
      <description>地上有一个 $m $行和 $n$ 列的方格，横纵坐标范围分别是$ 0∼m−1$ 和 $0∼n−1$ 。 一个机器人从坐标 $(0,0)$的格子开始移动，每一次只能向左</description>
    </item>
    
    <item>
      <title>构建乘积数组</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%95%B0%E7%BB%84or%E5%89%8D%E7%BC%80%E5%92%8C/%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%95%B0%E7%BB%84or%E5%89%8D%E7%BC%80%E5%92%8C/%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84/</guid>
      <description>给定一个数组A[0, 1, …, n-1]，请构建一个数组B[0, 1, …, n-1]，其中B中的元素B[i]=A[0]×A[1]×… ×A[i-1]×A[</description>
    </item>
    
    <item>
      <title>查看文件 more 和 less</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6_more-%E5%92%8C-less/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6_more-%E5%92%8C-less/</guid>
      <description>查看文件more 和 less 命令1： more 作用： 以分页形式显示文件内容 语法: more + 文件名 按回车刷新一行，按空格刷新一屏， 输入 q退出 命令2： less more 不支持后退，</description>
    </item>
    
    <item>
      <title>栈的压入弹出序列</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%A0%88/%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%A0%88/%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/</guid>
      <description>栈的压入弹出序列 输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。 假设压入栈的所有数字均不相等。 例如序</description>
    </item>
    
    <item>
      <title>树的子结构</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/</guid>
      <description>输入两棵二叉树 $A，B$，判断 $ B $ 是不是$ A $ 的子结构。 我们规定空树不是任何树的子结构。 样例 树 AA： 1 2 3 4 5 6 7 8 / \ 8 7 / \ 9 2 / \ 4</description>
    </item>
    
    <item>
      <title>正则表达式匹配</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</guid>
      <description>请实现一个函数用来匹配包括&#39;.&#39;和&#39;*&#39;的正则表达式。 模式中的字符&#39;.&#39;表示任意一个字符，而&#39;*&#39;表示它前面的字符可以出现任意次（含0次）。</description>
    </item>
    
    <item>
      <title>流程图，时序图</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/markdown%E8%AF%AD%E6%B3%95/%E6%B5%81%E7%A8%8B%E5%9B%BE-%E6%97%B6%E5%BA%8F%E5%9B%BE%E5%86%99%E6%B3%95/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/markdown%E8%AF%AD%E6%B3%95/%E6%B5%81%E7%A8%8B%E5%9B%BE-%E6%97%B6%E5%BA%8F%E5%9B%BE%E5%86%99%E6%B3%95/</guid>
      <description>学习教程 参考博客 官方帮助文档：https://mermaid-js.github.io/mermaid/#/flowchart 总结 语言要设置</description>
    </item>
    
    <item>
      <title>消息队列_业务_不丢消息【可靠性传递】</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97_%E4%B8%9A%E5%8A%A1_%E4%B8%8D%E4%B8%A2%E6%B6%88%E6%81%AF%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97_%E4%B8%9A%E5%8A%A1_%E4%B8%8D%E4%B8%A2%E6%B6%88%E6%81%AF%E8%A7%A3%E5%86%B3/</guid>
      <description>消息传递性保证 **我们可以利用消息队列的有序性来验证是否有消息丢失。**原理非常简单，在 Producer 端，我们给每个发出的消息附加一个连续递增的序号，然</description>
    </item>
    
    <item>
      <title>消息队列_业务_分布式事务</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97_%E4%B8%9A%E5%8A%A1_%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97_%E4%B8%9A%E5%8A%A1_%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</guid>
      <description>基础回顾 事务的特性 事务的特性: acid, 原子性，一致性，隔离性，持久性 rabbitMQ分布式事务 两阶段提交原理 1、rocketmq实现分布式事务，使</description>
    </item>
    
    <item>
      <title>消息队列基础应用</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%9F%BA%E7%A1%80/</guid>
      <description>消息队列的作用 任务异步运行 服务解耦 流量控制 息队列的本质是将同步处理转成异步处理，异步会带来相应的好处，但也有弊端。 .可在模块、服务、接口等不</description>
    </item>
    
    <item>
      <title>添加用户权限</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/</guid>
      <description>usermod 命令 1 2 3 4 5 useradd lilei sudo usermod -aG sudo lilei # 给 lilei 添加到 sudo 用户组 su -l lilei 给user 用户分配权限</description>
    </item>
    
    <item>
      <title>渲染latex失败解决方法</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/hugo-%E6%B8%B2%E6%9F%93latex%E5%A4%B1%E8%B4%A5/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/hugo-%E6%B8%B2%E6%9F%93latex%E5%A4%B1%E8%B4%A5/</guid>
      <description>hugo 渲染latex失败 去掉多余的空格，最好一行显示 ， 要换行 需要打上 4个 \ ，不然服务器渲染会有问题</description>
    </item>
    
    <item>
      <title>滑动窗口内的最大值</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</guid>
      <description>给定一个数组和滑动窗口的大小，请找出所有滑动窗口里的最大值。 例如，如果输入数组 [2,3,4,2,6,2,5,1][2,3,4,2,6,2,5,1] 及滑动窗口的大小 3 ，那么一共存在 6 个滑动窗口，它们的最大值分</description>
    </item>
    
    <item>
      <title>物理设备理解刷题</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%89%9B%E5%AE%A2%E9%80%89%E6%8B%A9%E9%A2%98%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%89%A9%E7%90%86%E8%AE%BE%E5%A4%87%E7%90%86%E8%A7%A3%E9%A2%98/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%89%9B%E5%AE%A2%E9%80%89%E6%8B%A9%E9%A2%98%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%89%A9%E7%90%86%E8%AE%BE%E5%A4%87%E7%90%86%E8%A7%A3%E9%A2%98/</guid>
      <description>网络物理设备题 在下列网间连接器中，（ ）在数据连路层实现网络互连。 https://www.nowcoder.com/test/question/done?tid=47443644&amp;amp;qid=94559#summary 中继器：中继器是工作在物理层上的连接设备。常用于两个网络节点之间物理信号的</description>
    </item>
    
    <item>
      <title>登录页面制作</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/react%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/react%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C%E6%80%BB%E7%BB%93/</guid>
      <description>登录页面制作总结 遇到的困难 内元素 设置 margin-top 影响外元素 解决的方法 1 2 3 4 #root { overflow:hidden } 设置 overflow 就不会被子元素影响了 ant-design icon兼容性为 1 // import { Icon } from &amp;#39;@ant-design/compatible&amp;#39;; 不错的</description>
    </item>
    
    <item>
      <title>相关概念</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</guid>
      <description>没有小程序号的问题 不能上传和发布小程序 不能真机运行，只可以在PC 的模拟中运行 小程序页面简介 小程序的文件 wxml wxss js app.json 是小程序的 配置文件，可以配置小</description>
    </item>
    
    <item>
      <title>矩阵中的路径</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%90%9C%E7%B4%A2/%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%90%9C%E7%B4%A2/%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/</guid>
      <description>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。 路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右</description>
    </item>
    
    <item>
      <title>简单sql注入学习</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/sql%E6%B3%A8%E5%85%A5%E4%B8%93%E9%A2%98/%E7%AE%80%E5%8D%95sql%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/sql%E6%B3%A8%E5%85%A5%E4%B8%93%E9%A2%98/%E7%AE%80%E5%8D%95sql%E6%B3%A8%E5%85%A5/</guid>
      <description>sql 注入学习 sql注入猜解 1 2 3 4 5 6 7 8 9 10 11 12 -- 猜字段数 union select 1,2 -- -- 猜数据库 select schema_name from database.schemata -- 猜数据表列 select * from table_name select table_name from database.tables where table_schema = &amp;#34;aaa&amp;#34; -- 获取某列内容 select * from</description>
    </item>
    
    <item>
      <title>管理员页面制作</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/react%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E7%AE%A1%E7%90%86%E5%91%98%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C/%E7%AE%A1%E7%90%86%E5%91%98%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/react%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E7%AE%A1%E7%90%86%E5%91%98%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C/%E7%AE%A1%E7%90%86%E5%91%98%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C%E6%96%B9%E6%B3%95/</guid>
      <description>管理员页面制作方法 文档链接 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57</description>
    </item>
    
    <item>
      <title>类加载器</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</guid>
      <description>类加载器 jvm内置的类加载器说一下，各负责加载什么 BootstrapClassLoader(启动类加载器)：负责加载%JAVA_HOME%/</description>
    </item>
    
    <item>
      <title>类加载过程</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</guid>
      <description>类加载过程 类的生命周期说一下 加载、连接（验证，准备，解析）、初始化、使用、卸载 类的加载过程具体说一下 类的加载包括了加载、连接（验证，准备，解</description>
    </item>
    
    <item>
      <title>线程安全的本质</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%90%86%E8%A7%A3%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%9C%AC%E8%B4%A8/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%90%86%E8%A7%A3%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%9C%AC%E8%B4%A8/</guid>
      <description>线程和进程的区别 作者：peonyX 链接：https://www.nowcoder.com/discuss/723383?source_id=</description>
    </item>
    
    <item>
      <title>翻转数位</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E7%BF%BB%E8%BD%AC%E6%95%B0%E4%BD%8D%E7%BD%91%E6%98%93%E7%AC%94%E8%AF%95%E9%A2%98/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E7%BF%BB%E8%BD%AC%E6%95%B0%E4%BD%8D%E7%BD%91%E6%98%93%E7%AC%94%E8%AF%95%E9%A2%98/</guid>
      <description>面试题 05.03. 翻转数位 Difficulty: 简单 给定一个32位整数 num，你可以将一个数位从0变为1。请编写一个程序，找出你能够获得的最长的一串1的长度。 示例 1： 1 2</description>
    </item>
    
    <item>
      <title>股票的最大利润</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6%E4%B8%89%E4%B8%83%E7%AC%94%E8%AF%95/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6%E4%B8%89%E4%B8%83%E7%AC%94%E8%AF%95/</guid>
      <description>股票的最大利润 假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖 一次 该股票可能获得的利润是多少？ 例如一只股票在某些时间节点的价格为 [9</description>
    </item>
    
    <item>
      <title>自定义线程池的方法</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>如何自定义线程池 corePoolSize 核心线程数 maximumPoolSize 最大线程数 keepAliveTime 线程存活时间【超出核心线程数的那部分】 unit 时间单位 workQueue 任务队列 threadFactory, 线程工厂，自定义线程的名字【用户自定义</description>
    </item>
    
    <item>
      <title>计算机网络_TCP专题</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_tcp%E4%B8%93%E9%A2%98/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_tcp%E4%B8%93%E9%A2%98/</guid>
      <description>TCP 有哪些定时器 如果TCP连接的双方都没有向对方发送数据，则在两个TCP模块之间不交换任何信息。 如果一个给定的连接在两个小时之内没有任何动作，</description>
    </item>
    
    <item>
      <title>计算机网络八股文</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/</guid>
      <description>TCP 相关 TCP 流量控制 学习教程 建立连接 会有 syn + ack 机制， 表示 建立连接和 接收成功 发送数据会有 seq+ ACK 机制， 表示发送数据包的序列化 还有对应的应答 公式： $ TC</description>
    </item>
    
    <item>
      <title>计算题刷题</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%89%9B%E5%AE%A2%E9%80%89%E6%8B%A9%E9%A2%98%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E9%A2%98%E5%88%B7%E9%A2%98/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%89%9B%E5%AE%A2%E9%80%89%E6%8B%A9%E9%A2%98%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E9%A2%98%E5%88%B7%E9%A2%98/</guid>
      <description>必记概念 主机号全1 为广播地址 【UDP 广播原理 】 主机号全0 为网段地址 【代表整个网络 】 192.168.0.1 - 192.168.0.254 IP地址 Ip计算 题目1. 一个C类网络被划分子网，新的</description>
    </item>
    
    <item>
      <title>运行时数据区</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/</guid>
      <description>运行时数据区 运行时数据区内有哪些东西 1.8以前： 线程共享的有堆和方法区（永久代是其实现方式） 线程独立的有本地方法栈、虚拟方法栈和程序计数器 1</description>
    </item>
    
    <item>
      <title>进程操作</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E8%BF%9B%E7%A8%8B%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/linux/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E8%BF%9B%E7%A8%8B%E6%93%8D%E4%BD%9C/</guid>
      <description>进程间通信的几种方式 管道pipe：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父</description>
    </item>
    
    <item>
      <title>连续子数组的最大和</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E8%B4%AA%E5%BF%83/%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%92%8C/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E8%B4%AA%E5%BF%83/%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%92%8C/</guid>
      <description>输入一个 非空 整型数组，数组里的数可能为正，也可能为负。 数组中一个或连续的多个整数组成一个子数组。 求所有子数组的和的最大值。 要求时间复杂度为 $O(N)$</description>
    </item>
    
    <item>
      <title>选择题面试常考</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%89%9B%E5%AE%A2%E9%80%89%E6%8B%A9%E9%A2%98%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95/%E9%80%89%E6%8B%A9%E9%A2%98%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%80%83/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%89%9B%E5%AE%A2%E9%80%89%E6%8B%A9%E9%A2%98%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95/%E9%80%89%E6%8B%A9%E9%A2%98%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%80%83/</guid>
      <description>常见的排序算法 稳定的排序算法 冒泡排序 $O(N^2)$ 插入排序 $O(N^2)$ 桶排序(bucket sort) , $O(N^2)$ , 需要额外 $O(K)$ 的空间 合并排序 (MergeSort ) $O(NlogN)$ ,额外 $O(N)$ 的空间 基数排序 $O(N*K) $ , 需要 $O(N)$</description>
    </item>
    
    <item>
      <title>重建二叉树</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>重建二叉树 输入一棵二叉树前序遍历和中序遍历的结果，请重建该二叉树。 注意: 二叉树中每个节点的值都互不相同； 输入的前序遍历和中序遍历一定合法； 样</description>
    </item>
    
    <item>
      <title>重绘与重排</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/%E9%87%8D%E7%BB%98%E4%B8%8E%E9%87%8D%E6%8E%92/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/%E9%87%8D%E7%BB%98%E4%B8%8E%E9%87%8D%E6%8E%92/</guid>
      <description>前端优化技巧 tinypng 优化 https://tinypng.com/ 对图片进行压缩 图片的优化，也是从两个方面来考虑：太多 和 太大。 可以通过懒加载减少图片的请求，或者通过雪碧图来合并图片，以及</description>
    </item>
    
    <item>
      <title>链表倒数第K个节点</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</guid>
      <description>链表倒数第K个节点 输入一个链表，输出该链表中倒数第 kk 个结点。 注意： k &amp;gt;= 1; 如果 kk 大于链表长度，则返回 NULL; 样例 1 2 3 输入：链表：1-&amp;gt;2-&amp;</description>
    </item>
    
    <item>
      <title>链表环的入口节点</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E8%8A%82%E7%82%B9/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E8%8A%82%E7%82%B9/</guid>
      <description>链表环的入口节点 快慢指针， 快指针 走了 $a+b+c+d$, 然后慢指针 走了 $a+b$, 两个指针 在 紫色点相遇。快指针一次走2步，可以列出方程 $$ a+b+c+b = 2*(a+b)\ 得到:\ a = c $$ 然后 一直指</description>
    </item>
    
    <item>
      <title>链表问题</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%89%9B%E5%AE%A2%E9%80%89%E6%8B%A9%E9%A2%98%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8%E9%97%AE%E9%A2%98%E8%80%83%E8%BF%872%E6%AC%A1/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E7%89%9B%E5%AE%A2%E9%80%89%E6%8B%A9%E9%A2%98%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8%E9%97%AE%E9%A2%98%E8%80%83%E8%BF%872%E6%AC%A1/</guid>
      <description>考过2次的题目 一个长度为100的循环链表，指针A和指针B都指向了链表中的同一个节点，A以步长为1向前移动，B以步长为3向前移动，一共至少需要</description>
    </item>
    
    <item>
      <title>面试自我介绍</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/%E9%9D%A2%E8%AF%95_%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/%E9%9D%A2%E8%AF%95_%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/</guid>
      <description></description>
    </item>
    
    <item>
      <title>骰子的点数</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E9%AA%B0%E5%AD%90%E7%82%B9%E6%95%B0dp/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%89%91%E6%8C%87offer/dp%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E9%AA%B0%E5%AD%90%E7%82%B9%E6%95%B0dp/</guid>
      <description>将一个骰子投掷 n 次，获得的总点数为 s ，s 的可能范围为 $ n∼6n $ 。 掷出某一点数，可能有多种掷法，例如投掷 2 次，掷出 3 点，共有 [1,2], [2,1] 两种掷法。 请</description>
    </item>
    
    <item>
      <title>cdn原理</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/cdn%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:09 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/cdn%E5%8E%9F%E7%90%86/</guid>
      <description>cdn 加速 所谓的 CDN 加速技术，就是将客户端上传的图片、音视频发布到多个分布在各地的 CDN 节点的服务器上，当有用户需要访问这些图片和音视频时，能够通过 DNS</description>
    </item>
    
    <item>
      <title>保证消息的可靠性</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E6%B6%88%E6%81%AF%E4%B8%A2%E5%A4%B1%E6%96%B9%E6%A1%88%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:09 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E6%B6%88%E6%81%AF%E4%B8%A2%E5%A4%B1%E6%96%B9%E6%A1%88%E8%A7%A3%E5%86%B3/</guid>
      <description>如何保证消息可靠传递 什么是 ACK 有了 TCP 协议本身的 ACK 机制为什么还需要业务层的 ACK 机制？ tcp的ack只能保证连接层的“不丢数据”和“不乱序”，但数据</description>
    </item>
    
    <item>
      <title>即时消息</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E5%8D%B3%E6%97%B6%E6%B6%88%E6%81%AF/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:09 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E5%8D%B3%E6%97%B6%E6%B6%88%E6%81%AF/</guid>
      <description>自动智能扩缩容：直播互动场景中峰值流量的应对 随着近几年各种直播 App 和百万答题 App 的火爆和风靡，具有高实时性要求的直播互动场景开始纷纷借助即时消息</description>
    </item>
    
    <item>
      <title>多终端漫游技术解决方案</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E5%A4%9A%E7%BB%88%E7%AB%AF%E6%BC%AB%E6%B8%B8/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:09 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E5%A4%9A%E7%BB%88%E7%AB%AF%E6%BC%AB%E6%B8%B8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>流量控制</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:09 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</guid>
      <description>针对超高流量带来的请求压力，业界比较常用的一种方式就是“流控”。 “流控”这个词你应该不陌生，当我们坐飞机航班延误或者被取消时，航空公司给出的</description>
    </item>
    
    <item>
      <title>消息表设计</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81%E6%96%B9%E6%A1%88/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:09 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81%E6%96%B9%E6%A1%88/</guid>
      <description>消息收发架构 一个传统的视频网站如果想让自己的视频支持弹幕功能，也可以通过引入即时消息的技术，来让视频弹幕的参与者能实时、高效地和其他观看者进</description>
    </item>
    
    <item>
      <title>性能调优</title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%B9%B6%E5%8F%91/%E5%87%BA%E7%8E%B0%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%80%8E%E4%B9%88%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 17 Aug 2021 13:46:53 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%B9%B6%E5%8F%91/%E5%87%BA%E7%8E%B0%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%80%8E%E4%B9%88%E5%88%86%E6%9E%90/</guid>
      <description>性能调优 那么找到了系统的瓶颈点，我们要如何优化呢？优化方案会随着问题的不同而不同。比方说，如果是数据库访问慢，那么就要看是不是有锁表的情况、</description>
    </item>
    
    <item>
      <title>readme</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02_2.408%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%A4%8D%E4%B9%A0/readme/</link>
      <pubDate>Tue, 17 Aug 2021 00:29:16 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02_2.408%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%A4%8D%E4%B9%A0/readme/</guid>
      <description>考研408复习笔记 目的专业：计算机科学与技术 预计考研专业课科目：408 （第一次发现原来gayhub也可以用来存放学习笔记哇） 主要包括408以</description>
    </item>
    
    <item>
      <title>计算机网络复习_</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02_2.408%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%A4%8D%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/</link>
      <pubDate>Tue, 17 Aug 2021 00:29:16 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02_2.408%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%A4%8D%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/</guid>
      <description>《计算机网络》复习笔记 这个笔记同时使用了两本教材：《计算机网络：自顶向下方法（原书第六版）》和《计算机网络（谢希仁 第七版）》， 目录结构按照自</description>
    </item>
    
    <item>
      <title>ac自动机</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/ac%E8%87%AA%E5%8A%A8%E6%9C%BA/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/ac%E8%87%AA%E5%8A%A8%E6%9C%BA/</guid>
      <description>ac自动机算法 ac自动机图示 KMP 算法原理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include &amp;lt;bits/stdc++.h&amp;gt;#define next abcdefg using namespace std; const int MAXN = 1E6+10; int next[MAXN]; int</description>
    </item>
    
    <item>
      <title>chrome快捷键记录</title>
      <link>http://doc.lyr-2000.xyz/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/keymap/chrome-keymap/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/keymap/chrome-keymap/</guid>
      <description>chrome快捷键 1. 标签页和窗口快捷键 操作 快捷键 打开新窗口 ⌘ + n 在无痕模式下打开新窗口 ⌘ + Shift + n 打开新的标签页，并跳转到该标签页 ⌘ + t 重新打</description>
    </item>
    
    <item>
      <title>eclipse快捷键记录</title>
      <link>http://doc.lyr-2000.xyz/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/keymap/eclipse-keymap/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/keymap/eclipse-keymap/</guid>
      <description>eclipse快捷键 1. 快捷键 1.1. 编辑 作用域 功能 快捷键 全局 查找并替换 Ctrl+F 文本编辑器 查找上一个 Ctrl+Shift+K 文本编辑器 查找下一个 Ctrl+K 文本编辑器 删除当前行 Ctrl+D 文本编辑</description>
    </item>
    
    <item>
      <title>index</title>
      <link>http://doc.lyr-2000.xyz/index.html</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/index.html</guid>
      <description>欢迎来到我的文档站 本站所有内容来自 网友总结，该站只用于个人学习复习用。 🎁致谢 ❤️感谢小游提供的各种笔记 ❤️感谢vuepress-theme-</description>
    </item>
    
    <item>
      <title>iterm2-rzsz</title>
      <link>http://doc.lyr-2000.xyz/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/keymap/iterm2-rzsz/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/keymap/iterm2-rzsz/</guid>
      <description>本文由网络文章整理备份。 iterm2 rz与sz的功能 本文主要介绍mac环境下使用iterm2的rz sz功能的安装流程。 1. 安装lrzsz 1 brew install lrzsz 2. 安装执</description>
    </item>
    
    <item>
      <title>lc.1035.不想交的线【最长公共上升子序列】</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E9%97%AE%E9%A2%98%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/lc.1035.%E4%B8%8D%E6%83%B3%E4%BA%A4%E7%9A%84%E7%BA%BF%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97%E5%8F%98%E9%A2%98/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E9%97%AE%E9%A2%98%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/lc.1035.%E4%B8%8D%E6%83%B3%E4%BA%A4%E7%9A%84%E7%BA%BF%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97%E5%8F%98%E9%A2%98/</guid>
      <description>1035. 不相交的线 Difficulty: ** 示例 2： 输入：nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2] 输出：3 示例 3： 输入：nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1] 输出：2 ** 在两条独立的水平线上按给定的顺序写下 nums1</description>
    </item>
    
    <item>
      <title>lc.1360.日期之间隔几天</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%97%B6%E9%97%B4/lc.1360.%E6%97%A5%E6%9C%9F%E4%B9%8B%E9%97%B4%E9%9A%94%E5%87%A0%E5%A4%A9/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%97%B6%E9%97%B4/lc.1360.%E6%97%A5%E6%9C%9F%E4%B9%8B%E9%97%B4%E9%9A%94%E5%87%A0%E5%A4%A9/</guid>
      <description>1360. 日期之间隔几天 Difficulty: 简单 请你编写一个程序来计算两个日期之间隔了多少天。 日期以字符串形式给出，格式为 YYYY-MM-DD，如示例所示。 示例 1： 1</description>
    </item>
    
    <item>
      <title>lc.1363.形成3的最大倍数</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85%E5%8F%98%E9%A2%98/lc.1363.%E5%BD%A2%E6%88%903%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%8D%E6%95%B0/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/01%E8%83%8C%E5%8C%85%E5%8F%98%E9%A2%98/lc.1363.%E5%BD%A2%E6%88%903%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%8D%E6%95%B0/</guid>
      <description>1363. 形成三的最大倍数 Difficulty: 困难 给你一个整数数组 digits，你可以通过按任意顺序连接其中某些数字来形成 3 的倍数，请你返回所能得到的最大的 3 的倍数。</description>
    </item>
    
    <item>
      <title>lc.1367.二叉树的列表</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/lc.1367.%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E5%88%97%E8%A1%A8/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/lc.1367.%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E5%88%97%E8%A1%A8/</guid>
      <description>1367. 二叉树中的列表 Difficulty: 中等 给你一棵以 root 为根的二叉树和一个 head 为第一个节点的链表。 如果在二叉树中，存在一条一直向下的路径，且每个点的数值恰好一一对应</description>
    </item>
    
    <item>
      <title>lc.1390.四因数</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E5%AD%A6/%E5%88%86%E8%A7%A3%E5%9B%A0%E6%95%B0%E4%B8%93%E9%A2%98/lc.1390.%E5%9B%9B%E5%9B%A0%E6%95%B0/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E5%AD%A6/%E5%88%86%E8%A7%A3%E5%9B%A0%E6%95%B0%E4%B8%93%E9%A2%98/lc.1390.%E5%9B%9B%E5%9B%A0%E6%95%B0/</guid>
      <description>1390. 四因数 Difficulty: 中等 给你一个整数数组 nums，请你返回该数组中恰有四个因数的这些整数的各因数之和。 如果数组中不存在满足题意的整数，则返回 0 。 示例：</description>
    </item>
    
    <item>
      <title>lc.1392.最长快乐前缀</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/kmp%E7%AE%97%E6%B3%95/lc.1392.%E6%9C%80%E9%95%BF%E5%BF%AB%E4%B9%90%E5%89%8D%E7%BC%80/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/kmp%E7%AE%97%E6%B3%95/lc.1392.%E6%9C%80%E9%95%BF%E5%BF%AB%E4%B9%90%E5%89%8D%E7%BC%80/</guid>
      <description>1392. 最长快乐前缀 Difficulty: 困难 「快乐前缀」是在原字符串中既是 非空 前缀也是后缀（不包括原字符串自身）的字符串。 给你一个字符串 s，请你返回它的 最长快乐前缀</description>
    </item>
    
    <item>
      <title>lc.1957.删除字符串使字符串变好</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/lc.1957.%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%98%E5%A5%BD/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/lc.1957.%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%98%E5%A5%BD/</guid>
      <description>1957. 删除字符使字符串变好 Difficulty: 简单 一个字符串如果没有 三个连续 相同字符，那么它就是一个 好字符串 。 给你一个字符串 s ，请你从 s 删除 最少 的字符，使它变成一</description>
    </item>
    
    <item>
      <title>lc.354.俄罗斯套娃信封问题</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E6%9D%BF%E9%A2%98/lc.354.%E4%BF%84%E7%BD%97%E6%96%AF%E5%A5%97%E5%A8%83%E4%BF%A1%E5%B0%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E6%9D%BF%E9%A2%98/lc.354.%E4%BF%84%E7%BD%97%E6%96%AF%E5%A5%97%E5%A8%83%E4%BF%A1%E5%B0%81%E9%97%AE%E9%A2%98/</guid>
      <description>354. 俄罗斯套娃信封问题 Difficulty: 困难 给你一个二维整数数组 envelopes ，其中 envelopes[i] = [w&amp;lt;sub style=&amp;quot;display: inline;&amp;quot;&amp;gt;i&amp;lt;/sub&amp;gt;, h&amp;lt;sub style=&amp;quot;display: inline;&amp;quot;&amp;gt;i&amp;lt;/sub&amp;gt;] ，表示第 i 个信封的宽度和高度。 当另一个信封的宽度和高度都比这个信封大的</description>
    </item>
    
    <item>
      <title>lc.368.最大整除子集</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E6%9D%BF%E9%A2%98/lc.368.%E6%9C%80%E5%A4%A7%E6%95%B4%E9%99%A4%E5%AD%90%E9%9B%86/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E6%9D%BF%E9%A2%98/lc.368.%E6%9C%80%E5%A4%A7%E6%95%B4%E9%99%A4%E5%AD%90%E9%9B%86/</guid>
      <description>368. 最大整除子集 Difficulty: 中等 给你一个由 无重复 正整数组成的集合 nums ，请你找出并返回其中最大的整除子集 answer ，子集中每一元素对 (answer[i], answer[j]) 都应当满足： answer[i] % answer[j] == 0 ，或 answer[j]</description>
    </item>
    
    <item>
      <title>lc.673.最长上升子序列个数</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E6%9D%BF%E9%A2%98/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E6%9D%BF%E9%A2%98/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97%E4%B8%AA%E6%95%B0/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Solution { public: int findNumberOfLIS(vector&amp;lt;int&amp;gt;&amp;amp; nums) { int n = nums.size(); vector&amp;lt;int&amp;gt; dp(n,1),cnt(n,1); int maxLen = 1; for(int i=1;i&amp;lt;n;++i) { for(int j=0;j&amp;lt;i;++j) { if(nums[j]&amp;lt; nums[i]) { if(dp[j] + 1&amp;gt; dp[i]) { dp[i] = dp[j] + 1; cnt[i] = cnt[j]; }else</description>
    </item>
    
    <item>
      <title>lc.740.删除并获得点数</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E9%97%AE%E9%A2%98%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/lc.740.%E5%88%A0%E9%99%A4%E5%B9%B6%E8%8E%B7%E5%BE%97%E7%82%B9%E6%95%B0/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E9%97%AE%E9%A2%98%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/lc.740.%E5%88%A0%E9%99%A4%E5%B9%B6%E8%8E%B7%E5%BE%97%E7%82%B9%E6%95%B0/</guid>
      <description>740. 删除并获得点数 Difficulty: 中等 给你一个整数数组 nums ，你可以对它进行一些操作。 每次操作中，选择任意一个 nums[i] ，删除它并获得 nums[i] 的点数。之后，你必须删除 所有 等于</description>
    </item>
    
    <item>
      <title>lc.978. 最长湍流子数组</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E9%97%AE%E9%A2%98%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/lc978.%E6%9C%80%E9%95%BF%E6%B9%8D%E6%B5%81%E5%AD%90%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E9%97%AE%E9%A2%98%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/lc978.%E6%9C%80%E9%95%BF%E6%B9%8D%E6%B5%81%E5%AD%90%E6%95%B0%E7%BB%84/</guid>
      <description>978. 最长湍流子数组 Difficulty: 中等 当 A 的子数组 A[i], A[i+1], ..., A[j] 满足下列条件时，我们称其为_湍流子数组_： 若 i &amp;lt;= k &amp;lt; j，当 k 为奇数时， A[k] &amp;gt; A[k+1]，且当 k 为偶</description>
    </item>
    
    <item>
      <title>LCP12.小张的刷题计划</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E4%BA%8C%E5%88%86%E6%B3%95/lcp12.%E5%B0%8F%E5%BC%A0%E7%9A%84%E5%88%B7%E9%A2%98%E8%AE%A1%E5%88%92/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E4%BA%8C%E5%88%86%E6%B3%95/lcp12.%E5%B0%8F%E5%BC%A0%E7%9A%84%E5%88%B7%E9%A2%98%E8%AE%A1%E5%88%92/</guid>
      <description>LCP 12. 小张刷题计划 Difficulty: 中等 为了提高自己的代码能力，小张制定了 LeetCode 刷题计划，他选中了 LeetCode 题库中的 n 道题，编号从 0 到 n-1，并计划在 m 天内按照题目编号顺</description>
    </item>
    
    <item>
      <title>leetcode.329.矩阵中的最长递增路径</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/lc329.%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/lc329.%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E8%B7%AF%E5%BE%84/</guid>
      <description>329. 矩阵中的最长递增路径 Difficulty: 困难 给定一个 m x n 整数矩阵 matrix ，找出其中 最长递增路径 的长度。 对于每个单元格，你可以往上，下，左，右四个方向移动。 你 不能</description>
    </item>
    
    <item>
      <title>LRU【网友收集】</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/lru/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/lru/</guid>
      <description>lru 通过linkedhashmap，hash中的节点用双向指针连接着，表示插入的顺序。因此保存这个顺序就可以每次都去除最久未使用的那个。 1 2 3</description>
    </item>
    
    <item>
      <title>Manacher算法</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%9E%E6%96%87/manacher%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%9E%E6%96%87/manacher%E7%AE%97%E6%B3%95/</guid>
      <description></description>
    </item>
    
    <item>
      <title>tarjan算法</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/tarjan%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/tarjan%E7%AE%97%E6%B3%95/</guid>
      <description>tarjan 算法 原理： 向上标记法 o(N) 倍增算法 fa[i,j] 表示从i开始，向上走 $2^j$ 步， 能走到的节点， $0&amp;lt;=j &amp;lt;= logN$ $ depth[i] $ 表示深度 哨兵： 从i 开始跳 $2^j$ 步会跳到根节点，那么 $ fa[i,j] = 0</description>
    </item>
    
    <item>
      <title>tmux快捷键记录</title>
      <link>http://doc.lyr-2000.xyz/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/keymap/tmux-keymap/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/keymap/tmux-keymap/</guid>
      <description>1. 安装tmux 1 2 3 4 5 # linux yum install -y tmux # mac brew install tmux 2. tmux常用命令 2.1. 进入tmux 1 tmux 2.2. 退出tmux，程序后台运行 1 按ctrl + b 进入控制台，再</description>
    </item>
    
    <item>
      <title>vscode快捷键记录</title>
      <link>http://doc.lyr-2000.xyz/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/keymap/vscode-keymap/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/13.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/keymap/vscode-keymap/</guid>
      <description>vscode快捷键 1. 基本快捷键 1.1. VsCode 快捷键有五种组合方式 Ctrl + Shift + ? : 这种常规组合按钮 Ctrl + V Ctrl +V : 同时依赖一个按键的组合 Shift + V c : 先组合后单键的</description>
    </item>
    
    <item>
      <title>一致性哈希算法【网友收集】</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/</guid>
      <description>https://blog.csdn.net/cywosp/article/details/23397179 https://blog.csdn.net/qq_43621789/article/details/106917404 一致性哈希算法 哈希算法好坏的定义 1、平衡性(Balance)：平衡性是指哈希的结果能够尽可能分布到所有的缓冲中去，这样可以使得所有的缓冲</description>
    </item>
    
    <item>
      <title>不含连续1的非负整数</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E4%BD%8Ddp%E4%BE%8B%E9%A2%98/leetcode600_%E4%B8%8D%E5%90%AB%E8%BF%9E%E7%BB%AD1%E7%9A%84%E9%9D%9E%E8%B4%9F%E6%95%B4%E6%95%B0/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E4%BD%8Ddp%E4%BE%8B%E9%A2%98/leetcode600_%E4%B8%8D%E5%90%AB%E8%BF%9E%E7%BB%AD1%E7%9A%84%E9%9D%9E%E8%B4%9F%E6%95%B4%E6%95%B0/</guid>
      <description>600. 不含连续1的非负整数 Difficulty: 困难 给定一个正整数 n，找出小于或等于 n 的非负整数中，其二进制表示不包含 **连续的1 **的个数。 示例 1: 1 2 3 4 5 6 7 8</description>
    </item>
    
    <item>
      <title>两个回文子字符串长度的最大乘积</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%9E%E6%96%87/lc1960.%E4%B8%A4%E4%B8%AA%E5%9B%9E%E6%96%87%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%9E%E6%96%87/lc1960.%E4%B8%A4%E4%B8%AA%E5%9B%9E%E6%96%87%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF/</guid>
      <description>1960. 两个回文子字符串长度的最大乘积 Difficulty: 困难 给你一个下标从 0 开始的字符串 s ，你需要找到两个 **不重叠****的回文 **子字符串，它们的长度都必须为</description>
    </item>
    
    <item>
      <title>乘积最大的子数组</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</guid>
      <description>152. 乘积最大子数组 Difficulty: 中等 给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。 示例</description>
    </item>
    
    <item>
      <title>二叉树遍历</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</guid>
      <description>二叉树的遍历 前序遍历 1 2 3 4 5 6 7 8 9 10 11 12 public List&amp;lt;Integer&amp;gt; ans = new ArrayList&amp;lt;&amp;gt;(); public List&amp;lt;Integer&amp;gt; preorderTraversal(TreeNode root){ preorder(root); return ans; } public void preorder(TreeNode node) { if(node == null) return; ans.add(node.val); preorder(node.left); preorder(node.right); } 中序遍历 1 2 3 4 5 6 7 8 9 10 11 12 public List&amp;lt;Integer&amp;gt; ans = new</description>
    </item>
    
    <item>
      <title>全排列算法</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%85%A8%E6%8E%92%E5%88%97%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%85%A8%E6%8E%92%E5%88%97%E7%AE%97%E6%B3%95/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; permuteUnique(vector&amp;lt;int&amp;gt;&amp;amp; nums) { sort(nums.begin(),nums.end()); s = nums; visited = vector&amp;lt;bool&amp;gt; (s.size(),false); dfs(0); return res; } vector&amp;lt;int&amp;gt; s; vector&amp;lt;int&amp;gt; path; vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res; vector&amp;lt;bool&amp;gt; visited; void dfs(int cur) { if(path.size() &amp;gt;= s.size()) {</description>
    </item>
    
    <item>
      <title>动态规划使用场景总结</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E6%80%BB%E7%BB%93/</guid>
      <description>动态规划使用场景 数据不可交换 数据不可排序 dp[i] = max{ dp[i-1]+1【a[i]&amp;gt;a[i-1]】 ,1 }</description>
    </item>
    
    <item>
      <title>双指针算法</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/</guid>
      <description>15. 三数之和 Difficulty: 中等 给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 _a，b，c ，_使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的</description>
    </item>
    
    <item>
      <title>回文子序列</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%9E%E6%96%87/%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%9E%E6%96%87/%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/</guid>
      <description>给定一个长度为 nn 的整数序列 a1,a2,…,an 请你判断序列 aa 是否包含长度至少为 33 的回文子序列？ 输入格式 第一行包含整数 T ，表示共有 T 组测试数据</description>
    </item>
    
    <item>
      <title>字符串交错组成</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BA%A4%E9%94%99%E7%BB%84%E6%88%90/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BA%A4%E9%94%99%E7%BB%84%E6%88%90/</guid>
      <description>剑指 Offer II 096. 字符串交织 Difficulty: 中等 给定三个字符串 s1、s2、s3，请判断 s3 能不能由 s1 和 s2交织（交错） 组成。 两个字符串 s 和 t 交织 的定义与过程如下，其</description>
    </item>
    
    <item>
      <title>学校网络</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/tarjan%E7%AE%97%E6%B3%95%E4%BE%8B%E9%A2%98/%E5%AD%A6%E6%A0%A1%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/tarjan%E7%AE%97%E6%B3%95%E4%BE%8B%E9%A2%98/%E5%AD%A6%E6%A0%A1%E7%BD%91%E7%BB%9C/</guid>
      <description>一些学校连接在一个计算机网络上，学校之间存在软件支援协议，每个学校都有它应支援的学校名单（学校 A 支援学校 B，并不表示学校 B 一定要支援学校 A）</description>
    </item>
    
    <item>
      <title>定长子串中元音的最大数目</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E4%BC%98%E5%8C%96/lc.1456.%E5%AE%9A%E9%95%BF%E5%AD%90%E4%B8%B2%E4%B8%AD%E5%85%83%E9%9F%B3%E4%B8%AA%E6%9C%80%E5%A4%A7%E6%95%B0%E7%9B%AE/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E4%BC%98%E5%8C%96/lc.1456.%E5%AE%9A%E9%95%BF%E5%AD%90%E4%B8%B2%E4%B8%AD%E5%85%83%E9%9F%B3%E4%B8%AA%E6%9C%80%E5%A4%A7%E6%95%B0%E7%9B%AE/</guid>
      <description>1456. 定长子串中元音的最大数目 Difficulty: 中等 给你字符串 s 和整数 k 。 请返回字符串 s 中长度为 k 的单个子字符串中可能包含的最大元音字母数。 英文中的 元音字母 为（</description>
    </item>
    
    <item>
      <title>差分约束原理</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E5%8E%9F%E7%90%86/</guid>
      <description>差分约束原理 什么是差分约束 使用的案例; 求不等式的可行解 $x_1&amp;lt;=x_2+1$ $x_2&amp;lt;=x_3+1$ $x_3&amp;lt;=x_1-2$ 任何最短路问题都可以转为差分约束问题 $x_i&amp;lt;=x_j+c$ $dist[i] &amp;lt;= dist[j] + c$ 只要图论中无负环，就可以得到一个</description>
    </item>
    
    <item>
      <title>强连通分量_受欢迎的牛</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/tarjan%E7%AE%97%E6%B3%95%E4%BE%8B%E9%A2%98/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F_%E5%8F%97%E6%AC%A2%E8%BF%8E%E7%9A%84%E7%89%9B/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/tarjan%E7%AE%97%E6%B3%95%E4%BE%8B%E9%A2%98/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F_%E5%8F%97%E6%AC%A2%E8%BF%8E%E7%9A%84%E7%89%9B/</guid>
      <description>每一头牛的愿望就是变成一头最受欢迎的牛。 现在有 N 头牛，编号从 1 到 N ，给你 M 对整数 (A,B) ，表示牛 A 认为牛 B 受欢迎。 这种关系是具有传递性的，如果 A 认</description>
    </item>
    
    <item>
      <title>快速排序算法</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</guid>
      <description>快速排序算法的基本原理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt;using namespace std; vector&amp;lt;int&amp;gt; arr = {3,4,8,1,2,3}; void quicksort(int l ,int r) { if(l&amp;gt;=r) return; int i = l-1,j = r+1; int pivot = arr[(i+j)/2];</description>
    </item>
    
    <item>
      <title>按既定顺序创建目标数组</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%8E%92%E5%BA%8F%E4%B8%93%E9%A2%98/lc.1389%E6%8C%89%E6%97%A2%E5%AE%9A%E9%A1%BA%E5%BA%8F%E5%88%9B%E5%BB%BA%E7%9B%AE%E6%A0%87%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%8E%92%E5%BA%8F%E4%B8%93%E9%A2%98/lc.1389%E6%8C%89%E6%97%A2%E5%AE%9A%E9%A1%BA%E5%BA%8F%E5%88%9B%E5%BB%BA%E7%9B%AE%E6%A0%87%E6%95%B0%E7%BB%84/</guid>
      <description>1389. 按既定顺序创建目标数组 Difficulty: 简单 给你两个整数数组 nums 和 index。你需要按照以下规则创建目标数组： 目标数组 target 最初为空。 按从左到右的顺序依次读取 nums[i]</description>
    </item>
    
    <item>
      <title>数位DP 算法</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E4%BD%8Ddp%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E4%BD%8Ddp%E7%AE%97%E6%B3%95/</guid>
      <description>数位dp 算法模板 学习视频 核心算法原理 参数解释 可选参数： pre:表示上一个数是多少 有些题目会用到前面的数 lead :前导零是否存在，lead=1存在前</description>
    </item>
    
    <item>
      <title>数据结构_八大排序【网友收集】</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E4%BB%A5%E5%8F%8Ajava%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E4%BB%A5%E5%8F%8Ajava%E5%AE%9E%E7%8E%B0/</guid>
      <description>八大排序以及java实现 插入排序 算法描述 一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下： 从第一个元素开始，该元素可以</description>
    </item>
    
    <item>
      <title>数据结构_跳表【网友收集】</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%B7%B3%E8%A1%A8/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%B7%B3%E8%A1%A8/</guid>
      <description>#跳表 什么是跳表 多层的有序链表，越上层，节点数越少 跳表如何查询 从最上面那层开始，从左往右遍历，直到下一个节点比要查询的值大，往下一层走。循环</description>
    </item>
    
    <item>
      <title>数据结构集合【网友收集】</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%9B%86%E5%90%88/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%9B%86%E5%90%88/</guid>
      <description>数据结构合集 https://blog.csdn.net/cywosp/article/details/23397179 https://blog.csdn.net/qq_43621789/article/details/106917404 一致性哈希算法 哈希算法好坏的定义 1、平衡性(Balance)：平衡性是指哈希的结果能够尽可能分布到所有的缓冲中去，这样可以使</description>
    </item>
    
    <item>
      <title>最大的和</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%B7%AE%E5%88%86%E5%89%8D%E7%BC%80%E5%92%8C/%E6%9C%80%E5%A4%A7%E7%9A%84%E5%92%8C/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%B7%AE%E5%88%86%E5%89%8D%E7%BC%80%E5%92%8C/%E6%9C%80%E5%A4%A7%E7%9A%84%E5%92%8C/</guid>
      <description>给定一个长度为 n 的正整数数列 $ a_1,a_2,…,a_n $ 。 初始时，数列中的每个元素要么处于可选状态，要么处于不可选状态。 你可以选择一个长度</description>
    </item>
    
    <item>
      <title>最短路计数问题1</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/%E6%9C%80%E7%9F%AD%E8%B7%AF%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98/%E6%9C%80%E7%9F%AD%E8%B7%AF%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/%E6%9C%80%E7%9F%AD%E8%B7%AF%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98/%E6%9C%80%E7%9F%AD%E8%B7%AF%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98/</guid>
      <description>给出一个 N 个顶点 M 条边的无向无权图，顶点编号为 1 到 N。 问从顶点 1 开始，到其他每个点的最短路有几条。 输入格式 第一行包含 2 个正整数 N,M 为图的顶点数</description>
    </item>
    
    <item>
      <title>最长上升子序列解题代码</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E6%9D%BF%E9%A2%98/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E6%9D%BF%E9%A2%98/</guid>
      <description>673. 最长递增子序列的个数 Difficulty: 中等 给定一个未排序的整数数组，找到最长递增子序列的个数。 示例 1: 1 2 3 输入: [1,3,5,4,7] 输出: 2 解释: 有两个最长递增子序列，分别</description>
    </item>
    
    <item>
      <title>最长回文字串</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%97%E4%B8%B2/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%97%E4%B8%B2/</guid>
      <description>5. 最长回文子串 Difficulty: 中等 给你一个字符串 s，找到 s 中最长的回文子串。 示例 1： 1 2 3 输入：s = &amp;#34;babad&amp;#34; 输出：&amp;#34;bab&amp;#34; 解释：&amp;#34;ab</description>
    </item>
    
    <item>
      <title>枚举_日期类题</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%9E%9A%E4%B8%BE_%E6%97%A5%E6%9C%9F%E7%B1%BB%E9%A2%98/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%9E%9A%E4%B8%BE_%E6%97%A5%E6%9C%9F%E7%B1%BB%E9%A2%98/</guid>
      <description>已知 11 年 11 月 11 日是星期一。 现在给定一个日期，请你判断是星期几。 注意闰年的 22 月有 2929 天。 满足下面条件之一的是闰年： 年份是 44 的整数倍，而且不是 100100 的</description>
    </item>
    
    <item>
      <title>树状数组算法</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</guid>
      <description>有 nn 头奶牛，已知它们的身高为 1∼n1∼n 且各不相同，但不知道每头奶牛的具体身高。 现在这 nn 头奶牛站成一列，已知第 ii 头牛前面有 AiAi 头牛比它低，求每</description>
    </item>
    
    <item>
      <title>消失的2个数字</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/%E6%9A%B4%E5%8A%9B%E9%A2%98/%E6%B6%88%E5%A4%B1%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/%E6%9A%B4%E5%8A%9B%E9%A2%98/%E6%B6%88%E5%A4%B1%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97/</guid>
      <description>面试题 17.19. 消失的两个数字 Difficulty: 困难 给定一个数组，包含从 1 到 N 所有的整数，但其中缺了两个数字。你能在 O(N) 时间内只用 O(1) 的空间找到它们吗？ 以任意顺序返回这</description>
    </item>
    
    <item>
      <title>硬币找零和贪心问题</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%A1%AC%E5%B8%81%E6%89%BE%E9%9B%B6%E5%92%8C%E8%B4%AA%E5%BF%83/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%A1%AC%E5%B8%81%E6%89%BE%E9%9B%B6%E5%92%8C%E8%B4%AA%E5%BF%83/</guid>
      <description>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返</description>
    </item>
    
    <item>
      <title>笔试面试常考总结</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E7%AC%94%E8%AF%95%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%80%83%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E7%AC%94%E8%AF%95%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%80%83%E6%80%BB%E7%BB%93/</guid>
      <description>笔试面试常考总结</description>
    </item>
    
    <item>
      <title>等差数列划分 II -子序列</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E6%9D%BF%E9%A2%98/%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97%E5%88%92%E5%88%86ii-%E5%AD%90%E5%BA%8F%E5%88%97/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E6%9D%BF%E9%A2%98/%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97%E5%88%92%E5%88%86ii-%E5%AD%90%E5%BA%8F%E5%88%97/</guid>
      <description>446. 等差数列划分 II - 子序列 Difficulty: 困难 给你一个整数数组 nums ，返回 nums 中所有 等差子序列 的数目。 如果一个序列中 至少有三个元素 ，并且任意两个相邻元素之差相同，</description>
    </item>
    
    <item>
      <title>糖果</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/%E7%B3%96%E6%9E%9C/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/%E7%B3%96%E6%9E%9C/</guid>
      <description>幼儿园里有 NN 个小朋友，老师现在想要给这些小朋友们分配糖果，要求每个小朋友都要分到糖果。 但是小朋友们也有嫉妒心，总是会提出一些要求，比如小明不</description>
    </item>
    
    <item>
      <title>红黑树、哈希表、堆【网友收集】</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%93%88%E5%B8%8C%E8%A1%A8%E5%A0%86/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%93%88%E5%B8%8C%E8%A1%A8%E5%A0%86/</guid>
      <description>红黑树、哈希表、堆 红黑树 红黑树的每个节点上都有存储位表示节点的颜色，可以是红(Red)或黑(Black)。 红黑树的特性: （1）每个节点或者是</description>
    </item>
    
    <item>
      <title>组合数公式推导</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC/</guid>
      <description>快速幂公式 组合数公式1 $$ C_a^b = C_{a-1}^{b-1} + C_{a-1}^b $$ 公式解释 从 a 个苹果 里面 选出 b个苹果， 选出一个绿色苹果， -&amp;gt; 剩下的方案是 $C_{a-1}^{b-1}$ 不选这个苹果- &amp;gt; 剩下的方案是 $C_{a-1}^{b}$ 根据</description>
    </item>
    
    <item>
      <title>观光奶牛</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/%E8%B4%9F%E7%8E%AF%E9%97%AE%E9%A2%98/%E8%A7%82%E5%85%89%E5%A5%B6%E7%89%9B/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/%E8%B4%9F%E7%8E%AF%E9%97%AE%E9%A2%98/%E8%A7%82%E5%85%89%E5%A5%B6%E7%89%9B/</guid>
      <description>观光奶牛 给定一张 L 个点、 P 条边的有向图，每个点都有一个权值 f[i] ，每条边都有一个权值 t[i] 求图中的一个环，使“环上各点的权值之和”除以“环上各边的权</description>
    </item>
    
    <item>
      <title>通信线路</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/%E8%B4%9F%E7%8E%AF%E9%97%AE%E9%A2%98/%E9%80%9A%E4%BF%A1%E7%BA%BF%E8%B7%AF/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/%E8%B4%9F%E7%8E%AF%E9%97%AE%E9%A2%98/%E9%80%9A%E4%BF%A1%E7%BA%BF%E8%B7%AF/</guid>
      <description>通信线路 在郊区有 N 座通信基站，P 条 双向 电缆，第 ii 条电缆连接基站 $ A_i $ 和 $B_i$ 。 特别地，1 号基站是通信公司的总站，N 号基站位于一座农场中。 现在，农</description>
    </item>
    
    <item>
      <title>链表问题</title>
      <link>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E9%93%BE%E8%A1%A8%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/12.%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/%E9%93%BE%E8%A1%A8%E9%97%AE%E9%A2%98/</guid>
      <description>82. 删除排序链表中的重复元素 II Difficulty: 中等 存在一个按升序排列的链表，给你这个链表的头节点 head ，请你删除链表中所有存在数字重复情况的节点，只保留原始链表</description>
    </item>
    
    <item>
      <title>首页</title>
      <link>http://doc.lyr-2000.xyz/home/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/home/</guid>
      <description></description>
    </item>
    
    <item>
      <title>什么是非法集资</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E9%9D%9E%E6%B3%95%E9%9B%86%E8%B5%84/</link>
      <pubDate>Thu, 12 Aug 2021 09:41:07 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E9%9D%9E%E6%B3%95%E9%9B%86%E8%B5%84/</guid>
      <description>小白是一家 P2P 公司的 PHP 程序员，主要负责网页工作，为公司宣传、招揽客户。然而两个月前，公司的资金链断裂，高达上亿的资金迟迟不能到位，濒临破产。两</description>
    </item>
    
    <item>
      <title>加班费怎么算？</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E5%8A%A0%E7%8F%AD%E8%B4%B9%E6%80%8E%E4%B9%88%E7%AE%97/</link>
      <pubDate>Thu, 12 Aug 2021 09:41:07 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E5%8A%A0%E7%8F%AD%E8%B4%B9%E6%80%8E%E4%B9%88%E7%AE%97/</guid>
      <description>首先我们要了解加班时间的规定。我们实行的是 8 小时工作制，但并没有禁止公司安排 8 小时外的加班，只不过，法律上要求，公司安排加班，必须符合《劳动</description>
    </item>
    
    <item>
      <title>受贿法律问题</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E5%8F%97%E8%B4%BF%E7%9A%84%E6%B3%95%E5%BE%8B%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 12 Aug 2021 09:41:07 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E5%8F%97%E8%B4%BF%E7%9A%84%E6%B3%95%E5%BE%8B%E9%97%AE%E9%A2%98/</guid>
      <description>非国家工作人员受贿罪 在过去，这个罪一直叫作“公司、企业人员受贿罪”，后来修改成了“非国家工作人员受贿罪”。名称上的变动，可以看出，新罪名针对</description>
    </item>
    
    <item>
      <title>商品信誉相关</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E5%95%86%E5%93%81%E4%BF%A1%E8%AA%89%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Thu, 12 Aug 2021 09:41:07 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E5%95%86%E5%93%81%E4%BF%A1%E8%AA%89%E7%9B%B8%E5%85%B3/</guid>
      <description>事实上，法律上有专门的几个名词，用来定义这样的行为，我们逐个来看。 第一个概念叫做商业信誉，比较好理解，是指企业在商业上获得的正面的社会评价，</description>
    </item>
    
    <item>
      <title>打工人注意点</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E6%89%93%E5%B7%A5%E4%BA%BA%E6%B3%A8%E6%84%8F%E7%82%B9/</link>
      <pubDate>Thu, 12 Aug 2021 09:41:07 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E6%89%93%E5%B7%A5%E4%BA%BA%E6%B3%A8%E6%84%8F%E7%82%B9/</guid>
      <description>创业公司确实不容易，老板起早贪黑，员工亦是没日没夜地干活。但这中间，一旦哪个环节出现问题，就有可能导致整个公司都崩盘。 小王去了一家 P2P 创业公司</description>
    </item>
    
    <item>
      <title>网络安全问题</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 12 Aug 2021 09:41:07 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</guid>
      <description>前不久某鹅厂 23 岁安全工程师的新闻，想必你不会陌生。年轻的工程师，因为对酒店的 Wi-Fi 系统顺手一测，又顺手一发给传播了出去，就被新加坡安全局给抓了。</description>
    </item>
    
    <item>
      <title>股权</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E8%82%A1%E6%9D%83/</link>
      <pubDate>Thu, 12 Aug 2021 09:41:07 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E8%82%A1%E6%9D%83/</guid>
      <description>现在创业公司员工的两大迷雾，无非是相当火热的“股权”和“期权”。前面我们学完股权内容后，不少留言都在问，期权究竟是怎么回事，离职后期权要怎么</description>
    </item>
    
    <item>
      <title>诉讼的注意点</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E8%AF%89%E8%AE%BC%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9/</link>
      <pubDate>Thu, 12 Aug 2021 09:41:07 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/05.%E6%B3%95%E5%BE%8B/%E8%AF%89%E8%AE%BC%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9/</guid>
      <description>第八问：中级法院作出二审民事判决后，我对结果仍然不服，还能再继续起诉吗？应该如何维权？ 老周答：我国法院审理普通程序的案件，实行的是两审终审制</description>
    </item>
    
    <item>
      <title>同学的面试</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/11.%E5%90%8C%E5%AD%A6%E7%9A%84%E9%9D%A2%E8%AF%95/</link>
      <pubDate>Sat, 08 May 2021 15:27:22 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/11.%E5%90%8C%E5%AD%A6%E7%9A%84%E9%9D%A2%E8%AF%95/</guid>
      <description>spring的scope有几种 @component 默认是那种 spring mvc整个流程 int i1 = 10000, int i2 = 10000 两个是否相等（相等） 两个Integer大于或等于128时是不等的，</description>
    </item>
    
    <item>
      <title>腾讯（三面）</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/10.%E8%85%BE%E8%AE%AF%E4%B8%89%E9%9D%A2/</link>
      <pubDate>Mon, 26 Apr 2021 20:46:59 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/10.%E8%85%BE%E8%AE%AF%E4%B8%89%E9%9D%A2/</guid>
      <description>实在没想到，居然可以进三面，三面没问技术，只问了我一些项目啊和团队合作相关的东西。 自我介绍 人数最多的团队有多少人 你是怎么和别人合作的（需不需</description>
    </item>
    
    <item>
      <title>腾讯（二面）</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/09.%E8%85%BE%E8%AE%AF%E4%BA%8C%E9%9D%A2/</link>
      <pubDate>Sun, 25 Apr 2021 21:29:16 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/09.%E8%85%BE%E8%AE%AF%E4%BA%8C%E9%9D%A2/</guid>
      <description>本来我都以为我要凉了的。。当时笔试完后去官网看了一下，流程结束了。今天本来打算摸会鱼的。。。突然给我发封邮件，说面试。。。可能是被捞了。搞得</description>
    </item>
    
    <item>
      <title>汉得（一面）</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/08.%E6%B1%89%E5%BE%97%E4%B8%80%E9%9D%A2/</link>
      <pubDate>Wed, 21 Apr 2021 21:17:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/08.%E6%B1%89%E5%BE%97%E4%B8%80%E9%9D%A2/</guid>
      <description>这次汉得是在腾讯会议上面的，其实没问啥，大部分时间都在讲项目，还好我是做过项目的，所以我直接给它看了jenkins然后他让我打开项目，讲一下</description>
    </item>
    
    <item>
      <title>MVVM架构</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/05.android%E7%9B%B8%E5%85%B3/01.mvvm%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Tue, 20 Apr 2021 21:51:09 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/05.android%E7%9B%B8%E5%85%B3/01.mvvm%E6%9E%B6%E6%9E%84/</guid>
      <description>说到这个结构，就不得不提一下安卓的几大结构吧主要包括 MVC、MVP、MVVM 这三大结构 MVC结构 Model ：实体模型、数据的获取、存储等等 View ：Act</description>
    </item>
    
    <item>
      <title>阿里（一面）</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/07.%E9%98%BF%E9%87%8C%E4%B8%80%E9%9D%A2/</link>
      <pubDate>Mon, 19 Apr 2021 18:21:51 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/07.%E9%98%BF%E9%87%8C%E4%B8%80%E9%9D%A2/</guid>
      <description>这次体验极其不友好，首先就是阿里这边卡我流程，我从3月21号投递，然后就被拒了。。。后面不知道咋回事招聘动态显示的是新投递（4号2号申请的。</description>
    </item>
    
    <item>
      <title>Java书籍学习笔记</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/13.java%E4%B9%A6%E7%B1%8D%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 19 Apr 2021 10:05:18 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/13.java%E4%B9%A6%E7%B1%8D%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>Java核心技术 卷一 基本数据结构 java break可以带标签 大数值可以使用bigInteger和bigDecimal for each使用 1 2 3 for (int a:new int[]{1,2,3}){ System.out.println(a);</description>
    </item>
    
    <item>
      <title>面试问题</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/03.%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/01.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 17 Apr 2021 15:24:16 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/03.%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/01.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</guid>
      <description>对象图有几种 UML大科普：一文梳理清 14种 UML图！ (yinxiang.com) UML图分为结构图和行为图。 结构图分为类图、轮廓图、组件图、组合结构图、对象图、部署图</description>
    </item>
    
    <item>
      <title>腾讯</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/09.%E7%AC%94%E8%AF%95%E9%A2%98%E7%9B%AE/01.%E8%85%BE%E8%AE%AF/</link>
      <pubDate>Thu, 15 Apr 2021 20:48:21 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/09.%E7%AC%94%E8%AF%95%E9%A2%98%E7%9B%AE/01.%E8%85%BE%E8%AE%AF/</guid>
      <description>1.生成格雷码 生成格雷码_牛客题霸_牛客网 (nowcoder.com) 先理解一下格雷码的定义吧，我拿n为3举例，当n为3时，我们生成的格雷码如下 1 [000, 001, 011, 010, 110, 111, 101, 100] 任意</description>
    </item>
    
    <item>
      <title>腾讯</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/08.codetop%E4%BC%81%E4%B8%9A%E9%A2%98%E5%BA%93/01.%E8%85%BE%E8%AE%AF/</link>
      <pubDate>Thu, 15 Apr 2021 08:34:10 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/08.codetop%E4%BC%81%E4%B8%9A%E9%A2%98%E5%BA%93/01.%E8%85%BE%E8%AE%AF/</guid>
      <description>1.反转链表 206. 反转链表 - 力扣（LeetCode） (leetcode-cn.com) 这题考察的就是你对递归和迭代的综合运用 解法一：递归 这递归好久没做了，还有有点蒙，下面我简单</description>
    </item>
    
    <item>
      <title>网络安全</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/04.%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3/01.%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</link>
      <pubDate>Tue, 13 Apr 2021 20:46:05 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/04.%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3/01.%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</guid>
      <description>https中间人攻击 如何防止请求被篡改 使用https来进行请求（这点我居然没想到。。） 设置客户端白名单，客户端所有请求，请求到代理服务器(n</description>
    </item>
    
    <item>
      <title>前端</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/03.%E5%89%8D%E7%AB%AF/</link>
      <pubDate>Tue, 13 Apr 2021 20:31:38 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/03.%E5%89%8D%E7%AB%AF/</guid>
      <description>跨域问题怎么处理 通过jsonp跨域 document.domain + iframe跨域 location.hash + iframe window.name + iframe跨域 postMessage跨域 跨域资源共享（CORS） nginx</description>
    </item>
    
    <item>
      <title>HTML</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/02.html/</link>
      <pubDate>Tue, 13 Apr 2021 19:59:35 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/02.html/</guid>
      <description>优化相关 怎么优化界面，让用户体验更好 减少 HTTP 请求 使用 HTTP2 使用服务端渲染 客户端渲染: 获取 HTML 文件，根据需要下载 JavaScript 文件，运行文件，生成 DOM，再渲染。</description>
    </item>
    
    <item>
      <title>字节（二面）</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/06.%E5%AD%97%E8%8A%82%E4%BA%8C%E9%9D%A2/</link>
      <pubDate>Tue, 13 Apr 2021 16:57:58 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/06.%E5%AD%97%E8%8A%82%E4%BA%8C%E9%9D%A2/</guid>
      <description>这面不知道为啥感觉好水，，，，都没问我啥难的东西。。。有点谎，不知道结果怎么样 TCP和UDP 运输层(TCP,UDP) | 面试问题浓缩总结 (xiaoyou66.com) TC</description>
    </item>
    
    <item>
      <title>JavaScript</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/01.javascript/</link>
      <pubDate>Mon, 12 Apr 2021 22:18:18 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/01.javascript/</guid>
      <description>JavaScript事件机制 DOM事件流（event flow ）存在三个阶段：事件捕获阶段、处于目标阶段、事件冒泡阶段。 事件捕获（event capt</description>
    </item>
    
    <item>
      <title>面试常问问题</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/03.cc&#43;&#43;%E8%AF%AD%E8%A8%80/02.%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 12 Apr 2021 22:07:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/03.cc&#43;&#43;%E8%AF%AD%E8%A8%80/02.%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE%E9%97%AE%E9%A2%98/</guid>
      <description>this指针是干嘛的 其作用就是指向成员函数所作用的对象， 所以非静态成员函数中可以直接使用 this 来代表指向该函数作用的对象的指针。 静态成员函数是不</description>
    </item>
    
    <item>
      <title>腾讯（一面）</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/05.%E8%85%BE%E8%AE%AF%E4%B8%80%E9%9D%A2/</link>
      <pubDate>Mon, 12 Apr 2021 20:03:45 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/05.%E8%85%BE%E8%AE%AF%E4%B8%80%E9%9D%A2/</guid>
      <description>我太难了，一直在背后端的东西，突然来个前端的，我心态崩了。。。我太难了，前端的有时间也去看看吧 go的协程 经典问题，不多说 协程调度，GPM调度</description>
    </item>
    
    <item>
      <title>分布式系统相关</title>
      <link>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/02.%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/03.%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sun, 11 Apr 2021 18:42:35 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/02.%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/03.%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/</guid>
      <description>一致性哈希 传统哈希 当数据太大而无法存储在一个节点或机器上时，我们就需要把数据放在多台服务器上，这个时候我们就可以简单使用取模运算来实现简单的</description>
    </item>
    
    <item>
      <title>面试问的一些算法</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/04.%E9%9D%A2%E8%AF%95%E9%97%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 10 Apr 2021 19:06:43 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/04.%E9%9D%A2%E8%AF%95%E9%97%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%97%E6%B3%95/</guid>
      <description>给定一个 1-7随机数生成器 如何生成1-10随机数并验证？ 力扣上有一样的题目 470. 用 Rand7() 实现 Rand10() - 力扣（LeetCode） (leetcode-cn.com) 我们可以使用拒绝采样的方法</description>
    </item>
    
    <item>
      <title>面试常问</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/01.%E6%99%BA%E5%8A%9B%E9%A2%98/02.%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE/</link>
      <pubDate>Sat, 10 Apr 2021 17:17:18 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/01.%E6%99%BA%E5%8A%9B%E9%A2%98/02.%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE/</guid>
      <description>64匹马，8个赛道，找出跑得最快的4匹马 全部马分为8组，每组8匹，每组各跑一次，然后淘汰掉每组的后四名，如下图（需要比赛8场） 第一步 因为我们</description>
    </item>
    
    <item>
      <title>牛客面经总结</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/04.%E7%89%9B%E5%AE%A2%E9%9D%A2%E7%BB%8F%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 10 Apr 2021 17:11:16 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/04.%E7%89%9B%E5%AE%A2%E9%9D%A2%E7%BB%8F%E6%80%BB%E7%BB%93/</guid>
      <description>特地在牛客上看了100多篇面经，目的就是为了看一下go到底能问多少东西。这一轮看下来发现东西还是很多的，有些东西不好整理，所以我就统一放这里</description>
    </item>
    
    <item>
      <title>1-10</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/07.%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95/1.1-10/</link>
      <pubDate>Sat, 10 Apr 2021 14:20:24 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/07.%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95/1.1-10/</guid>
      <description>01.01判断字符串是否唯一 面试题 01.01. 判定字符是否唯一 - 力扣（LeetCode） (leetcode-cn.com) 解法一： 使用map 这个方法虽然很简单，但是面试不推荐的话不推</description>
    </item>
    
    <item>
      <title>10-20</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/07.%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95/2.10-20/</link>
      <pubDate>Sat, 10 Apr 2021 14:20:24 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/07.%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95/2.10-20/</guid>
      <description></description>
    </item>
    
    <item>
      <title>注解相关</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/9.%E6%B3%A8%E8%A7%A3%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Wed, 07 Apr 2021 17:21:53 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/9.%E6%B3%A8%E8%A7%A3%E7%9B%B8%E5%85%B3/</guid>
      <description>常用的注解 @SpringBootApplication 这个注解我们一般不会主动使用它，但是它却是springboot项目的基石，创建 SpringBoot 项目之后会默认在主类加上。 我们可以把 @Sprin</description>
    </item>
    
    <item>
      <title>Hook规则</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/04.hook%E8%A7%84%E5%88%99/</link>
      <pubDate>Tue, 06 Apr 2021 19:13:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/04.hook%E8%A7%84%E5%88%99/</guid>
      <description>04. Hook规则 Hook 本质就是 JavaScript 函数，但是在使用它时需要遵循两条规则。我们提供了一个 linter 插件来强制执行这些规则： 只在最顶层使用 Hook 不要在循环，条件或嵌</description>
    </item>
    
    <item>
      <title>使用Effect Hook</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/03.%E4%BD%BF%E7%94%A8effect-hook/</link>
      <pubDate>Tue, 06 Apr 2021 19:13:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/03.%E4%BD%BF%E7%94%A8effect-hook/</guid>
      <description>03. 使用Effect Hook（副作用钩子） 如果你熟悉 React class 的生命周期函数，你可以把 useEffect Hook 看做 componentDidMount(挂载完成)，com</description>
    </item>
    
    <item>
      <title>使用State Hook</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/02.%E4%BD%BF%E7%94%A8state-hook/</link>
      <pubDate>Tue, 06 Apr 2021 19:13:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/02.%E4%BD%BF%E7%94%A8state-hook/</guid>
      <description>02. 使用State Hook 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import React, { useState } from &amp;#39;react&amp;#39;; function Example() { // 声明一个叫 &amp;#34;count&amp;#34; 的 state 变量 const [count, setCount] = useState(0); return ( &amp;lt;div&amp;gt; &amp;lt;p&amp;gt;You clicked {count} times&amp;lt;/p&amp;gt; &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt; Click me &amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; ); } 我</description>
    </item>
    
    <item>
      <title>自定义 Hook</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/05.%E8%87%AA%E5%AE%9A%E4%B9%89-hook/</link>
      <pubDate>Tue, 06 Apr 2021 19:13:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/05.%E8%87%AA%E5%AE%9A%E4%B9%89-hook/</guid>
      <description>05. 自定义 Hook 通过自定义 Hook，可以将组件逻辑提取到可重用的函数中。 目前为止，在 React 中有两种流行的方式来共享组件之间的状态逻辑: render props 和高阶组件，</description>
    </item>
    
    <item>
      <title>常用命令</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/6.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 06 Apr 2021 13:26:55 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/6.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>常用操作命令 数据库操作命令 1 2 3 4 5 6 7 8 9 10 11 12 13 # 查看数据库 show dbs; # 切换数据库（如果没有对应的数据库则创建） use 数据库名; # 创建集合 db.c</description>
    </item>
    
    <item>
      <title>体系和架构</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/5.%E4%BD%93%E7%B3%BB%E5%92%8C%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Tue, 06 Apr 2021 13:18:04 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/5.%E4%BD%93%E7%B3%BB%E5%92%8C%E6%9E%B6%E6%9E%84/</guid>
      <description>MongoDB体系结构 MongoDB的体系结构如下所示：磁盘文件经过加载之后后形成 MongoDB 实例，一个 MongoDB 实例中可以存放多个数据库（图中的MongoD</description>
    </item>
    
    <item>
      <title>分布式和集群</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/4.%E5%88%86%E5%B8%83%E5%BC%8F%E5%92%8C%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Tue, 06 Apr 2021 13:16:20 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/4.%E5%88%86%E5%B8%83%E5%BC%8F%E5%92%8C%E9%9B%86%E7%BE%A4/</guid>
      <description>MongoDB集群 MongoDB有三种集群的搭建方式 Replica Set 副本集 Sharding 切片 Master-Slaver 主从（不推荐使用） 其中，Sharding集群也是三种集群中最复杂的。副</description>
    </item>
    
    <item>
      <title>索引</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/3.%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Tue, 06 Apr 2021 11:04:00 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/3.%E7%B4%A2%E5%BC%95/</guid>
      <description>MongoDB也是有索引的 索引是对数据库一列或多列值进行排序的存储结构，底层一般是一种树状结构，没有索引查询会进行全表扫描，数据量大的时候会</description>
    </item>
    
    <item>
      <title>存储引擎</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/2.%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</link>
      <pubDate>Tue, 06 Apr 2021 10:50:32 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/2.%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</guid>
      <description>存储引擎介绍 MongoDB支持的引擎有：WiredTiger，MMAPv1和In-Memory。 从MongoDB 3.2 版本开始，WiredTig</description>
    </item>
    
    <item>
      <title>启动流程和配置</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/8.%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%92%8C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 02 Apr 2021 14:50:22 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/8.%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%92%8C%E9%85%8D%E7%BD%AE/</guid>
      <description>springboot启动 springboot启动类上的注解 一般来说我们的启动类需要有下面这几个注解 @SpringBootApplication 这个是一个非常核心的注解，我们使用spr</description>
    </item>
    
    <item>
      <title>蘑菇街(一面)</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/03.%E8%98%91%E8%8F%87%E8%A1%97%E4%B8%80%E9%9D%A2/</link>
      <pubDate>Fri, 02 Apr 2021 10:56:15 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/03.%E8%98%91%E8%8F%87%E8%A1%97%E4%B8%80%E9%9D%A2/</guid>
      <description>这个也太难了，springboot其实我了解的不是特别深入，然后这面试官就一直逮着我不放。。。后悔啊，下次得把springboot给背一背了</description>
    </item>
    
    <item>
      <title>面试稿子</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/02.%E9%9D%A2%E8%AF%95%E7%A8%BF%E5%AD%90/</link>
      <pubDate>Thu, 01 Apr 2021 19:24:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/02.%E9%9D%A2%E8%AF%95%E7%A8%BF%E5%AD%90/</guid>
      <description>面了几次之后，总感觉自己每次说的都不太流利,这里特意写一下自己的面试稿子，到时候照着背吧，还有就是自己准备好一些话术，到时候就可以照着写了 先</description>
    </item>
    
    <item>
      <title>字节跳动(一面)</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/01.%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E4%B8%80%E9%9D%A2/</link>
      <pubDate>Thu, 01 Apr 2021 19:22:10 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/01.%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E4%B8%80%E9%9D%A2/</guid>
      <description>这次面试实在是太尬了，后面的算法题我就一直尬在哪里想思路，然后面试官一直在那看着，我想到一个办法，然后面试官就说空间复杂度太大了，想办法让空</description>
    </item>
    
    <item>
      <title>高频手撕代码</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/09.%E9%AB%98%E9%A2%91%E6%89%8B%E5%8A%BF%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Thu, 01 Apr 2021 15:53:40 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/09.%E9%AB%98%E9%A2%91%E6%89%8B%E5%8A%BF%E4%BB%A3%E7%A0%81/</guid>
      <description>注意，这些代码我都会用GO来进行实现，参考： 想去看机会？这10道最高频的手撕代码题都会了吗？ - 云+社区 - 腾讯云 (tencent.com) 快速排序 这个非常的经典，必须</description>
    </item>
    
    <item>
      <title>设计一个IM系统</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/3.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AAim%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Wed, 31 Mar 2021 20:48:35 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/3.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AAim%E7%B3%BB%E7%BB%9F/</guid>
      <description>主要参考下面几个链接 如何设计一个亿级消息量的IM系统 - InfoQ 写作平台 一个海量在线用户即时通讯系统（IM）的完整设计Plus - 云+社区 - 腾讯云 (tencent.com) .</description>
    </item>
    
    <item>
      <title>设计一个数据库连接池</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/4.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</link>
      <pubDate>Wed, 31 Mar 2021 20:48:35 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/4.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</guid>
      <description>可以参考下面这几个 如何设计并实现一个db连接池？ (juejin.cn)</description>
    </item>
    
    <item>
      <title>JWT</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/03.%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF/1.jwt/</link>
      <pubDate>Wed, 31 Mar 2021 20:48:33 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/03.%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF/1.jwt/</guid>
      <description>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分</description>
    </item>
    
    <item>
      <title>面试问题汇总</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/1.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</link>
      <pubDate>Wed, 31 Mar 2021 16:58:03 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/1.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</guid>
      <description>MongoDB是由哪种语言写的 MongoDB用c++编写的，流行的开源数据库MySQL也是用C++开发的。C++1983年发行是一种使用广泛</description>
    </item>
    
    <item>
      <title>面试问题整理</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</link>
      <pubDate>Wed, 31 Mar 2021 16:53:08 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</guid>
      <description>内存管理 什么是缓冲区溢出？有什么危害？其原因是什么？ 缓冲区溢出是指当计算机向缓冲区填充数据时超出了缓冲区本身的容量，溢出的数据覆盖在合法数据</description>
    </item>
    
    <item>
      <title>安全相关</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/7.%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Wed, 31 Mar 2021 14:28:27 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/7.%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3/</guid>
      <description>TLS是啥 SSL/TLS协议其实就是一个安全通信的协议，https采用的就是这个协议来实现安全传输，这个地方主要会问你https的工作原理 TLS</description>
    </item>
    
    <item>
      <title>Hook概述</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/01.hook%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Wed, 31 Mar 2021 11:30:03 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/01.hook%E6%A6%82%E8%BF%B0/</guid>
      <description>01. Hook概述 Hook可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。 什么是 Hook? Hook 是一个特殊的函数，可以让你在函数组件里“钩入” React state 及 生命周</description>
    </item>
    
    <item>
      <title>面试题</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/7.%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Wed, 31 Mar 2021 10:24:33 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/7.%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dubbo</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/03.%E4%B8%AD%E9%97%B4%E4%BB%B6/4.dubbo/</link>
      <pubDate>Tue, 30 Mar 2021 21:34:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/03.%E4%B8%AD%E9%97%B4%E4%BB%B6/4.dubbo/</guid>
      <description>Dubbo(读音[ˈdʌbəʊ])是阿里巴巴公司开源的一个高性能优秀的服务框架，使得应用可通过高性能的RPC 实现服务的输出和输入功能，可以和</description>
    </item>
    
    <item>
      <title>Zookeeper</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/03.%E4%B8%AD%E9%97%B4%E4%BB%B6/3.zookeeper/</link>
      <pubDate>Tue, 30 Mar 2021 21:32:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/03.%E4%B8%AD%E9%97%B4%E4%BB%B6/3.zookeeper/</guid>
      <description>Zookeeper是一个开源的分布式协调服务，由雅虎公司创建，由于最初雅虎公司的内部研究小组的项目大多以动物的名字命名，所以后来就以Zook</description>
    </item>
    
    <item>
      <title>RocketMQ</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/03.%E4%B8%AD%E9%97%B4%E4%BB%B6/2.rocketmq/</link>
      <pubDate>Tue, 30 Mar 2021 21:21:33 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/03.%E4%B8%AD%E9%97%B4%E4%BB%B6/2.rocketmq/</guid>
      <description>RocketMQ是一个分布式消息和流数据平台，具有低延迟、高性能、高可靠性、万亿级容量和灵活的可扩展性。 RocketMQ实现原理 Rocket</description>
    </item>
    
    <item>
      <title>其他</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/12.%E5%85%B6%E4%BB%96/</link>
      <pubDate>Tue, 30 Mar 2021 21:07:32 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/12.%E5%85%B6%E4%BB%96/</guid>
      <description>引用类型有哪些？有什么区别？ 引用类型主要分为强软弱虚四种： 强引用指的就是代码中普遍存在的赋值方式，比如A a = new A()这种。强引用关联的对象，</description>
    </item>
    
    <item>
      <title>秒杀系统设计</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/2.%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 30 Mar 2021 18:22:43 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/2.%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</guid>
      <description>知乎上就有好多现成的例子，我就拿敖丙的来举例吧 秒杀系统会遇到的几个问题 高并发 超卖 恶意请求 链接暴露 暴露了请求地址，被人恶意请求 数据库 请求太多，</description>
    </item>
    
    <item>
      <title>设计一个抢红包功能</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/1.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%8A%A2%E7%BA%A2%E5%8C%85%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Tue, 30 Mar 2021 18:17:15 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/1.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%8A%A2%E7%BA%A2%E5%8C%85%E5%8A%9F%E8%83%BD/</guid>
      <description>这个其实可以使用事务来实现，比如我们可以用MySQL，抢红包时先开启事务，然后加上行锁，修改完毕后我们提交事务，释放行锁 或者我们可以使用Re</description>
    </item>
    
    <item>
      <title>时间复杂度和空间复杂度</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/03.%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Tue, 30 Mar 2021 16:25:40 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/03.%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description>算法（Algorithm）是指用来操作数据、解决程序问题的一组方法。对于同一个问题，使用不同的算法，也许最终得到的结果是一样的，但在过程中消</description>
    </item>
    
    <item>
      <title>二分查找</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/07.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/07.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
      <description>旋转数组的查找 33. 搜索旋转排序数组 - 力扣（LeetCode） (leetcode-cn.com) 区间查找 327. 区间和的个数 - 力扣（LeetCode） (leetcode-cn.com) 逆序数 剑指 Offer 51. 数组中的逆序对 -</description>
    </item>
    
    <item>
      <title>二叉树</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/05.%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/05.%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>二叉树转链表 114. 二叉树展开为链表 - 力扣（LeetCode） (leetcode-cn.com) 路径之和 113. 路径总和 II - 力扣（LeetCode） (leetcode-cn.com) 最近公共祖先 Loading Question&amp;hellip; - 力扣（LeetC</description>
    </item>
    
    <item>
      <title>动态规划</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/08.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/08.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>最小路径和 64. 最小路径和 - 力扣（LeetCode） (leetcode-cn.com) 最长上升子序列 300. 最长递增子序列 - 力扣（LeetCode） (leetcode-cn.com) 三角形 120. 三角形最小路径和 - 力扣（</description>
    </item>
    
    <item>
      <title>字符串</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/06.%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/06.%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>最长回文串 409. 最长回文串 - 力扣（LeetCode） (leetcode-cn.com) 5. 最长回文子串 - 力扣（LeetCode） (leetcode-cn.com) 重复DNA序列 187. 重复的DNA序列 - 力扣（Leet</description>
    </item>
    
    <item>
      <title>栈、队列、堆</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/02.%E6%A0%88%E9%98%9F%E5%88%97%E5%A0%86/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/02.%E6%A0%88%E9%98%9F%E5%88%97%E5%A0%86/</guid>
      <description>使用队列实现栈 225. 用队列实现栈 - 力扣（LeetCode） (leetcode-cn.com) 使用栈实现队列 232. 用栈实现队列 - 力扣（LeetCode） (leetcode-cn.com) 包含min函数的栈 面试题30</description>
    </item>
    
    <item>
      <title>贪心算法</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/03.%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/03.%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</guid>
      <description>分糖果 575. 分糖果 - 力扣（LeetCode） (leetcode-cn.com) 跳跃游戏1 2 55. 跳跃游戏 - 力扣（LeetCode） (leetcode-cn.com) 最优加油方法 871. 最低加油次数 - 力扣（LeetCod</description>
    </item>
    
    <item>
      <title>递归、回溯、分治</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/04.%E9%80%92%E5%BD%92%E5%9B%9E%E6%BA%AF%E5%88%86%E6%B2%BB/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/04.%E9%80%92%E5%BD%92%E5%9B%9E%E6%BA%AF%E5%88%86%E6%B2%BB/</guid>
      <description>n皇后 51. N 皇后 - 力扣（LeetCode） (leetcode-cn.com) 生成括号 22. 括号生成 - 力扣（LeetCode） (leetcode-cn.com) 求子集1 2 78. 子集 - 力扣（LeetCode） (leetcode-cn.com) 组合数之</description>
    </item>
    
    <item>
      <title>链表</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/01.%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/01.%E9%93%BE%E8%A1%A8/</guid>
      <description>链表逆序 剑指 Offer 24. 反转链表 - 力扣（LeetCode） (leetcode-cn.com) 链表求交点 面试题 02.07. 链表相交 - 力扣（LeetCode） (leetcode-cn.com) 链表求环 142. 环形链表 II - 力扣（Lee</description>
    </item>
    
    <item>
      <title>11-20</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/2.11-20/</link>
      <pubDate>Mon, 29 Mar 2021 08:56:23 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/2.11-20/</guid>
      <description>11.旋转数组最小的数字（看） 剑指 Offer 11. 旋转数组的最小数字 - 力扣（LeetCode） (leetcode-cn.com) 解法一 二分查找 这题目主要还是考理解，下面简单介绍一下原理</description>
    </item>
    
    <item>
      <title>21-30</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/3.21-30/</link>
      <pubDate>Mon, 29 Mar 2021 08:56:23 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/3.21-30/</guid>
      <description>21.调整数组顺序使奇数位于偶数前面 剑指 Offer 21. 调整数组顺序使奇数位于偶数前面 - 力扣（LeetCode） (leetcode-cn.com) 哈哈，居然做出来了，这题其实最简单的方</description>
    </item>
    
    <item>
      <title>3-10</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/1.3-10/</link>
      <pubDate>Mon, 29 Mar 2021 08:56:23 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/1.3-10/</guid>
      <description>前面那个CMU硕士100题大概知道了大致的算法和套路，目前还没时间去完善，下面的这个剑指offer我打算每道题都认真总结一下。。 题目链接：《</description>
    </item>
    
    <item>
      <title>31-40</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/4.31-40/</link>
      <pubDate>Mon, 29 Mar 2021 08:56:23 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/4.31-40/</guid>
      <description>31.栈的压入，弹出序列 剑指 Offer 31. 栈的压入、弹出序列 - 力扣（LeetCode） (leetcode-cn.com) 太难了，这题连思路都没有。。。只能看大佬的题解了呜呜呜 解法一：</description>
    </item>
    
    <item>
      <title>41-50</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/5.41-50/</link>
      <pubDate>Mon, 29 Mar 2021 08:56:23 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/5.41-50/</guid>
      <description>41.数据流中的中位数 剑指 Offer 41. 数据流中的中位数 - 力扣（LeetCode） (leetcode-cn.com) 这题先暂时跳过，后续再来研究一下 42.连续子数组的最大和 剑指 Offer 42. 连</description>
    </item>
    
    <item>
      <title>51-60</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/6.51-60/</link>
      <pubDate>Mon, 29 Mar 2021 08:56:23 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/6.51-60/</guid>
      <description>51.数组中的逆序对 剑指 Offer 51. 数组中的逆序对 - 力扣（LeetCode） (leetcode-cn.com) 这困难题先跳过吧，实在是把我刷累了 52.两个链表的第一个公共节点、 剑指</description>
    </item>
    
    <item>
      <title>61-70</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/7.61-70/</link>
      <pubDate>Mon, 29 Mar 2021 08:56:23 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/7.61-70/</guid>
      <description>61.扑克牌中的顺子 剑指 Offer 61. 扑克牌中的顺子 - 力扣（LeetCode） (leetcode-cn.com) 没看懂这题啥意思。。。。我怎么这么菜啊 解法一：集合Set+遍历 首先我们</description>
    </item>
    
    <item>
      <title>MySQL底层</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/9.mysql%E5%BA%95%E5%B1%82/</link>
      <pubDate>Mon, 29 Mar 2021 08:33:41 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/9.mysql%E5%BA%95%E5%B1%82/</guid>
      <description>下图是MySQL底层的一个简单的概括图 日志部分 主要就是这部分了，下面简单介绍一下mysql的三种日志 三种日志 bin log 主要记录所有数据库表结构变更</description>
    </item>
    
    <item>
      <title>福州蓝鲨信息技术（一面）</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/01.3%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/03.%E7%A6%8F%E5%B7%9E%E8%93%9D%E9%B2%A8%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E4%B8%80%E9%9D%A2/</link>
      <pubDate>Sat, 27 Mar 2021 15:45:53 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/01.3%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/03.%E7%A6%8F%E5%B7%9E%E8%93%9D%E9%B2%A8%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E4%B8%80%E9%9D%A2/</guid>
      <description>这家公司详细信息我还没有太多了解，搞得面试官问我，我答不出来（下次面试前得先摸清楚详细信息） 数组和切片的区别 数组不可变，切片可变数据结构 | 面</description>
    </item>
    
    <item>
      <title>案例演示</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/04.%E6%A1%88%E4%BE%8B%E6%BC%94%E7%A4%BA/01.%E6%A1%88%E4%BE%8B%E6%BC%94%E7%A4%BA/</link>
      <pubDate>Sat, 27 Mar 2021 15:04:09 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/04.%E6%A1%88%E4%BE%8B%E6%BC%94%E7%A4%BA/01.%E6%A1%88%E4%BE%8B%E6%BC%94%E7%A4%BA/</guid>
      <description>案例演示 本节内容根据官方文档的 教程 编写。 在线demo 案例代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40</description>
    </item>
    
    <item>
      <title>面试问题</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/03.%E4%B8%AD%E9%97%B4%E4%BB%B6/1.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 27 Mar 2021 14:09:54 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/03.%E4%B8%AD%E9%97%B4%E4%BB%B6/1.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</guid>
      <description>基本概念 说白了就是把请求的信息都放入一个队列，然后多台服务器从这个消息队列中获取所需要的的信息 常见的消息队列有那些 有如老牌的ActiveMQ</description>
    </item>
    
    <item>
      <title>其他</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/9.%E5%85%B6%E4%BB%96/</link>
      <pubDate>Sat, 27 Mar 2021 09:03:04 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/9.%E5%85%B6%E4%BB%96/</guid>
      <description>Go的基本命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // 用于打包编译代码 go build // 来移除当前源码包和关联源码包里面编译生成的文件 go clean // 格式</description>
    </item>
    
    <item>
      <title>面试问题</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/10.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 27 Mar 2021 08:50:34 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/10.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</guid>
      <description>基础相关 map怎么实现顺序读取 把map中的key通过sort包排序 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sort&amp;#34; ) func main() { var m = map[string]int{ &amp;#34;hello&amp;#34;:</description>
    </item>
    
    <item>
      <title>React哲学</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/11.react%E5%93%B2%E5%AD%A6/</link>
      <pubDate>Fri, 26 Mar 2021 17:56:40 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/11.react%E5%93%B2%E5%AD%A6/</guid>
      <description>11.React哲学（编写一个复杂组件的原则） React 最棒的部分之一是引导我们思考如何构建一个应用。在这篇文档中，我们将会通过 React 构建一个可搜索的产</description>
    </item>
    
    <item>
      <title>组合vs继承</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/10.%E7%BB%84%E5%90%88vs%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Fri, 26 Mar 2021 12:56:40 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/10.%E7%BB%84%E5%90%88vs%E7%BB%A7%E6%89%BF/</guid>
      <description>10.组合vs继承 React 有十分强大的组合模式。我们推荐使用组合而非继承来实现组件间的代码重用。 包含关系 (组件组合) 有些组件无法提前知晓它们子组件</description>
    </item>
    
    <item>
      <title>状态提升 (共享状态)</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/09.%E7%8A%B6%E6%80%81%E6%8F%90%E5%8D%87/</link>
      <pubDate>Fri, 26 Mar 2021 09:56:40 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/09.%E7%8A%B6%E6%80%81%E6%8F%90%E5%8D%87/</guid>
      <description>09. 状态提升 (共享状态) 通常，多个组件需要反映相同的变化数据，这时我们建议将共享状态提升到最近的共同父组件中去。 在 React 中，将多个组件中需要共享的</description>
    </item>
    
    <item>
      <title>事务</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/7.%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Fri, 26 Mar 2021 09:08:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/7.%E4%BA%8B%E5%8A%A1/</guid>
      <description>spring事务传播 为什么要有事务传播呢？默认情况下，spring是使用aop来实现事务的，我们只需要在方法上面加上 @Transactional 注解就可以了，但是这个</description>
    </item>
    
    <item>
      <title>循环依赖</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/6.%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/</link>
      <pubDate>Fri, 26 Mar 2021 08:49:54 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/6.%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/</guid>
      <description>先说一下什么是循环依赖，循环依赖就是A引用了对象B，但是B对象又引用了A，如下图所示 springIOC就是我们不自己创建对象，而是使用spr</description>
    </item>
    
    <item>
      <title>《React》笔记</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/25.react%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 25 Mar 2021 19:50:12 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/25.react%E7%AC%94%E8%AE%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>高级指引</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/02.%E9%AB%98%E7%BA%A7%E6%8C%87%E5%BC%95/01.%E9%AB%98%E7%BA%A7%E6%8C%87%E5%BC%95/</link>
      <pubDate>Thu, 25 Mar 2021 19:46:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/02.%E9%AB%98%E7%BA%A7%E6%8C%87%E5%BC%95/01.%E9%AB%98%E7%BA%A7%E6%8C%87%E5%BC%95/</guid>
      <description>01.高级指引</description>
    </item>
    
    <item>
      <title>面试问题</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/5.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 25 Mar 2021 16:40:09 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/5.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</guid>
      <description>基础 什么是 Spring 框架? 我们一般说 Spring 框架指的都是 Spring Framework，它是很多模块的集合，使用这些模块可以很方便地协助我们进行开发。这些模块是：核</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/01.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/03.docker/</link>
      <pubDate>Thu, 25 Mar 2021 16:10:58 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/01.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/03.docker/</guid>
      <description>docker的底层原理 Docker 采用了 C/S 架构，包括客户端和服务端。Docker 守护进程 （ Daemon ）作为服务端接受来自客户端的请求，并处理这些请求（创建、运</description>
    </item>
    
    <item>
      <title>面试问题</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/04.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 25 Mar 2021 15:56:50 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/04.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</guid>
      <description>设计模式的6大原则？ 1、开闭原则（Open Close Principle） 开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修</description>
    </item>
    
    <item>
      <title>Linux面试</title>
      <link>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/02.%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/02.linux%E9%9D%A2%E8%AF%95/</link>
      <pubDate>Thu, 25 Mar 2021 09:25:39 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/02.%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/02.linux%E9%9D%A2%E8%AF%95/</guid>
      <description>不知道哪里抄来的 绝对路径用什么符号表示？当前目录、上层目录用什么表示？ 主目录用什么表示? 切换目录用什么命令？ 绝对路径： 如/etc/init.</description>
    </item>
    
    <item>
      <title>世界500强的智力题</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/01.%E6%99%BA%E5%8A%9B%E9%A2%98/01.%E4%B8%96%E7%95%8C500%E5%BC%BA%E7%9A%84%E6%99%BA%E5%8A%9B%E9%A2%98/</link>
      <pubDate>Thu, 25 Mar 2021 09:22:51 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/01.%E6%99%BA%E5%8A%9B%E9%A2%98/01.%E4%B8%96%E7%95%8C500%E5%BC%BA%E7%9A%84%E6%99%BA%E5%8A%9B%E9%A2%98/</guid>
      <description>工人分金条 分蛋糕 过桥问题 黑白帽子 首先就是第一次如果都是白色，那么自己肯定是黑色的。但是没有声音，所以就可以肯定至少有两顶黑帽子，如果有个人发</description>
    </item>
    
    <item>
      <title>位运算</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/09.%E4%BD%8D%E8%BF%90%E7%AE%97/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/09.%E4%BD%8D%E8%BF%90%E7%AE%97/</guid>
      <description>位运算的常用技巧 位运算是算法题里比较特殊的一种类型，它们利用二进制位运算的特性进行一些奇妙的优化 和计算。常用的位运算符号包括：“∧”按位异或</description>
    </item>
    
    <item>
      <title>分治法解题</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/07.%E5%88%86%E6%B2%BB%E6%B3%95%E8%A7%A3%E9%A2%98/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/07.%E5%88%86%E6%B2%BB%E6%B3%95%E8%A7%A3%E9%A2%98/</guid>
      <description>解释 顾名思义，分治问题由“分”（divide）和“治”（conquer）两部分组成，通过把原问题分为子 问题，再将子问题进行处理合并，从而实现</description>
    </item>
    
    <item>
      <title>图</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/14.%E5%9B%BE/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/14.%E5%9B%BE/</guid>
      <description>基本概念 图通常分为有向（directed）或无向（undirected），有 循环（cyclic）或无循环（acyclic），所有节点相连（c</description>
    </item>
    
    <item>
      <title>字符串</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/11.%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/11.%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>基本概念 字串 是在字符串中，取出一块（连续的），如：pik, ach, kac等 子序列 指的是从字符串中，顺序取出字符，但是可以不连续：如：pau, kch, ic</description>
    </item>
    
    <item>
      <title>数学问题</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/08.%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/08.%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/</guid>
      <description>这里主要是考一些数学概念之类的，这里我简单分分类 公倍数与公因数 利用辗转相除法，我们可以很方便地求得两个数的最大公因数（greatest common di</description>
    </item>
    
    <item>
      <title>数据结构</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/10.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/10.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>数组 找到所有数组中消失的数字 这题目想法可以借鉴一下，就是我们让数组作为数组的下标，然后根据当前数字的正负来判断数字是否出现。 1 2 3 4 5 6 7 8</description>
    </item>
    
    <item>
      <title>更加复杂的数据结构</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/15.%E6%9B%B4%E5%8A%A0%E5%A4%8D%E6%9D%82%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/15.%E6%9B%B4%E5%8A%A0%E5%A4%8D%E6%9D%82%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>并查集 复合数据结构</description>
    </item>
    
    <item>
      <title>树</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/13.%E6%A0%91/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/13.%E6%A0%91/</guid>
      <description>树的递归 二叉树的最大深度 104. 二叉树的最大深度 - 力扣（LeetCode） (leetcode-cn.com) 终于没看题解做对了一个，太难了，不过这题目比较简单，所以没啥炫耀的，害</description>
    </item>
    
    <item>
      <title>链表</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/12.%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/12.%E9%93%BE%E8%A1%A8/</guid>
      <description>链表的基本操作 翻转链表 206. 反转链表 - 力扣（LeetCode） (leetcode-cn.com) 有递归法和非递归法这两种，先说一下递归法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</description>
    </item>
    
    <item>
      <title>二分查找</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/03.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/03.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
      <description>解释 二分查找也常被称为二分法或者折半查找，每次查找时通过将待查找区间分成两部分并只取 一部分继续查找，将查找的复杂度大大减少。对于一个长度为 O(n)</description>
    </item>
    
    <item>
      <title>动态规划</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/06.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/06.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>算法解释 这里我们引用一下维基百科的描述：“动态规划（Dynamic Programming, DP）在查找有很多 重叠子问题的情况的最优解时有效。它将问题重新组合成子问</description>
    </item>
    
    <item>
      <title>双指针法</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/02.%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/02.%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95/</guid>
      <description>算法解释 双指针主要用于遍历数组，两个指针指向不同的元素，从而协同完成任务。也可以延伸到多个数组的多个指针。 若两个指针指向同一数组，遍历方向相</description>
    </item>
    
    <item>
      <title>各种排序</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/04.%E5%90%84%E7%A7%8D%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/04.%E5%90%84%E7%A7%8D%E6%8E%92%E5%BA%8F/</guid>
      <description>常用的排序算法 以下是一些最基本的排序算法。虽然在 C++ 里可以通过 std::sort() 快速排序，而且刷题 时很少需要自己手写排序算法，但是熟习各种排序算法可以加深自己</description>
    </item>
    
    <item>
      <title>各种搜索</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/05.%E5%90%84%E7%A7%8D%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/05.%E5%90%84%E7%A7%8D%E6%90%9C%E7%B4%A2/</guid>
      <description>解释 深度优先搜索和广度优先搜索是两种最常见的优先搜索方法，它们被广泛地运用在图和树等 结构中进行搜索。 深度优先搜索 深度优先搜索（depth-f</description>
    </item>
    
    <item>
      <title>贪心算法</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/01.%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/01.%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</guid>
      <description>算法解释 顾名思义，贪心算法或贪心思想采用贪心的策略，保证每次操作都是局部最优的，从而使最 后得到的结果是全局最优的。 举一个最简单的例子：小明和</description>
    </item>
    
    <item>
      <title>JSX简介</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/01.jsx%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 24 Mar 2021 17:56:40 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/01.jsx%E7%AE%80%E4%BB%8B/</guid>
      <description>01. JSX简介 什么是JSX？ 1 const element = &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;; 以类似模板语法的方式描述UI的一种语法。它是JS的语法糖，本质上也是JS。可以在其中使用变量或表达式、</description>
    </item>
    
    <item>
      <title>State&amp;生命周期</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/04.state%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Wed, 24 Mar 2021 17:56:40 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/04.state%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>04. State &amp;amp; 生命周期 State 与 props 类似，但是 state 是私有的，并且完全受控于当前组件. State类似于vue中的data选项 将函数组件转换成 class 组件 在没有useS</description>
    </item>
    
    <item>
      <title>事件处理</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/05.%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</link>
      <pubDate>Wed, 24 Mar 2021 17:56:40 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/05.%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</guid>
      <description>05. 事件处理 与传统HTML绑定事件的区别 传统的 HTML： 1 2 3 &amp;lt;button onclick=&amp;#34;activateLasers()&amp;#34;&amp;gt; Activate Lasers &amp;lt;/button&amp;gt; 在 React 中略微不同： 1 2 3 4 // 1.事件名为小驼峰； 2.传入函数以大括号包裹</description>
    </item>
    
    <item>
      <title>元素渲染</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/02.%E5%85%83%E7%B4%A0%E6%B8%B2%E6%9F%93/</link>
      <pubDate>Wed, 24 Mar 2021 17:56:40 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/02.%E5%85%83%E7%B4%A0%E6%B8%B2%E6%9F%93/</guid>
      <description>02. 元素渲染 元素是构成 React 应用的最小砖块，描述了你在屏幕上想看到的内容。 1 const element = &amp;lt;h1&amp;gt;Hello, world&amp;lt;/h1&amp;gt;; 与浏览器的 DOM 元素不同，React 元素是创建开销极小的普通对象</description>
    </item>
    
    <item>
      <title>列表&amp;Key</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/07.%E5%88%97%E8%A1%A8key/</link>
      <pubDate>Wed, 24 Mar 2021 17:56:40 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/07.%E5%88%97%E8%A1%A8key/</guid>
      <description>07. 列表 &amp;amp; Key 如下代码，我们使用 map() 函数让数组中的每一项变双倍，然后我们得到了一个新的列表 doubled 并打印出来： 1 2 3 const numbers = [1, 2, 3, 4, 5]; const doubled = numbers.map((number) =&amp;gt; number * 2); console.log(doubled); 在</description>
    </item>
    
    <item>
      <title>条件渲染</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/06.%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/</link>
      <pubDate>Wed, 24 Mar 2021 17:56:40 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/06.%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/</guid>
      <description>06. 条件渲染 React 中的条件渲染和 JavaScript 中的一样，使用 JavaScript 运算符 if 或者条件运算符去创建元素来表现当前的状态，然后让 React 根据它们来更新 UI。 观察这两个组件: 1</description>
    </item>
    
    <item>
      <title>组件&amp;Props</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/03.%E7%BB%84%E4%BB%B6props/</link>
      <pubDate>Wed, 24 Mar 2021 17:56:40 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/03.%E7%BB%84%E4%BB%B6props/</guid>
      <description>03. 组件 &amp;amp; Props 函数组件与 class 组件 1.函数组件 1 2 3 function Welcome(props){ return &amp;lt;h1&amp;gt;Hello, {props.name}&amp;lt;/h1&amp;gt; } 该函数是一个有效的React组件。接收唯一带有数据的props参数，并返回一个Rea</description>
    </item>
    
    <item>
      <title>表单</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/08.%E8%A1%A8%E5%8D%95/</link>
      <pubDate>Wed, 24 Mar 2021 17:56:40 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/08.%E8%A1%A8%E5%8D%95/</guid>
      <description>08. 表单 受控组件（双向数据绑定） 在 HTML 中，表单元素（如&amp;lt;input&amp;gt;、 &amp;lt;textarea&amp;gt; 和 &amp;lt;select&amp;gt;）通常自己维护 state，并根</description>
    </item>
    
    <item>
      <title>其他</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E5%85%B6%E4%BB%96/</link>
      <pubDate>Tue, 23 Mar 2021 22:38:16 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E5%85%B6%E4%BB%96/</guid>
      <description>操作系统相关 冯诺伊曼体系 该思想约定了用二进制进行计算和存储，还定义计算机基本结构为 5 个部分，分别是中央处理器（CPU）、内存、输入设备、输出</description>
    </item>
    
    <item>
      <title>NGINX</title>
      <link>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/01.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/02.nginx/</link>
      <pubDate>Tue, 23 Mar 2021 21:23:26 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/01.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/02.nginx/</guid>
      <description>这里同样直接整理面试题 同学问的一些问题 NGINX的优势 可以热部署 支持高并发连接 内存消耗低 处理响应快 可靠性高 NGINX 负载均衡算法 轮询 （默认） 每个请求</description>
    </item>
    
    <item>
      <title>springSecurity</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/4.springsecurity/</link>
      <pubDate>Tue, 23 Mar 2021 21:14:49 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/4.springsecurity/</guid>
      <description>SpringSecurity 采用的是责任链的设计模式，它有一条很长的过滤器链。现在对这条过滤器链的各个进行说明: WebAsyncManagerIntegrationF</description>
    </item>
    
    <item>
      <title>面试题</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/02.mybatis/01.%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Tue, 23 Mar 2021 21:00:12 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/02.mybatis/01.%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>因为没找到好的项目结构，所以这里就先说面试题吧 同学的一次面试 mybatis的优缺点 与JDBC相比，减少了50%以上的代码量 MyBatis是最</description>
    </item>
    
    <item>
      <title>面试题</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/11.%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Tue, 23 Mar 2021 19:37:14 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/11.%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>同学的一次面试 内存溢出的两种问题及原因 java.lang.OutOfMemoryError 方法区主要存储类的元信息，实现在元数据区。当JVM发现元数据区没有足够的空间分配给加载的类时，抛出该</description>
    </item>
    
    <item>
      <title>spring MVC</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/3.spring-mvc/</link>
      <pubDate>Tue, 23 Mar 2021 18:57:30 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/3.spring-mvc/</guid>
      <description>说说自己对于 spring-mvc 了解 谈到这个问题，我们不得不提提之前 Model1 和 Model2 这两个没有 Spring MVC 的时代。 Model1 时代 : 很多学 Java 后端比较晚的朋友可能并没有接触过 Model1 模式下的 JavaWeb 应</description>
    </item>
    
    <item>
      <title>AOP</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/2.aop/</link>
      <pubDate>Tue, 23 Mar 2021 17:35:09 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/2.aop/</guid>
      <description>AOP(Aspect-Oriented Programming), 即 面向切面编程, 它与 OOP( Object-Oriented Programming, 面向对象编程) 相辅相成, 提供了与 OOP 不同的抽象软件结构的视角. 在 AOP 中, 我们以类(class)作为我们的基本单元,</description>
    </item>
    
    <item>
      <title>IOC</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/1.ioc/</link>
      <pubDate>Tue, 23 Mar 2021 17:35:09 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/1.ioc/</guid>
      <description>IoC全称Inversion of Control，直译为控制反转 它不是什么技术，而是一种设计思想。在spring中，IOC就意味着我们把设计好的</description>
    </item>
    
    <item>
      <title>高频面试题总结</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/6.%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 22 Mar 2021 20:16:49 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/6.%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</guid>
      <description>不知道从哪找的 浏览器禁用 Cookie怎么保存状态 此时无法使用 Cookie 来保存用户信息，只能使用 Session。除此之外，不能再将 Session ID 存放到 Cookie 中，而是</description>
    </item>
    
    <item>
      <title>高频面试题</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/8.%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Mon, 22 Mar 2021 16:12:20 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/8.%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>不知道从哪里抄的 如何查看表格定义的所有索引 SHOW INDEX FROM &amp;lt;tablename&amp;gt;; LIKE 声明中的％和 _ 是什么意思？ ％对应于 0 个或更多字符，_只是 LIKE 语句中的一个字符。 如何在 Unix 和 MySQL</description>
    </item>
    
    <item>
      <title>指针问题</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/03.cc&#43;&#43;%E8%AF%AD%E8%A8%80/01.%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 22 Mar 2021 14:00:08 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/03.cc&#43;&#43;%E8%AF%AD%E8%A8%80/01.%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98/</guid>
      <description>细说指针 让你不再害怕指针——C指针详解(经典,非常详细)_程序老兵的博客-CSDN博客_c指针详解经典非常详细 1 2 3 4 5 6 7 8 9 int p; //这是</description>
    </item>
    
    <item>
      <title>第一次面试</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/01.3%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/01.%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95/</link>
      <pubDate>Mon, 22 Mar 2021 10:43:52 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/01.3%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/01.%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95/</guid>
      <description>Vue原理 实例化过程 初始化生命周期，初始化事件，初始化渲染，触发执行beforeCreate生命周期方法，初始化data/props数据监听</description>
    </item>
    
    <item>
      <title>第二次面试</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/01.3%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/02.%E7%AC%AC%E4%BA%8C%E6%AC%A1%E9%9D%A2%E8%AF%95/</link>
      <pubDate>Mon, 22 Mar 2021 10:43:52 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/01.3%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/02.%E7%AC%AC%E4%BA%8C%E6%AC%A1%E9%9D%A2%E8%AF%95/</guid>
      <description>go的几个web框架 beego，iris，gin，echo，revel 为什么Echo框架查找速度快 基于 radix tree ，Echo 的路由查询速度非常快。路</description>
    </item>
    
    <item>
      <title>创建型</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01.%E5%88%9B%E5%BB%BA%E5%9E%8B/</link>
      <pubDate>Sun, 21 Mar 2021 20:42:24 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01.%E5%88%9B%E5%BB%BA%E5%9E%8B/</guid>
      <description>创建型模式关注点是如何创建对象，其核心思想是要把对象的创建和使用相分离，这样使得两者能相对独立地变换。创建型模式包括： 工厂方法：Factor</description>
    </item>
    
    <item>
      <title>结构性</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02.%E7%BB%93%E6%9E%84%E5%9E%8B/</link>
      <pubDate>Sun, 21 Mar 2021 20:42:24 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02.%E7%BB%93%E6%9E%84%E5%9E%8B/</guid>
      <description>结构型模式主要涉及如何组合各种对象以便获得更好、更灵活的结构。虽然面向对象的继承机制提供了最基本的子类扩展父类的功能，但结构型模式不仅仅简单</description>
    </item>
    
    <item>
      <title>行为型</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/03.%E8%A1%8C%E4%B8%BA%E5%9E%8B/</link>
      <pubDate>Sun, 21 Mar 2021 20:42:24 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/03.%E8%A1%8C%E4%B8%BA%E5%9E%8B/</guid>
      <description>行为型模式主要涉及算法和对象间的职责分配。通过使用对象组合，行为型模式可以描述一组对象应该如何协作来完成一个整体任务。 行为型模式有： 责任链 命</description>
    </item>
    
    <item>
      <title>分布式和备份</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/7.%E5%88%86%E5%B8%83%E5%BC%8F%E5%92%8C%E5%A4%87%E4%BB%BD/</link>
      <pubDate>Sun, 21 Mar 2021 19:43:11 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/7.%E5%88%86%E5%B8%83%E5%BC%8F%E5%92%8C%E5%A4%87%E4%BB%BD/</guid>
      <description>主从复制 将主数据库中的DDL和DML操作通过二进制日志（BINLOG）传输到从数据库上，然后将这些日志重新执行（重做）；从而使得从数据库的数</description>
    </item>
    
    <item>
      <title>排序算法</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/01.%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 21 Mar 2021 19:07:54 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/01.%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>插入排序 直接插入排序 插入排序是最简单的，我们不断比较插入数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // 插入排序 // 时间复杂度 n^2 // 因为我们这里</description>
    </item>
    
    <item>
      <title>查找算法</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/02.%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 21 Mar 2021 19:07:54 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/02.%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</guid>
      <description>线性表查找 顺序查找 顺序查找(Sequential Search) 的查找过程为：从表的一端开始， 依次将记录的关键字和给定值进行比较，若某个记录的关键字和给定</description>
    </item>
    
    <item>
      <title>串、数组、广义表</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E4%B8%B2%E6%95%B0%E7%BB%84%E5%B9%BF%E4%B9%89%E8%A1%A8/</link>
      <pubDate>Sun, 21 Mar 2021 19:05:37 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E4%B8%B2%E6%95%B0%E7%BB%84%E5%B9%BF%E4%B9%89%E8%A1%A8/</guid>
      <description>字符串匹配算法 1.BF算法 BF算法是一个古典的算法，算法主要思想如下图所示 按顺序一位一位进行比较，如果有一位不匹配，那么原字符串+1 2.KM</description>
    </item>
    
    <item>
      <title>图</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%9B%BE/</link>
      <pubDate>Sun, 21 Mar 2021 19:05:37 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%9B%BE/</guid>
      <description>基本概念 图包括有向图和无向图，有向图就是从一个点到另一个点是有方向的，无向图就是点和点之间没有方向。&amp;lt;v,w&amp;gt; 是有序的（有向图）</description>
    </item>
    
    <item>
      <title>数和二叉树</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.%E6%95%B0%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Sun, 21 Mar 2021 19:05:37 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.%E6%95%B0%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>二叉树的遍历 1.先序遍历：根结点 &amp;mdash;&amp;gt; 左子树 &amp;mdash;&amp;gt; 右子树 2.中序遍历：左子树&amp;mdash;&amp;gt; 根结点 &amp;mdash;&amp;gt; 右子树 3.后序遍历：左子树 &amp;mdash;&amp;gt; 右子树 &amp;mdash;&amp;gt; 根结点</description>
    </item>
    
    <item>
      <title>栈和队列</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</link>
      <pubDate>Sun, 21 Mar 2021 19:05:37 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</guid>
      <description>堆和栈的区别 栈是一种受限的线性表，如下图所示 堆是二叉树的结构，堆是一种常用的树形结构，是一种特殊的完全二叉树，当且仅当满足 所有节点的值总是不</description>
    </item>
    
    <item>
      <title>线性表</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%BA%BF%E6%80%A7%E8%A1%A8/</link>
      <pubDate>Sun, 21 Mar 2021 19:05:37 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%BA%BF%E6%80%A7%E8%A1%A8/</guid>
      <description>链表 链表分为单链表，循环链表，双向链表，二叉链表，十字链表，邻接表，邻接多重表 首元节点，头节点，头指针 头结点 在链表的第一个节点之前会额外增设</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/01.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/01.git/</link>
      <pubDate>Sat, 20 Mar 2021 15:51:30 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/01.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/01.git/</guid>
      <description>常用命令 git init 初始化git仓库 git clone 克隆git仓库 git remote add origin ***.git 添加一个新的远程残酷 git push -u origin master 本地的 master 分支推送到 origin 主机的 master 分支。 推送到远程仓库的de</description>
    </item>
    
    <item>
      <title>Linux基础</title>
      <link>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/02.%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/01.linux%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 20 Mar 2021 15:51:30 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/02.%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/01.linux%E5%9F%BA%E7%A1%80/</guid>
      <description>shell脚本运算符 算数运算符 运算符 说明 举例 + 加法 expr $a + $b 结果为 30。 - 减法 expr $a - $b 结果为 -10。 * 乘法 expr $a \* $b 结果为 200。 / 除法 expr $b / $a</description>
    </item>
    
    <item>
      <title>IO管理</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.io%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.io%E7%AE%A1%E7%90%86/</guid>
      <description>Linux IO模式 linux有下面五种网络模式 阻塞 I/O（blocking IO） 默认socket就是阻塞IO，当用户进程调用了recvfrom这个系</description>
    </item>
    
    <item>
      <title>互斥和同步</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.%E4%BA%92%E6%96%A5%E5%92%8C%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.%E4%BA%92%E6%96%A5%E5%92%8C%E5%90%8C%E6%AD%A5/</guid>
      <description>CPU cache结构和缓存一致性（MESI协议） 在多核CPU中，内存中的数据会在多个核心中存在数据副本，某一个核心发生修改操作，就产生了数据不一</description>
    </item>
    
    <item>
      <title>体系结构</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</guid>
      <description>七层模型 五层模型 网络协议三要素 语法：即数据与控制信息的结构或格式。 语义：即需要发出何种控制信息，完成何种动作以及做出何种响应。 同步：即事件实</description>
    </item>
    
    <item>
      <title>内存管理</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
      <description>基本概念 内存分页和内存分段 内存分页分为一个页号还有一个偏移量，我们通过页号查找页表，找出对应地址，然后加上偏移量就可以得到最终地址 内存分段的</description>
    </item>
    
    <item>
      <title>应用层(HTTP,SMTP)</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/5.%E5%BA%94%E7%94%A8%E5%B1%82httpsmtp/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/5.%E5%BA%94%E7%94%A8%E5%B1%82httpsmtp/</guid>
      <description>HTTP协议特点 HTTP和HTTPS的区别 端口不同：HTTP使用的是80端口，HTTPS使用443端口； HTTP认证机制，更加安全； HTTP</description>
    </item>
    
    <item>
      <title>死锁和饥饿</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.%E6%AD%BB%E9%94%81%E5%92%8C%E9%A5%A5%E9%A5%BF/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.%E6%AD%BB%E9%94%81%E5%92%8C%E9%A5%A5%E9%A5%BF/</guid>
      <description>基本概念 产生死锁的原因 根本原因 就是系统能够提供的资源个数比要求该资源的进程数要少 基本原因 资源竞争和进程推进顺序不合理 产生死锁必要条件 互斥 一个</description>
    </item>
    
    <item>
      <title>硬件层</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2.%E7%A1%AC%E4%BB%B6%E5%B1%82/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2.%E7%A1%AC%E4%BB%B6%E5%B1%82/</guid>
      <description>硬件层分为物理层和数据链路层 三种通讯方式 通信的三种基本方式：单工、半双工、双工 物理层几大特性 （1） 机械特性：指明接口所用接线器的形状和尺寸、</description>
    </item>
    
    <item>
      <title>网络层(IP,ICMP,ARP)</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/3.%E7%BD%91%E7%BB%9C%E5%B1%82ipicmparp/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/3.%E7%BD%91%E7%BB%9C%E5%B1%82ipicmparp/</guid>
      <description>ARP协议和ARP攻击 arp 协议的全称 arp协议： address resolution protocol , 地址解析协议 resolve : 解析的意思 ARP协议完成了IP地址与物理地址的映射。每一个主机都设有一</description>
    </item>
    
    <item>
      <title>运输层(TCP,UDP)</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/4.%E8%BF%90%E8%BE%93%E5%B1%82tcpudp/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/4.%E8%BF%90%E8%BE%93%E5%B1%82tcpudp/</guid>
      <description>TCP的三次握手 问题1 TCP可以建立两次握手嘛 不可以。有两个原因：首先，可能会出现已失效的连接请求报文段又传到了服务器端。 其次，两次握手无法</description>
    </item>
    
    <item>
      <title>进程和线程</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</guid>
      <description>基本概念 进程和线程的区别 进程：进程是系统进行资源分配和调度的一个独立单位，是系统中的并发执行的单位 线程：线程是进程的一个实体，也是 CPU 调度和分</description>
    </item>
    
    <item>
      <title>SQL语句及优化</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/6.sql%E8%AF%AD%E5%8F%A5%E5%8F%8A%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/6.sql%E8%AF%AD%E5%8F%A5%E5%8F%8A%E4%BC%98%E5%8C%96/</guid>
      <description>SQL语句分为哪几类 数据定义语言DDL（Data Ddefinition Language）CREATE，DROP，ALTER 主要为以上操作 即对逻辑结构等有操作的，</description>
    </item>
    
    <item>
      <title>事务和锁</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/4.%E4%BA%8B%E5%8A%A1%E5%92%8C%E9%94%81/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/4.%E4%BA%8B%E5%8A%A1%E5%92%8C%E9%94%81/</guid>
      <description>概念 事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行的结果必须使数据库从一种一致性状态变到另一种一致性状态。事务是逻</description>
    </item>
    
    <item>
      <title>分布式锁，过期策略，淘汰规则</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/5.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5%E6%B7%98%E6%B1%B0%E8%A7%84%E5%88%99/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/5.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5%E6%B7%98%E6%B1%B0%E8%A7%84%E5%88%99/</guid>
      <description>分布式锁 在日常情况下在进程或线程中我们可以使用 synchronized 、Lock 实现并发编程，但是我， 如何在分布式集群下使用呢？可以使用 Redisson ， Zookeeper ，Redis本身 分布</description>
    </item>
    
    <item>
      <title>原理</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/3.%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/3.%E5%8E%9F%E7%90%86/</guid>
      <description>为什么Redis速度那么快 基于内存实现 数据结构高效，底层多种数据结构支持不同的数据类型，比如HyperLogLog它连2个字节都不想浪费 提供</description>
    </item>
    
    <item>
      <title>常见问题</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/4.%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/4.%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>缓存雪崩 Redis中大批量key在同一时间同时失效导致所有请求都打到了MySQL。而MySQL扛不住导致大面积崩塌 解决方案 缓存数据的过期时间</description>
    </item>
    
    <item>
      <title>引擎</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/2.%E5%BC%95%E6%93%8E/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/2.%E5%BC%95%E6%93%8E/</guid>
      <description>常考的主要分为InnoDB，MyISAM 主要区别 InnoDB引擎的4大特性 插入缓冲（insert buffer) 二次写(double write) 自适应哈希索引(ah</description>
    </item>
    
    <item>
      <title>持久化</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/2.%E6%8C%81%E4%B9%85%E5%8C%96/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/2.%E6%8C%81%E4%B9%85%E5%8C%96/</guid>
      <description>包括 RDB 和 AOF 两种机制，下面分别进行说明 RDB RDB 持久化机制，是对 Redis 中的数据执行周期性的持久化。更适合做冷备。 优点： 压缩后的二进制文，适用于备份、全量</description>
    </item>
    
    <item>
      <title>数据库基础</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/1.%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/1.%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</guid>
      <description>数据库三大范式 第一范式（属性不可再分） 如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。 第二范式（每个非主属性</description>
    </item>
    
    <item>
      <title>数据类型</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/1.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/1.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>本文参考：硬核Redis总结，看这篇就够了！ (qq.com) 8大基本数据类型 String 适用于简单key-value存储、setnx key value实现分布式锁、计数器</description>
    </item>
    
    <item>
      <title>索引</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/3.%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/3.%E7%B4%A2%E5%BC%95/</guid>
      <description>概念 索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。 索引是一种数据结构。数</description>
    </item>
    
    <item>
      <title>视图，存储过程，函数，触发器</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/5.%E8%A7%86%E5%9B%BE%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%87%BD%E6%95%B0%E8%A7%A6%E5%8F%91%E5%99%A8/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/5.%E8%A7%86%E5%9B%BE%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%87%BD%E6%95%B0%E8%A7%A6%E5%8F%91%E5%99%A8/</guid>
      <description>什么是视图 所谓视图，本质上是一种虚拟表，在物理上是不存在的，其内容与真实的表相似，包含一系列带有名称的列和行数据。但是，视图并不在数据库中以</description>
    </item>
    
    <item>
      <title>集群和限流</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/6.%E9%9B%86%E7%BE%A4%E5%92%8C%E9%99%90%E6%B5%81/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/6.%E9%9B%86%E7%BE%A4%E5%92%8C%E9%99%90%E6%B5%81/</guid>
      <description>Redis有下面四种部署方式 模式 优点 缺点 单机版 架构简单，部署方便 机器故障、容量瓶颈、QPS瓶颈 主从复制 高可靠性，读写分离 故障恢复复杂，主库的</description>
    </item>
    
    <item>
      <title>IO NIO框架</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/5.io-nio%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/5.io-nio%E6%A1%86%E6%9E%B6/</guid>
      <description>这里主要涉及到IO多路复用 基本概念介绍 BIO 同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理</description>
    </item>
    
    <item>
      <title>java8特性</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/10.java8%E7%89%B9%E6%80%A7/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/10.java8%E7%89%B9%E6%80%A7/</guid>
      <description>java语言的特性 Lambda表达式和函数式接口 最简单的lambda表达式如下 1 Arrays.asList( &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;d&amp;#34; ).forEach( e -&amp;gt; System.out.println( e ) ); 当然，为了显式说明某个接口是函数式接口</description>
    </item>
    
    <item>
      <title>java基础</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/1.java%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/1.java%E5%9F%BA%E7%A1%80/</guid>
      <description>return和finally的执行顺序 finally语句在return语句执行之后return返回之前执行的，所以我们先执行return的语</description>
    </item>
    
    <item>
      <title>JVM模型</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/6.jvm%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/6.jvm%E6%A8%A1%E5%9E%8B/</guid>
      <description>JVM内存模型 这里主要还是会问一些Java的内存模型，1.8之前和之后的内存模型是不一样的 简单说一下每个部分是干嘛的吧 程序计数器 用于记录程序</description>
    </item>
    
    <item>
      <title>元编程</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/7.%E5%85%83%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/7.%E5%85%83%E7%BC%96%E7%A8%8B/</guid>
      <description>这里主要包括插件系统以及代码生成这两个部分，鉴于面试应该不会问这个问题，所以我就不写了</description>
    </item>
    
    <item>
      <title>内存管理</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/6.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/6.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
      <description>内存分配 程序中的数据和变量都会被分配到程序所在的虚拟内存中，内存空间包含两个重要区域：栈区（Stack）和堆区（Heap）。函数调用的参数、</description>
    </item>
    
    <item>
      <title>参数调优</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/9.%E5%8F%82%E6%95%B0%E8%B0%83%E4%BC%98/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/9.%E5%8F%82%E6%95%B0%E8%B0%83%E4%BC%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title>垃圾回收</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/8.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/8.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid>
      <description>判断对象是否是垃圾 引用计数算法：判断对象的引用数量 每引用一次就+1，当一个对象实例的某个引用超过了生命周期或者被设置为一个新值时，对象实例的</description>
    </item>
    
    <item>
      <title>常用关键字</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/4.%E5%B8%B8%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/4.%E5%B8%B8%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>for和range for循环的三种用法 for range用于遍历切片，数组或者map 几个用法 使用 for range a {} 遍历数组和切片，不关心索引和数据的情况； 使</description>
    </item>
    
    <item>
      <title>并发框架(JUC)</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/4.%E5%B9%B6%E5%8F%91%E6%A1%86%E6%9E%B6juc/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/4.%E5%B9%B6%E5%8F%91%E6%A1%86%E6%9E%B6juc/</guid>
      <description>并发框架，其实也叫 JUC 即 java.util.concurrent 包，分为（锁框架、原子类框架、同步器框架、集合框架、执行器框架） 线程创建方式 继承Thread类重写run方法 1 2 3 4</description>
    </item>
    
    <item>
      <title>并发编程</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/5.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/5.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</guid>
      <description>上下文context 这东西是用于控制并发的。下面是一个简单的例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38</description>
    </item>
    
    <item>
      <title>数据结构</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/2.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/2.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>数据类型 数据类型占用的字节数 整数 int 64位操作系统默认为int64,32位操作系统为int32,但是类型检查时时int int8 (byte 1字节) int16 (short 2字节)</description>
    </item>
    
    <item>
      <title>标准库</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/8.%E6%A0%87%E5%87%86%E5%BA%93/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/8.%E6%A0%87%E5%87%86%E5%BA%93/</guid>
      <description>JSON 序列化和反序列化 go的序列化大部分指的是把结构体转换为json数据，在序列化的时候要注意变量名必须要大写，小写字母开头的变量是不会被序列化</description>
    </item>
    
    <item>
      <title>类加载机制</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/7.%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/7.%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</guid>
      <description>类加载流程 只需要记住下面这5个阶段就行了 参考：JVM 基础 - Java 类加载机制 | Java 全栈知识体系 (pdai.tech) 下面简单介绍一下每个部分做了啥 加载 首先获取二进制流，</description>
    </item>
    
    <item>
      <title>编译原理</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/1.%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/1.%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</guid>
      <description>基本概念 抽象语法树 是源代码语法的结构的一种抽象表示，它用树状的方式表示编程语言的语法结构1。抽象语法树中的每一个节点都表示源代码中的一个元素</description>
    </item>
    
    <item>
      <title>语言基础</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/3.%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/3.%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</guid>
      <description>函数调用 这里面涉及的东西其实挺深的，所以等我后面又时间再去研究 Go 中函数传参仅有值传递一种方式； slice、map、channel都是引用类型</description>
    </item>
    
    <item>
      <title>集合框架</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/3.%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/3.%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</guid>
      <description>集合框架也可以叫容器。（集合是用于存储数据的容器） 常问的有下面几个 ArrayList LinkList HashSet TreeSet HashMap List(对付顺序的好帮手)： 存储的元素是有序的、可重复的。 Se</description>
    </item>
    
    <item>
      <title>面向对象</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>这个部分主要以面试题为主 京东面试题 是equals而不是equal，单词错了 类和对象 面向对象和面向过程的区别 面向过程 ：面向过程性能比面向对象高</description>
    </item>
    
    <item>
      <title>JS设计模式总结笔记</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/50.js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 27 Feb 2021 20:01:18 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/50.js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0/</guid>
      <description>JS设计模式总结笔记 开篇：前端工程师的成长论 能够决定一个前端工程师的本质的，不是那些瞬息万变的技术点，而是那些不变的东西。 所谓“不变的东西”</description>
    </item>
    
    <item>
      <title>Git命令思维导图</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E6%89%8B%E5%86%8C/06.git%E5%91%BD%E4%BB%A4%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</link>
      <pubDate>Wed, 18 Nov 2020 17:46:22 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E6%89%8B%E5%86%8C/06.git%E5%91%BD%E4%BB%A4%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Git分支-分支原理</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/20.git%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 18 Nov 2020 17:43:57 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/20.git%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E5%8E%9F%E7%90%86/</guid>
      <description>Git分支-分支原理 Git 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。 与许</description>
    </item>
    
    <item>
      <title>Git分支-变基</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/70.git%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA/</link>
      <pubDate>Wed, 18 Nov 2020 17:43:57 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/70.git%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA/</guid>
      <description>Git分支-变基 在 Git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase。 在本节中我们将学习什么是“变基”，怎样使用“变基”，</description>
    </item>
    
    <item>
      <title>Git分支-远程分支</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/60.git%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/</link>
      <pubDate>Wed, 18 Nov 2020 17:43:57 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/60.git%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/</guid>
      <description>Git分支-远程分支 远程引用是对远程仓库的引用（指针），包括分支、标签等等。 远程分支本质上也是一个指针，指向远程地址 查看远程引用列表与信息 1</description>
    </item>
    
    <item>
      <title>Git分支开发工作流</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/50.git%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C%E6%B5%81/</link>
      <pubDate>Wed, 18 Nov 2020 17:43:57 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/50.git%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid>
      <description>Git分支开发工作流 文档：Git分支开发工作流 长期分支 因为 Git 使用简单的三方合并，所以就算在一段较长的时间内，反复把一个分支合并入另一个分支，</description>
    </item>
    
    <item>
      <title>Git分支的新建与合并-分支操作</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/30.git%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6-%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 18 Nov 2020 17:43:57 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/30.git%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6-%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/</guid>
      <description>Git分支的新建与合并-分支操作 文档：Git 分支 - 分支的新建与合并 创建分支并切换 此时有一个需求需要在新的分支iss53上工作： 1 $ git checkout -b iss53 #</description>
    </item>
    
    <item>
      <title>Git分支管理-查看分支</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/40.git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86-%E6%9F%A5%E7%9C%8B%E5%88%86%E6%94%AF/</link>
      <pubDate>Wed, 18 Nov 2020 17:43:57 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/40.git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86-%E6%9F%A5%E7%9C%8B%E5%88%86%E6%94%AF/</guid>
      <description>Git分支管理-查看分支 查看分支 1 2 3 4 $ git branch iss53 * master # 带星号*表示当前所在分支 testing git branch 命令不只是可以创建与删除分支。 如果不加任何参数运行它，会</description>
    </item>
    
    <item>
      <title>Git变基合并</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E6%89%8B%E5%86%8C/03.git%E5%8F%98%E5%9F%BA%E5%90%88%E5%B9%B6/</link>
      <pubDate>Wed, 18 Nov 2020 17:43:57 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E6%89%8B%E5%86%8C/03.git%E5%8F%98%E5%9F%BA%E5%90%88%E5%B9%B6/</guid>
      <description>rebase分支合并 说明 以下 v2 是某个需求的开发分支， dev是总的开发分支，v2 是基于dev分支签出的。 当完成v2的开发后，需要把代码合并到d</description>
    </item>
    
    <item>
      <title>Git基础与命令</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/10.git%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 18 Nov 2020 17:43:57 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/10.git%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%91%BD%E4%BB%A4/</guid>
      <description>Git基础与命令 官方文档（中文）：https://git-scm.com/book/zh/v2 本文档是根据官方文档来编写的，以官方文档为准。</description>
    </item>
    
    <item>
      <title>Git工具-交互式暂存</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/90.git%E5%B7%A5%E5%85%B7-%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9A%82%E5%AD%98/</link>
      <pubDate>Wed, 18 Nov 2020 17:43:57 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/90.git%E5%B7%A5%E5%85%B7-%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9A%82%E5%AD%98/</guid>
      <description>Git工具-交互式暂存 本节中的几个交互式 Git 命令可以帮助你将文件的特定部分组合成提交。 当你在修改了大量文件后，希望这些改动能拆分为若干提交而不</description>
    </item>
    
    <item>
      <title>Git工具-查看修订版本</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/80.git%E5%B7%A5%E5%85%B7-%E6%9F%A5%E7%9C%8B%E4%BF%AE%E8%AE%A2%E7%89%88%E6%9C%AC/</link>
      <pubDate>Wed, 18 Nov 2020 17:43:57 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/80.git%E5%B7%A5%E5%85%B7-%E6%9F%A5%E7%9C%8B%E4%BF%AE%E8%AE%A2%E7%89%88%E6%9C%AC/</guid>
      <description>Git工具-查看修订版本 Git 能够以多种方式来指定单个提交、一组提交、或者一定范围内的提交。 了解它们并不是必需的，但是了解一下总没坏处。 修订版本</description>
    </item>
    
    <item>
      <title>Git工具-重写历史</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/100.git%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2/</link>
      <pubDate>Wed, 18 Nov 2020 17:43:57 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/100.git%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2/</guid>
      <description>Git 工具 - 重写历史 许多时候，在使用 Git 时，你可能想要修订提交历史。 Git 很棒的一点是它允许你在最后时刻做决定。 你可以在将暂存区内容提交前决定哪些文件</description>
    </item>
    
    <item>
      <title>Git工具-重置揭密</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/110.git%E5%B7%A5%E5%85%B7-%E9%87%8D%E7%BD%AE%E6%8F%AD%E5%AF%86/</link>
      <pubDate>Wed, 18 Nov 2020 17:43:57 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/110.git%E5%B7%A5%E5%85%B7-%E9%87%8D%E7%BD%AE%E6%8F%AD%E5%AF%86/</guid>
      <description>Git 工具 - 重置揭密 在继续了解更专业的工具前，我们先探讨一下 Git 的 reset 和 checkout 命令。 在初遇的 Git 命令中，这两个是最让人困惑的。 它们能做很多事情，所以看起来</description>
    </item>
    
    <item>
      <title>常用Git命令清单</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E6%89%8B%E5%86%8C/00.%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/</link>
      <pubDate>Wed, 18 Nov 2020 17:43:57 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/08.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E6%89%8B%E5%86%8C/00.%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/</guid>
      <description>常用Git命令清单 一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。 下面是我整理的常用 Git 命令清单</description>
    </item>
    
    <item>
      <title>《Git》学习笔记</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/33.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 18 Nov 2020 17:40:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/33.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2分钟规则</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/10.%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/01.2%E5%88%86%E9%92%9F%E8%A7%84%E5%88%99/</link>
      <pubDate>Mon, 09 Nov 2020 11:05:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/10.%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/01.2%E5%88%86%E9%92%9F%E8%A7%84%E5%88%99/</guid>
      <description>每当你发现很难开始执行某项任务时，可以试试将其缩减成2分钟的版本。 看一本书 → 看一页书 写一篇文章 → 写一句话 跑10公里 → 穿上跑鞋 做100次俯卧撑</description>
    </item>
    
    <item>
      <title>TypeScript笔记</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/35.typescript%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 08 Oct 2020 13:02:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/35.typescript%E7%AC%94%E8%AE%B0/</guid>
      <description>TypeScript 学习笔记 TypeScript 的类型校验是给程序员看的，在编译后不会存在TS代码。 类型注解 1 2 3 4 5 6 function fn(person: string):void{ // 参数类型是字符串，没有返回值 ///... } fn(&amp;#39;str&amp;#39;) // 如传递参数非</description>
    </item>
    
    <item>
      <title>CSS教程和技巧收藏</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/00.css%E6%95%99%E7%A8%8B%E5%92%8C%E6%8A%80%E5%B7%A7%E6%94%B6%E8%97%8F/</link>
      <pubDate>Tue, 11 Aug 2020 17:13:52 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/00.css%E6%95%99%E7%A8%8B%E5%92%8C%E6%8A%80%E5%B7%A7%E6%94%B6%E8%97%8F/</guid>
      <description>Flex 布局教程：语法篇 http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html CSS Grid 网格布局教程 http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html 只要一行代码，实现五种 CSS 经典布局 http://www.ruanyifeng.com/blog/2020/08/five-css-layouts-in-one-line.html 空间居中布局 不管容器的大小，项目总是占据中心点 并列式布局 多个项目并列</description>
    </item>
    
    <item>
      <title>Vuex</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/10.vuex/01.vuex/</link>
      <pubDate>Sat, 08 Aug 2020 10:38:33 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/10.vuex/01.vuex/</guid>
      <description>Vuex Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。 Vuex使用过程演示 以vue-cli3新创建出来的项目为例，演示Vuex的使用过程。 创建项目: 1</description>
    </item>
    
    <item>
      <title>反向拆解让人上瘾的套路，找回自律</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/05.%E5%BF%83%E6%83%85%E6%9D%82%E8%B4%A7/10.%E5%8F%8D%E5%90%91%E6%8B%86%E8%A7%A3%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84%E5%A5%97%E8%B7%AF%E6%89%BE%E5%9B%9E%E8%87%AA%E5%BE%8B/</link>
      <pubDate>Wed, 22 Jul 2020 13:05:49 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/05.%E5%BF%83%E6%83%85%E6%9D%82%E8%B4%A7/10.%E5%8F%8D%E5%90%91%E6%8B%86%E8%A7%A3%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84%E5%A5%97%E8%B7%AF%E6%89%BE%E5%9B%9E%E8%87%AA%E5%BE%8B/</guid>
      <description>反向拆解让人上瘾的套路，找回自律 当你打开手机准备学习或者查个资料的时候，很有可能不知不觉的就脱离的正规&amp;hellip; 某某app发来通知：x</description>
    </item>
    
    <item>
      <title>笔记方法</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/01.%E7%AC%94%E8%AE%B0%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 16 Jul 2020 11:00:55 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/01.%E7%AC%94%E8%AE%B0%E6%96%B9%E6%B3%95/</guid>
      <description>::: center 康奈尔笔记法 思维导图法 金三角笔记法 曼陀罗九宫格笔记法 记号记录法 六色笔记法 加工笔记法 整理笔记要点1-科学标记重点 整理笔记要点2-修改不涂改</description>
    </item>
    
    <item>
      <title>费曼学习法</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/00.%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95/</link>
      <pubDate>Thu, 16 Jul 2020 10:04:14 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/00.%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95/</guid>
      <description>费曼学习法，我很喜欢的一个学习方法，简单来说，就是：通过向别人清楚的解说某一件事或是写一篇浅显易懂的教程文章，来确认自己是否真正弄懂了这件事</description>
    </item>
    
    <item>
      <title>《JavaScript高级程序设计》笔记</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/05.javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 12 Jun 2020 12:39:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/05.javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/</guid>
      <description>《JavaScript高级程序设计》笔记 第1章 JavaScript简介 JavaScript诞生于1995年 一个完整的JavaScript由这</description>
    </item>
    
    <item>
      <title>搜索引擎使用技巧</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/10.%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Sun, 24 May 2020 11:44:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/10.%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
      <description>搜索引擎相信大家经常在使用，但是有时候想搜某个信息时却搜出来一大堆不相关的（百度：你们都在看我干什么？）。下面我们来介绍几种搜索技巧，可以提</description>
    </item>
    
    <item>
      <title>CSS-function汇总</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/60.css-function%E6%B1%87%E6%80%BB/</link>
      <pubDate>Tue, 12 May 2020 09:36:44 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/60.css-function%E6%B1%87%E6%80%BB/</guid>
      <description></description>
    </item>
    
    <item>
      <title>网站</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/06.%E6%94%B6%E8%97%8F%E5%A4%B9/01.%E7%BD%91%E7%AB%99/</link>
      <pubDate>Sun, 19 Apr 2020 11:33:04 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/06.%E6%94%B6%E8%97%8F%E5%A4%B9/01.%E7%BD%91%E7%AB%99/</guid>
      <description>个人收藏夹 大佬收藏夹 panjiachen 文档 MDN | MDN-JS标准内置对象 Web技术权威文档 现代JavaScript教程 以最新标准为基准的JS教程 ES5教程 阮一</description>
    </item>
    
    <item>
      <title>「css技巧」使用hover和attr()定制悬浮提示</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/50.css%E6%8A%80%E5%B7%A7%E4%BD%BF%E7%94%A8hover%E5%92%8Cattr%E5%AE%9A%E5%88%B6%E6%82%AC%E6%B5%AE%E6%8F%90%E7%A4%BA/</link>
      <pubDate>Sat, 18 Apr 2020 12:14:09 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/50.css%E6%8A%80%E5%B7%A7%E4%BD%BF%E7%94%A8hover%E5%92%8Cattr%E5%AE%9A%E5%88%B6%E6%82%AC%E6%B5%AE%E6%8F%90%E7%A4%BA/</guid>
      <description>「css技巧」使用hover和attr()定制悬浮提示-demo See the Pen 【CSS：行为】使用:hover和attr()定制悬浮提示 by xugaoyi (@xugaoyi) on CodePen.</description>
    </item>
    
    <item>
      <title>比typeof运算符更准确的类型判断</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/100.%E6%AF%94typeof%E8%BF%90%E7%AE%97%E7%AC%A6%E6%9B%B4%E5%87%86%E7%A1%AE%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/</link>
      <pubDate>Mon, 13 Apr 2020 15:56:54 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/100.%E6%AF%94typeof%E8%BF%90%E7%AE%97%E7%AC%A6%E6%9B%B4%E5%87%86%E7%A1%AE%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/</guid>
      <description>比typeof运算符更准确的类型判断 不同数据类型的Object.prototype.toString方法返回值如下。 数值：返回[object</description>
    </item>
    
    <item>
      <title>npm packageJson属性详解</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/10.npm-packagejson%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 08 Apr 2020 17:16:38 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/10.npm-packagejson%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3/</guid>
      <description>npm package.json属性详解 本文转自https://www.cnblogs.com/tzyy/p/5193811.html，作者：TZ</description>
    </item>
    
    <item>
      <title>vdoing主题效果图</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/04.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/10.vdoing%E4%B8%BB%E9%A2%98%E6%95%88%E6%9E%9C%E5%9B%BE/</link>
      <pubDate>Wed, 08 Apr 2020 11:27:22 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/04.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/10.vdoing%E4%B8%BB%E9%A2%98%E6%95%88%E6%9E%9C%E5%9B%BE/</guid>
      <description>vdoing主题效果图 PC端 首页 &amp; 目录页△ 文章详情页 &amp; 时间轴页△ 首页个性化大图 首页个性化大图△ 深色模式和阅读模式 深色模式△ 阅读模式△ 移动端 移</description>
    </item>
    
    <item>
      <title>如何根据系统主题自动响应CSS深色模式</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/45.%E5%A6%82%E4%BD%95%E6%A0%B9%E6%8D%AE%E7%B3%BB%E7%BB%9F%E4%B8%BB%E9%A2%98%E8%87%AA%E5%8A%A8%E5%93%8D%E5%BA%94css%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 31 Mar 2020 14:06:26 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/45.%E5%A6%82%E4%BD%95%E6%A0%B9%E6%8D%AE%E7%B3%BB%E7%BB%9F%E4%B8%BB%E9%A2%98%E8%87%AA%E5%8A%A8%E5%93%8D%E5%BA%94css%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F/</guid>
      <description>如何根据系统主题自动响应CSS深色模式 很多人喜欢选择APP或网站中的深色模式，也许他们更喜欢这样的外观，或者他们想让自己的眼睛免受疲劳。这篇</description>
    </item>
    
    <item>
      <title>水平垂直居中的几种方式-案例</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/40.%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Fri, 13 Mar 2020 16:13:43 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/40.%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-%E6%A1%88%E4%BE%8B/</guid>
      <description>水平垂直居中的几种方式-案例 See the Pen 水平垂直居中的几种方式 by xugaoyi (@xugaoyi) on CodePen.</description>
    </item>
    
    <item>
      <title>GitHub加速下载项目的方法</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/02.github%E6%8A%80%E5%B7%A7/10.github%E5%8A%A0%E9%80%9F%E4%B8%8B%E8%BD%BD%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 09 Mar 2020 10:28:09 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/02.github%E6%8A%80%E5%B7%A7/10.github%E5%8A%A0%E9%80%9F%E4%B8%8B%E8%BD%BD%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>GitHub加速下载项目的方法 国内在github上克隆项目总是异常的慢，据我多次克隆观察，下载速度最快就20k/s左右，特别是在克隆比较大的</description>
    </item>
    
    <item>
      <title>JS获取和修改url参数</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/90.js%E8%8E%B7%E5%8F%96%E5%92%8C%E4%BF%AE%E6%94%B9url%E5%8F%82%E6%95%B0/</link>
      <pubDate>Thu, 05 Mar 2020 12:45:37 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/90.js%E8%8E%B7%E5%8F%96%E5%92%8C%E4%BF%AE%E6%94%B9url%E5%8F%82%E6%95%B0/</guid>
      <description>JS获取和修改url参数 获取url参数 1 2 3 4 5 6 7 8 9 10 11 12 /** * 获取url里的参数 * @param arg 参数名 * @returns */ function getURLString(arg) { var reg = new RegExp(&amp;#34;(^|&amp;amp;)&amp;#34; + arg + &amp;#34;=([^&amp;amp;]*)(&amp;amp;|$)&amp;#34;, &amp;#34;i&amp;#34;); var r = window.location.search.substr(1).match(reg); if (r</description>
    </item>
    
    <item>
      <title>防抖与节流函数</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/80.%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 29 Feb 2020 15:07:47 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/80.%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0/</guid>
      <description>防抖与节流函数 防抖和节流的作用都是在高频事件中防止函数被多次调用，是一种性能优化的方案。 区别在于，防抖函数只会在高频事件结束后n毫秒调用一次</description>
    </item>
    
    <item>
      <title>从box-sizing属性入手，了解盒子模型</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/35.%E4%BB%8Ebox-sizing%E5%B1%9E%E6%80%A7%E5%85%A5%E6%89%8B%E4%BA%86%E8%A7%A3%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Thu, 27 Feb 2020 17:08:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/35.%E4%BB%8Ebox-sizing%E5%B1%9E%E6%80%A7%E5%85%A5%E6%89%8B%E4%BA%86%E8%A7%A3%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</guid>
      <description>从box-sizing属性入手，了解盒子模型 背景 先声明一下运用的场景，假如项目布局使用的是自适应的布局方式，div给出的宽度是百分比的形式，</description>
    </item>
    
    <item>
      <title>文字在一行或多行时超出显示省略号</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/30.%E6%96%87%E5%AD%97%E5%9C%A8%E4%B8%80%E8%A1%8C%E6%88%96%E5%A4%9A%E8%A1%8C%E6%97%B6%E8%B6%85%E5%87%BA%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7/</link>
      <pubDate>Sun, 23 Feb 2020 15:07:08 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/30.%E6%96%87%E5%AD%97%E5%9C%A8%E4%B8%80%E8%A1%8C%E6%88%96%E5%A4%9A%E8%A1%8C%E6%97%B6%E8%B6%85%E5%87%BA%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7/</guid>
      <description>文字在一行或多行时超出显示省略号 一行超出显示省略 1 2 3 overflow: hidden; white-space: nowrap; text-overflow: ellipsis; :::demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 &amp;lt;html&amp;gt; &amp;lt;div class=&amp;#34;box-42b6&amp;</description>
    </item>
    
    <item>
      <title>将一维数组按指定长度转为二维数组</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/70.%E5%B0%86%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E6%8C%89%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6%E8%BD%AC%E4%B8%BA%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sun, 23 Feb 2020 13:49:31 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/70.%E5%B0%86%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E6%8C%89%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6%E8%BD%AC%E4%B8%BA%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</guid>
      <description>将一维数组按指定长度转为二维数组 将一维数组按指定长度转为二维数组 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 function pages(arr, len) { const pages = [] arr.forEach((item, index) =&amp;gt; { const page = Math.floor(index / len) if (!pages[page]) { pages[page]</description>
    </item>
    
    <item>
      <title>「布局技巧」图片未加载前自动撑开元素高度</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/20.%E5%B8%83%E5%B1%80%E6%8A%80%E5%B7%A7%E5%9B%BE%E7%89%87%E6%9C%AA%E5%8A%A0%E8%BD%BD%E5%89%8D%E8%87%AA%E5%8A%A8%E6%92%91%E5%BC%80%E5%85%83%E7%B4%A0%E9%AB%98%E5%BA%A6/</link>
      <pubDate>Sat, 22 Feb 2020 16:37:10 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/20.%E5%B8%83%E5%B1%80%E6%8A%80%E5%B7%A7%E5%9B%BE%E7%89%87%E6%9C%AA%E5%8A%A0%E8%BD%BD%E5%89%8D%E8%87%AA%E5%8A%A8%E6%92%91%E5%BC%80%E5%85%83%E7%B4%A0%E9%AB%98%E5%BA%A6/</guid>
      <description>「布局技巧」图片未加载前自动撑开元素高度 在移动端开发中，有一些元素是根据图片高度来自动撑开的 ，高度不能写死（如轮播图的外层元素）。在网络较慢</description>
    </item>
    
    <item>
      <title>ES5面向对象</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/03.es5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 22 Feb 2020 10:35:43 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/03.es5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>ES5面向对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 //面向对象</description>
    </item>
    
    <item>
      <title>常用meta整理</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/10.html/10.%E5%B8%B8%E7%94%A8meta%E6%95%B4%E7%90%86/</link>
      <pubDate>Fri, 21 Feb 2020 12:20:10 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/10.html/10.%E5%B8%B8%E7%94%A8meta%E6%95%B4%E7%90%86/</guid>
      <description>常用meta整理 &amp;lt;meta&amp;gt; 元素 概要 meta标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内</description>
    </item>
    
    <item>
      <title>Vue CLi v3 创建项目使用记录</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/05.%E5%B7%A5%E5%85%B7/10.vue-cli-v3-%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Thu, 20 Feb 2020 17:24:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/05.%E5%B7%A5%E5%85%B7/10.vue-cli-v3-%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</guid>
      <description>Vue CLi v3.x 创建项目使用记录 官方文档 以下使用的CLi版本是 v3.11.0 vue create 运行以下命令来创建一个新项目 1 vue create hello-world 你会被提示选取一个 preset (预设)。你可以选默认的包</description>
    </item>
    
    <item>
      <title>Mixin混入</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/04.%E5%8F%AF%E5%A4%8D%E7%94%A8%E6%80%A7%E7%BB%84%E5%90%88/01.mixin%E6%B7%B7%E5%85%A5/</link>
      <pubDate>Wed, 19 Feb 2020 15:22:41 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/04.%E5%8F%AF%E5%A4%8D%E7%94%A8%E6%80%A7%E7%BB%84%E5%90%88/01.mixin%E6%B7%B7%E5%85%A5/</guid>
      <description>Mixin混入 基础 混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混</description>
    </item>
    
    <item>
      <title>vue父子组件的生命周期顺序</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/90.vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Tue, 18 Feb 2020 16:39:33 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/90.vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%A1%BA%E5%BA%8F/</guid>
      <description>vue父子组件的生命周期顺序 加载渲染过程 1 父beforeCreate -&amp;gt; 父created-&amp;gt; 父beforeMount-&amp;gt; 子befo</description>
    </item>
    
    <item>
      <title>使用animate库</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/03.%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/112.%E4%BD%BF%E7%94%A8animate%E5%BA%93/</link>
      <pubDate>Mon, 17 Feb 2020 16:05:52 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/03.%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/112.%E4%BD%BF%E7%94%A8animate%E5%BA%93/</guid>
      <description>vue中使用Animate.css库 自定义过渡类名 我们可以通过以下 attribute 来自定义过渡类名： enter-class enter-active-class enter-to-class (2.1.8+) leave-class leave-active-class leave-to-class (2.1.8+) 他们的优先级高于普通的类名，这对于 Vue 的</description>
    </item>
    
    <item>
      <title>动态组件与 v-once 指令</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/80.%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6%E4%B8%8E-v-once-%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Sun, 16 Feb 2020 15:52:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/80.%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6%E4%B8%8E-v-once-%E6%8C%87%E4%BB%A4/</guid>
      <description>动态组件与 v-once 指令 动态组件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 &amp;lt;div id=&amp;#34;root&amp;#34;&amp;gt; &amp;lt;component :is=&amp;#34;type&amp;#34;&amp;gt;&amp;lt;/component&amp;gt; &amp;lt;!--其效果如同下面两行被注释的代码--&amp;gt;</description>
    </item>
    
    <item>
      <title>插槽slot</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/75.%E6%8F%92%E6%A7%BDslot/</link>
      <pubDate>Sun, 16 Feb 2020 11:46:27 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/75.%E6%8F%92%E6%A7%BDslot/</guid>
      <description>插槽slot API 插槽 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 &amp;lt;div id=&amp;#34;root&amp;#34;&amp;gt; &amp;lt;child&amp;gt; &amp;lt;!-- 组件标签 --&amp;gt; &amp;lt;h1&amp;gt;hello&amp;lt;/h1&amp;gt; &amp;lt;/child&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; Vue.component(&amp;#39;child&amp;#39;, { // 子组件 template: &amp;#39;&amp;lt;div&amp;gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&amp;lt;/div&amp;gt;&amp;#39; }) var vm = new Vue({ el: &amp;#39;#root&amp;#39; }) &amp;lt;/script&amp;gt; 上面代码中，组件标签内的h1</description>
    </item>
    
    <item>
      <title>非父子组件传值</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/65.%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</link>
      <pubDate>Sat, 15 Feb 2020 14:55:03 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/65.%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</guid>
      <description>非父子组件间传值 当组件的嵌套多时，非父子组件间传值就显得复杂，除了使用vuex实现之外，还可以通过Bus（或者叫 总线/发布订阅模式/观察者模</description>
    </item>
    
    <item>
      <title>自定义事件</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/55.%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Sat, 15 Feb 2020 11:27:45 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/55.%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/</guid>
      <description>自定义事件 API 在组件标签v-on绑定的事件是自定义事件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 &amp;lt;div id=&amp;#34;root&amp;#34;&amp;gt; &amp;lt;child @click=&amp;#34;handleClick&amp;#34;&amp;gt;&amp;lt;/child&amp;gt; &amp;lt;!--这里click是自定义事件--</description>
    </item>
    
    <item>
      <title>Prop 验证 与 非 Prop 的 Attribute</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/52.prop-%E9%AA%8C%E8%AF%81-%E4%B8%8E-%E9%9D%9E-prop-%E7%9A%84-attribute/</link>
      <pubDate>Sat, 15 Feb 2020 10:49:04 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/52.prop-%E9%AA%8C%E8%AF%81-%E4%B8%8E-%E9%9D%9E-prop-%E7%9A%84-attribute/</guid>
      <description>Prop 验证 与 非 Prop 的 Attribute Prop 验证 API 子组件对父组件传递来的参数进行校验 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 Vue.component(&amp;#39;my-component&amp;#39;, { props: { // 基础的</description>
    </item>
    
    <item>
      <title>使用组件的细节点</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/36.%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6%E7%9A%84%E7%BB%86%E8%8A%82%E7%82%B9/</link>
      <pubDate>Thu, 13 Feb 2020 13:26:20 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/36.%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6%E7%9A%84%E7%BB%86%E8%8A%82%E7%82%B9/</guid>
      <description>使用组件的细节点 解析 DOM 模板时的注意事项 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 &amp;lt;div id=&amp;#34;root&amp;#34;&amp;gt; &amp;lt;table&amp;gt; &amp;lt;tbody&amp;gt; &amp;lt;row&amp;gt;&amp;lt;/row&amp;gt; &amp;lt;row&amp;gt;&amp;lt;/row&amp;gt; &amp;lt;row&amp;gt;&amp;lt;/row&amp;gt; &amp;lt;/tbody&amp;gt; &amp;lt;/table&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; Vue.component(&amp;#39;row&amp;#39;, { template: &amp;#39;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;this is a row&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;#39; }) var vm = new Vue({ el: &amp;#39;#root&amp;#39; }) &amp;lt;/script&amp;gt; 上面代码中</description>
    </item>
    
    <item>
      <title>Mixin</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/32.mixin/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:30 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/32.mixin/</guid>
      <description>Mixin JavaScript 语言的设计是单一继承，即子类只能继承一个父类，不允许继承多个父类。这种设计保证了对象继承的层次结构是树状的，而不是复杂的网状结构。 但是，</description>
    </item>
    
    <item>
      <title>SIMD</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/33.simd/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:30 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/33.simd/</guid>
      <description>SIMD 概述 SIMD（发音/sim-dee/）是“Single Instruction/Multiple Data”的缩写，意为“单指令，多数据”。它是 JavaScript 操作 CPU 对应指令的接口，你可以看做这</description>
    </item>
    
    <item>
      <title>函数式编程</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/31.%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:30 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/31.%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
      <description>函数式编程 JavaScript 语言从一诞生，就具有函数式编程的烙印。它将函数作为一种独立的数据类型，与其他数据类型处于完全平等的地位。在 JavaScript 语言中，你可以采用面</description>
    </item>
    
    <item>
      <title>参考链接</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/34.%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:30 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/34.%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5/</guid>
      <description>参考链接 官方文件 ECMAScript® 2015 Language Specification: ECMAScript 2015 规格 ECMAScript® 2016 Language Specification: ECMAScript 2016 规格 ECMAScript® 2017 Language Specification</description>
    </item>
    
    <item>
      <title>最新提案</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/29.%E6%9C%80%E6%96%B0%E6%8F%90%E6%A1%88/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:30 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/29.%E6%9C%80%E6%96%B0%E6%8F%90%E6%A1%88/</guid>
      <description>最新提案 本章介绍一些尚未进入标准、但很有希望的最新提案。 do 表达式 本质上，块级作用域是一个语句，将多个操作封装在一起，没有返回值。 1 2 3 4 { let</description>
    </item>
    
    <item>
      <title>装饰器</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/30.%E8%A3%85%E9%A5%B0%E5%99%A8/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:30 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/30.%E8%A3%85%E9%A5%B0%E5%99%A8/</guid>
      <description>装饰器 [说明] Decorator 提案经过了大幅修改，目前还没有定案，不知道语法会不会再变。下面的内容完全依据以前的提案，已经有点过时了。等待定案以后，需要完</description>
    </item>
    
    <item>
      <title>ArrayBuffer</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/28.arraybuffer/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/28.arraybuffer/</guid>
      <description>ArrayBuffer ArrayBuffer对象、TypedArray视图和DataView视图是 JavaScript 操作二进制数据的一个接口。这些对象早就存在，属于独立的规格（</description>
    </item>
    
    <item>
      <title>async 函数</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/20.async-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/20.async-%E5%87%BD%E6%95%B0/</guid>
      <description>async 函数 含义 ES2017 标准引入了 async 函数，使得异步操作变得更加方便。 async 函数是什么？一句话，它就是 Generator 函数的语法糖。 前文有一个 Generator 函数，依次读取两个文件。 1 2</description>
    </item>
    
    <item>
      <title>Class 的基本语法</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/21.class-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/21.class-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>Class 的基本语法 简介 类的由来 JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。 1 2 3 4 5 6 7 8 9 10 function Point(x, y) { this.x = x; this.y = y; } Point.prototype.toString = function () {</description>
    </item>
    
    <item>
      <title>Class 的继承</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/22.class-%E7%9A%84%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/22.class-%E7%9A%84%E7%BB%A7%E6%89%BF/</guid>
      <description>Class 的继承 简介 Class 可以通过extends关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。 1 2 3 4 5 class Point { } class ColorPoint extends Point { } 上面代码</description>
    </item>
    
    <item>
      <title>Generator 函数的异步应用</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/19.generator-%E5%87%BD%E6%95%B0%E7%9A%84%E5%BC%82%E6%AD%A5%E5%BA%94%E7%94%A8/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/19.generator-%E5%87%BD%E6%95%B0%E7%9A%84%E5%BC%82%E6%AD%A5%E5%BA%94%E7%94%A8/</guid>
      <description>Generator 函数的异步应用 异步编程对 JavaScript 语言太重要。JavaScript 语言的执行环境是“单线程”的，如果没有异步编程，根本没法用，非卡死不可。本章主要</description>
    </item>
    
    <item>
      <title>Generator 函数的语法</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/18.generator-%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/18.generator-%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%AD%E6%B3%95/</guid>
      <description>Generator 函数的语法 简介 基本概念 Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。本章详细介绍 Generator 函数的语法和 API，它的异步编程应用</description>
    </item>
    
    <item>
      <title>Iterator 和 for-of 循环</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/17.iterator-%E5%92%8C-for-of-%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/17.iterator-%E5%92%8C-for-of-%E5%BE%AA%E7%8E%AF/</guid>
      <description>Iterator 和 for&amp;hellip;of 循环 Iterator（遍历器）的概念 JavaScript 原有的表示“集合”的数据结构，主要是数组（Array）和对象（Object），ES6 又添加了Ma</description>
    </item>
    
    <item>
      <title>let 和 const 命令</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/02.let-%E5%92%8C-const-%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/02.let-%E5%92%8C-const-%E5%91%BD%E4%BB%A4/</guid>
      <description>let 和 const 命令 let 命令 基本用法 ES6 新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效(块级作用</description>
    </item>
    
    <item>
      <title>Module 的加载实现</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/24.module-%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/24.module-%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%AE%9E%E7%8E%B0/</guid>
      <description>Module 的加载实现 上一章介绍了模块的语法，本章介绍如何在浏览器和 Node.js 之中加载 ES6 模块，以及实际开发中经常遇到的一些问题（比如循环加载）。 浏览器加载 传统</description>
    </item>
    
    <item>
      <title>Module 的语法</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/23.module-%E7%9A%84%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/23.module-%E7%9A%84%E8%AF%AD%E6%B3%95/</guid>
      <description>Module 的语法 概述 历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其</description>
    </item>
    
    <item>
      <title>Promise 对象</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/16.promise-%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/16.promise-%E5%AF%B9%E8%B1%A1/</guid>
      <description>Promise 对象 Promise 的含义 Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言</description>
    </item>
    
    <item>
      <title>Proxy</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/14.proxy/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/14.proxy/</guid>
      <description>Proxy 概述 Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程</description>
    </item>
    
    <item>
      <title>Reflect</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/15.reflect/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/15.reflect/</guid>
      <description>Reflect 概述 Reflect对象与Proxy对象一样，也是 ES6 为了操作对象而提供的新 API。Reflect对象的设计目的有这样几个。 （1） **将Obj</description>
    </item>
    
    <item>
      <title>Set 和 Map 数据结构</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/13.set-%E5%92%8C-map-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/13.set-%E5%92%8C-map-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>Set 和 Map 数据结构 Set 基本用法 ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。 Set本身是一个构造函数，用来生成 Set</description>
    </item>
    
    <item>
      <title>Symbol</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/12.symbol/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/12.symbol/</guid>
      <description>Symbol 概述 ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新</description>
    </item>
    
    <item>
      <title>函数的扩展</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/08.%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A9%E5%B1%95/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/08.%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A9%E5%B1%95/</guid>
      <description>函数的扩展 函数参数的默认值 基本用法 ES6 之前，不能直接为函数的参数指定默认值，只能采用变通的方法。 1 2 3 4 5 6 7 8 function log(x, y) { y = y || &amp;#39;World&amp;#39;; console.log(x, y); } log(&amp;#39;Hello&amp;#39;) // Hello</description>
    </item>
    
    <item>
      <title>变量的解构赋值</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/03.%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/03.%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</guid>
      <description>变量的解构赋值 数组的解构赋值 基本用法 ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。 以</description>
    </item>
    
    <item>
      <title>字符串的扩展</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/04.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/04.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/</guid>
      <description>字符串的扩展 本章介绍 ES6 对字符串的改造和增强，下一章介绍字符串对象的新增方法。 字符的 Unicode 表示法 ES6 加强了对 Unicode 的支持，允许采用\uxxxx形式表示一</description>
    </item>
    
    <item>
      <title>字符串的新增方法</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/05.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/05.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/</guid>
      <description>字符串的新增方法 本章介绍字符串对象的新增方法。 String.fromCodePoint() ES5 提供String.fromCharCode()方法，用于从 Unicode 码点返回对应字符，但是这个方法</description>
    </item>
    
    <item>
      <title>对象的扩展</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/10.%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/10.%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/</guid>
      <description>对象的扩展 对象（object）是 JavaScript 最重要的数据结构。ES6 对它进行了重大升级，本章介绍数据结构本身的改变，下一章介绍Object对象的新增方</description>
    </item>
    
    <item>
      <title>对象的新增方法</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/11.%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/11.%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/</guid>
      <description>对象的新增方法 本章介绍 Object 对象的新增方法。 Object.is() ES5 比较两个值是否相等，只有两个运算符：相等运算符（==）和严格相等运算符（===）。它们都有缺点，</description>
    </item>
    
    <item>
      <title>异步遍历器</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/27.%E5%BC%82%E6%AD%A5%E9%81%8D%E5%8E%86%E5%99%A8/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/27.%E5%BC%82%E6%AD%A5%E9%81%8D%E5%8E%86%E5%99%A8/</guid>
      <description>异步遍历器 同步遍历器的问题 《遍历器》一章说过，Iterator 接口是一种数据遍历的协议，只要调用遍历器对象的next方法，就会得到一个对象，</description>
    </item>
    
    <item>
      <title>数值的扩展</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/07.%E6%95%B0%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/07.%E6%95%B0%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95/</guid>
      <description>数值的扩展 二进制和八进制表示法 ES6 提供了二进制和八进制数值的新的写法，分别用前缀0b（或0B）和0o（或0O）表示。 1 2 0b111110111 === 503 // true 0o767 === 503 // true 从</description>
    </item>
    
    <item>
      <title>数组的扩展</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/09.%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/09.%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/</guid>
      <description>数组的扩展 扩展运算符 含义 扩展运算符（spread）是三个点（...）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>正则的扩展</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/06.%E6%AD%A3%E5%88%99%E7%9A%84%E6%89%A9%E5%B1%95/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/06.%E6%AD%A3%E5%88%99%E7%9A%84%E6%89%A9%E5%B1%95/</guid>
      <description>正则的扩展 RegExp 构造函数 在 ES5 中，RegExp构造函数的参数有两种情况。 第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag</description>
    </item>
    
    <item>
      <title>编程风格</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/25.%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/25.%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC/</guid>
      <description>编程风格 本章探讨如何将 ES6 的新语法，运用到编码实践之中，与传统的 JavaScript 语法结合在一起，写出合理的、易于阅读和维护的代码。 多家公司和组织已经公开了它</description>
    </item>
    
    <item>
      <title>读懂 ECMAScript 规格</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/26.%E8%AF%BB%E6%87%82-ecmascript-%E8%A7%84%E6%A0%BC/</link>
      <pubDate>Sun, 09 Feb 2020 16:00:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/26.%E8%AF%BB%E6%87%82-ecmascript-%E8%A7%84%E6%A0%BC/</guid>
      <description>读懂 ECMAScript 规格 概述 规格文件是计算机语言的官方标准，详细描述语法规则和实现方法。 一般来说，没有必要阅读规格，除非你要写编译器。因为规格写得非常抽象</description>
    </item>
    
    <item>
      <title>JS随机打乱数组</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/50.js%E9%9A%8F%E6%9C%BA%E6%89%93%E4%B9%B1%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sat, 08 Feb 2020 17:42:03 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/50.js%E9%9A%8F%E6%9C%BA%E6%89%93%E4%B9%B1%E6%95%B0%E7%BB%84/</guid>
      <description>JS随机打乱数组 1 2 3 4 5 6 7 8 9 10 11 12 13 function shuffle(arr) { // 随机打乱数组 let _arr = arr.slice() // 调用数组副本，不改变原数组 for (let i = 0; i &amp;lt; _arr.length; i++) { let j = getRandomInt(0, i) let t = _arr[i] _arr[i] =</description>
    </item>
    
    <item>
      <title>列表渲染之数组、对象更新检测</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/35.%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93%E4%B9%8B%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Wed, 05 Feb 2020 13:09:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/35.%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93%E4%B9%8B%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B/</guid>
      <description>列表渲染之数组、对象更新检测 数组更新检测API 对象更新检测API 数组更新检测 变异方法 (mutation method) Vue 将被侦听的数组的变异方法进行了包裹，所以它们也将会</description>
    </item>
    
    <item>
      <title>v-if vs v-show</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/30.v-if-vs-v-show/</link>
      <pubDate>Tue, 04 Feb 2020 17:32:23 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/30.v-if-vs-v-show/</guid>
      <description>v-if vs v-show API v-if 根据渲染条件决定是否把元素渲染到DOM页面，而v-show不管渲染条件是什么，都会把元素渲染到DOM页面，只是简单的切换CSS的显</description>
    </item>
    
    <item>
      <title>计算属性 vs 方法 vs 侦听属性</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/20.%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-vs-%E6%96%B9%E6%B3%95-vs-%E4%BE%A6%E5%90%AC%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Tue, 04 Feb 2020 16:37:51 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/20.%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-vs-%E6%96%B9%E6%B3%95-vs-%E4%BE%A6%E5%90%AC%E5%B1%9E%E6%80%A7/</guid>
      <description>计算属性 vs 方法 vs 侦听属性 API 如果一个功能同时可以使用计算属性(computed)、方法(methods)、侦听属性(watch)来实现的时候推</description>
    </item>
    
    <item>
      <title>生命周期</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/10.%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Tue, 04 Feb 2020 15:06:59 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/10.%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>实例生命周期钩子 实例生命周期钩子API 简单理解，生命周期钩子函数就是vue实例在某一个时间点会自动执行的函数。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description>
    </item>
    
    <item>
      <title>路由懒加载</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/06.%E8%A7%84%E6%A8%A1%E5%8C%96/140.%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD/</link>
      <pubDate>Tue, 04 Feb 2020 13:20:20 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/06.%E8%A7%84%E6%A8%A1%E5%8C%96/140.%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD/</guid>
      <description>路由懒加载 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // 路由同步加载 // import Recommend from &amp;#39;@/components/recommend/recommend&amp;#39; // import Singer from &amp;#39;@/components/singer/singer&amp;#39; // import Rank from &amp;#39;@/components/rank/rank&amp;#39; // import Search from &amp;#39;@/components/search/search&amp;#39; // import SingerDetail from &amp;#39;@/components/singer-detail/singer-detail&amp;#39; // import Disc from &amp;#39;@/components/disc/disc&amp;#39; // import TopList from &amp;#39;@/components/top-list/top-list&amp;#39; //</description>
    </item>
    
    <item>
      <title>transition-group列表过渡</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/03.%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/120.transition-group%E5%88%97%E8%A1%A8%E8%BF%87%E6%B8%A1/</link>
      <pubDate>Tue, 04 Feb 2020 13:17:42 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/03.%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/120.transition-group%E5%88%97%E8%A1%A8%E8%BF%87%E6%B8%A1/</guid>
      <description>transition-group列表过渡 列表的进入/离开过渡 1 2 3 &amp;lt;transition-group tag=&amp;#34;ul&amp;#34;&amp;gt; &amp;lt;!--tag转为ul--&amp;gt; &amp;lt;li v-for=&amp;#34;item in list&amp;#34; :key=&amp;#34;item&amp;#34;&amp;gt;{{item}}&amp;lt;/li&amp;gt; &amp;lt;!--子元素</description>
    </item>
    
    <item>
      <title>transition过渡&amp;动画</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/03.%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/110.transition%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Tue, 04 Feb 2020 13:16:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/03.%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/110.transition%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/</guid>
      <description>transition过渡&amp;amp;动画 API 使用 需要设置动画的元素或组件要在外边包裹一个&amp;lt;transition&amp;gt;标签，设置自定义的n</description>
    </item>
    
    <item>
      <title>vuex操作相关</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/06.%E8%A7%84%E6%A8%A1%E5%8C%96/100.vuex%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Tue, 04 Feb 2020 13:15:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/06.%E8%A7%84%E6%A8%A1%E5%8C%96/100.vuex%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%85%B3/</guid>
      <description>vuex操作相关 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import { mapActions, mapMutations, mapGetters } from &amp;#39;vuex&amp;#39; computed: { ...mapGetters([ // 获取数据，内部为数组 &amp;#39;searchHistory&amp;#39; // 相当于在data插入sear</description>
    </item>
    
    <item>
      <title>操作本地缓存</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/99.%E5%85%B6%E4%BB%96/90.%E6%93%8D%E4%BD%9C%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/</link>
      <pubDate>Tue, 04 Feb 2020 13:14:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/99.%E5%85%B6%E4%BB%96/90.%E6%93%8D%E4%BD%9C%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/</guid>
      <description>操作本地缓存 https://github.com/ustbhuangyi/storage 操作 sessionStorage 和 localStorage 。</description>
    </item>
    
    <item>
      <title>Vue中的防抖函数封装和使用</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/99.%E5%85%B6%E4%BB%96/80.vue%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 04 Feb 2020 13:10:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/99.%E5%85%B6%E4%BB%96/80.vue%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</guid>
      <description>Vue中的防抖函数封装和使用 如搜索框中，每改变一个数值就请求一次搜索接口，当快速的改变数值时并不需要多次请求接口，这就需要一个防抖函数： 1 2</description>
    </item>
    
    <item>
      <title>父组件调用子组件方法并传入值</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/70.%E7%88%B6%E7%BB%84%E4%BB%B6%E8%B0%83%E7%94%A8%E5%AD%90%E7%BB%84%E4%BB%B6%E6%96%B9%E6%B3%95%E5%B9%B6%E4%BC%A0%E5%85%A5%E5%80%BC/</link>
      <pubDate>Tue, 04 Feb 2020 13:06:37 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/70.%E7%88%B6%E7%BB%84%E4%BB%B6%E8%B0%83%E7%94%A8%E5%AD%90%E7%BB%84%E4%BB%B6%E6%96%B9%E6%B3%95%E5%B9%B6%E4%BC%A0%E5%85%A5%E5%80%BC/</guid>
      <description>父组件调用子组件方法并传入值 通过ref引用调用子组件内的方法并传入参数 父组件： 1 2 3 4 5 6 7 &amp;lt;子组件标签 ref=&amp;#34;refNam</description>
    </item>
    
    <item>
      <title>兄弟组件传值</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/60.%E5%85%84%E5%BC%9F%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</link>
      <pubDate>Tue, 04 Feb 2020 13:04:32 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/60.%E5%85%84%E5%BC%9F%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</guid>
      <description>兄弟组件传值 子组件1中把值传到父组件,父组件获取值传入子组件2 父组件： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 &amp;lt;子组件1 @方法名x=&amp;#34;方</description>
    </item>
    
    <item>
      <title>子组件派发事件和值给父组件</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/50.%E5%AD%90%E7%BB%84%E4%BB%B6%E6%B4%BE%E5%8F%91%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%80%BC%E7%BB%99%E7%88%B6%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Tue, 04 Feb 2020 12:56:51 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/50.%E5%AD%90%E7%BB%84%E4%BB%B6%E6%B4%BE%E5%8F%91%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%80%BC%E7%BB%99%E7%88%B6%E7%BB%84%E4%BB%B6/</guid>
      <description>子组件派发事件和值给父组件 API 子组件通过$emit派发事件和值给父组件（值可以有多个） 1 this.$emit(&amp;#39;fnX&amp;#39;, value) 父组件通过v-on绑定子组件派发的事件，并触发一个</description>
    </item>
    
    <item>
      <title>父组件给子组件传值</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/40.%E7%88%B6%E7%BB%84%E4%BB%B6%E7%BB%99%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</link>
      <pubDate>Tue, 04 Feb 2020 12:45:30 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/40.%E7%88%B6%E7%BB%84%E4%BB%B6%E7%BB%99%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</guid>
      <description>父组件给子组件传值 父组件中，通过给子组件标签v-bind绑定属性的方式传入值 1 &amp;lt;ComponentName v-bind:name=&amp;#34;value&amp;#34;&amp;gt;&amp;lt;/ComponentName&amp;gt; 如果不使用v-bind传入的值为字符串，使用v-bind绑</description>
    </item>
    
    <item>
      <title>MVVM模式</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/00.mvvm%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 04 Feb 2020 12:19:00 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/00.mvvm%E6%A8%A1%E5%BC%8F/</guid>
      <description>:::tip 说明：本章内容是博主的Vue学习笔记，以官方文档为准。 ::: MVVM模式 MVVM模式，M即 model，数据模型；V即 view，视图；VM即 vi</description>
    </item>
    
    <item>
      <title>《Vue》笔记</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.vue%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 04 Feb 2020 12:16:12 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.vue%E7%AC%94%E8%AE%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>一个完美主义者的自我救赎</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/05.%E5%BF%83%E6%83%85%E6%9D%82%E8%B4%A7/01.%E4%B8%80%E4%B8%AA%E5%AE%8C%E7%BE%8E%E4%B8%BB%E4%B9%89%E8%80%85%E7%9A%84%E8%87%AA%E6%88%91%E6%95%91%E8%B5%8E/</link>
      <pubDate>Thu, 16 Jan 2020 15:15:27 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/05.%E5%BF%83%E6%83%85%E6%9D%82%E8%B4%A7/01.%E4%B8%80%E4%B8%AA%E5%AE%8C%E7%BE%8E%E4%B8%BB%E4%B9%89%E8%80%85%E7%9A%84%E8%87%AA%E6%88%91%E6%95%91%E8%B5%8E/</guid>
      <description>一个完美主义者的自我救赎 最近，看到一个心理测试题是测试你是否有完美主义： （1）你是不是经常为自己设定目标，而且最终往往达不到那些目标？ （2）</description>
    </item>
    
    <item>
      <title>《ES6 教程》笔记</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 12 Jan 2020 15:49:22 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ECMAScript 6 简介</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/01.ecmascript-6-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 12 Jan 2020 15:45:35 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/07.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/01.ecmascript-6-%E7%AE%80%E4%BB%8B/</guid>
      <description>说明：本章内容为博主在原教程基础上添加自己的学习笔记，来源http://es6.ruanyifeng.com/，教程版权归原作者所有。 ECMAScript 6 简</description>
    </item>
    
    <item>
      <title>《JavaScript教程》笔记</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/00.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 12 Jan 2020 11:51:53 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/00.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>DOM</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/05.dom/</link>
      <pubDate>Sun, 12 Jan 2020 11:49:16 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/05.dom/</guid>
      <description>DOM 一、概述 1、DOM DOM 是 JavaScript 操作网页的接口，全称为“文档对象模型”（Document Object Model）。它的作用是将网页转为一个 JavaScript 对象，从而可以用</description>
    </item>
    
    <item>
      <title>事件</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/06.%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Sun, 12 Jan 2020 11:49:16 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/06.%E4%BA%8B%E4%BB%B6/</guid>
      <description>事件 一、EventTarget 接口 事件的本质是程序各个组成部分之间的一种通信方式，也是异步编程的一种实现。DOM 支持大量的事件，本章开始介绍</description>
    </item>
    
    <item>
      <title>内置对象</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/02.%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sun, 12 Jan 2020 11:49:16 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/02.%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</guid>
      <description>内置对象篇 一、Object对象 1、概述 JavaScript 原生提供Object对象（注意起首的O是大写），本章介绍该对象原生的各种方法。 JavaScript 的所有其他对象都继承</description>
    </item>
    
    <item>
      <title>基础</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sun, 12 Jan 2020 11:49:16 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/</guid>
      <description>说明：本章内容为博主在原教程基础上添加自己的学习笔记，来源https://wangdoc.com/javascript/，教程版权归原作者所</description>
    </item>
    
    <item>
      <title>异步操作</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/04.%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sun, 12 Jan 2020 11:49:16 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/04.%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/</guid>
      <description>异步操作 一、异步操作概述 1、单线程模型 单线程模型指的是，JavaScript 只在一个线程上运行。也就是说，JavaScript 同时只能执行一</description>
    </item>
    
    <item>
      <title>浏览器模型</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/07.%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sun, 12 Jan 2020 11:49:16 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/07.%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B/</guid>
      <description>浏览器模型 一、浏览器环境概述 JavaScript 是浏览器的内置脚本语言。也就是说，浏览器内置了 JavaScript 引擎，并且提供各种接口，让 JavaScript 脚本可以控制浏览器的各种功能。一旦</description>
    </item>
    
    <item>
      <title>面向对象</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/03.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sun, 12 Jan 2020 11:49:16 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/09.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/03.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>面向对象编程 一、实例对象与new命令 1、对象是什么 面向对象编程（Object Oriented Programming，缩写为 OOP）是目前主流的编程范式。它</description>
    </item>
    
    <item>
      <title>axios 函数重载</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/06.ts-axios-%E6%8E%A5%E5%8F%A3%E6%89%A9%E5%B1%95/02.axios-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/06.ts-axios-%E6%8E%A5%E5%8F%A3%E6%89%A9%E5%B1%95/02.axios-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/</guid>
      <description>axios 函数重载 需求分析 目前我们的 axios 函数只支持传入 1 个参数，如下： 1 2 3 4 5 6 7 axios({ url: &amp;#39;/extend/post&amp;#39;, method: &amp;#39;post&amp;#39;, data: { msg: &amp;#39;hi&amp;#39; } }) 我们希望该函数也能支持传入 2 个参数，如下： 1</description>
    </item>
    
    <item>
      <title>Axios 实例模块单元测试</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/06.axios-%E5%AE%9E%E4%BE%8B%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/06.axios-%E5%AE%9E%E4%BE%8B%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>Axios 实例模块单元测试 ts-axios 提供了 axios.create 静态方法，返回一个 instance 实例，我们需要对这个模块做测试。 测试代码编写 test/instance.spec.ts： 1 2</description>
    </item>
    
    <item>
      <title>baseURL</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/07.baseurl/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/07.baseurl/</guid>
      <description>baseURL 需求分析 有些时候，我们会请求某个域名下的多个接口，我们不希望每次发送请求都填写完整的 url，希望可以配置一个 baseURL，之后都可以传相</description>
    </item>
    
    <item>
      <title>headers 模块单元测试</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/05.headers-%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/05.headers-%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>headers 模块单元测试 之前我们测试了 headers 的基础方法模块，接下来我们会从业务角度测试 headers 的相关业务逻辑。 测试代码编写 test/headers.spec.t</description>
    </item>
    
    <item>
      <title>HTTP 授权</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/04.http-%E6%8E%88%E6%9D%83/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/04.http-%E6%8E%88%E6%9D%83/</guid>
      <description>HTTP 授权 需求分析 HTTP 协议中的 Authorization 请求 header 会包含服务器用于验证用户代理身份的凭证，通常会在服务器返回 401 Unauthorized 状态码以及 WWW-Authenticate 消息头之后在后续请求中发送此消息头</description>
    </item>
    
    <item>
      <title>Jest 安装和配置</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/02.jest-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/02.jest-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</guid>
      <description>Jest 安装和配置 Jest 安装 由于我们的项目是使用 typescript-library-starter 初始化的，已经内置了 Jest 的安装，但是安装的版本却不是最新的，我们可以对 package.json 中的相关依赖版本做修改，重新安</description>
    </item>
    
    <item>
      <title>mergeConfig 模块单元测试</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/08.mergeconfig-%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/08.mergeconfig-%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>mergeConfig 模块单元测试 合并配置是 ts-axios 核心流程中非常重要的一个环节，我们需要为它的各种情况去编写测试。 测试代码编写 test/mergeConfig.sp</description>
    </item>
    
    <item>
      <title>ts-axios 编译与发布</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/12.ts-axios-%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8F%91%E5%B8%83/01.ts-axios-%E7%BC%96%E8%AF%91%E4%B8%8E%E5%8F%91%E5%B8%83/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/12.ts-axios-%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8F%91%E5%B8%83/01.ts-axios-%E7%BC%96%E8%AF%91%E4%B8%8E%E5%8F%91%E5%B8%83/</guid>
      <description>ts-axios 编译与发布 需求分析 前面的章节我们完成 ts-axios 库的代码编写和单元测试。这一章我们希望把代码部署发布到公共 npm 上，供别人下载使用。但是并不是所有人都会</description>
    </item>
    
    <item>
      <title>withCredentials</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/01.withcredentials/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/01.withcredentials/</guid>
      <description>withCredentials 需求分析 有些时候我们会发一些跨域请求，比如 http://domain-a.com 站点发送一个 http://api.domain-b.com/get 的请求，默认情况下，浏览器会根据同源策略限制这种跨域请求，但是可以通过 CORS 技术解决</description>
    </item>
    
    <item>
      <title>XSRF 防御</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/02.xsrf-%E9%98%B2%E5%BE%A1/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/02.xsrf-%E9%98%B2%E5%BE%A1/</guid>
      <description>XSRF 防御 需求分析 XSRF 又名 CSRF，跨站请求伪造，它是前端常见的一种攻击方式，我们先通过一张图来认识它的攻击手段。 CSRF 的防御手段有很多，比如验证请求</description>
    </item>
    
    <item>
      <title>上传和下载的进度监控</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/03.%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E7%9A%84%E8%BF%9B%E5%BA%A6%E7%9B%91%E6%8E%A7/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/03.%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E7%9A%84%E8%BF%9B%E5%BA%A6%E7%9B%91%E6%8E%A7/</guid>
      <description>上传和下载的进度监控 需求分析 有些时候，当我们上传文件或者是请求一个大体积数据的时候，希望知道实时的进度，甚至可以基于此做一个进度条的展示。 我</description>
    </item>
    
    <item>
      <title>初始化项目</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/03.ts-axios-%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/02.%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/03.ts-axios-%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/02.%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE/</guid>
      <description>初始化项目 创建代码仓库 接下来，我们开始初始化项目，首先我们先去 GitHub 上创建一个 repo，填好 repo 名称，以及写一下 README，对项目先做个简单的描</description>
    </item>
    
    <item>
      <title>前言</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/01.%E5%89%8D%E8%A8%80/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/01.%E5%89%8D%E8%A8%80/</guid>
      <description>前言 单元测试是前端一个很重要的方向，鉴别一个开源库是否靠谱的一个标准是它的单元测试是否完善。有了完整的单元测试，未来你去重构现有代码或者是增</description>
    </item>
    
    <item>
      <title>剩余模块单元测试</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/10.%E5%89%A9%E4%BD%99%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/10.%E5%89%A9%E4%BD%99%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>剩余模块单元测试 defaults 模块单元测试 defaults 模块为请求配置提供了一些默认的属性和方法，我们需要为其编写单元测试。 test/defaults.spec.t</description>
    </item>
    
    <item>
      <title>取消功能的设计与实现</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/09.ts-axios-%E5%8F%96%E6%B6%88%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/01.%E5%8F%96%E6%B6%88%E5%8A%9F%E8%83%BD%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/09.ts-axios-%E5%8F%96%E6%B6%88%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/01.%E5%8F%96%E6%B6%88%E5%8A%9F%E8%83%BD%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>取消功能的设计与实现 需求分析 有些场景下，我们希望能主动取消请求，比如常见的搜索框案例，在用户输入过程中，搜索框的内容也在不断变化，正常情况每</description>
    </item>
    
    <item>
      <title>合并配置的设计与实现</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/08.ts-axios-%E9%85%8D%E7%BD%AE%E5%8C%96%E5%AE%9E%E7%8E%B0/01.%E5%90%88%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/08.ts-axios-%E9%85%8D%E7%BD%AE%E5%8C%96%E5%AE%9E%E7%8E%B0/01.%E5%90%88%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>合并配置的设计与实现 需求分析 在之前的章节我们了解到，在发送请求的时候可以传入一个配置，来决定请求的不同行为。我们也希望 ts-axios 可以有默认配置，定义</description>
    </item>
    
    <item>
      <title>响应数据支持泛型</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/06.ts-axios-%E6%8E%A5%E5%8F%A3%E6%89%A9%E5%B1%95/03.%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E6%94%AF%E6%8C%81%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/06.ts-axios-%E6%8E%A5%E5%8F%A3%E6%89%A9%E5%B1%95/03.%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E6%94%AF%E6%8C%81%E6%B3%9B%E5%9E%8B/</guid>
      <description>响应数据支持泛型 需求分析 通常情况下，我们会把后端返回数据格式单独放入一个接口中： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // 请求接口数据 export interface ResponseData&amp;lt;T</description>
    </item>
    
    <item>
      <title>处理响应 data</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/06.%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94-data/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/06.%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94-data/</guid>
      <description>处理响应 data 需求分析 在我们不去设置 responseType 的情况下，当服务端返回给我们的数据是字符串类型，我们可以尝试去把它转换成一个 JSON 对象。例如： 1 data: &amp;#34;{&amp;#34;a&amp;#34;:1,&amp;#34;b&amp;#34;:2}&amp;#34; 我们把它转</description>
    </item>
    
    <item>
      <title>处理响应 header</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/05.%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94-header/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/05.%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94-header/</guid>
      <description>处理响应 header 需求分析 我们通过 XMLHttpRequest 对象的 getAllResponseHeaders 方法获取到的值是如下一段字符串： 1 2 3 4 5 6 date: Fri, 05 Apr 2019 12:40:49 GMT etag: W/&amp;#34;d-Ssxx4FRxEutDLwo2+xkkxKc4y0k&amp;#34; connection: keep-alive x-powered-by: Express content-length: 13 content-type: application/json; charset=utf-8 每一行都是以回车符和换行</description>
    </item>
    
    <item>
      <title>处理请求 body 数据</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/02.%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82-body-%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/02.%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82-body-%E6%95%B0%E6%8D%AE/</guid>
      <description>处理请求 body 数据 需求分析 我们通过执行 XMLHttpRequest 对象实例的 send 方法来发送请求，并通过该方法的参数设置请求 body 数据，我们可以去 mdn 查阅该方法支持的参数类型。 我们</description>
    </item>
    
    <item>
      <title>处理请求 header</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/03.%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82-header/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/03.%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82-header/</guid>
      <description>处理请求 header 需求分析 我们上节课遗留了一个问题： 1 2 3 4 5 6 7 8 axios({ method: &amp;#39;post&amp;#39;, url: &amp;#39;/base/post&amp;#39;, data: { a: 1, b: 2 } }) 我们做了请求数据的处理，把 data 转换成了 JSON 字符串，但是数据</description>
    </item>
    
    <item>
      <title>处理请求 url 参数</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/01.%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82-url-%E5%8F%82%E6%95%B0/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/01.%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82-url-%E5%8F%82%E6%95%B0/</guid>
      <description>处理请求 url 参数 需求分析 还记得我们上节课遗留了一个问题，再来看这个例子： 1 2 3 4 5 6 7 8 axios({ method: &amp;#39;get&amp;#39;, url: &amp;#39;/base/get&amp;#39;, params: { a: 1, b: 2 } }) 我们希望最终请求的 url 是 /ba</description>
    </item>
    
    <item>
      <title>引用 ts-axios 库</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/12.ts-axios-%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8F%91%E5%B8%83/02.%E5%BC%95%E7%94%A8-ts-axios-%E5%BA%93/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/12.ts-axios-%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8F%91%E5%B8%83/02.%E5%BC%95%E7%94%A8-ts-axios-%E5%BA%93/</guid>
      <description>引用 ts-axios 库 在 TS 项目中引用 我们借助于 vue-cli 脚手架创建一个 TypeScript 的 Vue 项目，然后我们把 Vue 官网上一段使用 axios 发请求的 demo 代码抄过来。 我们需要先执行 npm install ts-axios-new 安装 ts-axios 库。</description>
    </item>
    
    <item>
      <title>扩展 create 静态接口</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/08.ts-axios-%E9%85%8D%E7%BD%AE%E5%8C%96%E5%AE%9E%E7%8E%B0/03.%E6%89%A9%E5%B1%95-create-%E9%9D%99%E6%80%81%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/08.ts-axios-%E9%85%8D%E7%BD%AE%E5%8C%96%E5%AE%9E%E7%8E%B0/03.%E6%89%A9%E5%B1%95-create-%E9%9D%99%E6%80%81%E6%8E%A5%E5%8F%A3/</guid>
      <description>扩展 axios.create 静态接口 需求分析 目前为止，我们的 axios 都是一个单例，一旦我们修改了 axios 的默认配置，会影响所有的请求。我们希望提供了一个 axios.create 的静态接口允许我们创</description>
    </item>
    
    <item>
      <title>扩展接口</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/06.ts-axios-%E6%8E%A5%E5%8F%A3%E6%89%A9%E5%B1%95/01.%E6%89%A9%E5%B1%95%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/06.ts-axios-%E6%8E%A5%E5%8F%A3%E6%89%A9%E5%B1%95/01.%E6%89%A9%E5%B1%95%E6%8E%A5%E5%8F%A3/</guid>
      <description>扩展接口 需求分析 为了用户更加方便地使用 axios 发送请求，我们可以为所有支持请求方法扩展一些接口： axios.request(config) axios.get(url[, config]) axios.delete(url[, config]) axios.head(url[, config]) axios.options(url[, config]) axios.post(url[, data[, config]]) axios.put(url[, data[, config]]) axios.patch(url[, data[, config]]) 如果使用了这些</description>
    </item>
    
    <item>
      <title>拦截器模块单元测试</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/07.%E6%8B%A6%E6%88%AA%E5%99%A8%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/07.%E6%8B%A6%E6%88%AA%E5%99%A8%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>拦截器模块单元测试 拦截器是 ts-axios 库一个非常实用的功能，接下来我们来编写它的测试代码。 测试代码编写 test/interceptor.spec.ts</description>
    </item>
    
    <item>
      <title>拦截器设计与实现</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/07.ts-axios-%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AE%9E%E7%8E%B0/01.%E6%8B%A6%E6%88%AA%E5%99%A8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/07.ts-axios-%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AE%9E%E7%8E%B0/01.%E6%8B%A6%E6%88%AA%E5%99%A8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>拦截器设计与实现 需求分析 我们希望能对请求的发送和响应做拦截，也就是在发送请求之前和接收到响应之后做一些额外逻辑。 我们希望设计的拦截器的使用方</description>
    </item>
    
    <item>
      <title>编写基础请求代码</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/03.ts-axios-%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/03.%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80%E8%AF%B7%E6%B1%82%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/03.ts-axios-%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/03.%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80%E8%AF%B7%E6%B1%82%E4%BB%A3%E7%A0%81/</guid>
      <description>编写基础请求代码 我们这节课开始编写 ts-axios 库，我们的目标是实现简单的发送请求功能，即客户端通过 XMLHttpRequest 对象把请求发送到 server 端，server 端能收到请求并响</description>
    </item>
    
    <item>
      <title>自定义参数序列化</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/06.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E5%BA%8F%E5%88%97%E5%8C%96/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/06.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
      <description>自定义参数序列化 需求分析 在之前的章节，我们对请求的 url 参数做了处理，我们会解析传入的 params 对象，根据一定的规则把它解析成字符串，然后添加在 url 后面。</description>
    </item>
    
    <item>
      <title>自定义合法状态码</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/05.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%88%E6%B3%95%E7%8A%B6%E6%80%81%E7%A0%81/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/05.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%88%E6%B3%95%E7%8A%B6%E6%80%81%E7%A0%81/</guid>
      <description>自定义合法状态码 需求分析 之前 ts-axios 在处理响应结果的时候，认为 HTTP status 在 200 和 300 之间是一个合法值，在这个区间之外则创建一个错误。有些时候我们想自定义这个</description>
    </item>
    
    <item>
      <title>获取响应数据</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/04.%E8%8E%B7%E5%8F%96%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/04.ts-axios-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/04.%E8%8E%B7%E5%8F%96%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE/</guid>
      <description>获取响应数据 需求分析 在前面的章节中，我们发送的请求都可以从网络层面接收到服务端返回的数据，但是代码层面并没有做任何关于返回数据的处理。我们希</description>
    </item>
    
    <item>
      <title>请求取消模块单元测试</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/09.%E8%AF%B7%E6%B1%82%E5%8F%96%E6%B6%88%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/09.%E8%AF%B7%E6%B1%82%E5%8F%96%E6%B6%88%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>请求取消模块单元测试 请求取消模块是 ts-axios 库核心流程其中一个分支，也是非常重要的模块，我们将从基础库和业务流程模块 2 个方面去编写单元测试。 Cancel 类单元</description>
    </item>
    
    <item>
      <title>请求和响应配置化</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/08.ts-axios-%E9%85%8D%E7%BD%AE%E5%8C%96%E5%AE%9E%E7%8E%B0/02.%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E9%85%8D%E7%BD%AE%E5%8C%96/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/08.ts-axios-%E9%85%8D%E7%BD%AE%E5%8C%96%E5%AE%9E%E7%8E%B0/02.%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E9%85%8D%E7%BD%AE%E5%8C%96/</guid>
      <description>请求和响应配置化 需求分析 官方的 axios 库 给默认配置添加了 transformRequest 和 transformResponse 两个字段，它们的值是一个数组或者是一个函数。 其中 transformRequest 允许你在将请求数据发送到服务器之前</description>
    </item>
    
    <item>
      <title>请求模块单元测试</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/04.%E8%AF%B7%E6%B1%82%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/04.%E8%AF%B7%E6%B1%82%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>请求模块单元测试 请求模块是 axios 最基础的模块，通过一个 axios 方法发送 Ajax 请求。 jasmine-ajax Jasmine 是一个 BDD(行为驱动开发)的测试框架，它有很多成熟的插件，比如我们</description>
    </item>
    
    <item>
      <title>辅助模块单元测试</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/03.%E8%BE%85%E5%8A%A9%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/11.ts-axios-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/03.%E8%BE%85%E5%8A%A9%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>辅助模块单元测试 准备工作 通常我们会优先为一个库的辅助方法编写测试，我们会优先为 ts-axios 库的 helpers 目录下的模块编写测试。我们在 test 目录下创建一个 helpers 目录，创</description>
    </item>
    
    <item>
      <title>错误信息增强</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/05.ts-axios-%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/02.%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E5%A2%9E%E5%BC%BA/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/05.ts-axios-%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/02.%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E5%A2%9E%E5%BC%BA/</guid>
      <description>错误信息增强 需求分析 上一节课我们已经捕获了几类 AJAX 的错误，但是对于错误信息提供的非常有限，我们希望对外提供的信息不仅仅包含错误文本信息，还包括</description>
    </item>
    
    <item>
      <title>错误处理</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/05.ts-axios-%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/01.%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/05.ts-axios-%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/01.%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <description>错误处理 需求分析 在上一章节，我们实现了 ts-axios 的基础功能，但目前为止我们都是处理了正常接收请求的逻辑，并没有考虑到任何错误情况的处理，这对于一个程</description>
    </item>
    
    <item>
      <title>需求分析</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/03.ts-axios-%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/01.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/03.ts-axios-%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/01.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/</guid>
      <description>需求分析 接下来的章节，我们会使用 TypeScript 来重构 axios，重构之前，我们需要简单地做一些需求分析，看一下我们这次重构需要支持哪些 feature。 Features</description>
    </item>
    
    <item>
      <title>静态方法扩展</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/08.%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E6%89%A9%E5%B1%95/</link>
      <pubDate>Sun, 05 Jan 2020 10:56:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/10.ts-axios-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/08.%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E6%89%A9%E5%B1%95/</guid>
      <description>静态方法扩展 需求分析 官方 axios 库实现了 axios.all、axios.spread 等方法，它们的用法如下： 1 2 3 4 5 6 7 8 9 10 11 12 function getUserAccount() { return axios.get(&amp;#39;/user/12345&amp;#39;); } function</description>
    </item>
    
    <item>
      <title>《TypeScript 从零实现 axios》</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/30.typescript-%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/</link>
      <pubDate>Sun, 05 Jan 2020 10:40:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/30.typescript-%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/</guid>
      <description></description>
    </item>
    
    <item>
      <title>函数</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/05.%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 05 Jan 2020 10:17:47 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/05.%E5%87%BD%E6%95%B0/</guid>
      <description>函数 函数是 JavaScript 应用程序的基础，它帮助你实现抽象层，模拟类，信息隐藏和模块。在 TypeScript 里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义行为的</description>
    </item>
    
    <item>
      <title>变量声明</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/02.%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/</link>
      <pubDate>Sun, 05 Jan 2020 10:17:47 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/02.%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/</guid>
      <description>变量声明 let 和 const 是 JavaScript 里相对较新的变量声明方式。let 在很多方面与 var 是相似的，但是可以帮助大家避免在 JavaScript 里常见一些问题。const 是对 let 的一个增强</description>
    </item>
    
    <item>
      <title>基础类型</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/01.%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 05 Jan 2020 10:17:47 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/01.%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</guid>
      <description>基础类型 TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。 布尔值 最基本的数据类型就是简单的 true/false 值，在JavaScript 和</description>
    </item>
    
    <item>
      <title>接口</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/03.%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Sun, 05 Jan 2020 10:17:47 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/03.%E6%8E%A5%E5%8F%A3/</guid>
      <description>接口 TypeScript 的核心原则之一是对值所具有的结构进行类型检查。它有时被称做“鸭式辨型法”或“结构性子类型化”。 在 TypeScript 里，接口的作用就是为这些类型命名和为</description>
    </item>
    
    <item>
      <title>泛型</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/06.%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Sun, 05 Jan 2020 10:17:47 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/06.%E6%B3%9B%E5%9E%8B/</guid>
      <description>泛型 软件工程中，我们不仅要创建定义良好且一致的 API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在</description>
    </item>
    
    <item>
      <title>类</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/04.%E7%B1%BB/</link>
      <pubDate>Sun, 05 Jan 2020 10:17:47 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/04.%E7%B1%BB/</guid>
      <description>类 对于传统的 JavaScript 程序我们会使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员使用这些语法就有些棘手，因为他们用的是</description>
    </item>
    
    <item>
      <title>类型推断</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/07.%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD/</link>
      <pubDate>Sun, 05 Jan 2020 10:17:47 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/07.%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD/</guid>
      <description>类型推断 这节介绍 TypeScript 里的类型推断。即，类型是在哪里如何被推断的。 基础 TypeScript 里，在有些没有明确指出类型的地方，类型推断会帮助提供类型。如下面的例子：</description>
    </item>
    
    <item>
      <title>高级类型</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/08.%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 05 Jan 2020 10:17:47 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/02.typescript-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/08.%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B/</guid>
      <description>高级类型 交叉类型 交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。 例如，</description>
    </item>
    
    <item>
      <title>安装 TypeScript</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/01.%E5%88%9D%E8%AF%86-typescript/02.%E5%AE%89%E8%A3%85-typescript/</link>
      <pubDate>Sun, 05 Jan 2020 10:15:07 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/01.%E5%88%9D%E8%AF%86-typescript/02.%E5%AE%89%E8%A3%85-typescript/</guid>
      <description>安装 TypeScript 命令行运行如下命令，全局安装 TypeScript： 1 npm install -g typescript 安装完成后，在控制台运行如下命令，检查安装是否成功(3.x)： 1 tsc -V</description>
    </item>
    
    <item>
      <title>简介</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/01.%E5%88%9D%E8%AF%86-typescript/01.%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 05 Jan 2020 10:15:07 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/01.%E5%88%9D%E8%AF%86-typescript/01.%E7%AE%80%E4%BB%8B/</guid>
      <description>简介 TypeScript 作为 JavaScript 语言的超集，它为 JavaScript 添加了可选择的类型标注，大大增强了代码的可读性和可维护性。同时，它提供最新和不断发展的 JavaScript 特性，能让我们建立更健</description>
    </item>
    
    <item>
      <title>编写第一个 TypeScript 程序</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/01.%E5%88%9D%E8%AF%86-typescript/03.%E7%BC%96%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA-typescript-%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Sun, 05 Jan 2020 10:15:07 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/11.typescript%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/01.%E5%88%9D%E8%AF%86-typescript/03.%E7%BC%96%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA-typescript-%E7%A8%8B%E5%BA%8F/</guid>
      <description>编写第一个 TypeScript 程序 在编辑器，将下面的代码输入到 greeter.ts 文件里： 1 2 3 4 5 6 7 function greeter (person) { return &amp;#39;Hello, &amp;#39; + person } let user = &amp;#39;Yee&amp;#39; console.log(greeter(user)) 编译代码 我们使用了 .ts 扩展名，但是这段代码仅</description>
    </item>
    
    <item>
      <title>判断是否为移动端浏览器</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/60.%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8/</link>
      <pubDate>Sat, 04 Jan 2020 15:25:11 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/60.%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8/</guid>
      <description>判断是否为移动端浏览器 1 2 3 4 5 6 const flag = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i); if(flag){ // 移动端 } else { // PC端 }</description>
    </item>
    
    <item>
      <title>提高学习效率的策略</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/02.%E6%8F%90%E9%AB%98%E5%AD%A6%E4%B9%A0%E6%95%88%E7%8E%87%E7%9A%84%E7%AD%96%E7%95%A5/</link>
      <pubDate>Sat, 04 Jan 2020 11:54:14 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/02.%E6%8F%90%E9%AB%98%E5%AD%A6%E4%B9%A0%E6%95%88%E7%8E%87%E7%9A%84%E7%AD%96%E7%95%A5/</guid>
      <description>提高学习效率的策略 推荐一本关于学习方法的书《认知天性》，里面有讲到有一些简单实用的学习策略，能让大家学的更好、记得更牢，而且这些策略人人可用</description>
    </item>
    
    <item>
      <title>处理问题的思路</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/05.%E5%A4%84%E7%90%86%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF/</link>
      <pubDate>Fri, 03 Jan 2020 14:36:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/05.%E5%A4%84%E7%90%86%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF/</guid>
      <description>处理问题的思路 工作中遇到问题？ 遇到问题卡住了，可以先休息一会儿，调整一下状态，喝杯水走走放松放松，然后想想有没有遗漏的地方，或者其他的解决方</description>
    </item>
    
    <item>
      <title>自律小建议</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/04.%E8%87%AA%E5%BE%8B%E5%B0%8F%E5%BB%BA%E8%AE%AE/</link>
      <pubDate>Fri, 03 Jan 2020 14:35:18 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/04.%E8%87%AA%E5%BE%8B%E5%B0%8F%E5%BB%BA%E8%AE%AE/</guid>
      <description>自律小建议 培养专注 练习冥想、瑜伽等 排除外界干扰 手机调到勿扰，在图书馆学习等 规定学习时间 番茄时间管理——使用番茄时间管理法，选择一个待完成的任</description>
    </item>
    
    <item>
      <title>提高记忆的技巧</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/03.%E6%8F%90%E9%AB%98%E8%AE%B0%E5%BF%86%E7%9A%84%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Fri, 03 Jan 2020 14:34:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/03.%E6%8F%90%E9%AB%98%E8%AE%B0%E5%BF%86%E7%9A%84%E6%8A%80%E5%B7%A7/</guid>
      <description>提高记忆的技巧 多个感官并用 记忆时调用一切感官。没人的话可以大声阅读，有人的话可以默念，轻微摇晃手指等，有助于保持专注。 重复记忆 每天留出半个到</description>
    </item>
    
    <item>
      <title>GitHub &#43; jsDelivr &#43; TinyPNG&#43; PicGo 打造稳定快速、高效免费图床</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/04.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/03.github-&#43;-jsdelivr-&#43;-tinypng&#43;-picgo-%E6%89%93%E9%80%A0%E7%A8%B3%E5%AE%9A%E5%BF%AB%E9%80%9F%E9%AB%98%E6%95%88%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</link>
      <pubDate>Fri, 03 Jan 2020 12:55:43 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/04.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/03.github-&#43;-jsdelivr-&#43;-tinypng&#43;-picgo-%E6%89%93%E9%80%A0%E7%A8%B3%E5%AE%9A%E5%BF%AB%E9%80%9F%E9%AB%98%E6%95%88%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</guid>
      <description>GitHub + jsDelivr + TinyPNG+ PicGo 打造稳定快速、高效免费图床 前言 Q：为什么要使用图床呢？什么是图床？ A：写博客文章时，图片的上传和存放是一个问题，有的朋友可能会把</description>
    </item>
    
    <item>
      <title>GitHub Actions 定时运行代码：每天定时百度链接推送</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/02.github%E6%8A%80%E5%B7%A7/03.github-actions-%E5%AE%9A%E6%97%B6%E8%BF%90%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%AF%8F%E5%A4%A9%E5%AE%9A%E6%97%B6%E7%99%BE%E5%BA%A6%E9%93%BE%E6%8E%A5%E6%8E%A8%E9%80%81/</link>
      <pubDate>Mon, 30 Dec 2019 21:23:00 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/02.github%E6%8A%80%E5%B7%A7/03.github-actions-%E5%AE%9A%E6%97%B6%E8%BF%90%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%AF%8F%E5%A4%A9%E5%AE%9A%E6%97%B6%E7%99%BE%E5%BA%A6%E9%93%BE%E6%8E%A5%E6%8E%A8%E9%80%81/</guid>
      <description>GitHub Actions 定时运行代码：每天定时百度链接推送 博客上线已经有些日子了，却发现百度迟迟没有收录我的博客页面，在百度推送工具当中除了有自动推送的代码嵌入</description>
    </item>
    
    <item>
      <title>GitHub Actions 实现自动部署静态博客</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/02.github%E6%8A%80%E5%B7%A7/02.github-actions-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 27 Dec 2019 11:44:41 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/02.github%E6%8A%80%E5%B7%A7/02.github-actions-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</guid>
      <description>GitHub Actions 实现自动部署静态博客 前言 我使用vuepress搭建了一个静态博客，挂在了Github pages和Coding pages上面。 coding pages</description>
    </item>
    
    <item>
      <title>nodejs递归读取所有文件</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/03.nodejs/01.nodejs%E9%80%92%E5%BD%92%E8%AF%BB%E5%8F%96%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/</link>
      <pubDate>Thu, 26 Dec 2019 15:57:32 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/03.nodejs/01.nodejs%E9%80%92%E5%BD%92%E8%AF%BB%E5%8F%96%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/</guid>
      <description>nodejs递归读取所有文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 var fs = require(&amp;#39;fs&amp;#39;); var path = require(&amp;#39;path&amp;#39;); function readFileList(dir, filesList = []) { const files = fs.readdirSync(dir); console.log(files); files.forEach((item, index) =&amp;gt; { var fullPath = path.join(dir, item); const stat = fs.statSync(fullPath); if (stat.isDirectory()) {</description>
    </item>
    
    <item>
      <title>CSS3之animation动画</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/08.css3%E4%B9%8Banimation%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/08.css3%E4%B9%8Banimation%E5%8A%A8%E7%94%BB/</guid>
      <description>CSS3之animation动画 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description>
    </item>
    
    <item>
      <title>CSS3之transition过渡</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/07.css3%E4%B9%8Btransition%E8%BF%87%E6%B8%A1/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/07.css3%E4%B9%8Btransition%E8%BF%87%E6%B8%A1/</guid>
      <description>CSS3之transition过渡 html结构 1 2 3 4 5 &amp;lt;div class=&amp;#34;box1&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;div1&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;div2&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;div3&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 先给元素设置transition过渡，指定样式和时间，这里设置al</description>
    </item>
    
    <item>
      <title>ES6面向对象</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/04.es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/04.es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>ES6面向对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 //面向对象封装 class</description>
    </item>
    
    <item>
      <title>flex布局案例-圣杯布局</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/04.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/04.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80/</guid>
      <description>flex布局案例-圣杯布局 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19</description>
    </item>
    
    <item>
      <title>flex布局案例-基础</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/02.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/02.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E5%9F%BA%E7%A1%80/</guid>
      <description>flex布局案例-基础 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21</description>
    </item>
    
    <item>
      <title>flex布局案例-网格布局</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/05.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/05.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/</guid>
      <description>flex布局案例-网格布局 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19</description>
    </item>
    
    <item>
      <title>flex布局案例-输入框布局</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/06.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E8%BE%93%E5%85%A5%E6%A1%86%E5%B8%83%E5%B1%80/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/06.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E8%BE%93%E5%85%A5%E6%A1%86%E5%B8%83%E5%B1%80/</guid>
      <description>flex布局案例-输入框布局 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18</description>
    </item>
    
    <item>
      <title>flex布局案例-骰子</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/03.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E9%AA%B0%E5%AD%90/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/03.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E9%AA%B0%E5%AD%90/</guid>
      <description>flex布局案例-骰子 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21</description>
    </item>
    
    <item>
      <title>flex布局语法</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/01.flex%E5%B8%83%E5%B1%80%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/01.flex%E5%B8%83%E5%B1%80%E8%AF%AD%E6%B3%95/</guid>
      <description>flex布局语法 一、flex 布局是什么？ Flex是 Flexible Box 的缩写，意为&amp;quot;弹性布局&amp;rdquo;，用来为盒状模型提供最大的灵活性。 任何一</description>
    </item>
    
    <item>
      <title>GitHub高级搜索技巧</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/02.github%E6%8A%80%E5%B7%A7/01.github%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/02.github%E6%8A%80%E5%B7%A7/01.github%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/</guid>
      <description>GitHub高级搜索技巧 in:name &amp;lt;关键字&amp;gt; 仓库名称带关键字查询 in:description &amp;lt;关键字&amp;gt; 仓库描述带关键字查询 in:readme &amp;lt;关键字&amp;gt; RE</description>
    </item>
    
    <item>
      <title>Git使用手册</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/01.git%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/01.git%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</guid>
      <description>Git使用手册 安装 官网下载：https://git-scm.com/downloads 下载完成后使用默认进行安装。 安装完成后，在开始菜单里找</description>
    </item>
    
    <item>
      <title>Markdown使用教程</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/02.markdown%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/02.markdown%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</guid>
      <description>Markdown使用教程 一、Markdown 简介 Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。 应用 当前许多网站都广泛使</description>
    </item>
    
    <item>
      <title>new命令原理</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/02.new%E5%91%BD%E4%BB%A4%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/02.new%E5%91%BD%E4%BB%A4%E5%8E%9F%E7%90%86/</guid>
      <description>new命令原理 使用new命令时，它后面的函数依次执行下面的步骤： 创建一个空对象，作为将要返回的实例对象。 将这个空对象的原型，指向构造函数的p</description>
    </item>
    
    <item>
      <title>npm常用命令</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/03.npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/03.npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>npm常用命令 简介 npm是跟随node一起安装的包（模块）管理器。常见的使用场景有以下几种： 允许用户从npm服务器下载别人编写的第三方包到本</description>
    </item>
    
    <item>
      <title>yaml语言教程</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/15.yaml%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/15.yaml%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/</guid>
      <description>yaml语言教程 简介 YAML 是 &amp;ldquo;YAML Ain&amp;rsquo;t a Markup Language&amp;rdquo;（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实</description>
    </item>
    
    <item>
      <title>使用Gitalk实现静态博客无后台评论系统</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/04.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/02.%E4%BD%BF%E7%94%A8gitalk%E5%AE%9E%E7%8E%B0%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%97%A0%E5%90%8E%E5%8F%B0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/04.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/02.%E4%BD%BF%E7%94%A8gitalk%E5%AE%9E%E7%8E%B0%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%97%A0%E5%90%8E%E5%8F%B0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</guid>
      <description>使用Gitalk实现静态博客无后台评论系统 前言 Gitalk，一个基于 Github Issue 和 Preact 开发的评论插件。 下面我们来用它在vuepress搭建的博客中搭建</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/05.%E5%85%B3%E4%BA%8E/01.%E5%85%B3%E4%BA%8E/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/05.%E5%85%B3%E4%BA%8E/01.%E5%85%B3%E4%BA%8E/</guid>
      <description>📚Blog 这是一个兼具博客文章、知识管理、文档查找的个人网站，主要内容是Web前端技术。如果你喜欢这个博客&amp;amp;主题欢迎到GitHub点</description>
    </item>
    
    <item>
      <title>友情链接</title>
      <link>http://doc.lyr-2000.xyz/friends/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/friends/</guid>
      <description>::: cardList 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68</description>
    </item>
    
    <item>
      <title>友情链接</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/99.%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/99.%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/</guid>
      <description>::: cardList 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68</description>
    </item>
    
    <item>
      <title>多种数组去重性能对比</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/06.%E5%A4%9A%E7%A7%8D%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/06.%E5%A4%9A%E7%A7%8D%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/</guid>
      <description>多种数组去重性能对比 测试模板 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // 创建一个 1 ~ 10w 的数组，Array.from为ES6语法 let arr1 = Array.from(new Array(1000000),</description>
    </item>
    
    <item>
      <title>小程序笔记</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/40.%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/40.%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0/</guid>
      <description>小程序笔记 基础课程部分 微信公众平台 https://mp.weixin.qq.com/ 注册时可选择类型：订阅号、服务号、小程序、企业微信 每个邮箱仅能注册一个小程序。 个人类型小程序：无法使用微</description>
    </item>
    
    <item>
      <title>解决百度无法收录搭建在GitHub上的个人博客的问题</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/04.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/01.%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E6%97%A0%E6%B3%95%E6%94%B6%E5%BD%95%E6%90%AD%E5%BB%BA%E5%9C%A8github%E4%B8%8A%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/04.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/01.%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E6%97%A0%E6%B3%95%E6%94%B6%E5%BD%95%E6%90%AD%E5%BB%BA%E5%9C%A8github%E4%B8%8A%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>解决百度无法收录搭建在GitHub上的静态博客的问题 ::: warning 如果你正在寻找本博客的搭建文档，博主建议您查看这个仓库的README。 ::: 背景 由于Gi</description>
    </item>
    
    <item>
      <title>面试问题集锦</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/03.%E9%9D%A2%E8%AF%95/01.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/03.%E9%9D%A2%E8%AF%95/01.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</guid>
      <description>面试问题集锦 请做一下自我介绍 回答提示： 一般人回答这个问题过于平常，只说姓名、年龄、工作经验，这些在简历上都有。其实，企业最希望知道的是求职者</description>
    </item>
    
    <item>
      <title></title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/cyclicbarrier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/cyclicbarrier/</guid>
      <description>cyclicBarrier 用法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public static void main(String[] args) { CyclicBarrier cb = new CyclicBarrier(2); new Thread(()-&amp;gt; { try { cb.await(); } catch (InterruptedException e) { e.printStackTrace(); } catch (BrokenBarrierException e) { e.printStackTrace(); } System.out.p</description>
    </item>
    
    <item>
      <title></title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81_%E6%B6%88%E6%81%AF%E6%9C%AA%E8%AF%BB%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81_%E6%B6%88%E6%81%AF%E6%9C%AA%E8%AF%BB%E6%95%B0/</guid>
      <description>你看到的未读消息提醒是真的吗？【分布式锁解决的问题】 消息和未读不一致的原因 那么在即时消息场景中，究竟会有哪些情况导致消息和未读数出现“不一致</description>
    </item>
    
    <item>
      <title></title>
      <link>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E6%89%8B%E6%9C%BAapp%E7%B3%BB%E7%BB%9F%E6%B6%88%E6%81%AF%E9%80%9A%E9%81%93apns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E6%B6%88%E6%81%AF%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81/%E6%89%8B%E6%9C%BAapp%E7%B3%BB%E7%BB%9F%E6%B6%88%E6%81%AF%E9%80%9A%E9%81%93apns/</guid>
      <description>APNs：聊一聊第三方系统级消息通道的事 在即时消息场景下，我们会依赖服务端推送技术来提升消息到达的实时性，以及通过各种手段来保证消息收发通道</description>
    </item>
    
  </channel>
</rss>