<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaSE on Even - A super concise theme for Hugo</title>
    <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/</link>
    <description>Recent content in JavaSE on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>lyr</copyright>
    <lastBuildDate>Mon, 16 Aug 2021 00:45:18 +0800</lastBuildDate><atom:link href="http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>java 传值</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/java%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%E4%B8%8E%E6%8C%89%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/java%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%E4%B8%8E%E6%8C%89%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/</guid>
      <description>[TOC] JAVA 按值传递 与 按引用传递 基本数据类型 数组 1 2 3 4 /* String[] myString 可以直接在函数修改值 */ ArrayList 容器 java 允许通过函数 来改变 ArrayList容器的值 说明 此时 Title 为</description>
    </item>
    
    <item>
      <title>java 基本数据类型</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%AF%B9%E8%B1%A1/</guid>
      <description>[TOC] 基本数据类型 对象封装 Java 对基本的数据类型进行了封装 为了方便操作基本类型值, 将 基本数据类型封装 成了类, 且在对象中 定义了属性和行为丰富了该数据的</description>
    </item>
    
    <item>
      <title>java异常</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/java%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/java%E5%BC%82%E5%B8%B8/</guid>
      <description>java 异常 [TOC] 一. 异常概述 什么是异常? java程序运行时期发生的不正常的情况 注意编译器并不会因为异常报错 异常就是java封装的专门用于异常问题处理</description>
    </item>
    
    <item>
      <title>java访问控制</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/java%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/java%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</guid>
      <description>JAVA访问控制 1. java 数据成员访问指示符 分为 public, protected, private, 友好的 四大类, 与c++不同, java类的每一个数据成员都必须有指示一个标识符. 1. 1 友好的 如果</description>
    </item>
    
    <item>
      <title>java运行</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/%E5%85%B3%E4%BA%8Ejava%E8%BF%90%E8%A1%8C/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/%E5%85%B3%E4%BA%8Ejava%E8%BF%90%E8%A1%8C/</guid>
      <description>关于java 运行 ###1. .java 和 .class 文件 .java 是自己(开发者)编写的源文件 .class 是通过编译 .java 文件之后生成的文件 Tips : **java 程序的运行依赖于虚拟机(JVM),这也是ja</description>
    </item>
    
    <item>
      <title>一切皆对象</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/%E4%B8%80%E5%88%87%E7%9A%86%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/%E4%B8%80%E5%88%87%E7%9A%86%E5%AF%B9%E8%B1%A1/</guid>
      <description>[TOC] Java对象的根类 Object Object: Java的上帝类 java中所有的类都是继承于一个特殊的类 : object 1 2 3 4 5 6 7 8 9 class A{ } // 其实是下面的省略写法 // 即其实A</description>
    </item>
    
    <item>
      <title>内部类</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/%E5%86%85%E9%83%A8%E7%B1%BB/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/%E5%86%85%E9%83%A8%E7%B1%BB/</guid>
      <description>[TOC] 内部类 什么是内部类? 将一个类定义在另一个类里面, 则对里面的类就称为内部类. 在访问特点上 内部类可以直接去访问外部类的成员, 即使是私有成员 外部</description>
    </item>
    
    <item>
      <title>反射</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/%E5%8F%8D%E5%B0%84/</guid>
      <description>反射 [TOC] 一. 什么是反射 将 类的各个组成部分 封装为 对应Class对象的各个字段 行为就是反射机制 将 每一个类 .class 文件的描述一个类型的信息 封装成一个对象 !!</description>
    </item>
    
    <item>
      <title>多态</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/%E5%A4%9A%E6%80%81/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/%E5%A4%9A%E6%80%81/</guid>
      <description>[TOC] 多态 Java 程序设计的的三大特性: 松耦合 : 降低类与类之间的联系 高内聚 : 一个模块只实现一个单一的功能 紧封装 : 成员变量最好作为私有, 通过公有的方法进</description>
    </item>
    
    <item>
      <title>抽象类和接口</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/</guid>
      <description>[TOC] 抽象类 和 接口 抽象类 为什么要衍生出抽象类? 联系到上一节的类多态, 基类被子类重写(override)的方法其实只是起一个规范的作用, 我们并不会</description>
    </item>
    
    <item>
      <title>泛型</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/%E6%B3%9B%E5%9E%8B/</guid>
      <description>泛型 OverView JDK 1.5 (5.0) 以后开始引入 泛型, 是一种 安全性机制 早期容器没有泛型机制, 所以统一接受的 Object 类型, 很容易造成 ClassCastException 异常 1 2 3 4 5 6 7 8 9 10 11 /* 使得 ArrayList 只能</description>
    </item>
    
    <item>
      <title>类再生</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/%E7%B1%BB%E5%86%8D%E7%94%9F/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/%E7%B1%BB%E5%86%8D%E7%94%9F/</guid>
      <description>[TOC] 类再生(合成与继承) 1. 类的合成 所谓类的合成就是在一个类中加入另外已经存在的类. 只需要在新类简单的置入对象的句柄即可 例如: 一个汽车类便可以由</description>
    </item>
    
    <item>
      <title>类初始化</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E9%87%8D%E8%BD%BD/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/javase/%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E9%87%8D%E8%BD%BD/</guid>
      <description>类初始化和重载 1. 类的初始化构造函数 和c++一样, java中类的构造函数名就是类名 构造函数没有返回值, 且与void返回值有明显的区别 当对象没有</description>
    </item>
    
  </channel>
</rss>
