<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JVM on Even - A super concise theme for Hugo</title>
    <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/jvm/</link>
    <description>Recent content in JVM on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>lyr</copyright>
    <lastBuildDate>Mon, 16 Aug 2021 00:45:17 +0800</lastBuildDate><atom:link href="http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/jvm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>java内存区域</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/jvm/java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/jvm/java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</guid>
      <description>Java 内存区域 [TOC] 一. 运行时内存区域 Java 虚拟机在执行 Java 程序的过程中会把它管理的内存划分成若干个不同的数据区域 : 共享和私有 一个 Java 进程 可以包含多个 线程,</description>
    </item>
    
    <item>
      <title>java类加载</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/jvm/java%E7%B1%BB%E5%8A%A0%E8%BD%BD/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/jvm/java%E7%B1%BB%E5%8A%A0%E8%BD%BD/</guid>
      <description>[TOC] JVM JVM 可以不只运行 Java 文件, 而是可以运行所有的 可以编译成字节码文件的 语言 虚拟机的实现不只一种, 我们最常用的为 HotSpot 虚拟机 JVM 结束生命周期: 执行了 System.exit(); 正</description>
    </item>
    
    <item>
      <title>垃圾回收机制</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/jvm/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/java/jvm/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</guid>
      <description>垃圾回收机制 [TOC] Java 内存回收主要围绕以下流程展开: 一. 揭开 JVM 内存分配与回收神秘面纱 Java 的自动内存管理 最核心的内容 是针对 堆中对象 的分配与回收 Java 堆是垃</description>
    </item>
    
  </channel>
</rss>
