<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>10.校招笔记 on Even - A super concise theme for Hugo</title>
    <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 10.校招笔记 on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>lyr</copyright>
    <lastBuildDate>Sun, 15 Aug 2021 20:58:14 +0800</lastBuildDate><atom:link href="http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>antd</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/react-ecology/antd/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/react-ecology/antd/</guid>
      <description>antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。 Antd 安装 使用 npm 或者 yarn 安装 1 2 3 4 5 6 # npm 安装 $npm install antd --save # yarn 安装 $yarn add antd 引入 1 2 3 4</description>
    </item>
    
    <item>
      <title>Composer</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/composer/composer/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/composer/composer/</guid>
      <description>[TOC] Composer Composer是 PHP 世界里用于管理项目依赖的工具 相关命令 创建一个项目 - create-project 1 2 # 创建一个 laravel 项目, 本地写入文件夹 larabbs 中. &amp;gt;$composer create-project laravel/laravel larabbs --prefer-dist &amp;#34;6.*&amp;#34; 设置国内淘</description>
    </item>
    
    <item>
      <title>Hadoop</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/hadoop/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/hadoop/</guid>
      <description>Hadoop 解决的问题 海量数据的 存储 (HDFS) 分布式 的存储系统 文件 分块, 分布式的存于不同的机器, 每一个文件块可以存在多个副本存在于多个机器上. Namenode 可以存储每个文</description>
    </item>
    
    <item>
      <title>HDFS 设计原理</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/hdfs-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/hdfs-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/</guid>
      <description>HDFS 设计原理 [TOC] 一、介绍 HDFS （Hadoop Distributed File System）是Hadoop下的分布式文件系统，具有高容错、高吞吐量等特性，可以部署在低成本的硬件上</description>
    </item>
    
    <item>
      <title>javaScript</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/react-ecology/javascript/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/react-ecology/javascript/</guid>
      <description>JavaScript-basic 数组 数组基本操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // CRUD var arr = [&amp;#39;hello&amp;#39;, &amp;#39;world&amp;#39;, &amp;#39;React&amp;#39;] // ---------------------- 新增元素 // 写法1 arr.push(&amp;#39;Java&amp;#39;) // 写法2 ...为扩展运算符 [...arr, &amp;#39;Java&amp;#39;] // 删除元素 // index 为需要</description>
    </item>
    
    <item>
      <title>MongoDB</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/mongodb/mongdb/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/mongodb/mongdb/</guid>
      <description>MongDB [TOC] 作为缓存层而存在, 和 redis 最大的区别在于, MongoDB 存储的数据为 BSON 数据, 即为结构化的数据 所谓 BSON 其实即为 JSON 的扩展版本 MongDB 支持可类似 SQL 的结构化查询操作 以下</description>
    </item>
    
    <item>
      <title>MySQL分布式设计</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/mysql/mysql%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/mysql/mysql%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%BE%E8%AE%A1/</guid>
      <description>MySQL 分布式设计 [TOC] 一般来说, 为了应对高并发的问题, MySQL 可以设计为 分布式, 也就是 主从表设计模式 , 实现请求的 读写分离, 从而提高并发性能. 主表 : 主数据库</description>
    </item>
    
    <item>
      <title>MYSQL基本操作</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/mysql/mysql%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/mysql/mysql%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <description>MySQL 基本操作 [TOC] DML, DDL, DCL 的区别 DML(data manipulation language） 就是数据记录的 增删改查 它们是SELECT、UPDATE、INSERT、DELETE，就象它的名</description>
    </item>
    
    <item>
      <title>Mysql基础</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/mysql/readme/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/mysql/readme/</guid>
      <description>MySQL 基础 概念 关系数据库设计理论 SQL 基本语法 查询 高阶 索引 分布式设计 锁与事物 其他 改数据库密码</description>
    </item>
    
    <item>
      <title>Nginx负载均衡</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/nginx-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/nginx-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</guid>
      <description>[TOC] Nginx 负载均衡 Nginx 即为一种反向代理服务器, 最为一个 HTTP服务器的时候 可以获取用户的 HTTP 请求, 然后以某种分发策略分发到 我们的 分布式集群上 Nginx 分发策略</description>
    </item>
    
    <item>
      <title>npm</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/npm/npm/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/npm/npm/</guid>
      <description>[TOC] I. 概述 Node Package Manager 一个 包管理工具, 可以看作为 前端 开发的 Maven II. npm 常用操作 1. 安装依赖 以前 以前引入一个依赖如 Jquery我们通常的做法是 1 2 3 4 5 6 &amp;lt;html&amp;gt; &amp;lt;-</description>
    </item>
    
    <item>
      <title>react</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/react-ecology/react/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/react-ecology/react/</guid>
      <description>[TOC] 安装 创建新的React应用 Required npm , node 1 2 3 4 5 6 7 8 # 创建一个名为 my-app 的 react 应用 npx create-react-app my-app cd my-app # 启动 npm run start 核心文件 1 2 3 4 5 public - index.html src - App.js - index.js # 整个项</description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/redis/redis/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/redis/redis/</guid>
      <description>Redis 一. 概述 二. 数据类型 String List (列表) set 集合 hset 散列表 zset 有序集合 字段自增命令 Redis 获得所有的 key 值 三. Redis 持久化方式 四. Redis 如何于 MySQL保持数据的一致性</description>
    </item>
    
    <item>
      <title>redux</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/react-ecology/redux/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/react-ecology/redux/</guid>
      <description>Redux = Reducer + Flux Redux 作为 React 生态的重要组成部分，是前端数据层框架，用于负责大型项目中各个组件之中的传值。在引入Redux之后便可以使用一个全局的数据层</description>
    </item>
    
    <item>
      <title>spring RPC</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/prc/rpc-in-spring/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/prc/rpc-in-spring/</guid>
      <description>Spring RPC [TOC] 一. 概述 RPC (Rome Procedure call) 即为远程过程调用, 基于 客户端 与 服务端 的通信模式, 可以实现进程间的通信. 通信的协议可以基于多种例如 : HTTP, RMI &amp;hellip; 利用RPC 的所</description>
    </item>
    
    <item>
      <title>springful in spring</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/prc/restful-in-spring/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/prc/restful-in-spring/</guid>
      <description>RESTful 风格 [TOC] 一. RESTful API 概述 RESTful API 其实就可以看作为 基于 HTTP 的 web 服务接口 Spring 中 RESTful 接口的返回值可以有多种 : application/html : 最普通的 HTML 类型的返回类型, 这种类型需要经过 Spring 试图</description>
    </item>
    
    <item>
      <title>vim</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/vim/vim/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/vim/vim/</guid>
      <description>[TOC] VIM Vim/Vi 是一个强大的全屏幕文本编辑器, 可以建立,编辑,显示文本. 最重要是可以在Linux上不下载编辑器,而直接方便的进行文本代码编辑. Vim/</description>
    </item>
    
    <item>
      <title>Xcode</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/c&#43;&#43;/xcode/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/c&#43;&#43;/xcode/</guid>
      <description>Xcode 写 c++ 时候遇到的一些问题 1. 读取文件(txt)的路径问题 一直显示读取文件失败 (file not found) , 文件和代码都放在一个文件夹下面, 这时需要改工作目录的默认文</description>
    </item>
    
    <item>
      <title>zookeeper</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/zookeeper/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/zookeeper/</guid>
      <description>Zookeeper [TOC] 概述 ZooKeeper 是一个为分布式服务器提供 协调服务 的 Apache 项目 一个基于 观察者模式的 的设计模式分布式服务管理框架 负责存储个管理大家都关心的数据, 接受观察者</description>
    </item>
    
    <item>
      <title>关系数据库设计理论</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/mysql/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E7%90%86%E8%AE%BA/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/mysql/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E7%90%86%E8%AE%BA/</guid>
      <description>[TOC] 一. 关系数据库设计理论 函数依赖 记 A-&amp;gt;B 表示 A 函数决定 B，也可以说 B 函数依赖于 A。 functional dependency A → B is valid in a relational table R or that A functionally determines B 假设 X, Y, Z be the nonempty subsets of {A1, &amp;hellip;, An}</description>
    </item>
    
    <item>
      <title>分布式事务</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</guid>
      <description>分布式事务</description>
    </item>
    
    <item>
      <title>分布式系统设计</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</guid>
      <description>分布式系统设计 [TOC] 分布式系统的经典基础理论 分布式系统的经典基础理论 本文主要是简单的介绍了三个常见的概念： 分布式系统设计理念 、 CAP定理 、 BAS</description>
    </item>
    
    <item>
      <title>分布式锁</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>[TOC] 分布式锁 分布式集群 上, 实现分布式锁有多重方式 基于数据库 基于 Redis 基于 zookeeper **当系统架构上升到 分布式集群的场景下, 则需要实现的 进程之间的数据安全 **,</description>
    </item>
    
    <item>
      <title>文件管理</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/linux/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/linux/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</guid>
      <description>一. 文件 文件处理命令 命令 ls 命令 cd 命令pwd 命令mkdir 命令touch 命令cp 命令mv 命名rm 文件查看命令 命令cat 命令more 命令head</description>
    </item>
    
    <item>
      <title>更改数据库密码</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/mysql/%E6%9B%B4%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%86%E7%A0%81/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/mysql/%E6%9B%B4%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%86%E7%A0%81/</guid>
      <description>更改数据库密码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 mysql -u root -p # 输入旧密码 ****** # 进去mysql 后 # 使用mysql数据库 mysql &amp;gt; use mysql; # 如果此</description>
    </item>
    
    <item>
      <title>查询</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/mysql/%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/mysql/%E6%9F%A5%E8%AF%A2/</guid>
      <description>查询 [TOC] 简单查询 select query 子句汇总 一个 select 查询 一般 只包含 2~3 个字句, 但是标准下一个select拥有6个字句 子句 作用 select 确定查询结果包含哪几列, 如果后面接 *,</description>
    </item>
    
    <item>
      <title>索引约束</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/mysql/%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%8F%8A%E7%B4%A2%E5%BC%95%E5%92%8C%E7%BA%A6%E6%9D%9F/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/mysql/%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%8F%8A%E7%B4%A2%E5%BC%95%E5%92%8C%E7%BA%A6%E6%9D%9F/</guid>
      <description>索引和约束 [TOC] 索引 为什么引入索引 在向表中插入一行数据的时候, 数据库并不会试图将数据放到表的任何特定的地方, 即数据库 并不会 依据某一个字段的大小顺</description>
    </item>
    
    <item>
      <title>网络</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/linux/%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/linux/%E7%BD%91%E7%BB%9C/</guid>
      <description>[TOC] 网络 &amp;amp; 通信 一 网络 1. 域名结构 1 2 3 4 5 以域名 : www.ryxfzhome.top 为例子 top 为顶级域名 ryxfzhome 为二级域名 www 为标示需要提供的为万维网的服务 (其实现在去掉 www 同样可以访问到</description>
    </item>
    
    <item>
      <title>网页环境配置</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/webapp/%E7%BD%91%E9%A1%B5%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/webapp/%E7%BD%91%E9%A1%B5%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</guid>
      <description>MAC网页环境相关配置路径 1.apache Mac系统有自带的apache服务器，无需另外下载 1.1相关访问路径 系统自带的apache的路径位于/priva</description>
    </item>
    
    <item>
      <title>设计模式</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC] 一. 概述 设计模式是 解决问题的方案，学习现有的设计模式可以做到经验复用。 拥有设计模式词汇，在沟通时就能用更少的词汇来讨论，并且不需要了解底层</description>
    </item>
    
    <item>
      <title>软件包管理</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/linux/%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/linux/%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/</guid>
      <description>Linux 软件包管理 二进制包, RPM包的管理 RPM软件包的格式 sudo(软件名) - 1.7.2pl (版本号) - el5.i386(硬件平台).rmp rpm 命令 卸载命令 1</description>
    </item>
    
    <item>
      <title>进程管理</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/linux/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/linux/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</guid>
      <description>[TOC] 进程管理 进程和程序 进程 : 是一个动态的概念, 是一个程序动态执行的过程 程序 : 是一个静态的概念, 本身作为一个软件资源长期保存 两者并不是一一对应的</description>
    </item>
    
    <item>
      <title>锁和事务</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/mysql/mysql%E9%94%81%E4%B8%8E%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/mysql/mysql%E9%94%81%E4%B8%8E%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</guid>
      <description>事务 [TOC] 事务的概念 可以将多个 一条或者多条SQL语句聚合在一起, 且这些语句, 要么所有都可以正确的执行, 要么都不能执行(原子性) 事务可以被更专业的</description>
    </item>
    
    <item>
      <title>骚操作</title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/linux/%E9%AA%9A%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sat, 14 Aug 2021 22:43:02 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/linux/%E9%AA%9A%E6%93%8D%E4%BD%9C/</guid>
      <description>常用操作 [TOC] 1. 使用scp命令实现上传下载 从服务器上下载文件 scp username@servername:/path/filename /Users/mac/Desktop（本地目录） 例如:scp root@123.207.170.40:/root/test.txt /Users/ma</description>
    </item>
    
    <item>
      <title></title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/algorithm/bintree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/algorithm/bintree/</guid>
      <description>[TOC] 二叉树 一. 二叉树一般定义 一般二叉树的基本定义如下: 1 2 3 4 5 6 7 8 9 10 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ /** 二</description>
    </item>
    
    <item>
      <title></title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/algorithm/dp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/algorithm/dp/</guid>
      <description>动态规划题目整理 [TOC] 一. 背包问题 背包问题可以归结为 以下三总形式 01 背包问题 : 每个物品只有或者不选两种形式 完全背包问题 : 每个物品可以选择无限多次 多</description>
    </item>
    
    <item>
      <title></title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/algorithm/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/algorithm/readme/</guid>
      <description>动态规划经典题型 二叉树经典题型</description>
    </item>
    
    <item>
      <title></title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/algorithm/%E6%88%91%E7%88%B1%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/algorithm/%E6%88%91%E7%88%B1%E7%AE%97%E6%B3%95/</guid>
      <description>[TOC] 最大最小值的宏定义 1 2 3 4 int c_char = CHAR_BIT; int n_int = INT_MIN; short n_short = SHRT_MIN; long n_long = LONG_MAX; 最大值 : INT_MAX 最小值 : INT_MIN 同理其他类型 关于取余 取余是带符号的 负数取余是负数 正数取余是正</description>
    </item>
    
    <item>
      <title></title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/c&#43;&#43;/c&#43;&#43;/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/c&#43;&#43;/c&#43;&#43;/</guid>
      <description>System ReView For C++ A System Review For C++ 内存分区 指针 Pointer 引用 Ref 数组 Array 智能类型 Auto New Abstract Data Type Struct Union Class 构造函数 Constructor 析构函数 destructors 拷贝构造函数 Copy Construstor 拷贝赋值运算符 重载 Copy assignment operator 浅拷贝 Shallow Copy 深</description>
    </item>
    
    <item>
      <title></title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/c&#43;&#43;/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/c&#43;&#43;/readme/</guid>
      <description>C++ 语言基础 C++ 基础 Xcode 编译的时候遇到的问题</description>
    </item>
    
    <item>
      <title></title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/git/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/git/git/</guid>
      <description>Git 版本控制器 [TOC] 1I.概念 可以管理什么格式的文件 文本文件 (.txt) 等 脚本文件 (.py) 等 各种基于文本信息的文件 不能管理什么格式的文件 图片(.jpg) 等 MS word (.doc) 等</description>
    </item>
    
    <item>
      <title></title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/git/github-desktop-%E7%99%BB%E9%99%86%E6%97%B6%E5%87%BA%E7%8E%B0key-chain-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/git/github-desktop-%E7%99%BB%E9%99%86%E6%97%B6%E5%87%BA%E7%8E%B0key-chain-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</guid>
      <description>GitHub Desktop 登陆时出现key chain 问题解决 打开 dasborad 里面的钥匙串 点击第一栏的登陆 点击上锁 再 解锁</description>
    </item>
    
    <item>
      <title></title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/linux/linux%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/linux/linux%E6%A6%82%E8%BF%B0/</guid>
      <description>[TOC] 概述 一. Linux指令 1.Linux文件命名规则 除了 / 之外 , 所有的字符都可以用为文件的命名 , 因为/在Linxu中用为文件目录的分割 ; / 还表</description>
    </item>
    
    <item>
      <title></title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/linux/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/linux/readme/</guid>
      <description>Linux 记录 Linux 平台下常用的一些命令 概述 文件管理 用户管理 进程管理 网络 软件包管理 shell 骚操作</description>
    </item>
    
    <item>
      <title></title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/linux/shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/linux/shell/</guid>
      <description>[TOC] Shell 一. Shell 编程 ###环境 Shell为用户和系统交互的桥梁 完成Shell编程也只需要 一个文本编辑器 &amp;amp;&amp;amp; 一个脚本解释器 (常用的为BASH) 不用的解</description>
    </item>
    
    <item>
      <title></title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/linux/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/linux/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</guid>
      <description>[TOC] 用户管理 用户重要文件 配置文件 用户的信息文件 : /etc/passwd 用户密码文件 : /etc/shadow 用户信息文件相关列说明 在/etc/passwd文件里面对于用户的描述信息为 用</description>
    </item>
    
    <item>
      <title></title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/npm/project/node_modules/jquery/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/npm/project/node_modules/jquery/readme/</guid>
      <description>jQuery  jQuery is a fast, small, and feature-rich JavaScript library.
 For information on how to get started and how to use jQuery, please see jQuery&amp;rsquo;s documentation. For source files and issues, please visit the jQuery repo.
If upgrading, please see the blog post for 3.4.1. This includes notable differences from the previous version and a more readable changelog.
Including jQuery Below are some of the most common ways to include jQuery.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/10.%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AE%B0/readme/</guid>
      <description>学习笔记 这个 Repo 用于记录大致从2019年准备秋招开始, 断断续续整理的一些笔记, 最后成功上岸鹅厂. 不断学习加深印象的同时也方便日后查阅. Code</description>
    </item>
    
  </channel>
</rss>
