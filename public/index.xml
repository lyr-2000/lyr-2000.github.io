<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>展示index on Even - A super concise theme for Hugo</title>
    <link>http://doc.lyr-2000.xyz/</link>
    <description>Recent content in 展示index on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>lyr</copyright>
    <lastBuildDate>Sat, 14 Aug 2021 22:42:48 +0800</lastBuildDate><atom:link href="http://doc.lyr-2000.xyz/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于</title>
      <link>http://doc.lyr-2000.xyz/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/about/</guid>
      <description>欢迎来到我的文档站 github地址 个人博客地址 特此声明： 本站所有内容来自 网友总结，该站只用于个人学习复习用。 🎁致谢 ❤️感谢小游提供的各种笔记</description>
    </item>
    
    <item>
      <title>index</title>
      <link>http://doc.lyr-2000.xyz/index.html</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/index.html</guid>
      <description>欢迎来到我的文档站 本站所有内容来自 网友总结，该站只用于个人学习复习用。 🎁致谢 ❤️感谢小游提供的各种笔记 ❤️感谢vuepress-theme-</description>
    </item>
    
    <item>
      <title>首页</title>
      <link>http://doc.lyr-2000.xyz/home/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/home/</guid>
      <description></description>
    </item>
    
    <item>
      <title>同学的面试</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/11.%E5%90%8C%E5%AD%A6%E7%9A%84%E9%9D%A2%E8%AF%95/</link>
      <pubDate>Sat, 08 May 2021 15:27:22 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/11.%E5%90%8C%E5%AD%A6%E7%9A%84%E9%9D%A2%E8%AF%95/</guid>
      <description>spring的scope有几种 @component 默认是那种 spring mvc整个流程 int i1 = 10000, int i2 = 10000 两个是否相等（相等） 两个Integer大于或等于128时是不等的，</description>
    </item>
    
    <item>
      <title>腾讯（三面）</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/10.%E8%85%BE%E8%AE%AF%E4%B8%89%E9%9D%A2/</link>
      <pubDate>Mon, 26 Apr 2021 20:46:59 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/10.%E8%85%BE%E8%AE%AF%E4%B8%89%E9%9D%A2/</guid>
      <description>实在没想到，居然可以进三面，三面没问技术，只问了我一些项目啊和团队合作相关的东西。 自我介绍 人数最多的团队有多少人 你是怎么和别人合作的（需不需</description>
    </item>
    
    <item>
      <title>腾讯（二面）</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/09.%E8%85%BE%E8%AE%AF%E4%BA%8C%E9%9D%A2/</link>
      <pubDate>Sun, 25 Apr 2021 21:29:16 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/09.%E8%85%BE%E8%AE%AF%E4%BA%8C%E9%9D%A2/</guid>
      <description>本来我都以为我要凉了的。。当时笔试完后去官网看了一下，流程结束了。今天本来打算摸会鱼的。。。突然给我发封邮件，说面试。。。可能是被捞了。搞得</description>
    </item>
    
    <item>
      <title>汉得（一面）</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/08.%E6%B1%89%E5%BE%97%E4%B8%80%E9%9D%A2/</link>
      <pubDate>Wed, 21 Apr 2021 21:17:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/08.%E6%B1%89%E5%BE%97%E4%B8%80%E9%9D%A2/</guid>
      <description>这次汉得是在腾讯会议上面的，其实没问啥，大部分时间都在讲项目，还好我是做过项目的，所以我直接给它看了jenkins然后他让我打开项目，讲一下</description>
    </item>
    
    <item>
      <title>MVVM架构</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/05.android%E7%9B%B8%E5%85%B3/01.mvvm%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Tue, 20 Apr 2021 21:51:09 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/05.android%E7%9B%B8%E5%85%B3/01.mvvm%E6%9E%B6%E6%9E%84/</guid>
      <description>说到这个结构，就不得不提一下安卓的几大结构吧主要包括 MVC、MVP、MVVM 这三大结构 MVC结构 Model ：实体模型、数据的获取、存储等等 View ：Act</description>
    </item>
    
    <item>
      <title>阿里（一面）</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/07.%E9%98%BF%E9%87%8C%E4%B8%80%E9%9D%A2/</link>
      <pubDate>Mon, 19 Apr 2021 18:21:51 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/07.%E9%98%BF%E9%87%8C%E4%B8%80%E9%9D%A2/</guid>
      <description>这次体验极其不友好，首先就是阿里这边卡我流程，我从3月21号投递，然后就被拒了。。。后面不知道咋回事招聘动态显示的是新投递（4号2号申请的。</description>
    </item>
    
    <item>
      <title>Java书籍学习笔记</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/13.java%E4%B9%A6%E7%B1%8D%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 19 Apr 2021 10:05:18 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/13.java%E4%B9%A6%E7%B1%8D%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>Java核心技术 卷一 基本数据结构 java break可以带标签 大数值可以使用bigInteger和bigDecimal for each使用 1 2 3 for (int a:new int[]{1,2,3}){ System.out.println(a);</description>
    </item>
    
    <item>
      <title>面试问题</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/03.%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/01.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 17 Apr 2021 15:24:16 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/03.%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/01.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</guid>
      <description>对象图有几种 UML大科普：一文梳理清 14种 UML图！ (yinxiang.com) UML图分为结构图和行为图。 结构图分为类图、轮廓图、组件图、组合结构图、对象图、部署图</description>
    </item>
    
    <item>
      <title>腾讯</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/09.%E7%AC%94%E8%AF%95%E9%A2%98%E7%9B%AE/01.%E8%85%BE%E8%AE%AF/</link>
      <pubDate>Thu, 15 Apr 2021 20:48:21 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/09.%E7%AC%94%E8%AF%95%E9%A2%98%E7%9B%AE/01.%E8%85%BE%E8%AE%AF/</guid>
      <description>1.生成格雷码 生成格雷码_牛客题霸_牛客网 (nowcoder.com) 先理解一下格雷码的定义吧，我拿n为3举例，当n为3时，我们生成的格雷码如下 1 [000, 001, 011, 010, 110, 111, 101, 100] 任意</description>
    </item>
    
    <item>
      <title>腾讯</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/08.codetop%E4%BC%81%E4%B8%9A%E9%A2%98%E5%BA%93/01.%E8%85%BE%E8%AE%AF/</link>
      <pubDate>Thu, 15 Apr 2021 08:34:10 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/08.codetop%E4%BC%81%E4%B8%9A%E9%A2%98%E5%BA%93/01.%E8%85%BE%E8%AE%AF/</guid>
      <description>1.反转链表 206. 反转链表 - 力扣（LeetCode） (leetcode-cn.com) 这题考察的就是你对递归和迭代的综合运用 解法一：递归 这递归好久没做了，还有有点蒙，下面我简单</description>
    </item>
    
    <item>
      <title>网络安全</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/04.%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3/01.%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</link>
      <pubDate>Tue, 13 Apr 2021 20:46:05 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/04.%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3/01.%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</guid>
      <description>https中间人攻击 如何防止请求被篡改 使用https来进行请求（这点我居然没想到。。） 设置客户端白名单，客户端所有请求，请求到代理服务器(n</description>
    </item>
    
    <item>
      <title>前端</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/03.%E5%89%8D%E7%AB%AF/</link>
      <pubDate>Tue, 13 Apr 2021 20:31:38 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/03.%E5%89%8D%E7%AB%AF/</guid>
      <description>跨域问题怎么处理 通过jsonp跨域 document.domain + iframe跨域 location.hash + iframe window.name + iframe跨域 postMessage跨域 跨域资源共享（CORS） nginx</description>
    </item>
    
    <item>
      <title>HTML</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/02.html/</link>
      <pubDate>Tue, 13 Apr 2021 19:59:35 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/02.html/</guid>
      <description>优化相关 怎么优化界面，让用户体验更好 减少 HTTP 请求 使用 HTTP2 使用服务端渲染 客户端渲染: 获取 HTML 文件，根据需要下载 JavaScript 文件，运行文件，生成 DOM，再渲染。</description>
    </item>
    
    <item>
      <title>字节（二面）</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/06.%E5%AD%97%E8%8A%82%E4%BA%8C%E9%9D%A2/</link>
      <pubDate>Tue, 13 Apr 2021 16:57:58 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/06.%E5%AD%97%E8%8A%82%E4%BA%8C%E9%9D%A2/</guid>
      <description>这面不知道为啥感觉好水，，，，都没问我啥难的东西。。。有点谎，不知道结果怎么样 TCP和UDP 运输层(TCP,UDP) | 面试问题浓缩总结 (xiaoyou66.com) TC</description>
    </item>
    
    <item>
      <title>JavaScript</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/01.javascript/</link>
      <pubDate>Mon, 12 Apr 2021 22:18:18 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/01.javascript/</guid>
      <description>JavaScript事件机制 DOM事件流（event flow ）存在三个阶段：事件捕获阶段、处于目标阶段、事件冒泡阶段。 事件捕获（event capt</description>
    </item>
    
    <item>
      <title>面试常问问题</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/03.cc&#43;&#43;%E8%AF%AD%E8%A8%80/02.%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 12 Apr 2021 22:07:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/03.cc&#43;&#43;%E8%AF%AD%E8%A8%80/02.%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE%E9%97%AE%E9%A2%98/</guid>
      <description>this指针是干嘛的 其作用就是指向成员函数所作用的对象， 所以非静态成员函数中可以直接使用 this 来代表指向该函数作用的对象的指针。 静态成员函数是不</description>
    </item>
    
    <item>
      <title>腾讯（一面）</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/05.%E8%85%BE%E8%AE%AF%E4%B8%80%E9%9D%A2/</link>
      <pubDate>Mon, 12 Apr 2021 20:03:45 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/05.%E8%85%BE%E8%AE%AF%E4%B8%80%E9%9D%A2/</guid>
      <description>我太难了，一直在背后端的东西，突然来个前端的，我心态崩了。。。我太难了，前端的有时间也去看看吧 go的协程 经典问题，不多说 协程调度，GPM调度</description>
    </item>
    
    <item>
      <title>分布式系统相关</title>
      <link>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/02.%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/03.%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sun, 11 Apr 2021 18:42:35 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/02.%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/03.%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/</guid>
      <description>一致性哈希 传统哈希 当数据太大而无法存储在一个节点或机器上时，我们就需要把数据放在多台服务器上，这个时候我们就可以简单使用取模运算来实现简单的</description>
    </item>
    
    <item>
      <title>面试问的一些算法</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/04.%E9%9D%A2%E8%AF%95%E9%97%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 10 Apr 2021 19:06:43 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/04.%E9%9D%A2%E8%AF%95%E9%97%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%97%E6%B3%95/</guid>
      <description>给定一个 1-7随机数生成器 如何生成1-10随机数并验证？ 力扣上有一样的题目 470. 用 Rand7() 实现 Rand10() - 力扣（LeetCode） (leetcode-cn.com) 我们可以使用拒绝采样的方法</description>
    </item>
    
    <item>
      <title>面试常问</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/01.%E6%99%BA%E5%8A%9B%E9%A2%98/02.%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE/</link>
      <pubDate>Sat, 10 Apr 2021 17:17:18 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/01.%E6%99%BA%E5%8A%9B%E9%A2%98/02.%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE/</guid>
      <description>64匹马，8个赛道，找出跑得最快的4匹马 全部马分为8组，每组8匹，每组各跑一次，然后淘汰掉每组的后四名，如下图（需要比赛8场） 第一步 因为我们</description>
    </item>
    
    <item>
      <title>牛客面经总结</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/04.%E7%89%9B%E5%AE%A2%E9%9D%A2%E7%BB%8F%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 10 Apr 2021 17:11:16 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/04.%E7%89%9B%E5%AE%A2%E9%9D%A2%E7%BB%8F%E6%80%BB%E7%BB%93/</guid>
      <description>特地在牛客上看了100多篇面经，目的就是为了看一下go到底能问多少东西。这一轮看下来发现东西还是很多的，有些东西不好整理，所以我就统一放这里</description>
    </item>
    
    <item>
      <title>1-10</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/07.%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95/1.1-10/</link>
      <pubDate>Sat, 10 Apr 2021 14:20:24 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/07.%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95/1.1-10/</guid>
      <description>01.01判断字符串是否唯一 面试题 01.01. 判定字符是否唯一 - 力扣（LeetCode） (leetcode-cn.com) 解法一： 使用map 这个方法虽然很简单，但是面试不推荐的话不推</description>
    </item>
    
    <item>
      <title>10-20</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/07.%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95/2.10-20/</link>
      <pubDate>Sat, 10 Apr 2021 14:20:24 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/07.%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95/2.10-20/</guid>
      <description></description>
    </item>
    
    <item>
      <title>注解相关</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/9.%E6%B3%A8%E8%A7%A3%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Wed, 07 Apr 2021 17:21:53 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/9.%E6%B3%A8%E8%A7%A3%E7%9B%B8%E5%85%B3/</guid>
      <description>常用的注解 @SpringBootApplication 这个注解我们一般不会主动使用它，但是它却是springboot项目的基石，创建 SpringBoot 项目之后会默认在主类加上。 我们可以把 @Sprin</description>
    </item>
    
    <item>
      <title>常用命令</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/6.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 06 Apr 2021 13:26:55 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/6.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>常用操作命令 数据库操作命令 1 2 3 4 5 6 7 8 9 10 11 12 13 # 查看数据库 show dbs; # 切换数据库（如果没有对应的数据库则创建） use 数据库名; # 创建集合 db.c</description>
    </item>
    
    <item>
      <title>体系和架构</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/5.%E4%BD%93%E7%B3%BB%E5%92%8C%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Tue, 06 Apr 2021 13:18:04 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/5.%E4%BD%93%E7%B3%BB%E5%92%8C%E6%9E%B6%E6%9E%84/</guid>
      <description>MongoDB体系结构 MongoDB的体系结构如下所示：磁盘文件经过加载之后后形成 MongoDB 实例，一个 MongoDB 实例中可以存放多个数据库（图中的MongoD</description>
    </item>
    
    <item>
      <title>分布式和集群</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/4.%E5%88%86%E5%B8%83%E5%BC%8F%E5%92%8C%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Tue, 06 Apr 2021 13:16:20 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/4.%E5%88%86%E5%B8%83%E5%BC%8F%E5%92%8C%E9%9B%86%E7%BE%A4/</guid>
      <description>MongoDB集群 MongoDB有三种集群的搭建方式 Replica Set 副本集 Sharding 切片 Master-Slaver 主从（不推荐使用） 其中，Sharding集群也是三种集群中最复杂的。副</description>
    </item>
    
    <item>
      <title>索引</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/3.%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Tue, 06 Apr 2021 11:04:00 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/3.%E7%B4%A2%E5%BC%95/</guid>
      <description>MongoDB也是有索引的 索引是对数据库一列或多列值进行排序的存储结构，底层一般是一种树状结构，没有索引查询会进行全表扫描，数据量大的时候会</description>
    </item>
    
    <item>
      <title>存储引擎</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/2.%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</link>
      <pubDate>Tue, 06 Apr 2021 10:50:32 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/2.%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</guid>
      <description>存储引擎介绍 MongoDB支持的引擎有：WiredTiger，MMAPv1和In-Memory。 从MongoDB 3.2 版本开始，WiredTig</description>
    </item>
    
    <item>
      <title>启动流程和配置</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/8.%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%92%8C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 02 Apr 2021 14:50:22 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/8.%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%92%8C%E9%85%8D%E7%BD%AE/</guid>
      <description>springboot启动 springboot启动类上的注解 一般来说我们的启动类需要有下面这几个注解 @SpringBootApplication 这个是一个非常核心的注解，我们使用spr</description>
    </item>
    
    <item>
      <title>蘑菇街(一面)</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/03.%E8%98%91%E8%8F%87%E8%A1%97%E4%B8%80%E9%9D%A2/</link>
      <pubDate>Fri, 02 Apr 2021 10:56:15 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/03.%E8%98%91%E8%8F%87%E8%A1%97%E4%B8%80%E9%9D%A2/</guid>
      <description>这个也太难了，springboot其实我了解的不是特别深入，然后这面试官就一直逮着我不放。。。后悔啊，下次得把springboot给背一背了</description>
    </item>
    
    <item>
      <title>面试稿子</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/02.%E9%9D%A2%E8%AF%95%E7%A8%BF%E5%AD%90/</link>
      <pubDate>Thu, 01 Apr 2021 19:24:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/02.%E9%9D%A2%E8%AF%95%E7%A8%BF%E5%AD%90/</guid>
      <description>面了几次之后，总感觉自己每次说的都不太流利,这里特意写一下自己的面试稿子，到时候照着背吧，还有就是自己准备好一些话术，到时候就可以照着写了 先</description>
    </item>
    
    <item>
      <title>字节跳动(一面)</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/01.%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E4%B8%80%E9%9D%A2/</link>
      <pubDate>Thu, 01 Apr 2021 19:22:10 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/02.4%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/01.%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E4%B8%80%E9%9D%A2/</guid>
      <description>这次面试实在是太尬了，后面的算法题我就一直尬在哪里想思路，然后面试官一直在那看着，我想到一个办法，然后面试官就说空间复杂度太大了，想办法让空</description>
    </item>
    
    <item>
      <title>高频手撕代码</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/09.%E9%AB%98%E9%A2%91%E6%89%8B%E5%8A%BF%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Thu, 01 Apr 2021 15:53:40 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/09.%E9%AB%98%E9%A2%91%E6%89%8B%E5%8A%BF%E4%BB%A3%E7%A0%81/</guid>
      <description>注意，这些代码我都会用GO来进行实现，参考： 想去看机会？这10道最高频的手撕代码题都会了吗？ - 云+社区 - 腾讯云 (tencent.com) 快速排序 这个非常的经典，必须</description>
    </item>
    
    <item>
      <title>设计一个IM系统</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/3.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AAim%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Wed, 31 Mar 2021 20:48:35 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/3.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AAim%E7%B3%BB%E7%BB%9F/</guid>
      <description>主要参考下面几个链接 如何设计一个亿级消息量的IM系统 - InfoQ 写作平台 一个海量在线用户即时通讯系统（IM）的完整设计Plus - 云+社区 - 腾讯云 (tencent.com) .</description>
    </item>
    
    <item>
      <title>设计一个数据库连接池</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/4.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</link>
      <pubDate>Wed, 31 Mar 2021 20:48:35 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/4.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</guid>
      <description>可以参考下面这几个 如何设计并实现一个db连接池？ (juejin.cn)</description>
    </item>
    
    <item>
      <title>JWT</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/03.%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF/1.jwt/</link>
      <pubDate>Wed, 31 Mar 2021 20:48:33 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/03.%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF/1.jwt/</guid>
      <description>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分</description>
    </item>
    
    <item>
      <title>面试问题汇总</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/1.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</link>
      <pubDate>Wed, 31 Mar 2021 16:58:03 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/1.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</guid>
      <description>MongoDB是由哪种语言写的 MongoDB用c++编写的，流行的开源数据库MySQL也是用C++开发的。C++1983年发行是一种使用广泛</description>
    </item>
    
    <item>
      <title>面试问题整理</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</link>
      <pubDate>Wed, 31 Mar 2021 16:53:08 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</guid>
      <description>内存管理 什么是缓冲区溢出？有什么危害？其原因是什么？ 缓冲区溢出是指当计算机向缓冲区填充数据时超出了缓冲区本身的容量，溢出的数据覆盖在合法数据</description>
    </item>
    
    <item>
      <title>安全相关</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/7.%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Wed, 31 Mar 2021 14:28:27 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/7.%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3/</guid>
      <description>TLS是啥 SSL/TLS协议其实就是一个安全通信的协议，https采用的就是这个协议来实现安全传输，这个地方主要会问你https的工作原理 TLS</description>
    </item>
    
    <item>
      <title>面试题</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/7.%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Wed, 31 Mar 2021 10:24:33 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/7.%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dubbo</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/03.%E4%B8%AD%E9%97%B4%E4%BB%B6/4.dubbo/</link>
      <pubDate>Tue, 30 Mar 2021 21:34:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/03.%E4%B8%AD%E9%97%B4%E4%BB%B6/4.dubbo/</guid>
      <description>Dubbo(读音[ˈdʌbəʊ])是阿里巴巴公司开源的一个高性能优秀的服务框架，使得应用可通过高性能的RPC 实现服务的输出和输入功能，可以和</description>
    </item>
    
    <item>
      <title>Zookeeper</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/03.%E4%B8%AD%E9%97%B4%E4%BB%B6/3.zookeeper/</link>
      <pubDate>Tue, 30 Mar 2021 21:32:02 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/03.%E4%B8%AD%E9%97%B4%E4%BB%B6/3.zookeeper/</guid>
      <description>Zookeeper是一个开源的分布式协调服务，由雅虎公司创建，由于最初雅虎公司的内部研究小组的项目大多以动物的名字命名，所以后来就以Zook</description>
    </item>
    
    <item>
      <title>RocketMQ</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/03.%E4%B8%AD%E9%97%B4%E4%BB%B6/2.rocketmq/</link>
      <pubDate>Tue, 30 Mar 2021 21:21:33 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/03.%E4%B8%AD%E9%97%B4%E4%BB%B6/2.rocketmq/</guid>
      <description>RocketMQ是一个分布式消息和流数据平台，具有低延迟、高性能、高可靠性、万亿级容量和灵活的可扩展性。 RocketMQ实现原理 Rocket</description>
    </item>
    
    <item>
      <title>其他</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/12.%E5%85%B6%E4%BB%96/</link>
      <pubDate>Tue, 30 Mar 2021 21:07:32 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/12.%E5%85%B6%E4%BB%96/</guid>
      <description>引用类型有哪些？有什么区别？ 引用类型主要分为强软弱虚四种： 强引用指的就是代码中普遍存在的赋值方式，比如A a = new A()这种。强引用关联的对象，</description>
    </item>
    
    <item>
      <title>秒杀系统设计</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/2.%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 30 Mar 2021 18:22:43 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/2.%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</guid>
      <description>知乎上就有好多现成的例子，我就拿敖丙的来举例吧 秒杀系统会遇到的几个问题 高并发 超卖 恶意请求 链接暴露 暴露了请求地址，被人恶意请求 数据库 请求太多，</description>
    </item>
    
    <item>
      <title>设计一个抢红包功能</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/1.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%8A%A2%E7%BA%A2%E5%8C%85%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Tue, 30 Mar 2021 18:17:15 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/1.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%8A%A2%E7%BA%A2%E5%8C%85%E5%8A%9F%E8%83%BD/</guid>
      <description>这个其实可以使用事务来实现，比如我们可以用MySQL，抢红包时先开启事务，然后加上行锁，修改完毕后我们提交事务，释放行锁 或者我们可以使用Re</description>
    </item>
    
    <item>
      <title>时间复杂度和空间复杂度</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/03.%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Tue, 30 Mar 2021 16:25:40 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/03.%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description>算法（Algorithm）是指用来操作数据、解决程序问题的一组方法。对于同一个问题，使用不同的算法，也许最终得到的结果是一样的，但在过程中消</description>
    </item>
    
    <item>
      <title>二分查找</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/07.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/07.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
      <description>旋转数组的查找 33. 搜索旋转排序数组 - 力扣（LeetCode） (leetcode-cn.com) 区间查找 327. 区间和的个数 - 力扣（LeetCode） (leetcode-cn.com) 逆序数 剑指 Offer 51. 数组中的逆序对 -</description>
    </item>
    
    <item>
      <title>二叉树</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/05.%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/05.%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>二叉树转链表 114. 二叉树展开为链表 - 力扣（LeetCode） (leetcode-cn.com) 路径之和 113. 路径总和 II - 力扣（LeetCode） (leetcode-cn.com) 最近公共祖先 Loading Question&amp;hellip; - 力扣（LeetC</description>
    </item>
    
    <item>
      <title>动态规划</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/08.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/08.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>最小路径和 64. 最小路径和 - 力扣（LeetCode） (leetcode-cn.com) 最长上升子序列 300. 最长递增子序列 - 力扣（LeetCode） (leetcode-cn.com) 三角形 120. 三角形最小路径和 - 力扣（</description>
    </item>
    
    <item>
      <title>字符串</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/06.%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/06.%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>最长回文串 409. 最长回文串 - 力扣（LeetCode） (leetcode-cn.com) 5. 最长回文子串 - 力扣（LeetCode） (leetcode-cn.com) 重复DNA序列 187. 重复的DNA序列 - 力扣（Leet</description>
    </item>
    
    <item>
      <title>栈、队列、堆</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/02.%E6%A0%88%E9%98%9F%E5%88%97%E5%A0%86/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/02.%E6%A0%88%E9%98%9F%E5%88%97%E5%A0%86/</guid>
      <description>使用队列实现栈 225. 用队列实现栈 - 力扣（LeetCode） (leetcode-cn.com) 使用栈实现队列 232. 用栈实现队列 - 力扣（LeetCode） (leetcode-cn.com) 包含min函数的栈 面试题30</description>
    </item>
    
    <item>
      <title>贪心算法</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/03.%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/03.%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</guid>
      <description>分糖果 575. 分糖果 - 力扣（LeetCode） (leetcode-cn.com) 跳跃游戏1 2 55. 跳跃游戏 - 力扣（LeetCode） (leetcode-cn.com) 最优加油方法 871. 最低加油次数 - 力扣（LeetCod</description>
    </item>
    
    <item>
      <title>递归、回溯、分治</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/04.%E9%80%92%E5%BD%92%E5%9B%9E%E6%BA%AF%E5%88%86%E6%B2%BB/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/04.%E9%80%92%E5%BD%92%E5%9B%9E%E6%BA%AF%E5%88%86%E6%B2%BB/</guid>
      <description>n皇后 51. N 皇后 - 力扣（LeetCode） (leetcode-cn.com) 生成括号 22. 括号生成 - 力扣（LeetCode） (leetcode-cn.com) 求子集1 2 78. 子集 - 力扣（LeetCode） (leetcode-cn.com) 组合数之</description>
    </item>
    
    <item>
      <title>链表</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/01.%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/01.%E9%93%BE%E8%A1%A8/</guid>
      <description>链表逆序 剑指 Offer 24. 反转链表 - 力扣（LeetCode） (leetcode-cn.com) 链表求交点 面试题 02.07. 链表相交 - 力扣（LeetCode） (leetcode-cn.com) 链表求环 142. 环形链表 II - 力扣（Lee</description>
    </item>
    
    <item>
      <title>11-20</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/2.11-20/</link>
      <pubDate>Mon, 29 Mar 2021 08:56:23 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/2.11-20/</guid>
      <description>11.旋转数组最小的数字（看） 剑指 Offer 11. 旋转数组的最小数字 - 力扣（LeetCode） (leetcode-cn.com) 解法一 二分查找 这题目主要还是考理解，下面简单介绍一下原理</description>
    </item>
    
    <item>
      <title>21-30</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/3.21-30/</link>
      <pubDate>Mon, 29 Mar 2021 08:56:23 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/3.21-30/</guid>
      <description>21.调整数组顺序使奇数位于偶数前面 剑指 Offer 21. 调整数组顺序使奇数位于偶数前面 - 力扣（LeetCode） (leetcode-cn.com) 哈哈，居然做出来了，这题其实最简单的方</description>
    </item>
    
    <item>
      <title>3-10</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/1.3-10/</link>
      <pubDate>Mon, 29 Mar 2021 08:56:23 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/1.3-10/</guid>
      <description>前面那个CMU硕士100题大概知道了大致的算法和套路，目前还没时间去完善，下面的这个剑指offer我打算每道题都认真总结一下。。 题目链接：《</description>
    </item>
    
    <item>
      <title>31-40</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/4.31-40/</link>
      <pubDate>Mon, 29 Mar 2021 08:56:23 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/4.31-40/</guid>
      <description>31.栈的压入，弹出序列 剑指 Offer 31. 栈的压入、弹出序列 - 力扣（LeetCode） (leetcode-cn.com) 太难了，这题连思路都没有。。。只能看大佬的题解了呜呜呜 解法一：</description>
    </item>
    
    <item>
      <title>41-50</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/5.41-50/</link>
      <pubDate>Mon, 29 Mar 2021 08:56:23 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/5.41-50/</guid>
      <description>41.数据流中的中位数 剑指 Offer 41. 数据流中的中位数 - 力扣（LeetCode） (leetcode-cn.com) 这题先暂时跳过，后续再来研究一下 42.连续子数组的最大和 剑指 Offer 42. 连</description>
    </item>
    
    <item>
      <title>51-60</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/6.51-60/</link>
      <pubDate>Mon, 29 Mar 2021 08:56:23 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/6.51-60/</guid>
      <description>51.数组中的逆序对 剑指 Offer 51. 数组中的逆序对 - 力扣（LeetCode） (leetcode-cn.com) 这困难题先跳过吧，实在是把我刷累了 52.两个链表的第一个公共节点、 剑指</description>
    </item>
    
    <item>
      <title>61-70</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/7.61-70/</link>
      <pubDate>Mon, 29 Mar 2021 08:56:23 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/7.61-70/</guid>
      <description>61.扑克牌中的顺子 剑指 Offer 61. 扑克牌中的顺子 - 力扣（LeetCode） (leetcode-cn.com) 没看懂这题啥意思。。。。我怎么这么菜啊 解法一：集合Set+遍历 首先我们</description>
    </item>
    
    <item>
      <title>MySQL底层</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/9.mysql%E5%BA%95%E5%B1%82/</link>
      <pubDate>Mon, 29 Mar 2021 08:33:41 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/9.mysql%E5%BA%95%E5%B1%82/</guid>
      <description>下图是MySQL底层的一个简单的概括图 日志部分 主要就是这部分了，下面简单介绍一下mysql的三种日志 三种日志 bin log 主要记录所有数据库表结构变更</description>
    </item>
    
    <item>
      <title>福州蓝鲨信息技术（一面）</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/01.3%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/03.%E7%A6%8F%E5%B7%9E%E8%93%9D%E9%B2%A8%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E4%B8%80%E9%9D%A2/</link>
      <pubDate>Sat, 27 Mar 2021 15:45:53 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/01.3%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/03.%E7%A6%8F%E5%B7%9E%E8%93%9D%E9%B2%A8%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E4%B8%80%E9%9D%A2/</guid>
      <description>这家公司详细信息我还没有太多了解，搞得面试官问我，我答不出来（下次面试前得先摸清楚详细信息） 数组和切片的区别 数组不可变，切片可变数据结构 | 面</description>
    </item>
    
    <item>
      <title>面试问题</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/03.%E4%B8%AD%E9%97%B4%E4%BB%B6/1.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 27 Mar 2021 14:09:54 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/03.%E4%B8%AD%E9%97%B4%E4%BB%B6/1.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</guid>
      <description>基本概念 说白了就是把请求的信息都放入一个队列，然后多台服务器从这个消息队列中获取所需要的的信息 常见的消息队列有那些 有如老牌的ActiveMQ</description>
    </item>
    
    <item>
      <title>其他</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/9.%E5%85%B6%E4%BB%96/</link>
      <pubDate>Sat, 27 Mar 2021 09:03:04 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/9.%E5%85%B6%E4%BB%96/</guid>
      <description>Go的基本命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // 用于打包编译代码 go build // 来移除当前源码包和关联源码包里面编译生成的文件 go clean // 格式</description>
    </item>
    
    <item>
      <title>面试问题</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/10.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 27 Mar 2021 08:50:34 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/10.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</guid>
      <description>基础相关 map怎么实现顺序读取 把map中的key通过sort包排序 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sort&amp;#34; ) func main() { var m = map[string]int{ &amp;#34;hello&amp;#34;:</description>
    </item>
    
    <item>
      <title>事务</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/7.%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Fri, 26 Mar 2021 09:08:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/7.%E4%BA%8B%E5%8A%A1/</guid>
      <description>spring事务传播 为什么要有事务传播呢？默认情况下，spring是使用aop来实现事务的，我们只需要在方法上面加上 @Transactional 注解就可以了，但是这个</description>
    </item>
    
    <item>
      <title>循环依赖</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/6.%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/</link>
      <pubDate>Fri, 26 Mar 2021 08:49:54 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/6.%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/</guid>
      <description>先说一下什么是循环依赖，循环依赖就是A引用了对象B，但是B对象又引用了A，如下图所示 springIOC就是我们不自己创建对象，而是使用spr</description>
    </item>
    
    <item>
      <title>《React》笔记</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/25.react%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 25 Mar 2021 19:50:12 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/25.react%E7%AC%94%E8%AE%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>面试问题</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/5.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 25 Mar 2021 16:40:09 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/5.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</guid>
      <description>基础 什么是 Spring 框架? 我们一般说 Spring 框架指的都是 Spring Framework，它是很多模块的集合，使用这些模块可以很方便地协助我们进行开发。这些模块是：核</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/01.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/03.docker/</link>
      <pubDate>Thu, 25 Mar 2021 16:10:58 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/01.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/03.docker/</guid>
      <description>docker的底层原理 Docker 采用了 C/S 架构，包括客户端和服务端。Docker 守护进程 （ Daemon ）作为服务端接受来自客户端的请求，并处理这些请求（创建、运</description>
    </item>
    
    <item>
      <title>面试问题</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/04.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 25 Mar 2021 15:56:50 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/04.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</guid>
      <description>设计模式的6大原则？ 1、开闭原则（Open Close Principle） 开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修</description>
    </item>
    
    <item>
      <title>Linux面试</title>
      <link>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/02.%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/02.linux%E9%9D%A2%E8%AF%95/</link>
      <pubDate>Thu, 25 Mar 2021 09:25:39 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/02.%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/02.linux%E9%9D%A2%E8%AF%95/</guid>
      <description>不知道哪里抄来的 绝对路径用什么符号表示？当前目录、上层目录用什么表示？ 主目录用什么表示? 切换目录用什么命令？ 绝对路径： 如/etc/init.</description>
    </item>
    
    <item>
      <title>世界500强的智力题</title>
      <link>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/01.%E6%99%BA%E5%8A%9B%E9%A2%98/01.%E4%B8%96%E7%95%8C500%E5%BC%BA%E7%9A%84%E6%99%BA%E5%8A%9B%E9%A2%98/</link>
      <pubDate>Thu, 25 Mar 2021 09:22:51 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/08.%E5%85%B6%E4%BB%96/01.%E6%99%BA%E5%8A%9B%E9%A2%98/01.%E4%B8%96%E7%95%8C500%E5%BC%BA%E7%9A%84%E6%99%BA%E5%8A%9B%E9%A2%98/</guid>
      <description>工人分金条 分蛋糕 过桥问题 黑白帽子 首先就是第一次如果都是白色，那么自己肯定是黑色的。但是没有声音，所以就可以肯定至少有两顶黑帽子，如果有个人发</description>
    </item>
    
    <item>
      <title>位运算</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/09.%E4%BD%8D%E8%BF%90%E7%AE%97/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/09.%E4%BD%8D%E8%BF%90%E7%AE%97/</guid>
      <description>位运算的常用技巧 位运算是算法题里比较特殊的一种类型，它们利用二进制位运算的特性进行一些奇妙的优化 和计算。常用的位运算符号包括：“∧”按位异或</description>
    </item>
    
    <item>
      <title>分治法解题</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/07.%E5%88%86%E6%B2%BB%E6%B3%95%E8%A7%A3%E9%A2%98/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/07.%E5%88%86%E6%B2%BB%E6%B3%95%E8%A7%A3%E9%A2%98/</guid>
      <description>解释 顾名思义，分治问题由“分”（divide）和“治”（conquer）两部分组成，通过把原问题分为子 问题，再将子问题进行处理合并，从而实现</description>
    </item>
    
    <item>
      <title>图</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/14.%E5%9B%BE/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/14.%E5%9B%BE/</guid>
      <description>基本概念 图通常分为有向（directed）或无向（undirected），有 循环（cyclic）或无循环（acyclic），所有节点相连（c</description>
    </item>
    
    <item>
      <title>字符串</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/11.%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/11.%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>基本概念 字串 是在字符串中，取出一块（连续的），如：pik, ach, kac等 子序列 指的是从字符串中，顺序取出字符，但是可以不连续：如：pau, kch, ic</description>
    </item>
    
    <item>
      <title>数学问题</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/08.%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/08.%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/</guid>
      <description>这里主要是考一些数学概念之类的，这里我简单分分类 公倍数与公因数 利用辗转相除法，我们可以很方便地求得两个数的最大公因数（greatest common di</description>
    </item>
    
    <item>
      <title>数据结构</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/10.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/10.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>数组 找到所有数组中消失的数字 这题目想法可以借鉴一下，就是我们让数组作为数组的下标，然后根据当前数字的正负来判断数字是否出现。 1 2 3 4 5 6 7 8</description>
    </item>
    
    <item>
      <title>更加复杂的数据结构</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/15.%E6%9B%B4%E5%8A%A0%E5%A4%8D%E6%9D%82%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/15.%E6%9B%B4%E5%8A%A0%E5%A4%8D%E6%9D%82%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>并查集 复合数据结构</description>
    </item>
    
    <item>
      <title>树</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/13.%E6%A0%91/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/13.%E6%A0%91/</guid>
      <description>树的递归 二叉树的最大深度 104. 二叉树的最大深度 - 力扣（LeetCode） (leetcode-cn.com) 终于没看题解做对了一个，太难了，不过这题目比较简单，所以没啥炫耀的，害</description>
    </item>
    
    <item>
      <title>链表</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/12.%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/12.%E9%93%BE%E8%A1%A8/</guid>
      <description>链表的基本操作 翻转链表 206. 反转链表 - 力扣（LeetCode） (leetcode-cn.com) 有递归法和非递归法这两种，先说一下递归法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</description>
    </item>
    
    <item>
      <title>二分查找</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/03.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/03.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
      <description>解释 二分查找也常被称为二分法或者折半查找，每次查找时通过将待查找区间分成两部分并只取 一部分继续查找，将查找的复杂度大大减少。对于一个长度为 O(n)</description>
    </item>
    
    <item>
      <title>动态规划</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/06.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/06.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>算法解释 这里我们引用一下维基百科的描述：“动态规划（Dynamic Programming, DP）在查找有很多 重叠子问题的情况的最优解时有效。它将问题重新组合成子问</description>
    </item>
    
    <item>
      <title>双指针法</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/02.%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/02.%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95/</guid>
      <description>算法解释 双指针主要用于遍历数组，两个指针指向不同的元素，从而协同完成任务。也可以延伸到多个数组的多个指针。 若两个指针指向同一数组，遍历方向相</description>
    </item>
    
    <item>
      <title>各种排序</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/04.%E5%90%84%E7%A7%8D%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/04.%E5%90%84%E7%A7%8D%E6%8E%92%E5%BA%8F/</guid>
      <description>常用的排序算法 以下是一些最基本的排序算法。虽然在 C++ 里可以通过 std::sort() 快速排序，而且刷题 时很少需要自己手写排序算法，但是熟习各种排序算法可以加深自己</description>
    </item>
    
    <item>
      <title>各种搜索</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/05.%E5%90%84%E7%A7%8D%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/05.%E5%90%84%E7%A7%8D%E6%90%9C%E7%B4%A2/</guid>
      <description>解释 深度优先搜索和广度优先搜索是两种最常见的优先搜索方法，它们被广泛地运用在图和树等 结构中进行搜索。 深度优先搜索 深度优先搜索（depth-f</description>
    </item>
    
    <item>
      <title>贪心算法</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/01.%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/01.%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</guid>
      <description>算法解释 顾名思义，贪心算法或贪心思想采用贪心的策略，保证每次操作都是局部最优的，从而使最 后得到的结果是全局最优的。 举一个最简单的例子：小明和</description>
    </item>
    
    <item>
      <title>其他</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E5%85%B6%E4%BB%96/</link>
      <pubDate>Tue, 23 Mar 2021 22:38:16 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E5%85%B6%E4%BB%96/</guid>
      <description>操作系统相关 冯诺伊曼体系 该思想约定了用二进制进行计算和存储，还定义计算机基本结构为 5 个部分，分别是中央处理器（CPU）、内存、输入设备、输出</description>
    </item>
    
    <item>
      <title>NGINX</title>
      <link>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/01.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/02.nginx/</link>
      <pubDate>Tue, 23 Mar 2021 21:23:26 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/01.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/02.nginx/</guid>
      <description>这里同样直接整理面试题 同学问的一些问题 NGINX的优势 可以热部署 支持高并发连接 内存消耗低 处理响应快 可靠性高 NGINX 负载均衡算法 轮询 （默认） 每个请求</description>
    </item>
    
    <item>
      <title>springSecurity</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/4.springsecurity/</link>
      <pubDate>Tue, 23 Mar 2021 21:14:49 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/4.springsecurity/</guid>
      <description>SpringSecurity 采用的是责任链的设计模式，它有一条很长的过滤器链。现在对这条过滤器链的各个进行说明: WebAsyncManagerIntegrationF</description>
    </item>
    
    <item>
      <title>面试题</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/02.mybatis/01.%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Tue, 23 Mar 2021 21:00:12 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/02.mybatis/01.%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>因为没找到好的项目结构，所以这里就先说面试题吧 同学的一次面试 mybatis的优缺点 与JDBC相比，减少了50%以上的代码量 MyBatis是最</description>
    </item>
    
    <item>
      <title>面试题</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/11.%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Tue, 23 Mar 2021 19:37:14 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/11.%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>同学的一次面试 内存溢出的两种问题及原因 java.lang.OutOfMemoryError 方法区主要存储类的元信息，实现在元数据区。当JVM发现元数据区没有足够的空间分配给加载的类时，抛出该</description>
    </item>
    
    <item>
      <title>spring MVC</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/3.spring-mvc/</link>
      <pubDate>Tue, 23 Mar 2021 18:57:30 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/3.spring-mvc/</guid>
      <description>说说自己对于 spring-mvc 了解 谈到这个问题，我们不得不提提之前 Model1 和 Model2 这两个没有 Spring MVC 的时代。 Model1 时代 : 很多学 Java 后端比较晚的朋友可能并没有接触过 Model1 模式下的 JavaWeb 应</description>
    </item>
    
    <item>
      <title>AOP</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/2.aop/</link>
      <pubDate>Tue, 23 Mar 2021 17:35:09 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/2.aop/</guid>
      <description>AOP(Aspect-Oriented Programming), 即 面向切面编程, 它与 OOP( Object-Oriented Programming, 面向对象编程) 相辅相成, 提供了与 OOP 不同的抽象软件结构的视角. 在 AOP 中, 我们以类(class)作为我们的基本单元,</description>
    </item>
    
    <item>
      <title>IOC</title>
      <link>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/1.ioc/</link>
      <pubDate>Tue, 23 Mar 2021 17:35:09 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/1.ioc/</guid>
      <description>IoC全称Inversion of Control，直译为控制反转 它不是什么技术，而是一种设计思想。在spring中，IOC就意味着我们把设计好的</description>
    </item>
    
    <item>
      <title>高频面试题总结</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/6.%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 22 Mar 2021 20:16:49 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/6.%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</guid>
      <description>不知道从哪找的 浏览器禁用 Cookie怎么保存状态 此时无法使用 Cookie 来保存用户信息，只能使用 Session。除此之外，不能再将 Session ID 存放到 Cookie 中，而是</description>
    </item>
    
    <item>
      <title>高频面试题</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/8.%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Mon, 22 Mar 2021 16:12:20 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/8.%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>不知道从哪里抄的 如何查看表格定义的所有索引 SHOW INDEX FROM &amp;lt;tablename&amp;gt;; LIKE 声明中的％和 _ 是什么意思？ ％对应于 0 个或更多字符，_只是 LIKE 语句中的一个字符。 如何在 Unix 和 MySQL</description>
    </item>
    
    <item>
      <title>指针问题</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/03.cc&#43;&#43;%E8%AF%AD%E8%A8%80/01.%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 22 Mar 2021 14:00:08 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/03.cc&#43;&#43;%E8%AF%AD%E8%A8%80/01.%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98/</guid>
      <description>细说指针 让你不再害怕指针——C指针详解(经典,非常详细)_程序老兵的博客-CSDN博客_c指针详解经典非常详细 1 2 3 4 5 6 7 8 9 int p; //这是</description>
    </item>
    
    <item>
      <title>第一次面试</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/01.3%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/01.%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95/</link>
      <pubDate>Mon, 22 Mar 2021 10:43:52 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/01.3%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/01.%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95/</guid>
      <description>Vue原理 实例化过程 初始化生命周期，初始化事件，初始化渲染，触发执行beforeCreate生命周期方法，初始化data/props数据监听</description>
    </item>
    
    <item>
      <title>第二次面试</title>
      <link>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/01.3%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/02.%E7%AC%AC%E4%BA%8C%E6%AC%A1%E9%9D%A2%E8%AF%95/</link>
      <pubDate>Mon, 22 Mar 2021 10:43:52 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/07.%E4%B8%AA%E4%BA%BA%E9%9D%A2%E8%AF%95/01.3%E6%9C%88%E4%BB%BD%E9%9D%A2%E8%AF%95/02.%E7%AC%AC%E4%BA%8C%E6%AC%A1%E9%9D%A2%E8%AF%95/</guid>
      <description>go的几个web框架 beego，iris，gin，echo，revel 为什么Echo框架查找速度快 基于 radix tree ，Echo 的路由查询速度非常快。路</description>
    </item>
    
    <item>
      <title>创建型</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01.%E5%88%9B%E5%BB%BA%E5%9E%8B/</link>
      <pubDate>Sun, 21 Mar 2021 20:42:24 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01.%E5%88%9B%E5%BB%BA%E5%9E%8B/</guid>
      <description>创建型模式关注点是如何创建对象，其核心思想是要把对象的创建和使用相分离，这样使得两者能相对独立地变换。创建型模式包括： 工厂方法：Factor</description>
    </item>
    
    <item>
      <title>结构性</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02.%E7%BB%93%E6%9E%84%E5%9E%8B/</link>
      <pubDate>Sun, 21 Mar 2021 20:42:24 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02.%E7%BB%93%E6%9E%84%E5%9E%8B/</guid>
      <description>结构型模式主要涉及如何组合各种对象以便获得更好、更灵活的结构。虽然面向对象的继承机制提供了最基本的子类扩展父类的功能，但结构型模式不仅仅简单</description>
    </item>
    
    <item>
      <title>行为型</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/03.%E8%A1%8C%E4%B8%BA%E5%9E%8B/</link>
      <pubDate>Sun, 21 Mar 2021 20:42:24 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/03.%E8%A1%8C%E4%B8%BA%E5%9E%8B/</guid>
      <description>行为型模式主要涉及算法和对象间的职责分配。通过使用对象组合，行为型模式可以描述一组对象应该如何协作来完成一个整体任务。 行为型模式有： 责任链 命</description>
    </item>
    
    <item>
      <title>分布式和备份</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/7.%E5%88%86%E5%B8%83%E5%BC%8F%E5%92%8C%E5%A4%87%E4%BB%BD/</link>
      <pubDate>Sun, 21 Mar 2021 19:43:11 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/7.%E5%88%86%E5%B8%83%E5%BC%8F%E5%92%8C%E5%A4%87%E4%BB%BD/</guid>
      <description>主从复制 将主数据库中的DDL和DML操作通过二进制日志（BINLOG）传输到从数据库上，然后将这些日志重新执行（重做）；从而使得从数据库的数</description>
    </item>
    
    <item>
      <title>排序算法</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/01.%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 21 Mar 2021 19:07:54 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/01.%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>插入排序 直接插入排序 插入排序是最简单的，我们不断比较插入数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // 插入排序 // 时间复杂度 n^2 // 因为我们这里</description>
    </item>
    
    <item>
      <title>查找算法</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/02.%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 21 Mar 2021 19:07:54 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/02.%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</guid>
      <description>线性表查找 顺序查找 顺序查找(Sequential Search) 的查找过程为：从表的一端开始， 依次将记录的关键字和给定值进行比较，若某个记录的关键字和给定</description>
    </item>
    
    <item>
      <title>串、数组、广义表</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E4%B8%B2%E6%95%B0%E7%BB%84%E5%B9%BF%E4%B9%89%E8%A1%A8/</link>
      <pubDate>Sun, 21 Mar 2021 19:05:37 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E4%B8%B2%E6%95%B0%E7%BB%84%E5%B9%BF%E4%B9%89%E8%A1%A8/</guid>
      <description>字符串匹配算法 1.BF算法 BF算法是一个古典的算法，算法主要思想如下图所示 按顺序一位一位进行比较，如果有一位不匹配，那么原字符串+1 2.KM</description>
    </item>
    
    <item>
      <title>图</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%9B%BE/</link>
      <pubDate>Sun, 21 Mar 2021 19:05:37 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%9B%BE/</guid>
      <description>基本概念 图包括有向图和无向图，有向图就是从一个点到另一个点是有方向的，无向图就是点和点之间没有方向。&amp;lt;v,w&amp;gt; 是有序的（有向图）</description>
    </item>
    
    <item>
      <title>数和二叉树</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.%E6%95%B0%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Sun, 21 Mar 2021 19:05:37 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.%E6%95%B0%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>二叉树的遍历 1.先序遍历：根结点 &amp;mdash;&amp;gt; 左子树 &amp;mdash;&amp;gt; 右子树 2.中序遍历：左子树&amp;mdash;&amp;gt; 根结点 &amp;mdash;&amp;gt; 右子树 3.后序遍历：左子树 &amp;mdash;&amp;gt; 右子树 &amp;mdash;&amp;gt; 根结点</description>
    </item>
    
    <item>
      <title>栈和队列</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</link>
      <pubDate>Sun, 21 Mar 2021 19:05:37 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</guid>
      <description>堆和栈的区别 栈是一种受限的线性表，如下图所示 堆是二叉树的结构，堆是一种常用的树形结构，是一种特殊的完全二叉树，当且仅当满足 所有节点的值总是不</description>
    </item>
    
    <item>
      <title>线性表</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%BA%BF%E6%80%A7%E8%A1%A8/</link>
      <pubDate>Sun, 21 Mar 2021 19:05:37 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%BA%BF%E6%80%A7%E8%A1%A8/</guid>
      <description>链表 链表分为单链表，循环链表，双向链表，二叉链表，十字链表，邻接表，邻接多重表 首元节点，头节点，头指针 头结点 在链表的第一个节点之前会额外增设</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/01.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/01.git/</link>
      <pubDate>Sat, 20 Mar 2021 15:51:30 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/01.%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/01.git/</guid>
      <description>常用命令 git init 初始化git仓库 git clone 克隆git仓库 git remote add origin ***.git 添加一个新的远程残酷 git push -u origin master 本地的 master 分支推送到 origin 主机的 master 分支。 推送到远程仓库的de</description>
    </item>
    
    <item>
      <title>Linux基础</title>
      <link>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/02.%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/01.linux%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 20 Mar 2021 15:51:30 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/05.%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%B3%BB%E7%BB%9F/02.%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/01.linux%E5%9F%BA%E7%A1%80/</guid>
      <description>shell脚本运算符 算数运算符 运算符 说明 举例 + 加法 expr $a + $b 结果为 30。 - 减法 expr $a - $b 结果为 -10。 * 乘法 expr $a \* $b 结果为 200。 / 除法 expr $b / $a</description>
    </item>
    
    <item>
      <title>IO管理</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.io%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.io%E7%AE%A1%E7%90%86/</guid>
      <description>Linux IO模式 linux有下面五种网络模式 阻塞 I/O（blocking IO） 默认socket就是阻塞IO，当用户进程调用了recvfrom这个系</description>
    </item>
    
    <item>
      <title>互斥和同步</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.%E4%BA%92%E6%96%A5%E5%92%8C%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.%E4%BA%92%E6%96%A5%E5%92%8C%E5%90%8C%E6%AD%A5/</guid>
      <description>CPU cache结构和缓存一致性（MESI协议） 在多核CPU中，内存中的数据会在多个核心中存在数据副本，某一个核心发生修改操作，就产生了数据不一</description>
    </item>
    
    <item>
      <title>体系结构</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</guid>
      <description>七层模型 五层模型 网络协议三要素 语法：即数据与控制信息的结构或格式。 语义：即需要发出何种控制信息，完成何种动作以及做出何种响应。 同步：即事件实</description>
    </item>
    
    <item>
      <title>内存管理</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
      <description>基本概念 内存分页和内存分段 内存分页分为一个页号还有一个偏移量，我们通过页号查找页表，找出对应地址，然后加上偏移量就可以得到最终地址 内存分段的</description>
    </item>
    
    <item>
      <title>应用层(HTTP,SMTP)</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/5.%E5%BA%94%E7%94%A8%E5%B1%82httpsmtp/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/5.%E5%BA%94%E7%94%A8%E5%B1%82httpsmtp/</guid>
      <description>HTTP协议特点 HTTP和HTTPS的区别 端口不同：HTTP使用的是80端口，HTTPS使用443端口； HTTP认证机制，更加安全； HTTP</description>
    </item>
    
    <item>
      <title>死锁和饥饿</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.%E6%AD%BB%E9%94%81%E5%92%8C%E9%A5%A5%E9%A5%BF/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.%E6%AD%BB%E9%94%81%E5%92%8C%E9%A5%A5%E9%A5%BF/</guid>
      <description>基本概念 产生死锁的原因 根本原因 就是系统能够提供的资源个数比要求该资源的进程数要少 基本原因 资源竞争和进程推进顺序不合理 产生死锁必要条件 互斥 一个</description>
    </item>
    
    <item>
      <title>硬件层</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2.%E7%A1%AC%E4%BB%B6%E5%B1%82/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2.%E7%A1%AC%E4%BB%B6%E5%B1%82/</guid>
      <description>硬件层分为物理层和数据链路层 三种通讯方式 通信的三种基本方式：单工、半双工、双工 物理层几大特性 （1） 机械特性：指明接口所用接线器的形状和尺寸、</description>
    </item>
    
    <item>
      <title>网络层(IP,ICMP,ARP)</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/3.%E7%BD%91%E7%BB%9C%E5%B1%82ipicmparp/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/3.%E7%BD%91%E7%BB%9C%E5%B1%82ipicmparp/</guid>
      <description>ARP协议和ARP攻击 ARP协议完成了IP地址与物理地址的映射。每一个主机都设有一个 ARP 高速缓存，里面有所在的局域网上的各主机和路由器的 IP 地址</description>
    </item>
    
    <item>
      <title>运输层(TCP,UDP)</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/4.%E8%BF%90%E8%BE%93%E5%B1%82tcpudp/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/4.%E8%BF%90%E8%BE%93%E5%B1%82tcpudp/</guid>
      <description>TCP的三次握手 问题1 TCP可以建立两次握手嘛 不可以。有两个原因：首先，可能会出现已失效的连接请求报文段又传到了服务器端。 其次，两次握手无法</description>
    </item>
    
    <item>
      <title>进程和线程</title>
      <link>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</guid>
      <description>基本概念 进程和线程的区别 进程：进程是系统进行资源分配和调度的一个独立单位，是系统中的并发执行的单位 线程：线程是进程的一个实体，也是 CPU 调度和分</description>
    </item>
    
    <item>
      <title>SQL语句及优化</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/6.sql%E8%AF%AD%E5%8F%A5%E5%8F%8A%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/6.sql%E8%AF%AD%E5%8F%A5%E5%8F%8A%E4%BC%98%E5%8C%96/</guid>
      <description>SQL语句分为哪几类 数据定义语言DDL（Data Ddefinition Language）CREATE，DROP，ALTER 主要为以上操作 即对逻辑结构等有操作的，</description>
    </item>
    
    <item>
      <title>事务和锁</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/4.%E4%BA%8B%E5%8A%A1%E5%92%8C%E9%94%81/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/4.%E4%BA%8B%E5%8A%A1%E5%92%8C%E9%94%81/</guid>
      <description>概念 事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行的结果必须使数据库从一种一致性状态变到另一种一致性状态。事务是逻</description>
    </item>
    
    <item>
      <title>分布式锁，过期策略，淘汰规则</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/5.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5%E6%B7%98%E6%B1%B0%E8%A7%84%E5%88%99/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/5.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5%E6%B7%98%E6%B1%B0%E8%A7%84%E5%88%99/</guid>
      <description>分布式锁 在日常情况下在进程或线程中我们可以使用 synchronized 、Lock 实现并发编程，但是我， 如何在分布式集群下使用呢？可以使用 Redisson ， Zookeeper ，Redis本身 分布</description>
    </item>
    
    <item>
      <title>原理</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/3.%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/3.%E5%8E%9F%E7%90%86/</guid>
      <description>为什么Redis速度那么快 基于内存实现 数据结构高效，底层多种数据结构支持不同的数据类型，比如HyperLogLog它连2个字节都不想浪费 提供</description>
    </item>
    
    <item>
      <title>常见问题</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/4.%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/4.%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>缓存雪崩 Redis中大批量key在同一时间同时失效导致所有请求都打到了MySQL。而MySQL扛不住导致大面积崩塌 解决方案 缓存数据的过期时间</description>
    </item>
    
    <item>
      <title>引擎</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/2.%E5%BC%95%E6%93%8E/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/2.%E5%BC%95%E6%93%8E/</guid>
      <description>常考的主要分为InnoDB，MyISAM 主要区别 InnoDB引擎的4大特性 插入缓冲（insert buffer) 二次写(double write) 自适应哈希索引(ah</description>
    </item>
    
    <item>
      <title>持久化</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/2.%E6%8C%81%E4%B9%85%E5%8C%96/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/2.%E6%8C%81%E4%B9%85%E5%8C%96/</guid>
      <description>包括 RDB 和 AOF 两种机制，下面分别进行说明 RDB RDB 持久化机制，是对 Redis 中的数据执行周期性的持久化。更适合做冷备。 优点： 压缩后的二进制文，适用于备份、全量</description>
    </item>
    
    <item>
      <title>数据库基础</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/1.%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/1.%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</guid>
      <description>数据库三大范式 第一范式（属性不可再分） 如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。 第二范式（每个非主属性</description>
    </item>
    
    <item>
      <title>数据类型</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/1.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/1.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>本文参考：硬核Redis总结，看这篇就够了！ (qq.com) 8大基本数据类型 String 适用于简单key-value存储、setnx key value实现分布式锁、计数器</description>
    </item>
    
    <item>
      <title>索引</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/3.%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/3.%E7%B4%A2%E5%BC%95/</guid>
      <description>概念 索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。 索引是一种数据结构。数</description>
    </item>
    
    <item>
      <title>视图，存储过程，函数，触发器</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/5.%E8%A7%86%E5%9B%BE%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%87%BD%E6%95%B0%E8%A7%A6%E5%8F%91%E5%99%A8/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/5.%E8%A7%86%E5%9B%BE%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%87%BD%E6%95%B0%E8%A7%A6%E5%8F%91%E5%99%A8/</guid>
      <description>什么是视图 所谓视图，本质上是一种虚拟表，在物理上是不存在的，其内容与真实的表相似，包含一系列带有名称的列和行数据。但是，视图并不在数据库中以</description>
    </item>
    
    <item>
      <title>集群和限流</title>
      <link>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/6.%E9%9B%86%E7%BE%A4%E5%92%8C%E9%99%90%E6%B5%81/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/6.%E9%9B%86%E7%BE%A4%E5%92%8C%E9%99%90%E6%B5%81/</guid>
      <description>Redis有下面四种部署方式 模式 优点 缺点 单机版 架构简单，部署方便 机器故障、容量瓶颈、QPS瓶颈 主从复制 高可靠性，读写分离 故障恢复复杂，主库的</description>
    </item>
    
    <item>
      <title>IO NIO框架</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/5.io-nio%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/5.io-nio%E6%A1%86%E6%9E%B6/</guid>
      <description>这里主要涉及到IO多路复用 基本概念介绍 BIO 同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理</description>
    </item>
    
    <item>
      <title>java8特性</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/10.java8%E7%89%B9%E6%80%A7/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/10.java8%E7%89%B9%E6%80%A7/</guid>
      <description>java语言的特性 Lambda表达式和函数式接口 最简单的lambda表达式如下 1 Arrays.asList( &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;d&amp;#34; ).forEach( e -&amp;gt; System.out.println( e ) ); 当然，为了显式说明某个接口是函数式接口</description>
    </item>
    
    <item>
      <title>java基础</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/1.java%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/1.java%E5%9F%BA%E7%A1%80/</guid>
      <description>return和finally的执行顺序 finally语句在return语句执行之后return返回之前执行的，所以我们先执行return的语</description>
    </item>
    
    <item>
      <title>JVM模型</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/6.jvm%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/6.jvm%E6%A8%A1%E5%9E%8B/</guid>
      <description>JVM内存模型 这里主要还是会问一些Java的内存模型，1.8之前和之后的内存模型是不一样的 简单说一下每个部分是干嘛的吧 程序计数器 用于记录程序</description>
    </item>
    
    <item>
      <title>元编程</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/7.%E5%85%83%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/7.%E5%85%83%E7%BC%96%E7%A8%8B/</guid>
      <description>这里主要包括插件系统以及代码生成这两个部分，鉴于面试应该不会问这个问题，所以我就不写了</description>
    </item>
    
    <item>
      <title>内存管理</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/6.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/6.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
      <description>内存分配 程序中的数据和变量都会被分配到程序所在的虚拟内存中，内存空间包含两个重要区域：栈区（Stack）和堆区（Heap）。函数调用的参数、</description>
    </item>
    
    <item>
      <title>参数调优</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/9.%E5%8F%82%E6%95%B0%E8%B0%83%E4%BC%98/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/9.%E5%8F%82%E6%95%B0%E8%B0%83%E4%BC%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title>垃圾回收</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/8.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/8.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid>
      <description>判断对象是否是垃圾 引用计数算法：判断对象的引用数量 每引用一次就+1，当一个对象实例的某个引用超过了生命周期或者被设置为一个新值时，对象实例的</description>
    </item>
    
    <item>
      <title>常用关键字</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/4.%E5%B8%B8%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/4.%E5%B8%B8%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>for和range for循环的三种用法 for range用于遍历切片，数组或者map 几个用法 使用 for range a {} 遍历数组和切片，不关心索引和数据的情况； 使</description>
    </item>
    
    <item>
      <title>并发框架(JUC)</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/4.%E5%B9%B6%E5%8F%91%E6%A1%86%E6%9E%B6juc/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/4.%E5%B9%B6%E5%8F%91%E6%A1%86%E6%9E%B6juc/</guid>
      <description>并发框架，其实也叫 JUC 即 java.util.concurrent 包，分为（锁框架、原子类框架、同步器框架、集合框架、执行器框架） 线程创建方式 继承Thread类重写run方法 1 2 3 4</description>
    </item>
    
    <item>
      <title>并发编程</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/5.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/5.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</guid>
      <description>上下文context 这东西是用于控制并发的。下面是一个简单的例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38</description>
    </item>
    
    <item>
      <title>数据结构</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/2.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/2.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>数据类型 数据类型占用的字节数 整数 int 64位操作系统默认为int64,32位操作系统为int32,但是类型检查时时int int8 (byte 1字节) int16 (short 2字节)</description>
    </item>
    
    <item>
      <title>标准库</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/8.%E6%A0%87%E5%87%86%E5%BA%93/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/8.%E6%A0%87%E5%87%86%E5%BA%93/</guid>
      <description>JSON 序列化和反序列化 go的序列化大部分指的是把结构体转换为json数据，在序列化的时候要注意变量名必须要大写，小写字母开头的变量是不会被序列化</description>
    </item>
    
    <item>
      <title>类加载机制</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/7.%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/7.%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</guid>
      <description>类加载流程 只需要记住下面这5个阶段就行了 参考：JVM 基础 - Java 类加载机制 | Java 全栈知识体系 (pdai.tech) 下面简单介绍一下每个部分做了啥 加载 首先获取二进制流，</description>
    </item>
    
    <item>
      <title>编译原理</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/1.%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/1.%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</guid>
      <description>基本概念 抽象语法树 是源代码语法的结构的一种抽象表示，它用树状的方式表示编程语言的语法结构1。抽象语法树中的每一个节点都表示源代码中的一个元素</description>
    </item>
    
    <item>
      <title>语言基础</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/3.%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/3.%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</guid>
      <description>函数调用 这里面涉及的东西其实挺深的，所以等我后面又时间再去研究 Go 中函数传参仅有值传递一种方式； slice、map、channel都是引用类型</description>
    </item>
    
    <item>
      <title>集合框架</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/3.%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/3.%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</guid>
      <description>集合框架也可以叫容器。（集合是用于存储数据的容器） 常问的有下面几个 ArrayList LinkList HashSet TreeSet HashMap List(对付顺序的好帮手)： 存储的元素是有序的、可重复的。 Se</description>
    </item>
    
    <item>
      <title>面向对象</title>
      <link>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>这个部分主要以面试题为主 京东面试题 是equals而不是equal，单词错了 类和对象 面向对象和面向过程的区别 面向过程 ：面向过程性能比面向对象高</description>
    </item>
    
    <item>
      <title>JS设计模式总结笔记</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/50.js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 27 Feb 2021 20:01:18 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/50.js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0/</guid>
      <description>JS设计模式总结笔记 开篇：前端工程师的成长论 能够决定一个前端工程师的本质的，不是那些瞬息万变的技术点，而是那些不变的东西。 所谓“不变的东西”</description>
    </item>
    
    <item>
      <title>《Git》学习笔记</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/33.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 18 Nov 2020 17:40:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/33.git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>TypeScript笔记</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/35.typescript%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 08 Oct 2020 13:02:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/35.typescript%E7%AC%94%E8%AE%B0/</guid>
      <description>TypeScript 学习笔记 TypeScript 的类型校验是给程序员看的，在编译后不会存在TS代码。 类型注解 1 2 3 4 5 6 function fn(person: string):void{ // 参数类型是字符串，没有返回值 ///... } fn(&amp;#39;str&amp;#39;) // 如传递参数非</description>
    </item>
    
    <item>
      <title>《JavaScript高级程序设计》笔记</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/05.javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 12 Jun 2020 12:39:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/05.javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/</guid>
      <description>《JavaScript高级程序设计》笔记 第1章 JavaScript简介 JavaScript诞生于1995年 一个完整的JavaScript由这</description>
    </item>
    
    <item>
      <title>比typeof运算符更准确的类型判断</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/100.%E6%AF%94typeof%E8%BF%90%E7%AE%97%E7%AC%A6%E6%9B%B4%E5%87%86%E7%A1%AE%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/</link>
      <pubDate>Mon, 13 Apr 2020 15:56:54 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/100.%E6%AF%94typeof%E8%BF%90%E7%AE%97%E7%AC%A6%E6%9B%B4%E5%87%86%E7%A1%AE%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/</guid>
      <description>比typeof运算符更准确的类型判断 不同数据类型的Object.prototype.toString方法返回值如下。 数值：返回[object</description>
    </item>
    
    <item>
      <title>JS获取和修改url参数</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/90.js%E8%8E%B7%E5%8F%96%E5%92%8C%E4%BF%AE%E6%94%B9url%E5%8F%82%E6%95%B0/</link>
      <pubDate>Thu, 05 Mar 2020 12:45:37 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/90.js%E8%8E%B7%E5%8F%96%E5%92%8C%E4%BF%AE%E6%94%B9url%E5%8F%82%E6%95%B0/</guid>
      <description>JS获取和修改url参数 获取url参数 1 2 3 4 5 6 7 8 9 10 11 12 /** * 获取url里的参数 * @param arg 参数名 * @returns */ function getURLString(arg) { var reg = new RegExp(&amp;#34;(^|&amp;amp;)&amp;#34; + arg + &amp;#34;=([^&amp;amp;]*)(&amp;amp;|$)&amp;#34;, &amp;#34;i&amp;#34;); var r = window.location.search.substr(1).match(reg); if (r</description>
    </item>
    
    <item>
      <title>防抖与节流函数</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/80.%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 29 Feb 2020 15:07:47 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/80.%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0/</guid>
      <description>防抖与节流函数 防抖和节流的作用都是在高频事件中防止函数被多次调用，是一种性能优化的方案。 区别在于，防抖函数只会在高频事件结束后n毫秒调用一次</description>
    </item>
    
    <item>
      <title>将一维数组按指定长度转为二维数组</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/70.%E5%B0%86%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E6%8C%89%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6%E8%BD%AC%E4%B8%BA%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sun, 23 Feb 2020 13:49:31 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/70.%E5%B0%86%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E6%8C%89%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6%E8%BD%AC%E4%B8%BA%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</guid>
      <description>将一维数组按指定长度转为二维数组 将一维数组按指定长度转为二维数组 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 function pages(arr, len) { const pages = [] arr.forEach((item, index) =&amp;gt; { const page = Math.floor(index / len) if (!pages[page]) { pages[page]</description>
    </item>
    
    <item>
      <title>ES5面向对象</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/03.es5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 22 Feb 2020 10:35:43 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/03.es5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>ES5面向对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 //面向对象</description>
    </item>
    
    <item>
      <title>JS随机打乱数组</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/50.js%E9%9A%8F%E6%9C%BA%E6%89%93%E4%B9%B1%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sat, 08 Feb 2020 17:42:03 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/50.js%E9%9A%8F%E6%9C%BA%E6%89%93%E4%B9%B1%E6%95%B0%E7%BB%84/</guid>
      <description>JS随机打乱数组 1 2 3 4 5 6 7 8 9 10 11 12 13 function shuffle(arr) { // 随机打乱数组 let _arr = arr.slice() // 调用数组副本，不改变原数组 for (let i = 0; i &amp;lt; _arr.length; i++) { let j = getRandomInt(0, i) let t = _arr[i] _arr[i] =</description>
    </item>
    
    <item>
      <title>《Vue》笔记</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.vue%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 04 Feb 2020 12:16:12 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.vue%E7%AC%94%E8%AE%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>《ES6 教程》笔记</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 12 Jan 2020 15:49:22 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.es6-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>《JavaScript教程》笔记</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/00.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 12 Jan 2020 11:51:53 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/00.javascript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>《TypeScript 从零实现 axios》</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/30.typescript-%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/</link>
      <pubDate>Sun, 05 Jan 2020 10:40:48 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/30.typescript-%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0-axios/</guid>
      <description></description>
    </item>
    
    <item>
      <title>判断是否为移动端浏览器</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/60.%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8/</link>
      <pubDate>Sat, 04 Jan 2020 15:25:11 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/60.%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8/</guid>
      <description>判断是否为移动端浏览器 1 2 3 4 5 6 const flag = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i); if(flag){ // 移动端 } else { // PC端 }</description>
    </item>
    
    <item>
      <title>ES6面向对象</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/04.es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/04.es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>ES6面向对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 //面向对象封装 class</description>
    </item>
    
    <item>
      <title>new命令原理</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/02.new%E5%91%BD%E4%BB%A4%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/02.new%E5%91%BD%E4%BB%A4%E5%8E%9F%E7%90%86/</guid>
      <description>new命令原理 使用new命令时，它后面的函数依次执行下面的步骤： 创建一个空对象，作为将要返回的实例对象。 将这个空对象的原型，指向构造函数的p</description>
    </item>
    
    <item>
      <title>多种数组去重性能对比</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/06.%E5%A4%9A%E7%A7%8D%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/06.%E5%A4%9A%E7%A7%8D%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/</guid>
      <description>多种数组去重性能对比 测试模板 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // 创建一个 1 ~ 10w 的数组，Array.from为ES6语法 let arr1 = Array.from(new Array(1000000),</description>
    </item>
    
    <item>
      <title>小程序笔记</title>
      <link>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/40.%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/02.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/40.%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0/</guid>
      <description>小程序笔记 基础课程部分 微信公众平台 https://mp.weixin.qq.com/ 注册时可选择类型：订阅号、服务号、小程序、企业微信 每个邮箱仅能注册一个小程序。 个人类型小程序：无法使用微</description>
    </item>
    
  </channel>
</rss>
