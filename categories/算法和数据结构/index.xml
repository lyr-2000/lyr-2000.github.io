<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法和数据结构 on 笔试面试经验浓缩</title>
    <link>https://lyr-2000.github.io/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 算法和数据结构 on 笔试面试经验浓缩</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>lyr</copyright>
    <lastBuildDate>Thu, 15 Apr 2021 20:48:21 +0000</lastBuildDate>
    
	<atom:link href="https://lyr-2000.github.io/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>腾讯</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/09.%E7%AC%94%E8%AF%95%E9%A2%98%E7%9B%AE/01.%E8%85%BE%E8%AE%AF/</link>
      <pubDate>Thu, 15 Apr 2021 20:48:21 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/09.%E7%AC%94%E8%AF%95%E9%A2%98%E7%9B%AE/01.%E8%85%BE%E8%AE%AF/</guid>
      <description>1.生成格雷码 生成格雷码_牛客题霸_牛客网 (nowcoder.com) 先理解一下格雷码的定义吧，我拿n为3举例，当n为3时，我们生成的格雷码如下 1 [000, 001, 011, 010, 110, 111, 101, 100] 任意</description>
    </item>
    
    <item>
      <title>腾讯</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/08.codetop%E4%BC%81%E4%B8%9A%E9%A2%98%E5%BA%93/01.%E8%85%BE%E8%AE%AF/</link>
      <pubDate>Thu, 15 Apr 2021 08:34:10 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/08.codetop%E4%BC%81%E4%B8%9A%E9%A2%98%E5%BA%93/01.%E8%85%BE%E8%AE%AF/</guid>
      <description>1.反转链表 206. 反转链表 - 力扣（LeetCode） (leetcode-cn.com) 这题考察的就是你对递归和迭代的综合运用 解法一：递归 这递归好久没做了，还有有点蒙，下面我简单</description>
    </item>
    
    <item>
      <title>面试问的一些算法</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/04.%E9%9D%A2%E8%AF%95%E9%97%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 10 Apr 2021 19:06:43 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/04.%E9%9D%A2%E8%AF%95%E9%97%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%97%E6%B3%95/</guid>
      <description>给定一个 1-7随机数生成器 如何生成1-10随机数并验证？ 力扣上有一样的题目 470. 用 Rand7() 实现 Rand10() - 力扣（LeetCode） (leetcode-cn.com) 我们可以使用拒绝采样的方法</description>
    </item>
    
    <item>
      <title>1-10</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/07.%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95/1.1-10/</link>
      <pubDate>Sat, 10 Apr 2021 14:20:24 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/07.%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95/1.1-10/</guid>
      <description>01.01判断字符串是否唯一 面试题 01.01. 判定字符是否唯一 - 力扣（LeetCode） (leetcode-cn.com) 解法一： 使用map 这个方法虽然很简单，但是面试不推荐的话不推</description>
    </item>
    
    <item>
      <title>10-20</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/07.%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95/2.10-20/</link>
      <pubDate>Sat, 10 Apr 2021 14:20:24 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/07.%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95/2.10-20/</guid>
      <description></description>
    </item>
    
    <item>
      <title>高频手撕代码</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/09.%E9%AB%98%E9%A2%91%E6%89%8B%E5%8A%BF%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Thu, 01 Apr 2021 15:53:40 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/09.%E9%AB%98%E9%A2%91%E6%89%8B%E5%8A%BF%E4%BB%A3%E7%A0%81/</guid>
      <description>注意，这些代码我都会用GO来进行实现，参考： 想去看机会？这10道最高频的手撕代码题都会了吗？ - 云+社区 - 腾讯云 (tencent.com) 快速排序 这个非常的经典，必须</description>
    </item>
    
    <item>
      <title>时间复杂度和空间复杂度</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/03.%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Tue, 30 Mar 2021 16:25:40 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/03.%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description>算法（Algorithm）是指用来操作数据、解决程序问题的一组方法。对于同一个问题，使用不同的算法，也许最终得到的结果是一样的，但在过程中消</description>
    </item>
    
    <item>
      <title>二分查找</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/07.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/07.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
      <description>旋转数组的查找 33. 搜索旋转排序数组 - 力扣（LeetCode） (leetcode-cn.com) 区间查找 327. 区间和的个数 - 力扣（LeetCode） (leetcode-cn.com) 逆序数 剑指 Offer 51. 数组中的逆序对 -</description>
    </item>
    
    <item>
      <title>二叉树</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/05.%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/05.%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>二叉树转链表 114. 二叉树展开为链表 - 力扣（LeetCode） (leetcode-cn.com) 路径之和 113. 路径总和 II - 力扣（LeetCode） (leetcode-cn.com) 最近公共祖先 Loading Question&amp;hellip; - 力扣（LeetC</description>
    </item>
    
    <item>
      <title>动态规划</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/08.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/08.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>最小路径和 64. 最小路径和 - 力扣（LeetCode） (leetcode-cn.com) 最长上升子序列 300. 最长递增子序列 - 力扣（LeetCode） (leetcode-cn.com) 三角形 120. 三角形最小路径和 - 力扣（</description>
    </item>
    
    <item>
      <title>字符串</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/06.%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/06.%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>最长回文串 409. 最长回文串 - 力扣（LeetCode） (leetcode-cn.com) 5. 最长回文子串 - 力扣（LeetCode） (leetcode-cn.com) 重复DNA序列 187. 重复的DNA序列 - 力扣（Leet</description>
    </item>
    
    <item>
      <title>栈、队列、堆</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/02.%E6%A0%88%E9%98%9F%E5%88%97%E5%A0%86/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/02.%E6%A0%88%E9%98%9F%E5%88%97%E5%A0%86/</guid>
      <description>使用队列实现栈 225. 用队列实现栈 - 力扣（LeetCode） (leetcode-cn.com) 使用栈实现队列 232. 用栈实现队列 - 力扣（LeetCode） (leetcode-cn.com) 包含min函数的栈 面试题30</description>
    </item>
    
    <item>
      <title>贪心算法</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/03.%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/03.%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</guid>
      <description>分糖果 575. 分糖果 - 力扣（LeetCode） (leetcode-cn.com) 跳跃游戏1 2 55. 跳跃游戏 - 力扣（LeetCode） (leetcode-cn.com) 最优加油方法 871. 最低加油次数 - 力扣（LeetCod</description>
    </item>
    
    <item>
      <title>递归、回溯、分治</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/04.%E9%80%92%E5%BD%92%E5%9B%9E%E6%BA%AF%E5%88%86%E6%B2%BB/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/04.%E9%80%92%E5%BD%92%E5%9B%9E%E6%BA%AF%E5%88%86%E6%B2%BB/</guid>
      <description>n皇后 51. N 皇后 - 力扣（LeetCode） (leetcode-cn.com) 生成括号 22. 括号生成 - 力扣（LeetCode） (leetcode-cn.com) 求子集1 2 78. 子集 - 力扣（LeetCode） (leetcode-cn.com) 组合数之</description>
    </item>
    
    <item>
      <title>链表</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/01.%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Mon, 29 Mar 2021 19:41:39 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06.%E9%87%8D%E7%82%B9%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/01.%E9%93%BE%E8%A1%A8/</guid>
      <description>链表逆序 剑指 Offer 24. 反转链表 - 力扣（LeetCode） (leetcode-cn.com) 链表求交点 面试题 02.07. 链表相交 - 力扣（LeetCode） (leetcode-cn.com) 链表求环 142. 环形链表 II - 力扣（Lee</description>
    </item>
    
    <item>
      <title>11-20</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/2.11-20/</link>
      <pubDate>Mon, 29 Mar 2021 08:56:23 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/2.11-20/</guid>
      <description>11.旋转数组最小的数字（看） 剑指 Offer 11. 旋转数组的最小数字 - 力扣（LeetCode） (leetcode-cn.com) 解法一 二分查找 这题目主要还是考理解，下面简单介绍一下原理</description>
    </item>
    
    <item>
      <title>21-30</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/3.21-30/</link>
      <pubDate>Mon, 29 Mar 2021 08:56:23 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/3.21-30/</guid>
      <description>21.调整数组顺序使奇数位于偶数前面 剑指 Offer 21. 调整数组顺序使奇数位于偶数前面 - 力扣（LeetCode） (leetcode-cn.com) 哈哈，居然做出来了，这题其实最简单的方</description>
    </item>
    
    <item>
      <title>3-10</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/1.3-10/</link>
      <pubDate>Mon, 29 Mar 2021 08:56:23 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/1.3-10/</guid>
      <description>前面那个CMU硕士100题大概知道了大致的算法和套路，目前还没时间去完善，下面的这个剑指offer我打算每道题都认真总结一下。。 题目链接：《</description>
    </item>
    
    <item>
      <title>31-40</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/4.31-40/</link>
      <pubDate>Mon, 29 Mar 2021 08:56:23 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/4.31-40/</guid>
      <description>31.栈的压入，弹出序列 剑指 Offer 31. 栈的压入、弹出序列 - 力扣（LeetCode） (leetcode-cn.com) 太难了，这题连思路都没有。。。只能看大佬的题解了呜呜呜 解法一：</description>
    </item>
    
    <item>
      <title>41-50</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/5.41-50/</link>
      <pubDate>Mon, 29 Mar 2021 08:56:23 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/5.41-50/</guid>
      <description>41.数据流中的中位数 剑指 Offer 41. 数据流中的中位数 - 力扣（LeetCode） (leetcode-cn.com) 这题先暂时跳过，后续再来研究一下 42.连续子数组的最大和 剑指 Offer 42. 连</description>
    </item>
    
    <item>
      <title>51-60</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/6.51-60/</link>
      <pubDate>Mon, 29 Mar 2021 08:56:23 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/6.51-60/</guid>
      <description>51.数组中的逆序对 剑指 Offer 51. 数组中的逆序对 - 力扣（LeetCode） (leetcode-cn.com) 这困难题先跳过吧，实在是把我刷累了 52.两个链表的第一个公共节点、 剑指</description>
    </item>
    
    <item>
      <title>61-70</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/7.61-70/</link>
      <pubDate>Mon, 29 Mar 2021 08:56:23 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%89%91%E6%8C%87offer/7.61-70/</guid>
      <description>61.扑克牌中的顺子 剑指 Offer 61. 扑克牌中的顺子 - 力扣（LeetCode） (leetcode-cn.com) 没看懂这题啥意思。。。。我怎么这么菜啊 解法一：集合Set+遍历 首先我们</description>
    </item>
    
    <item>
      <title>面试问题</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/04.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 25 Mar 2021 15:56:50 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/04.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</guid>
      <description>设计模式的6大原则？ 1、开闭原则（Open Close Principle） 开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修</description>
    </item>
    
    <item>
      <title>位运算</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/09.%E4%BD%8D%E8%BF%90%E7%AE%97/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/09.%E4%BD%8D%E8%BF%90%E7%AE%97/</guid>
      <description>位运算的常用技巧 位运算是算法题里比较特殊的一种类型，它们利用二进制位运算的特性进行一些奇妙的优化 和计算。常用的位运算符号包括：“∧”按位异或</description>
    </item>
    
    <item>
      <title>分治法解题</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/07.%E5%88%86%E6%B2%BB%E6%B3%95%E8%A7%A3%E9%A2%98/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/07.%E5%88%86%E6%B2%BB%E6%B3%95%E8%A7%A3%E9%A2%98/</guid>
      <description>解释 顾名思义，分治问题由“分”（divide）和“治”（conquer）两部分组成，通过把原问题分为子 问题，再将子问题进行处理合并，从而实现</description>
    </item>
    
    <item>
      <title>图</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/14.%E5%9B%BE/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/14.%E5%9B%BE/</guid>
      <description>基本概念 图通常分为有向（directed）或无向（undirected），有 循环（cyclic）或无循环（acyclic），所有节点相连（c</description>
    </item>
    
    <item>
      <title>字符串</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/11.%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/11.%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>基本概念 字串 是在字符串中，取出一块（连续的），如：pik, ach, kac等 子序列 指的是从字符串中，顺序取出字符，但是可以不连续：如：pau, kch, ic</description>
    </item>
    
    <item>
      <title>数学问题</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/08.%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/08.%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/</guid>
      <description>这里主要是考一些数学概念之类的，这里我简单分分类 公倍数与公因数 利用辗转相除法，我们可以很方便地求得两个数的最大公因数（greatest common di</description>
    </item>
    
    <item>
      <title>数据结构</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/10.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/10.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>数组 找到所有数组中消失的数字 这题目想法可以借鉴一下，就是我们让数组作为数组的下标，然后根据当前数字的正负来判断数字是否出现。 1 2 3 4 5 6 7 8</description>
    </item>
    
    <item>
      <title>更加复杂的数据结构</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/15.%E6%9B%B4%E5%8A%A0%E5%A4%8D%E6%9D%82%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/15.%E6%9B%B4%E5%8A%A0%E5%A4%8D%E6%9D%82%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>并查集 复合数据结构</description>
    </item>
    
    <item>
      <title>树</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/13.%E6%A0%91/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/13.%E6%A0%91/</guid>
      <description>树的递归 二叉树的最大深度 104. 二叉树的最大深度 - 力扣（LeetCode） (leetcode-cn.com) 终于没看题解做对了一个，太难了，不过这题目比较简单，所以没啥炫耀的，害</description>
    </item>
    
    <item>
      <title>链表</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/12.%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/12.%E9%93%BE%E8%A1%A8/</guid>
      <description>链表的基本操作 翻转链表 206. 反转链表 - 力扣（LeetCode） (leetcode-cn.com) 有递归法和非递归法这两种，先说一下递归法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</description>
    </item>
    
    <item>
      <title>二分查找</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/03.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/03.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
      <description>解释 二分查找也常被称为二分法或者折半查找，每次查找时通过将待查找区间分成两部分并只取 一部分继续查找，将查找的复杂度大大减少。对于一个长度为 O(n)</description>
    </item>
    
    <item>
      <title>动态规划</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/06.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/06.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>算法解释 这里我们引用一下维基百科的描述：“动态规划（Dynamic Programming, DP）在查找有很多 重叠子问题的情况的最优解时有效。它将问题重新组合成子问</description>
    </item>
    
    <item>
      <title>双指针法</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/02.%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/02.%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95/</guid>
      <description>算法解释 双指针主要用于遍历数组，两个指针指向不同的元素，从而协同完成任务。也可以延伸到多个数组的多个指针。 若两个指针指向同一数组，遍历方向相</description>
    </item>
    
    <item>
      <title>各种排序</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/04.%E5%90%84%E7%A7%8D%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/04.%E5%90%84%E7%A7%8D%E6%8E%92%E5%BA%8F/</guid>
      <description>常用的排序算法 以下是一些最基本的排序算法。虽然在 C++ 里可以通过 std::sort() 快速排序，而且刷题 时很少需要自己手写排序算法，但是熟习各种排序算法可以加深自己</description>
    </item>
    
    <item>
      <title>各种搜索</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/05.%E5%90%84%E7%A7%8D%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/05.%E5%90%84%E7%A7%8D%E6%90%9C%E7%B4%A2/</guid>
      <description>解释 深度优先搜索和广度优先搜索是两种最常见的优先搜索方法，它们被广泛地运用在图和树等 结构中进行搜索。 深度优先搜索 深度优先搜索（depth-f</description>
    </item>
    
    <item>
      <title>贪心算法</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/01.%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/01.%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</guid>
      <description>算法解释 顾名思义，贪心算法或贪心思想采用贪心的策略，保证每次操作都是局部最优的，从而使最 后得到的结果是全局最优的。 举一个最简单的例子：小明和</description>
    </item>
    
    <item>
      <title>创建型</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01.%E5%88%9B%E5%BB%BA%E5%9E%8B/</link>
      <pubDate>Sun, 21 Mar 2021 20:42:24 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01.%E5%88%9B%E5%BB%BA%E5%9E%8B/</guid>
      <description>创建型模式关注点是如何创建对象，其核心思想是要把对象的创建和使用相分离，这样使得两者能相对独立地变换。创建型模式包括： 工厂方法：Factor</description>
    </item>
    
    <item>
      <title>结构性</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02.%E7%BB%93%E6%9E%84%E5%9E%8B/</link>
      <pubDate>Sun, 21 Mar 2021 20:42:24 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02.%E7%BB%93%E6%9E%84%E5%9E%8B/</guid>
      <description>结构型模式主要涉及如何组合各种对象以便获得更好、更灵活的结构。虽然面向对象的继承机制提供了最基本的子类扩展父类的功能，但结构型模式不仅仅简单</description>
    </item>
    
    <item>
      <title>行为型</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/03.%E8%A1%8C%E4%B8%BA%E5%9E%8B/</link>
      <pubDate>Sun, 21 Mar 2021 20:42:24 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/03.%E8%A1%8C%E4%B8%BA%E5%9E%8B/</guid>
      <description>行为型模式主要涉及算法和对象间的职责分配。通过使用对象组合，行为型模式可以描述一组对象应该如何协作来完成一个整体任务。 行为型模式有： 责任链 命</description>
    </item>
    
    <item>
      <title>排序算法</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/01.%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 21 Mar 2021 19:07:54 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/01.%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>插入排序 直接插入排序 插入排序是最简单的，我们不断比较插入数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // 插入排序 // 时间复杂度 n^2 // 因为我们这里</description>
    </item>
    
    <item>
      <title>查找算法</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/02.%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 21 Mar 2021 19:07:54 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%AE%97%E6%B3%95/02.%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</guid>
      <description>线性表查找 顺序查找 顺序查找(Sequential Search) 的查找过程为：从表的一端开始， 依次将记录的关键字和给定值进行比较，若某个记录的关键字和给定</description>
    </item>
    
    <item>
      <title>串、数组、广义表</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E4%B8%B2%E6%95%B0%E7%BB%84%E5%B9%BF%E4%B9%89%E8%A1%A8/</link>
      <pubDate>Sun, 21 Mar 2021 19:05:37 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E4%B8%B2%E6%95%B0%E7%BB%84%E5%B9%BF%E4%B9%89%E8%A1%A8/</guid>
      <description>字符串匹配算法 1.BF算法 BF算法是一个古典的算法，算法主要思想如下图所示 按顺序一位一位进行比较，如果有一位不匹配，那么原字符串+1 2.KM</description>
    </item>
    
    <item>
      <title>图</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%9B%BE/</link>
      <pubDate>Sun, 21 Mar 2021 19:05:37 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%9B%BE/</guid>
      <description>基本概念 图包括有向图和无向图，有向图就是从一个点到另一个点是有方向的，无向图就是点和点之间没有方向。&amp;lt;v,w&amp;gt; 是有序的（有向图）</description>
    </item>
    
    <item>
      <title>数和二叉树</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.%E6%95%B0%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Sun, 21 Mar 2021 19:05:37 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.%E6%95%B0%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>二叉树的遍历 1.先序遍历：根结点 &amp;mdash;&amp;gt; 左子树 &amp;mdash;&amp;gt; 右子树 2.中序遍历：左子树&amp;mdash;&amp;gt; 根结点 &amp;mdash;&amp;gt; 右子树 3.后序遍历：左子树 &amp;mdash;&amp;gt; 右子树 &amp;mdash;&amp;gt; 根结点</description>
    </item>
    
    <item>
      <title>栈和队列</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</link>
      <pubDate>Sun, 21 Mar 2021 19:05:37 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</guid>
      <description>堆和栈的区别 栈是一种受限的线性表，如下图所示 堆是二叉树的结构，堆是一种常用的树形结构，是一种特殊的完全二叉树，当且仅当满足 所有节点的值总是不</description>
    </item>
    
    <item>
      <title>线性表</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%BA%BF%E6%80%A7%E8%A1%A8/</link>
      <pubDate>Sun, 21 Mar 2021 19:05:37 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%BA%BF%E6%80%A7%E8%A1%A8/</guid>
      <description>链表 链表分为单链表，循环链表，双向链表，二叉链表，十字链表，邻接表，邻接多重表 首元节点，头节点，头指针 头结点 在链表的第一个节点之前会额外增设</description>
    </item>
    
  </channel>
</rss>