<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>k8s on 凌冬的个人博客</title>
    <link>https://lyr-2000.github.io/categories/k8s/</link>
    <description>Recent content in k8s on 凌冬的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>LYR</copyright>
    <lastBuildDate>Wed, 11 May 2022 20:02:48 +0800</lastBuildDate>
    <atom:link href="https://lyr-2000.github.io/categories/k8s/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>k8s 权限控制</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/k8s-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Thu, 29 Dec 2022 00:43:36 +0800</pubDate>
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/k8s-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</guid>
      <description>k8s权限控制 参考博客 Role：角色，它其实是一组规则，定义了一组对 Kubernetes API 对象的操作权限。 Subject：被作用者，既可以是“人”，也可以是“</description>
    </item>
    <item>
      <title>k8s statefulSet介绍</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/k8s-statefulset%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Thu, 29 Dec 2022 00:33:49 +0800</pubDate>
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/k8s-statefulset%E4%BB%8B%E7%BB%8D/</guid>
      <description>深入理解StatefulSet（一）：拓扑状态 一个应用的所有 Pod，是完全一样的。所以，它们互相之间没有顺序，也无所谓运行在哪台宿主机上。需</description>
    </item>
    <item>
      <title>k8s pod介绍</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/k8s-pod%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Thu, 06 Oct 2022 15:01:25 +0800</pubDate>
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/k8s-pod%E4%BB%8B%E7%BB%8D/</guid>
      <description>什么是 Pod Pod 是 k8s 里面能够被调度调度最小逻辑单元 (原子单元) 1个 Pod 里面可以运行多个容器 pod 共享哪些资源？ IPC命名空间： Pod中的多个容器可以使用</description>
    </item>
    <item>
      <title>k8s configMap</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/k8s-configmap/</link>
      <pubDate>Sat, 03 Sep 2022 23:13:29 +0800</pubDate>
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/k8s-configmap/</guid>
      <description>configMap原理 configMap 不提供加密功能，如果要存储机密数据，要使用 secret 使用ConfigMap来将你的配置数据和应用程序代码分开 比如，假设你正在</description>
    </item>
    <item>
      <title>k8s持久化存储</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/k8s%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8/</link>
      <pubDate>Wed, 31 Aug 2022 08:08:24 +0800</pubDate>
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/k8s%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8/</guid>
      <description>k8s 文件持久化 容器中的文件是临时存储的，重启容器数据会丢失。 在 docker 里面，我们会用 volumne, 不过 docker中 volume是磁盘上或者理你个容器内的一个目</description>
    </item>
    <item>
      <title>k8s ingress介绍</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/k8s-ingress%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Tue, 30 Aug 2022 22:48:44 +0800</pubDate>
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/k8s-ingress%E4%BB%8B%E7%BB%8D/</guid>
      <description>ingress 介绍 ingress可以理解是一个反向代理，类似于 nginx graph LR 客户端--ingress负载均衡器--&amp;gt;ingress--路由规则--&amp;gt;</description>
    </item>
    <item>
      <title>k8s service对象</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/k8s-service%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Tue, 30 Aug 2022 22:01:28 +0800</pubDate>
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/k8s-service%E5%AF%B9%E8%B1%A1/</guid>
      <description>service 对象介绍 为什么需要service 每个 pod都有自己的 ip地址，但是 deployment 中，同一时刻运行的 Pod集合可能与稍后运行该应用程序的Pod集合不同。</description>
    </item>
    <item>
      <title>命令使用</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 03 Apr 2022 21:33:48 +0800</pubDate>
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</guid>
      <description>命令使用 ​ kubectl命令 核心点： 通过 yaml 配置文件 定义了 我在 平台上运行什么命令 然后 k8s 通过 配置 文件的命令配置 保存起来，调用自己的接口 来 开启容器</description>
    </item>
    <item>
      <title>云计算</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/%E4%BA%91%E8%AE%A1%E7%AE%97/</link>
      <pubDate>Sat, 05 Mar 2022 22:25:48 +0800</pubDate>
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/%E4%BA%91%E8%AE%A1%E7%AE%97/</guid>
      <description>云计算 ​ Infrastructure as a service platform as a service software as a service 容器的集群化如何管理？ 我们需要一个 资源管理器 kubernates 的目的： 声明式系统 kubernates的所有公立能力构建在对象</description>
    </item>
    <item>
      <title>K8S</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/</guid>
      <description></description>
    </item>
    <item>
      <title>K8S环境搭建</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/k8s%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/k8s%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>K8S环境搭建 k8s部署方式 Minikube 单点微型K8S 二进制安装， k8s文档 web命令行学习版本 点击 launch terminal 开启 kubectl 使用 参考博客 将 config 放到 ~/.kube 目录下 , 然后 就可以</description>
    </item>
    <item>
      <title>隔离性实现原理</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/%E9%9A%94%E7%A6%BB%E6%80%A7%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%8E%9F%E7%90%86/k8s/%E9%9A%94%E7%A6%BB%E6%80%A7%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</guid>
      <description>kubernates 的起源 kubernates 最初起源于谷歌的 borg, kubernates 最初目标是为应用的容器化编排部署提供一个最小化的平台，包含几个基本功能： 将应用水平扩容到多个集群 为扩容的实例提</description>
    </item>
  </channel>
</rss>
