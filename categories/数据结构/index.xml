<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构 on 凌冬的个人博客</title>
    <link>https://lyr-2000.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 数据结构 on 凌冬的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>LYR</copyright>
    <lastBuildDate>Sun, 21 Mar 2021 19:05:37 +0000</lastBuildDate>
    
	<atom:link href="https://lyr-2000.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>串、数组、广义表</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E4%B8%B2%E6%95%B0%E7%BB%84%E5%B9%BF%E4%B9%89%E8%A1%A8/</link>
      <pubDate>Sun, 21 Mar 2021 19:05:37 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E4%B8%B2%E6%95%B0%E7%BB%84%E5%B9%BF%E4%B9%89%E8%A1%A8/</guid>
      <description>字符串匹配算法 1.BF算法 BF算法是一个古典的算法，算法主要思想如下图所示 按顺序一位一位进行比较，如果有一位不匹配，那么原字符串+1 2.KM</description>
    </item>
    
    <item>
      <title>图</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%9B%BE/</link>
      <pubDate>Sun, 21 Mar 2021 19:05:37 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05.%E5%9B%BE/</guid>
      <description>基本概念 图包括有向图和无向图，有向图就是从一个点到另一个点是有方向的，无向图就是点和点之间没有方向。&amp;lt;v,w&amp;gt; 是有序的（有向图）</description>
    </item>
    
    <item>
      <title>数和二叉树</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.%E6%95%B0%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Sun, 21 Mar 2021 19:05:37 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.%E6%95%B0%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>二叉树的遍历 1.先序遍历：根结点 &amp;mdash;&amp;gt; 左子树 &amp;mdash;&amp;gt; 右子树 2.中序遍历：左子树&amp;mdash;&amp;gt; 根结点 &amp;mdash;&amp;gt; 右子树 3.后序遍历：左子树 &amp;mdash;&amp;gt; 右子树 &amp;mdash;&amp;gt; 根结点</description>
    </item>
    
    <item>
      <title>栈和队列</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</link>
      <pubDate>Sun, 21 Mar 2021 19:05:37 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</guid>
      <description>堆和栈的区别 栈是一种受限的线性表，如下图所示 堆是二叉树的结构，堆是一种常用的树形结构，是一种特殊的完全二叉树，当且仅当满足 所有节点的值总是不</description>
    </item>
    
    <item>
      <title>线性表</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%BA%BF%E6%80%A7%E8%A1%A8/</link>
      <pubDate>Sun, 21 Mar 2021 19:05:37 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01.%E7%BA%BF%E6%80%A7%E8%A1%A8/</guid>
      <description>链表 链表分为单链表，循环链表，双向链表，二叉链表，十字链表，邻接表，邻接多重表 首元节点，头节点，头指针 头结点 在链表的第一个节点之前会额外增设</description>
    </item>
    
  </channel>
</rss>