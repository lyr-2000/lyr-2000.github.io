<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>《Vue》笔记 on 凌冬的个人博客</title>
    <link>https://lyr-2000.github.io/categories/vue%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 《Vue》笔记 on 凌冬的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>LYR</copyright>
    <lastBuildDate>Sat, 08 Aug 2020 10:38:33 +0000</lastBuildDate><atom:link href="https://lyr-2000.github.io/categories/vue%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vuex</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/10.vuex/01.vuex/</link>
      <pubDate>Sat, 08 Aug 2020 10:38:33 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/10.vuex/01.vuex/</guid>
      <description>Vuex Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。 Vuex使用过程演示 以vue-cli3新创建出来的项目为例，演示Vuex的使用过程。 创建项目: 1</description>
    </item>
    
    <item>
      <title>Vue CLi v3 创建项目使用记录</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/05.%E5%B7%A5%E5%85%B7/10.vue-cli-v3-%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Thu, 20 Feb 2020 17:24:29 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/05.%E5%B7%A5%E5%85%B7/10.vue-cli-v3-%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</guid>
      <description>Vue CLi v3.x 创建项目使用记录 官方文档 以下使用的CLi版本是 v3.11.0 vue create 运行以下命令来创建一个新项目 1 vue create hello-world 你会被提示选取一个 preset (预设)。你可以选默认的包</description>
    </item>
    
    <item>
      <title>Mixin混入</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/04.%E5%8F%AF%E5%A4%8D%E7%94%A8%E6%80%A7%E7%BB%84%E5%90%88/01.mixin%E6%B7%B7%E5%85%A5/</link>
      <pubDate>Wed, 19 Feb 2020 15:22:41 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/04.%E5%8F%AF%E5%A4%8D%E7%94%A8%E6%80%A7%E7%BB%84%E5%90%88/01.mixin%E6%B7%B7%E5%85%A5/</guid>
      <description>Mixin混入 基础 混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混</description>
    </item>
    
    <item>
      <title>vue父子组件的生命周期顺序</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/90.vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Tue, 18 Feb 2020 16:39:33 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/90.vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%A1%BA%E5%BA%8F/</guid>
      <description>vue父子组件的生命周期顺序 加载渲染过程 1 父beforeCreate -&amp;gt; 父created-&amp;gt; 父beforeMount-&amp;gt; 子befo</description>
    </item>
    
    <item>
      <title>使用animate库</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/03.%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/112.%E4%BD%BF%E7%94%A8animate%E5%BA%93/</link>
      <pubDate>Mon, 17 Feb 2020 16:05:52 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/03.%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/112.%E4%BD%BF%E7%94%A8animate%E5%BA%93/</guid>
      <description>vue中使用Animate.css库 自定义过渡类名 我们可以通过以下 attribute 来自定义过渡类名： enter-class enter-active-class enter-to-class (2.1.8+) leave-class leave-active-class leave-to-class (2.1.8+) 他们的优先级高于普通的类名，这对于 Vue 的</description>
    </item>
    
    <item>
      <title>动态组件与 v-once 指令</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/80.%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6%E4%B8%8E-v-once-%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Sun, 16 Feb 2020 15:52:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/80.%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6%E4%B8%8E-v-once-%E6%8C%87%E4%BB%A4/</guid>
      <description>动态组件与 v-once 指令 动态组件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 &amp;lt;div id=&amp;#34;root&amp;#34;&amp;gt; &amp;lt;component :is=&amp;#34;type&amp;#34;&amp;gt;&amp;lt;/component&amp;gt; &amp;lt;!--其效果如同下面两行被注释的代码--&amp;gt;</description>
    </item>
    
    <item>
      <title>插槽slot</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/75.%E6%8F%92%E6%A7%BDslot/</link>
      <pubDate>Sun, 16 Feb 2020 11:46:27 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/75.%E6%8F%92%E6%A7%BDslot/</guid>
      <description>插槽slot API 插槽 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 &amp;lt;div id=&amp;#34;root&amp;#34;&amp;gt; &amp;lt;child&amp;gt; &amp;lt;!-- 组件标签 --&amp;gt; &amp;lt;h1&amp;gt;hello&amp;lt;/h1&amp;gt; &amp;lt;/child&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; Vue.component(&amp;#39;child&amp;#39;, { // 子组件 template: &amp;#39;&amp;lt;div&amp;gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&amp;lt;/div&amp;gt;&amp;#39; }) var vm = new Vue({ el: &amp;#39;#root&amp;#39; }) &amp;lt;/script&amp;gt; 上面代码中，组件标签内的h1</description>
    </item>
    
    <item>
      <title>非父子组件传值</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/65.%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</link>
      <pubDate>Sat, 15 Feb 2020 14:55:03 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/65.%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</guid>
      <description>非父子组件间传值 当组件的嵌套多时，非父子组件间传值就显得复杂，除了使用vuex实现之外，还可以通过Bus（或者叫 总线/发布订阅模式/观察者模</description>
    </item>
    
    <item>
      <title>自定义事件</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/55.%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Sat, 15 Feb 2020 11:27:45 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/55.%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/</guid>
      <description>自定义事件 API 在组件标签v-on绑定的事件是自定义事件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 &amp;lt;div id=&amp;#34;root&amp;#34;&amp;gt; &amp;lt;child @click=&amp;#34;handleClick&amp;#34;&amp;gt;&amp;lt;/child&amp;gt; &amp;lt;!--这里click是自定义事件--</description>
    </item>
    
    <item>
      <title>Prop 验证 与 非 Prop 的 Attribute</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/52.prop-%E9%AA%8C%E8%AF%81-%E4%B8%8E-%E9%9D%9E-prop-%E7%9A%84-attribute/</link>
      <pubDate>Sat, 15 Feb 2020 10:49:04 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/52.prop-%E9%AA%8C%E8%AF%81-%E4%B8%8E-%E9%9D%9E-prop-%E7%9A%84-attribute/</guid>
      <description>Prop 验证 与 非 Prop 的 Attribute Prop 验证 API 子组件对父组件传递来的参数进行校验 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 Vue.component(&amp;#39;my-component&amp;#39;, { props: { // 基础的</description>
    </item>
    
    <item>
      <title>使用组件的细节点</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/36.%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6%E7%9A%84%E7%BB%86%E8%8A%82%E7%82%B9/</link>
      <pubDate>Thu, 13 Feb 2020 13:26:20 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/36.%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6%E7%9A%84%E7%BB%86%E8%8A%82%E7%82%B9/</guid>
      <description>使用组件的细节点 解析 DOM 模板时的注意事项 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 &amp;lt;div id=&amp;#34;root&amp;#34;&amp;gt; &amp;lt;table&amp;gt; &amp;lt;tbody&amp;gt; &amp;lt;row&amp;gt;&amp;lt;/row&amp;gt; &amp;lt;row&amp;gt;&amp;lt;/row&amp;gt; &amp;lt;row&amp;gt;&amp;lt;/row&amp;gt; &amp;lt;/tbody&amp;gt; &amp;lt;/table&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; Vue.component(&amp;#39;row&amp;#39;, { template: &amp;#39;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;this is a row&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;#39; }) var vm = new Vue({ el: &amp;#39;#root&amp;#39; }) &amp;lt;/script&amp;gt; 上面代码中</description>
    </item>
    
    <item>
      <title>列表渲染之数组、对象更新检测</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/35.%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93%E4%B9%8B%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Wed, 05 Feb 2020 13:09:06 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/35.%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93%E4%B9%8B%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B/</guid>
      <description>列表渲染之数组、对象更新检测 数组更新检测API 对象更新检测API 数组更新检测 变异方法 (mutation method) Vue 将被侦听的数组的变异方法进行了包裹，所以它们也将会</description>
    </item>
    
    <item>
      <title>v-if vs v-show</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/30.v-if-vs-v-show/</link>
      <pubDate>Tue, 04 Feb 2020 17:32:23 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/30.v-if-vs-v-show/</guid>
      <description>v-if vs v-show API v-if 根据渲染条件决定是否把元素渲染到DOM页面，而v-show不管渲染条件是什么，都会把元素渲染到DOM页面，只是简单的切换CSS的显</description>
    </item>
    
    <item>
      <title>计算属性 vs 方法 vs 侦听属性</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/20.%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-vs-%E6%96%B9%E6%B3%95-vs-%E4%BE%A6%E5%90%AC%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Tue, 04 Feb 2020 16:37:51 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/20.%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-vs-%E6%96%B9%E6%B3%95-vs-%E4%BE%A6%E5%90%AC%E5%B1%9E%E6%80%A7/</guid>
      <description>计算属性 vs 方法 vs 侦听属性 API 如果一个功能同时可以使用计算属性(computed)、方法(methods)、侦听属性(watch)来实现的时候推</description>
    </item>
    
    <item>
      <title>生命周期</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/10.%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Tue, 04 Feb 2020 15:06:59 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/10.%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>实例生命周期钩子 实例生命周期钩子API 简单理解，生命周期钩子函数就是vue实例在某一个时间点会自动执行的函数。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description>
    </item>
    
    <item>
      <title>路由懒加载</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/06.%E8%A7%84%E6%A8%A1%E5%8C%96/140.%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD/</link>
      <pubDate>Tue, 04 Feb 2020 13:20:20 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/06.%E8%A7%84%E6%A8%A1%E5%8C%96/140.%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD/</guid>
      <description>路由懒加载 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // 路由同步加载 // import Recommend from &amp;#39;@/components/recommend/recommend&amp;#39; // import Singer from &amp;#39;@/components/singer/singer&amp;#39; // import Rank from &amp;#39;@/components/rank/rank&amp;#39; // import Search from &amp;#39;@/components/search/search&amp;#39; // import SingerDetail from &amp;#39;@/components/singer-detail/singer-detail&amp;#39; // import Disc from &amp;#39;@/components/disc/disc&amp;#39; // import TopList from &amp;#39;@/components/top-list/top-list&amp;#39; // import</description>
    </item>
    
    <item>
      <title>transition-group列表过渡</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/03.%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/120.transition-group%E5%88%97%E8%A1%A8%E8%BF%87%E6%B8%A1/</link>
      <pubDate>Tue, 04 Feb 2020 13:17:42 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/03.%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/120.transition-group%E5%88%97%E8%A1%A8%E8%BF%87%E6%B8%A1/</guid>
      <description>transition-group列表过渡 列表的进入/离开过渡 1 2 3 &amp;lt;transition-group tag=&amp;#34;ul&amp;#34;&amp;gt; &amp;lt;!--tag转为ul--&amp;gt; &amp;lt;li v-for=&amp;#34;item in list&amp;#34; :key=&amp;#34;item&amp;#34;&amp;gt;{{item}}&amp;lt;/li&amp;gt; &amp;lt;!--子元素</description>
    </item>
    
    <item>
      <title>transition过渡&amp;动画</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/03.%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/110.transition%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Tue, 04 Feb 2020 13:16:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/03.%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/110.transition%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/</guid>
      <description>transition过渡&amp;amp;动画 API 使用 需要设置动画的元素或组件要在外边包裹一个&amp;lt;transition&amp;gt;标签，设置自定义的n</description>
    </item>
    
    <item>
      <title>vuex操作相关</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/06.%E8%A7%84%E6%A8%A1%E5%8C%96/100.vuex%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Tue, 04 Feb 2020 13:15:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/06.%E8%A7%84%E6%A8%A1%E5%8C%96/100.vuex%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%85%B3/</guid>
      <description>vuex操作相关 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import { mapActions, mapMutations, mapGetters } from &amp;#39;vuex&amp;#39; computed: { ...mapGetters([ // 获取数据，内部为数组 &amp;#39;searchHistory&amp;#39; // 相当于在data插入searc</description>
    </item>
    
    <item>
      <title>操作本地缓存</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/99.%E5%85%B6%E4%BB%96/90.%E6%93%8D%E4%BD%9C%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/</link>
      <pubDate>Tue, 04 Feb 2020 13:14:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/99.%E5%85%B6%E4%BB%96/90.%E6%93%8D%E4%BD%9C%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/</guid>
      <description>操作本地缓存 https://github.com/ustbhuangyi/storage 操作 sessionStorage 和 localStorage 。</description>
    </item>
    
    <item>
      <title>Vue中的防抖函数封装和使用</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/99.%E5%85%B6%E4%BB%96/80.vue%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 04 Feb 2020 13:10:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/99.%E5%85%B6%E4%BB%96/80.vue%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</guid>
      <description>Vue中的防抖函数封装和使用 如搜索框中，每改变一个数值就请求一次搜索接口，当快速的改变数值时并不需要多次请求接口，这就需要一个防抖函数： 1 2</description>
    </item>
    
    <item>
      <title>父组件调用子组件方法并传入值</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/70.%E7%88%B6%E7%BB%84%E4%BB%B6%E8%B0%83%E7%94%A8%E5%AD%90%E7%BB%84%E4%BB%B6%E6%96%B9%E6%B3%95%E5%B9%B6%E4%BC%A0%E5%85%A5%E5%80%BC/</link>
      <pubDate>Tue, 04 Feb 2020 13:06:37 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/70.%E7%88%B6%E7%BB%84%E4%BB%B6%E8%B0%83%E7%94%A8%E5%AD%90%E7%BB%84%E4%BB%B6%E6%96%B9%E6%B3%95%E5%B9%B6%E4%BC%A0%E5%85%A5%E5%80%BC/</guid>
      <description>父组件调用子组件方法并传入值 通过ref引用调用子组件内的方法并传入参数 父组件： 1 2 3 4 5 6 7 &amp;lt;子组件标签 ref=&amp;#34;refNam</description>
    </item>
    
    <item>
      <title>兄弟组件传值</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/60.%E5%85%84%E5%BC%9F%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</link>
      <pubDate>Tue, 04 Feb 2020 13:04:32 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/60.%E5%85%84%E5%BC%9F%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</guid>
      <description>兄弟组件传值 子组件1中把值传到父组件,父组件获取值传入子组件2 父组件： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 &amp;lt;子组件1 @方法名x=&amp;#34;方法</description>
    </item>
    
    <item>
      <title>子组件派发事件和值给父组件</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/50.%E5%AD%90%E7%BB%84%E4%BB%B6%E6%B4%BE%E5%8F%91%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%80%BC%E7%BB%99%E7%88%B6%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Tue, 04 Feb 2020 12:56:51 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/50.%E5%AD%90%E7%BB%84%E4%BB%B6%E6%B4%BE%E5%8F%91%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%80%BC%E7%BB%99%E7%88%B6%E7%BB%84%E4%BB%B6/</guid>
      <description>子组件派发事件和值给父组件 API 子组件通过$emit派发事件和值给父组件（值可以有多个） 1 this.$emit(&amp;#39;fnX&amp;#39;, value) 父组件通过v-on绑定子组件派发的事件，并触发一个</description>
    </item>
    
    <item>
      <title>父组件给子组件传值</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/40.%E7%88%B6%E7%BB%84%E4%BB%B6%E7%BB%99%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</link>
      <pubDate>Tue, 04 Feb 2020 12:45:30 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/02.%E7%BB%84%E4%BB%B6/40.%E7%88%B6%E7%BB%84%E4%BB%B6%E7%BB%99%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</guid>
      <description>父组件给子组件传值 父组件中，通过给子组件标签v-bind绑定属性的方式传入值 1 &amp;lt;ComponentName v-bind:name=&amp;#34;value&amp;#34;&amp;gt;&amp;lt;/ComponentName&amp;gt; 如果不使用v-bind传入的值为字符串，使用v-bind绑</description>
    </item>
    
    <item>
      <title>MVVM模式</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/00.mvvm%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 04 Feb 2020 12:19:00 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/01.%E5%9F%BA%E7%A1%80/00.mvvm%E6%A8%A1%E5%BC%8F/</guid>
      <description>:::tip 说明：本章内容是博主的Vue学习笔记，以官方文档为准。 ::: MVVM模式 MVVM模式，M即 model，数据模型；V即 view，视图；VM即 vi</description>
    </item>
    
  </channel>
</rss>
