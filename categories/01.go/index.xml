<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>01.Go on 凌冬的个人博客</title>
    <link>https://lyr-2000.github.io/categories/01.go/</link>
    <description>Recent content in 01.Go on 凌冬的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>LYR</copyright>
    <lastBuildDate>Sat, 12 Mar 2022 17:41:48 +0800</lastBuildDate>
    
	<atom:link href="https://lyr-2000.github.io/categories/01.go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>11.unsafe</title>
      <link>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/11.unsafe/</link>
      <pubDate>Sat, 12 Mar 2022 17:41:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/11.unsafe/</guid>
      <description>11.unsafe ​ golang 可以通过 unsafe 获取私有变量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 type Student struct { Name string Age int } func main() { s := Student{} s.Name = &amp;#34;Peter&amp;#34; s.Age = 33 pStudent := unsafe.Pointer(&amp;amp;s) // 整个对象转换成指针</description>
    </item>
    
    <item>
      <title>7.元编程</title>
      <link>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/7.%E5%85%83%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Sat, 12 Mar 2022 17:40:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/7.%E5%85%83%E7%BC%96%E7%A8%8B/</guid>
      <description>7.元编程 ​ 这里主要包括插件系统以及代码生成这两个部分，鉴于面试应该不会问这个问题，所以我就不写了</description>
    </item>
    
    <item>
      <title>9.其他</title>
      <link>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/9.%E5%85%B6%E4%BB%96/</link>
      <pubDate>Sat, 12 Mar 2022 01:32:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/9.%E5%85%B6%E4%BB%96/</guid>
      <description>9.其他 ​ Go的基本命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // 用于打包编译代码 go build // 来移除当前源码包和关联源码包里面编译生成的文件</description>
    </item>
    
    <item>
      <title>5.并发编程</title>
      <link>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/5.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Sat, 12 Mar 2022 01:31:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/5.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</guid>
      <description>5.并发编程 ​ 上下文context 这东西是用于控制并发的。下面是一个简单的例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31</description>
    </item>
    
    <item>
      <title>1.编译原理</title>
      <link>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/1.%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 12 Mar 2022 00:56:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/1.%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</guid>
      <description>1.编译原理 ​ 基本概念 抽象语法树 是源代码语法的结构的一种抽象表示，它用树状的方式表示编程语言的语法结构1。抽象语法树中的每一个节点都表示源代</description>
    </item>
    
    <item>
      <title>10.面试问题</title>
      <link>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/10.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 12 Mar 2022 00:53:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/10.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</guid>
      <description>10.面试问题 ​ 基础相关 map怎么实现顺序读取 把map中的key通过sort包排序 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sort&amp;#34; )</description>
    </item>
    
    <item>
      <title>6.内存管理</title>
      <link>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/6.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sat, 12 Mar 2022 00:52:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/6.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
      <description>6.内存管理 ​ 程序中的数据和变量都会被分配到程序所在的虚拟内存中，内存空间包含两个重要区域：栈区（Stack）和堆区（Heap）。函数调用的</description>
    </item>
    
    <item>
      <title>8.标准库</title>
      <link>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/8.%E6%A0%87%E5%87%86%E5%BA%93/</link>
      <pubDate>Sat, 12 Mar 2022 00:52:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/8.%E6%A0%87%E5%87%86%E5%BA%93/</guid>
      <description>8.标准库 ​ JSON 序列化和反序列化 go的序列化大部分指的是把结构体转换为json数据，在序列化的时候要注意变量名必须要大写，小写字母开头的变量是</description>
    </item>
    
  </channel>
</rss>