<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>基础语法 on 凌冬的个人博客</title>
    <link>https://lyr-2000.github.io/categories/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link>
    <description>Recent content in 基础语法 on 凌冬的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>LYR</copyright>
    <lastBuildDate>Fri, 01 Apr 2022 15:20:48 +0800</lastBuildDate>
    <atom:link href="https://lyr-2000.github.io/categories/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>golang环境搭建</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/golang%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Fri, 01 Apr 2022 15:20:48 +0800</pubDate>
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/golang%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>golang环境搭建 首先安装linux环境下 go语言的开发环境 1 2 wget https://golang.google.cn/dl/go1.17.2.linux-amd64.tar.gz -O /tmp/go1.17.2.linux-amd64.tar.gz 1 2 3 4 mkdir -p $HOME/go tar -xvzf /tmp/go1.17.2.linux-amd64.tar.gz -C $HOME/go mv $HOME/go/go $HOME/go/go1.17.2 1 2 3 4 5 6 7 8 9 10 11 12 13 tee -a $HOME/.bashrc &amp;lt;&amp;lt;&amp;#39;EOF&amp;#39; #</description>
    </item>
    <item>
      <title>go单元测试</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/go%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Fri, 01 Apr 2022 15:04:48 +0800</pubDate>
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/go%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>go单元测试 ​ 单元测试用例函数以 Test 开头，例如 TestXxx 或 Test_xxx （ Xxx 部分为任意字母数字组合，首字母大写）。函数参数必须是 *testing.T，可以使用该类</description>
    </item>
    <item>
      <title>pprof监控</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/pprof%E7%9B%91%E6%8E%A7/</link>
      <pubDate>Tue, 29 Mar 2022 16:06:48 +0800</pubDate>
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/pprof%E7%9B%91%E6%8E%A7/</guid>
      <description>pprof监控 ​ 参考学习视频 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package main import ( &amp;#34;flag&amp;#34; &amp;#34;github.com/spf13/viper&amp;#34; &amp;#34;log&amp;#34; &amp;#34;myproxyHttp/config&amp;#34; &amp;#34;myproxyHttp/httpproxy&amp;#34; &amp;#34;myproxyHttp/tcpproxy&amp;#34; &amp;#34;net/http&amp;#34; _ &amp;#34;net/http/pprof&amp;#34; &amp;#34;time&amp;#34; ) func main() { cconf := *flag.String(&amp;#34;conf&amp;#34;, &amp;#34;conf&amp;#34;, &amp;#34;configFile path&amp;#34;) //fmt.Println(&amp;#34;hello</description>
    </item>
  </channel>
</rss>
