<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JVM on Even - A super concise theme for Hugo</title>
    <link>https://lyr-2000.github.io/tags/jvm/</link>
    <description>Recent content in JVM on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>lyr</copyright>
    <lastBuildDate>Tue, 17 Aug 2021 13:48:22 +0800</lastBuildDate>
    
	<atom:link href="https://lyr-2000.github.io/tags/jvm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JMM</title>
      <link>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/jmm/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/jmm/</guid>
      <description>JMM JMM是什么 JMM是一种规范，目的是解决由于多线程通过共享内存进行通信时，存在的本地内存数据不一致、编译器会对代码指令重排序、处理器会对代</description>
    </item>
    
    <item>
      <title>JVM全集</title>
      <link>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/jvm%E5%85%A8%E9%9B%86/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/jvm%E5%85%A8%E9%9B%86/</guid>
      <description>JMM JMM是什么 JMM是一种规范，目的是解决由于多线程通过共享内存进行通信时，存在的本地内存数据不一致、编译器会对代码指令重排序、处理器会对代</description>
    </item>
    
    <item>
      <title>jvm理论</title>
      <link>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title>垃圾回收机制</title>
      <link>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</guid>
      <description>垃圾回收机制 讲一下堆常见的分配策略 对象优先在Eden区分配 第一次垃圾回收后，如果s区放不下，那么只能通过==分配担保机制==把新生代的对象提</description>
    </item>
    
    <item>
      <title>最重要的JVM参数指南</title>
      <link>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84jvm%E5%8F%82%E6%95%B0%E6%8C%87%E5%8D%97/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84jvm%E5%8F%82%E6%95%B0%E6%8C%87%E5%8D%97/</guid>
      <description>1.概述 在本篇文章中，你将掌握最常用的 JVM 参数配置。如果对于下面提到了一些概念比如堆、 2.堆内存相关 Java 虚拟机所管理的内存中最大的一块，Java</description>
    </item>
    
    <item>
      <title>类加载器</title>
      <link>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</guid>
      <description>类加载器 jvm内置的类加载器说一下，各负责加载什么 BootstrapClassLoader(启动类加载器)：负责加载%JAVA_HOME%/</description>
    </item>
    
    <item>
      <title>类加载过程</title>
      <link>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</guid>
      <description>类加载过程 类的生命周期说一下 加载、连接（验证，准备，解析）、初始化、使用、卸载 类的加载过程具体说一下 类的加载包括了加载、连接（验证，准备，解</description>
    </item>
    
    <item>
      <title>运行时数据区</title>
      <link>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/jvm%E7%90%86%E8%AE%BA/jvm%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E6%9D%A5%E8%87%AA%E7%BD%91%E5%8F%8B%E6%95%B4%E7%90%86/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/</guid>
      <description>运行时数据区 运行时数据区内有哪些东西 1.8以前： 线程共享的有堆和方法区（永久代是其实现方式） 线程独立的有本地方法栈、虚拟方法栈和程序计数器 1</description>
    </item>
    
  </channel>
</rss>