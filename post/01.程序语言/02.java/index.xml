<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>02.JAVA on 凌冬的个人博客</title>
    <link>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/</link>
    <description>Recent content in 02.JAVA on 凌冬的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>lyr</copyright>
    <lastBuildDate>Mon, 16 Aug 2021 00:45:22 +0800</lastBuildDate>
    
	<atom:link href="https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java书籍学习笔记</title>
      <link>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/13.java%E4%B9%A6%E7%B1%8D%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 19 Apr 2021 10:05:18 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/13.java%E4%B9%A6%E7%B1%8D%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>Java核心技术 卷一 基本数据结构 java break可以带标签 大数值可以使用bigInteger和bigDecimal for each使用 1 2 3 for (int a:new int[]{1,2,3}){ System.out.println(a);</description>
    </item>
    
    <item>
      <title>其他</title>
      <link>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/12.%E5%85%B6%E4%BB%96/</link>
      <pubDate>Tue, 30 Mar 2021 21:07:32 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/12.%E5%85%B6%E4%BB%96/</guid>
      <description>引用类型有哪些？有什么区别？ 引用类型主要分为强软弱虚四种： 强引用指的就是代码中普遍存在的赋值方式，比如A a = new A()这种。强引用关联的对象，</description>
    </item>
    
    <item>
      <title>面试题</title>
      <link>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/11.%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Tue, 23 Mar 2021 19:37:14 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/11.%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>同学的一次面试 内存溢出的两种问题及原因 java.lang.OutOfMemoryError 方法区主要存储类的元信息，实现在元数据区。当JVM发现元数据区没有足够的空间分配给加载的类时，抛出该</description>
    </item>
    
    <item>
      <title>IO NIO框架</title>
      <link>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/5.io-nio%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/5.io-nio%E6%A1%86%E6%9E%B6/</guid>
      <description>这里主要涉及到IO多路复用 基本概念介绍 BIO 同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理</description>
    </item>
    
    <item>
      <title>java8特性</title>
      <link>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/10.java8%E7%89%B9%E6%80%A7/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/10.java8%E7%89%B9%E6%80%A7/</guid>
      <description>java语言的特性 Lambda表达式和函数式接口 最简单的lambda表达式如下 1 Arrays.asList( &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;d&amp;#34; ).forEach( e -&amp;gt; System.out.println( e ) ); 当然，为了显式说明某个接口是函数式接口</description>
    </item>
    
    <item>
      <title>java基础</title>
      <link>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/1.java%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/1.java%E5%9F%BA%E7%A1%80/</guid>
      <description>return和finally的执行顺序 finally语句在return语句执行之后return返回之前执行的，所以我们先执行return的语</description>
    </item>
    
    <item>
      <title>JVM模型</title>
      <link>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/6.jvm%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/6.jvm%E6%A8%A1%E5%9E%8B/</guid>
      <description>JVM内存模型 这里主要还是会问一些Java的内存模型，1.8之前和之后的内存模型是不一样的 简单说一下每个部分是干嘛的吧 程序计数器 用于记录程序</description>
    </item>
    
    <item>
      <title>参数调优</title>
      <link>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/9.%E5%8F%82%E6%95%B0%E8%B0%83%E4%BC%98/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/9.%E5%8F%82%E6%95%B0%E8%B0%83%E4%BC%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title>垃圾回收</title>
      <link>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/8.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/8.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid>
      <description>判断对象是否是垃圾 引用计数算法：判断对象的引用数量 每引用一次就+1，当一个对象实例的某个引用超过了生命周期或者被设置为一个新值时，对象实例的</description>
    </item>
    
    <item>
      <title>并发框架(JUC)</title>
      <link>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/4.%E5%B9%B6%E5%8F%91%E6%A1%86%E6%9E%B6juc/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/4.%E5%B9%B6%E5%8F%91%E6%A1%86%E6%9E%B6juc/</guid>
      <description>并发框架，其实也叫 JUC 即 java.util.concurrent 包，分为（锁框架、原子类框架、同步器框架、集合框架、执行器框架） 线程创建方式 继承Thread类重写run方法 1 2 3 4</description>
    </item>
    
    <item>
      <title>类加载机制</title>
      <link>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/7.%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/7.%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</guid>
      <description>类加载流程 只需要记住下面这5个阶段就行了 参考：JVM 基础 - Java 类加载机制 | Java 全栈知识体系 (pdai.tech) 下面简单介绍一下每个部分做了啥 加载 首先获取二进制流，</description>
    </item>
    
    <item>
      <title>集合框架</title>
      <link>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/3.%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/3.%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</guid>
      <description>集合框架也可以叫容器。（集合是用于存储数据的容器） 常问的有下面几个 ArrayList LinkList HashSet TreeSet HashMap List(对付顺序的好帮手)： 存储的元素是有序的、可重复的。 Se</description>
    </item>
    
    <item>
      <title>面向对象</title>
      <link>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>这个部分主要以面试题为主 京东面试题 是equals而不是equal，单词错了 类和对象 面向对象和面向过程的区别 面向过程 ：面向过程性能比面向对象高</description>
    </item>
    
  </channel>
</rss>