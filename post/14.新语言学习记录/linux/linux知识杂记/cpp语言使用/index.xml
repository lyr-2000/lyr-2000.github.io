<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cpp语言使用 on 凌冬的个人博客</title>
    <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/</link>
    <description>Recent content in cpp语言使用 on 凌冬的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>LYR</copyright>
    <lastBuildDate>Tue, 17 Aug 2021 13:48:22 +0800</lastBuildDate>
    
	<atom:link href="https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>cpp学习和使用【文件api使用】</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/cpp%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/cpp%E5%AD%A6%E4%B9%A0/</guid>
      <description>open 函数 api学习 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // #include&amp;lt;bits/stdc++.h&amp;gt; #include&amp;lt;sys/types.h&amp;gt;#include&amp;lt;sys/stat.h&amp;gt;#include&amp;lt;fcntl.h&amp;gt;#include&amp;lt;unistd.h&amp;gt;#include&amp;lt;stdlib.h&amp;gt; #include&amp;lt;stdio.h&amp;gt; // #include &amp;lt;iostream&amp;gt; // using namespace std; int main(void) { int fd = 0; //打开 已经存在的文件 fd</description>
    </item>
    
    <item>
      <title>c语言基础原理</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/</guid>
      <description>应用程序内存基本构成 一个应用程序的内存基本上由：栈区、堆区、数据区（静态存储区）和程序代码区组成。 栈区（Stack Sagment） 在调用函数</description>
    </item>
    
    <item>
      <title>linux下进程和线程</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/linux%E4%B8%8B%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/linux%E4%B8%8B%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</guid>
      <description>linux 下进程和线程 其实在Linux内核2.4版以前，线程的实现和管理方式就是完全按照进程方式实现的。在2.6版内核以后才有了单独的线程实现。 进程</description>
    </item>
    
    <item>
      <title>linux下进程控制</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/linux%E4%B8%8B-%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6fork/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/linux%E4%B8%8B-%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6fork/</guid>
      <description>进程控制函数 孤儿进程和僵尸进程 经验： 很多时候 我们会让子进程先退出，然后再退出父进程 如果父进程先死亡， 那么 子进程就是孤儿进程【很容易理解】 僵尸</description>
    </item>
    
    <item>
      <title>linux文件读写API</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/linux%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99api/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/linux%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99api/</guid>
      <description>虚拟地址空间原理 学习视频 Linux 为每个运行程序（进程） 操作系统都会为其分配一个 0 ~ 4G 的地址空间 (虚拟地址空间) 进程： 正在运行的程序 Linux 下 可执行文件格</description>
    </item>
    
    <item>
      <title>makefile原理</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/makefile%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/makefile%E5%8E%9F%E7%90%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title>伪文件 管道、信号原理</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/%E4%BC%AA%E6%96%87%E4%BB%B6-%E7%AE%A1%E9%81%93-%E4%BF%A1%E5%8F%B7%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/%E4%BC%AA%E6%96%87%E4%BB%B6-%E7%AE%A1%E9%81%93-%E4%BF%A1%E5%8F%B7%E5%8E%9F%E7%90%86/</guid>
      <description>伪文件的定义 伪文件 不用来存储数据，本身不占用任何空间。是文件系统的一部分，并按目录进行组织 。 目的：提供一种服务，采取和常规文件相同的访问方式</description>
    </item>
    
    <item>
      <title>进程运行的状态</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/%E8%BF%9B%E7%A8%8B%E8%BF%90%E8%A1%8C%E7%9A%84%E7%8A%B6%E6%80%81/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/linux%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/cpp%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8/%E8%BF%9B%E7%A8%8B%E8%BF%90%E8%A1%8C%E7%9A%84%E7%8A%B6%E6%80%81/</guid>
      <description>进程运行的5种状态 学习的视频 初始态，终止态，就绪态 和 挂起态， 挂起是指的是阻塞 ，进程放弃了 CPU 的执行权限。 我们知道 ，每个进程在内核中都有一个 进程</description>
    </item>
    
  </channel>
</rss>