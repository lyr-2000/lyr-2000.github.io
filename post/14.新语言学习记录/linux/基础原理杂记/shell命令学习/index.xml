<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shell命令学习 on 凌冬的个人博客</title>
    <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/</link>
    <description>Recent content in shell命令学习 on 凌冬的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>LYR</copyright>
    <lastBuildDate>Tue, 17 Aug 2021 13:48:22 +0800</lastBuildDate>
    
	<atom:link href="https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>gdb工具使用</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/gdb%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 16 Apr 2022 20:30:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/gdb%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</guid>
      <description>gdb工具使用 参考文档 对于C程序来说，需要在编译时加上-g参数，保留调试信息，否则不能使用GDB进行调试 1 gcc -g test.c -o a.out 1 gdb a.out gdb使用条件 使用</description>
    </item>
    
    <item>
      <title>bash基础</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80/</guid>
      <description>linux 系统中一般默认使用 bash， 文件开头需要些 #! /bin/bash , 指定 bash为脚本解释器 运行的几种方式： 可执行文件执行，需要脚本有执行权限 chmod + x test.sh &amp;amp;&amp;amp; ./test.sh 解释</description>
    </item>
    
    <item>
      <title>git学习</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/git%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/git%E5%AD%A6%E4%B9%A0/</guid>
      <description>git 有3个状态 工作区 -&amp;gt; 暂存区 -&amp;gt; 版本库 练习 git 网站 有一个head 指针指向 当前暂存区的节点， 如果我提交新代码到暂存区 就新增加一个节点，内容复制到新节</description>
    </item>
    
    <item>
      <title>shell编程相关</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/shell%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/</guid>
      <description>shell 函数调用 1 2 3 4 5 6 7 8 9 10 11 12 func() { name=yxc echo &amp;#34;Hello $name&amp;#34; return 123 } output=$(func) ret=$? echo &amp;#34;output = $output&amp;#34; echo &amp;#34;return = $ret&amp;#34; 输出结果： 1 2 output = Hello yxc return = 123 文件重定向原理 每个进程默认打开3个文件描</description>
    </item>
    
    <item>
      <title>tmux学习</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/tmux/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/tmux/</guid>
      <description>tmux 学习 首先screen是Linux中比较常用的可以“接入”和“离开”的shell对话框，很大的方便了我们ssh登录服务器跑任务，如果不用sc</description>
    </item>
    
    <item>
      <title>useradd 和 adduser</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/useradd-%E5%92%8C-adduser%E7%9A%84%E5%8C%BA%E5%88%AB%E9%87%8D%E7%82%B9%E7%90%86%E8%A7%A3/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/useradd-%E5%92%8C-adduser%E7%9A%84%E5%8C%BA%E5%88%AB%E9%87%8D%E7%82%B9%E7%90%86%E8%A7%A3/</guid>
      <description>useradd 和 adduser 的区别 在root权限下，useradd只是创建了一个用户名，如 （useradd +用户名 ），它并没有在/home目录下创建同名文件夹，也</description>
    </item>
    
    <item>
      <title>文件原理</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE/</guid>
      <description>文件查找 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 find ./ -name &amp;#34;dir0&amp;#34; find ./ -name “*.txt” | xargs rm (删除当前目录下所有以txt结尾的文件) find /home -size +512k 查大于512k的</description>
    </item>
    
    <item>
      <title>查看文件 more 和 less</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6_more-%E5%92%8C-less/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6_more-%E5%92%8C-less/</guid>
      <description>查看文件more 和 less 命令1： more 作用： 以分页形式显示文件内容 语法: more + 文件名 按回车刷新一行，按空格刷新一屏， 输入 q退出 命令2： less more 不支持后退，</description>
    </item>
    
    <item>
      <title>进程操作</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E8%BF%9B%E7%A8%8B%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/linux/%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E6%9D%82%E8%AE%B0/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/%E8%BF%9B%E7%A8%8B%E6%93%8D%E4%BD%9C/</guid>
      <description>需要了解的命令 命令 解释 pmap 用来查看进程空间信息 strace 查看进程调用过程 cat /proc/[pid]/maps 查看进程地址空间机制 参考的学习视频 静态链接和动态链接的概念 动态链接是指在生</description>
    </item>
    
  </channel>
</rss>