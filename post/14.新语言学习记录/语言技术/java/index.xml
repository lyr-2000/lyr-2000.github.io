<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JAVA on 凌冬的个人博客</title>
    <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/</link>
    <description>Recent content in JAVA on 凌冬的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>LYR</copyright>
    <lastBuildDate>Sat, 14 Aug 2021 22:42:48 +0800</lastBuildDate>
    
	<atom:link href="https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>G1收集器优势</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/java%E8%B0%83%E4%BC%98/g1%E6%94%B6%E9%9B%86%E5%99%A8/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/java%E8%B0%83%E4%BC%98/g1%E6%94%B6%E9%9B%86%E5%99%A8/</guid>
      <description>G1收集器优势 G1 可以充分利用服务器多核的优势 并行与并发 分代收集 空间整合 可预测的停顿 【精确指定 垃圾回收时间不超过 m】 G1 后台有一张表 remember set, 对 region 进行</description>
    </item>
    
    <item>
      <title>hibernate validator框架的使用</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/validator/validator%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/validator/validator%E6%A1%86%E6%9E%B6/</guid>
      <description>hibernate validator 使用方法 JSR-303 Bean validation 是一个规范， 提供了大量的注解接口等。 validated 和 valid 的区别 @Valid：没有分组的功能。 @Valid：可以用在方法、构造函数、方法参</description>
    </item>
    
    <item>
      <title>Java 正则表达式</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/idea%E5%B7%A5%E5%85%B7/java-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/idea%E5%B7%A5%E5%85%B7/java-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>正则表达式使用 正则表达式经常用，这里介绍个网站 正则表达式生成器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package io.github.lyr2000.dissertation.util; import java.util.regex.Matcher; import java.util.regex.Pattern; /** * @author lyr * @description 字符串比较</description>
    </item>
    
    <item>
      <title>shiro框架的简单使用</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/shiro%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/shiro%E6%A1%86%E6%9E%B6%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/shiro%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/shiro%E6%A1%86%E6%9E%B6%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</guid>
      <description>配置shiro框架 基本认识 shiro自带了几种默认的拦截器 authc [需要登录，rememberMeAuthentiationToken] 进行登录 anon</description>
    </item>
    
    <item>
      <title>springboot判断测试环境</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 @Value(&amp;#34;${spring.profiles.active}&amp;#34;) private String profile; private boolean isDebug; @PostConstruct private void init() { isDebug = &amp;#34;dev&amp;#34;.equalsIgnoreCase(profile); log.info(&amp;#34;环境变量 {} {}&amp;#34;,profile,isDebug); }</description>
    </item>
    
    <item>
      <title>springboot解决跨域设置</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E8%B7%A8%E5%9F%9F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E8%B7%A8%E5%9F%9F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
      <description>springboot解决跨域设置 前端设置每次请求携带 cookie【携带sessionid】 1 2 3 4 axios.defaults.headers.common[&amp;#39;token&amp;#39;] = getToken(); // axios.defaults.headers.common[&amp;#39;refreshToken&amp;#39;] = getRefreshToken(); axios.defaults.withCredentials=true 后端设置 跨域头 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>Swagger2框架使用</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/swagger2/swagger2%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/swagger2/swagger2%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/</guid>
      <description>寻找 swagger的依赖 1 2 3 4 5 6 7 &amp;lt;!-- https://mvnrepository.com/artifact/com.github.xiaoymin/knife4j-spring-boot-starter --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.github.xiaoymin&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;knife4j-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 这里 我使用 knife4j 其实是一样的。 官方文档 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26</description>
    </item>
    
    <item>
      <title>切面异常处理</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/%E5%88%87%E9%9D%A2%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/%E5%88%87%E9%9D%A2%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70</description>
    </item>
    
    <item>
      <title>单例懒加载的实现方式</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/%E5%8D%95%E4%BE%8B%E6%87%92%E5%8A%A0%E8%BD%BD/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/%E5%8D%95%E4%BE%8B%E6%87%92%E5%8A%A0%E8%BD%BD/</guid>
      <description>单例懒加载的实现方式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 package io.github.lyr2000.dissertation.util; import cn.hutool.crypto.SecureUtil; import cn.hutool.crypto.symmetric.AES; /** *</description>
    </item>
    
    <item>
      <title>基于HashMap的内存优化方法</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/java%E8%B0%83%E4%BC%98/hashmap%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/java%E8%B0%83%E4%BC%98/hashmap%E4%BC%98%E5%8C%96/</guid>
      <description>hashMap优化方法总结 hashMap 默认 是16的数组长度，非常的耗费内存 如果知道了数据具体的数量，并且指定 hashMap 的 具体容量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description>
    </item>
    
    <item>
      <title>格式化sql工具总结</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/idea%E5%B7%A5%E5%85%B7/%E6%A0%BC%E5%BC%8F%E5%8C%96sql%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/java/idea%E5%B7%A5%E5%85%B7/%E6%A0%BC%E5%BC%8F%E5%8C%96sql%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>