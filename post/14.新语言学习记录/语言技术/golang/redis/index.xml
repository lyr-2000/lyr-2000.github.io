<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang redis集成 on 凌冬的个人博客</title>
    <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/redis/</link>
    <description>Recent content in Golang redis集成 on 凌冬的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>LYR</copyright>
    <lastBuildDate>Sat, 14 Aug 2021 22:42:48 +0800</lastBuildDate>
    
	<atom:link href="https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang操作redis</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/redis/golang%E6%93%8D%E4%BD%9Credis/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/redis/golang%E6%93%8D%E4%BD%9Credis/</guid>
      <description>golang操作redis func DefaultPool() *redis.Pool { return &amp;amp;redis.Pool{ MaxIdle: 8, MaxActive: 1, IdleTimeout: 100, Dial: func() (redis.Conn, error) { return redis.Dial(&amp;#34;tcp&amp;#34;, &amp;#34;localhost:6379&amp;#34;) }, } } func Default() *RedisQueueImpl { return &amp;amp;RedisQueueImpl{ pool: DefaultPool(), } } type RedisQueueImpl struct { pool *redis.Pool } type Queue RedisQueueImpl func (q *RedisQueueImpl) Brpop(queueName string, timeoutSecond int) (string, error) { var conn = q.pool.Get()</description>
    </item>
    
    <item>
      <title>redis分布式锁</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/redis/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/redis/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>redis分布式锁 参考项目 https://github.com/go-redsync/redsync package main import ( goredislib &amp;#34;github.com/go-redis/redis/v8&amp;#34; &amp;#34;github.com/go-redsync/redsync/v4&amp;#34; &amp;#34;github.com/go-redsync/redsync/v4/redis/goredis/v8&amp;#34; ) func main() { // Create a pool with go-redis (or redigo) which is the pool redisync will // use while communicating with Redis. This can also be any pool that // implements the `redis.Pool` interface. client := goredislib.NewClient(&amp;amp;goredislib.Options{ Addr: &amp;#34;localhost:6379&amp;#34;, }) pool := goredis.NewPool(client) // or, pool</description>
    </item>
    
  </channel>
</rss>