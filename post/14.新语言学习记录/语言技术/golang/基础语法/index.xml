<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang_基础语法 on 凌冬的个人博客</title>
    <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link>
    <description>Recent content in Golang_基础语法 on 凌冬的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>LYR</copyright>
    <lastBuildDate>Sat, 14 Aug 2021 22:42:48 +0800</lastBuildDate>
    
	<atom:link href="https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang环境搭建</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/golang%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Fri, 01 Apr 2022 15:20:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/golang%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>golang环境搭建 ​ 1 2 $ wget https://golang.google.cn/dl/go1.17.2.linux-amd64.tar.gz -O /tmp/go1.17.2.linux-amd64.tar.gz 1 2 3 4 $ mkdir -p $HOME/go $ tar -xvzf /tmp/go1.17.2.linux-amd64.tar.gz -C $HOME/go $ mv $HOME/go/go $HOME/go/go1.17.2 1 2 3 4 5 6 7 8 9 10 11 12 13 tee -a $HOME/.bashrc &amp;lt;&amp;lt;&amp;#39;EOF&amp;#39; # Go envs export GOVERSION=go1.17.2 # Go 版本设置 export GO_INSTALL_DIR=$HOME/go # Go 安装</description>
    </item>
    
    <item>
      <title>go单元测试</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/go%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Fri, 01 Apr 2022 15:04:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/go%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>go单元测试 ​ 单元测试用例函数以 Test 开头，例如 TestXxx 或 Test_xxx （ Xxx 部分为任意字母数字组合，首字母大写）。函数参数必须是 *testing.T，可以使用该类</description>
    </item>
    
    <item>
      <title>pprof监控</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/pprof%E7%9B%91%E6%8E%A7/</link>
      <pubDate>Tue, 29 Mar 2022 16:06:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/pprof%E7%9B%91%E6%8E%A7/</guid>
      <description>pprof监控 ​ 参考学习视频 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 package main import ( &amp;#34;flag&amp;#34; &amp;#34;github.com/spf13/viper&amp;#34; &amp;#34;log&amp;#34; &amp;#34;myproxyHttp/config&amp;#34; &amp;#34;myproxyHttp/httpproxy&amp;#34; &amp;#34;myproxyHttp/tcpproxy&amp;#34; &amp;#34;net/http&amp;#34; _ &amp;#34;net/http/pprof&amp;#34; &amp;#34;time&amp;#34; ) func main() { cconf := *flag.String(&amp;#34;conf&amp;#34;, &amp;#34;conf&amp;#34;, &amp;#34;configFile path&amp;#34;)</description>
    </item>
    
    <item>
      <title>golang解析注释的方法</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/go-%E8%A7%A3%E6%9E%90%E6%B3%A8%E9%87%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 08 Jan 2022 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/go-%E8%A7%A3%E6%9E%90%E6%B3%A8%E9%87%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</guid>
      <description>golang 解析注释的方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package data type U interface { A(i int) error } // 这个是实现类 // hello world /* sdfjljfalsjfa */ // X impl xxxx type X struct { } // a func func (a X) A(u int) error {</description>
    </item>
    
    <item>
      <title>golang generate</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/go-generate/</link>
      <pubDate>Fri, 07 Jan 2022 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/go-generate/</guid>
      <description>go generate 代码生成 参考学习教程 参考项目 sqlc 使用教程 不想用 orm，那只能写那种 比较原生的代码，这样就会特别的复杂，这里找到了一种解决方案 golang 注解 参考博客</description>
    </item>
    
    <item>
      <title>crud的web项目收藏</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E8%AF%BE%E7%A8%8B%E5%AE%9E%E6%88%98/crud-%E7%9A%84web%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E8%AF%BE%E7%A8%8B%E5%AE%9E%E6%88%98/crud-%E7%9A%84web%E9%A1%B9%E7%9B%AE/</guid>
      <description>crud 的 web项目 参考代码</description>
    </item>
    
    <item>
      <title>Golang 1.17泛型的使用</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/golang1.17%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/golang1.17%E6%B3%9B%E5%9E%8B/</guid>
      <description>golang 泛型使用 参考视频 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import &amp;#34;fmt&amp;#34; func printSlice[T any](s []T) { for _, v := range s { fmt.Println(v) } } func main() { printSlice[int]([]int{1, 2, 3}) } 1 go run -gcflags=-G=3 .\main.go</description>
    </item>
    
    <item>
      <title>golang epoll 性能优化</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/golang-epoll-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/golang-epoll-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      <description>golang epoll 问题引出： 如果需要处理百万TCP 连接，golang中要如何实现 需要了解的概念 水平触发和边缘触发 epoll 有两种模式，一种是水平触发，一种是边缘触</description>
    </item>
    
    <item>
      <title>golang基础语法</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/golang%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/golang%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</guid>
      <description>golang基础语法 golang 自带的标识符 golang 除了保留关键字，还提供 36个预定义标识符，包括基础数据类型， 系统内嵌函数等。 golang 编程基本规则 变量名首字母大</description>
    </item>
    
    <item>
      <title>golang流程控制语法</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/golang-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/golang-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</guid>
      <description>switch 语句的骚操作 switch switch 是编写一连串 if - else 语句的简便方法。它运行第一个值等于条件表达式的 case 语句。 Go 的 switch 语句类似于 C、C++、Java、JavaSc</description>
    </item>
    
    <item>
      <title>golang网络编程入门</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/golang%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/golang%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/</guid>
      <description>golang 网络编程入门 Golang的主要设计目标之一就是面向大规模后端服务程序， 网络通信这块是服务端程序必不可少也是至关重要的一部分。 网络编程的几种</description>
    </item>
    
    <item>
      <title>golang网络编程入门_server_example</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/server_example/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/server_example/</guid>
      <description>server example 1 2 ncat 127.0.0.1 8080 # 这边可以输入消息，然后server可以打印 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41</description>
    </item>
    
    <item>
      <title>golang解析命令行参数</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/</guid>
      <description>golang 解析命令行参数 os.Args , 第一个元素是程序的路径，后面是命令行参数</description>
    </item>
    
    <item>
      <title>go语言内置函数</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/buildin-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/buildin-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</guid>
      <description>go语言常用的内置函数 complex close copy panic recover print cap delete new 格式化输出 %v 只输出所有的值 %+v 先输出字段名字，再输出该字段的值 %#v 先输出结构体名字值，再输出结构体（字段</description>
    </item>
    
    <item>
      <title>init函数作用</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/init%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%9C%E7%94%A8/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/init%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%9C%E7%94%A8/</guid>
      <description>init函数的作用 每个源文件都可以包含 一个 init函数， 该函数会在main函数执行前，被go运行框架调用 ， 注意事项和细节： 先执行 变量定义，再</description>
    </item>
    
    <item>
      <title>UDP golang网络编程</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/udp-example/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/udp-example/</guid>
      <description>UDP 理解和使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net&amp;#34; ) func main() { f, err := net.ListenUDP(&amp;#34;udp&amp;#34;, &amp;amp;net.UDPAddr{ IP: net.IPv4(0, 0, 0, 0), Port: 8080,</description>
    </item>
    
    <item>
      <title>反射</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E5%8F%8D%E5%B0%84/</guid>
      <description>go语言反射处理 TypeOf ValueOf 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;reflect&amp;#34; ) func main() { i := 1 t := (reflect.TypeOf(i)) fmt.Println(reflect.TypeOf(t)) } 调用结构体方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22</description>
    </item>
    
    <item>
      <title>数组和列表</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%97%E8%A1%A8/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/golang/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%97%E8%A1%A8/</guid>
      <description>数组和列表 定义数组语法 1 2 3 var hens [6]int64 var hens := [...]string{&amp;#34;&amp;#34;} for-range 遍历 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import ( &amp;#34;fmt&amp;#34; ) func main() { var hens [5]float64 for i := 0; i &amp;lt; len(hens); i++ { fmt.Println(hens[i]) } } 1 2 3 4 5 6 7 8 9</description>
    </item>
    
  </channel>
</rss>