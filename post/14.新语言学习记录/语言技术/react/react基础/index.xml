<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>react项目 on 凌冬的个人博客</title>
    <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in react项目 on 凌冬的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>LYR</copyright>
    <lastBuildDate>Sat, 14 Aug 2021 22:42:48 +0800</lastBuildDate>
    
	<atom:link href="https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>react router 管理</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/react-router-%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/react-router-%E7%AE%A1%E7%90%86/</guid>
      <description>父路由 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67</description>
    </item>
    
    <item>
      <title>react 刷新路由</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/react-%E5%88%B7%E6%96%B0%E8%B7%AF%E7%94%B1/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/react-%E5%88%B7%E6%96%B0%E8%B7%AF%E7%94%B1/</guid>
      <description>react 刷新路由的方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import {withRouter} from &amp;#39;react-router-dom&amp;#39; //头顶部分 头像和 菜单 const TopRightMenu = () =&amp;gt; { // const history = createHashHistory() console.log(props) const Jump = (e)</description>
    </item>
    
    <item>
      <title>react 组件懒加载</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/react-%E7%BB%84%E4%BB%B6%E6%87%92%E5%8A%A0%E8%BD%BD/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/react-%E7%BB%84%E4%BB%B6%E6%87%92%E5%8A%A0%E8%BD%BD/</guid>
      <description>React.lazy 和 React.Suspense 可以做 注意了： lazy 不能单独出现，要配合 Suspense 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48</description>
    </item>
    
    <item>
      <title>react实战</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/react%E5%AE%9E%E6%88%98/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/react%E5%AE%9E%E6%88%98/</guid>
      <description>参考学习教程 参考教程， 10分开始 组件 css样式互不覆盖解决方法 第11分钟开始学习 将 child.css 改为 child.module.css 这样就可以实现模块化 跨域问题解决方法 跨域问题解决方</description>
    </item>
    
    <item>
      <title>react样式互不影响</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/react-%E6%A0%B7%E5%BC%8F%E4%BA%92%E4%B8%8D%E5%BD%B1%E5%93%8D/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/react-%E6%A0%B7%E5%BC%8F%E4%BA%92%E4%B8%8D%E5%BD%B1%E5%93%8D/</guid>
      <description>css互不影响 学习视频_参考 17分开始 1 2 3 4 5 6 7 8 import style from &amp;#39;./child.module.css&amp;#39; console.log(style) export default function Child() { return ( &amp;lt;div className={style.item}&amp;gt;&amp;lt;/div&amp;gt; ) } 用 style.item 就可以获取到类名 设置引入 scss 配置 sass 如何使用 查看 第3分</description>
    </item>
    
    <item>
      <title>redux状态管理</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/redux%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/redux%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</guid>
      <description>redux状态管理 redux 工作流程视频 其他解释： 可以理解为观察者模式 reducer 接收一个老状态， 返回一个新状态 然后回调通知 react 组件 参考官网文档 react redux原理</description>
    </item>
    
    <item>
      <title>use Context 父子传值</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/usecontext-%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/usecontext-%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</guid>
      <description>useContext 父子组件传值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 import React, { createContext, useContext, useState } from &amp;#34;react&amp;#34;; const CntCtx = createContext() function Child1() { let parentCnt = useContext(CntCtx) return ( &amp;lt;div&amp;gt;</description>
    </item>
    
    <item>
      <title>use Effect 生命周期函数</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/useeffect%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/useeffect%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/</guid>
      <description>类型 mounted 的实现 参考博客 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import React, { useEffect, useState } from &amp;#34;react&amp;#34;; export default function LifeCycleExample() { const [cnt , setCnt] = useState(0) useEffect(()=&amp;gt;{ //useEffect 不影响视图更新，异步延迟执行，不是同步的</description>
    </item>
    
    <item>
      <title>use Memo 解决子组件重复执行问题</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/usememo%E8%A7%A3%E5%86%B3%E9%87%8D%E5%A4%8D%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/usememo%E8%A7%A3%E5%86%B3%E9%87%8D%E5%A4%8D%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/</guid>
      <description>useMemo使用示例 参考学习视频 这东西 和 vue 的 watch 差不多 useMemo 和 useEffect区别 相同点 两者在写法上有很大的相同之处 useMemo第一个参数需</description>
    </item>
    
    <item>
      <title>use reducer 代替redux</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/usereducer%E4%BB%A3%E6%9B%BFredux/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/usereducer%E4%BB%A3%E6%9B%BFredux/</guid>
      <description>用 use reducer 代替 redux的方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 import React, { useReducer } from &amp;#39;react&amp;#39; const Child1 = (props)=&amp;gt; { console.log(props) return (</description>
    </item>
    
    <item>
      <title>use Ref 获取 DOM元素</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/useref%E8%8E%B7%E5%8F%96-dom%E5%85%83%E7%B4%A0/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/useref%E8%8E%B7%E5%8F%96-dom%E5%85%83%E7%B4%A0/</guid>
      <description>ref 使用方法 Refs 在 React 中起初的作用是做到对Dom 元素的引用，当我们想操作的原生 DOM 元素的时候，我们可以使用Ref 做到对元素的引用。 除了保持对 DOM 元素的</description>
    </item>
    
    <item>
      <title>自定义 hooks组件</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/%E8%87%AA%E5%AE%9A%E4%B9%89-hooks-%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/%E8%87%AA%E5%AE%9A%E4%B9%89-hooks-%E7%BB%84%E4%BB%B6/</guid>
      <description>自定义 hooks组件 监听 windows size 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import React, { useCallback, useEffect, useState } from &amp;#34;react&amp;#34;; function useWinSize() { const [size,setSize] = useState({ width: document.documentElement.clientWidth, height: document.documentElement.clientHeight, }) const onResize = useCallback(()=&amp;gt;{ setSize({ width: document.documentElement.clientWidth,</description>
    </item>
    
    <item>
      <title>路由守卫授权</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB%E6%8E%88%E6%9D%83/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%AF%AD%E8%A8%80%E6%8A%80%E6%9C%AF/react/react%E5%9F%BA%E7%A1%80/%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB%E6%8E%88%E6%9D%83/</guid>
      <description>路由守卫授权 学习视频1——参考第8分钟， 13分钟 使用 react router-dom 来解决这个问题 1 cnpm i --save-dev react-router-dom 1 2 3 4 5 6 import IndexRouter from &amp;#39;./router/IndexRouter&amp;#39; function App() { return &amp;lt;div&amp;gt; &amp;lt;IndexRouter&amp;gt;&amp;lt;/IndexRouter&amp;gt; &amp;lt;/div&amp;gt; } 1 2 3 4 5 6 7 8 9 10 11 12</description>
    </item>
    
  </channel>
</rss>