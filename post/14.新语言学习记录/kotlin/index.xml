<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kotlin语言 on 凌冬的个人博客</title>
    <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/</link>
    <description>Recent content in kotlin语言 on 凌冬的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>lyr</copyright>
    <lastBuildDate>Sat, 14 Aug 2021 22:42:48 +0800</lastBuildDate><atom:link href="https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>activity和 fragment的区别</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0/activity%E5%92%8C-fragment%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0/activity%E5%92%8C-fragment%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>参考学习视频 参考1 参考2 Fragment的构造函数 返回值 view 表示 加载 fragment视图，如果 fragment不提供视图，可以返回 null LayoutInflater inflater 表示布</description>
    </item>
    
    <item>
      <title>DSL语言原理</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/dsl%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/dsl%E8%AF%AD%E8%A8%80/</guid>
      <description>DSL 语言，领域专用语言 （domain specific language) json xml css makefile 这种是外部 dsl ，因为不依赖于 其他的编程语言。 anko kolley build.grade 这种就是 内部 dsl,因为 要依赖于其他编程语言 DSL</description>
    </item>
    
    <item>
      <title>javap反编译</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/javap-%E5%8F%8D%E7%BC%96%E8%AF%91/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/javap-%E5%8F%8D%E7%BC%96%E8%AF%91/</guid>
      <description>javap命令反编译 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 D:\ASUS\Desktop\temp\kotlin</description>
    </item>
    
    <item>
      <title>kotlin基础语法</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/kotlin%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/kotlin%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</guid>
      <description>类型推断 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 package main.kotlin var age: Int = 18 var age = 18 var name: String = &amp;#34;hello&amp;#34; var name2: String? = null fun main(args: Array&amp;lt;String&amp;gt;) { name2 = name //nullable 类型 可以直接接受赋值 name = name2!! //否则就要 !! 转</description>
    </item>
    
    <item>
      <title>kotlin扩展高阶函数语法</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/kotlin-%E6%89%A9%E5%B1%95%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/kotlin-%E6%89%A9%E5%B1%95%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E8%AF%AD%E6%B3%95/</guid>
      <description>kotlin扩展高阶函数语法</description>
    </item>
    
    <item>
      <title>kotlin的动态代理</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</guid>
      <description>kotlin 的动态代理 kotlin 的动态 代理，用 by 关键字 指定 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 interface Animal { fun bark() } class Dog : Animal { override fun bark() { println(&amp;#34;dog barking...&amp;#34;) } } class ProxyAnimal(animal: Animal) : Animal by</description>
    </item>
    
    <item>
      <title>kotlin的协程原理</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/%E5%8D%8F%E7%A8%8B/</guid>
      <description>kotlin协程原理 协程语法糖</description>
    </item>
    
    <item>
      <title>kotlin的数据类</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/gettersetter%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/gettersetter%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>kotlin 的数据类 数据类型是 final的， 并且 自动生成 getter,setter方法，自带 toString 和 hashCode 数据类是 final类型的，不能再用 open 修饰。 1 2 3 4 5</description>
    </item>
    
    <item>
      <title>MVP模型</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/mvp/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/mvp/</guid>
      <description>MVP 模型 mvc 有个问题就是 view 容易 直接操作或者 改变 model MVP模型 view 和 model 都是通过 presenter 去改变的 参考官方</description>
    </item>
    
    <item>
      <title>sqlite3的学习</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/sqlite3/sqlite3%E4%BA%86%E8%A7%A3%E5%92%8C%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/sqlite3/sqlite3%E4%BA%86%E8%A7%A3%E5%92%8C%E5%AD%A6%E4%B9%A0/</guid>
      <description>学习资料收集 参考视频 跨平台的磁盘文件 代码量少 api简单易用 sqlite 的常见类型 Integer varchar float double char text 建表语句 create table person(id Integer primary key,name varchar(20)) drop table person insert into person(id,age) values(1,20) insert into person values(1,20)</description>
    </item>
    
    <item>
      <title>函数式编程</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
      <description>函数式编程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 fun main(args: Array&amp;lt;String&amp;gt;) { // Helper.sayHi() // Helper.sayHi() fun echo(name: String =&amp;#34;defualt&amp;#34;) { println(&amp;#34;hi $name&amp;#34;) } echo(&amp;#34;world&amp;#34;) } fun main(args: Array&amp;lt;String&amp;gt;) { // Helper.sayHi() // Helper.sayHi() fun echo(name: String) = println(&amp;#34;hi $name&amp;#34;)</description>
    </item>
    
    <item>
      <title>参考项目</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/%E5%AE%89%E5%8D%93%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/%E5%8F%82%E8%80%83%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/%E5%AE%89%E5%8D%93%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/%E5%8F%82%E8%80%83%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/</guid>
      <description>小说阅读器 参考项目 参考项目2</description>
    </item>
    
    <item>
      <title>底部导航切换</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/%E5%AE%89%E5%8D%93%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E5%88%87%E6%8D%A2/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/%E5%AE%89%E5%8D%93%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E5%88%87%E6%8D%A2/</guid>
      <description>底部导航切换参考 参考学习 参考项目 bottom bar 参考教程2 参考网友的 demo demo 1</description>
    </item>
    
    <item>
      <title>集合操作符语法</title>
      <link>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C%E7%AC%A6%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/14.%E6%96%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/kotlin/%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C%E7%AC%A6%E8%AF%AD%E6%B3%95/</guid>
      <description>kotlin 集合操作符语法 1 2 3 4 5 6 7 8 9 10 fun main(args: Array&amp;lt;String&amp;gt;) { // val list = arrayListOf&amp;lt;Char&amp;gt;(&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;) val a = list.map { it - &amp;#39;a&amp;#39; } .filter { it &amp;gt; 0 } .find{ it &amp;gt; 1} println(a) } // 打印2 1 2 3 4 5 6 7 8 9 10 11 fun main(args: Array&amp;lt;String&amp;gt;) { // val list</description>
    </item>
    
  </channel>
</rss>
