<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>02.Redis on 凌冬的个人博客</title>
    <link>https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/</link>
    <description>Recent content in 02.Redis on 凌冬的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>LYR</copyright>
    <lastBuildDate>Mon, 16 Aug 2021 00:45:28 +0800</lastBuildDate><atom:link href="https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>面试题</title>
      <link>https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/7.%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Wed, 31 Mar 2021 10:24:33 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/7.%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title>常见问题</title>
      <link>https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/4.%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/4.%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>缓存雪崩 Redis中大批量key在同一时间同时失效导致所有请求都打到了MySQL。而MySQL扛不住导致大面积崩塌 解决方案 缓存数据的过期时间</description>
    </item>
    
    <item>
      <title>持久化</title>
      <link>https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/2.%E6%8C%81%E4%B9%85%E5%8C%96/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/2.%E6%8C%81%E4%B9%85%E5%8C%96/</guid>
      <description>包括 RDB 和 AOF 两种机制，下面分别进行说明 RDB RDB 持久化机制，是对 Redis 中的数据执行周期性的持久化。更适合做冷备。 优点： 压缩后的二进制文，适用于备份、全量</description>
    </item>
    
    <item>
      <title>分布式锁，过期策略，淘汰规则</title>
      <link>https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/5.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5%E6%B7%98%E6%B1%B0%E8%A7%84%E5%88%99/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/5.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5%E6%B7%98%E6%B1%B0%E8%A7%84%E5%88%99/</guid>
      <description>分布式锁 在日常情况下在进程或线程中我们可以使用 synchronized 、Lock 实现并发编程，但是我， 如何在分布式集群下使用呢？可以使用 Redisson ， Zookeeper ，Redis本身 分布</description>
    </item>
    
    <item>
      <title>集群和限流</title>
      <link>https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/6.%E9%9B%86%E7%BE%A4%E5%92%8C%E9%99%90%E6%B5%81/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/6.%E9%9B%86%E7%BE%A4%E5%92%8C%E9%99%90%E6%B5%81/</guid>
      <description>Redis有下面四种部署方式 模式 优点 缺点 单机版 架构简单，部署方便 机器故障、容量瓶颈、QPS瓶颈 主从复制 高可靠性，读写分离 故障恢复复杂，主库的</description>
    </item>
    
    <item>
      <title>数据类型</title>
      <link>https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/1.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/1.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>本文参考：硬核Redis总结，看这篇就够了！ (qq.com) 8大基本数据类型 String 适用于简单key-value存储、setnx key value实现分布式锁、计数器</description>
    </item>
    
    <item>
      <title>原理</title>
      <link>https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/3.%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/3.%E5%8E%9F%E7%90%86/</guid>
      <description>为什么Redis速度那么快 基于内存实现 数据结构高效，底层多种数据结构支持不同的数据类型，比如HyperLogLog它连2个字节都不想浪费 提供</description>
    </item>
    
  </channel>
</rss>
