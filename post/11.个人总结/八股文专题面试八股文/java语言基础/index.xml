<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JAVA语言基础 on 凌冬的个人博客</title>
    <link>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in JAVA语言基础 on 凌冬的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>LYR</copyright>
    <lastBuildDate>Tue, 17 Aug 2021 13:48:22 +0800</lastBuildDate>
    <atom:link href="https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.语言基础</title>
      <link>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/1.%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      <guid>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/1.%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</guid>
      <description>JAVA 语言基础 StringBuilder buffer ,String 区别 线程安全 string不可变 final 修饰，线程安全 buffer 安全 ，用了 syncrhonized 同步 ，可变字符串 builder 没有锁，不安全 可变 string 是 底层用了个 final 的 char 数组，不</description>
    </item>
    <item>
      <title>2.java gc 垃圾回收机制</title>
      <link>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/2.java-gc/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      <guid>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/2.java-gc/</guid>
      <description>内存布局 常见的垃圾回收算法 GC 的一些名词 Minor GC 新生代空间，eden,survivor 区域回收的叫做minor GC Major GC 清理Tenured区， 用于回收</description>
    </item>
    <item>
      <title>3.java语言八股</title>
      <link>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/3.java%E8%AF%AD%E8%A8%80%E5%85%AB%E8%82%A1/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      <guid>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/3.java%E8%AF%AD%E8%A8%80%E5%85%AB%E8%82%A1/</guid>
      <description>重新 equals 一定要重新 hashCode 并发编程三要素 原子性，不可分割 有序性， 程序执行顺序和代码顺序保持一致 可见性【可用性】， 一个线程对共享变量的修改，另一个线程</description>
    </item>
    <item>
      <title>4.JVM 加载类的方式，内存分布</title>
      <link>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/4.jvm%E5%8A%A0%E8%BD%BD%E7%B1%BB/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      <guid>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/4.jvm%E5%8A%A0%E8%BD%BD%E7%B1%BB/</guid>
      <description>jvm加载类的过程 一句话解释清楚整个过程 先加载 class 进内存 对 class信息内容进行语法校验，判断是否有错误 对静态变量初始化 调用构造器 初始化实例 加</description>
    </item>
    <item>
      <title>5.集合相关问题</title>
      <link>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/5.%E9%9B%86%E5%90%88%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:22 +0800</pubDate>
      <guid>https://lyr-2000.github.io/post/11.%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/%E5%85%AB%E8%82%A1%E6%96%87%E4%B8%93%E9%A2%98%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/5.%E9%9B%86%E5%90%88%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>hashMap JDK 1.7 jdk1.7 hashMap put 位运算公式 $index = h&amp;amp;(array.length-1)$ array.length 是 2的幂的时候， 相当于 $index=h % array.length$ 默认容量为 16 【初始化】 面试宝典 视频 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24</description>
    </item>
  </channel>
</rss>
