<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>01.spring全家桶 on 凌冬的个人博客</title>
    <link>https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/</link>
    <description>Recent content in 01.spring全家桶 on 凌冬的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>LYR</copyright>
    <lastBuildDate>Mon, 16 Aug 2021 00:45:23 +0800</lastBuildDate><atom:link href="https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>注解相关</title>
      <link>https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/9.%E6%B3%A8%E8%A7%A3%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Wed, 07 Apr 2021 17:21:53 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/9.%E6%B3%A8%E8%A7%A3%E7%9B%B8%E5%85%B3/</guid>
      <description>常用的注解 @SpringBootApplication 这个注解我们一般不会主动使用它，但是它却是springboot项目的基石，创建 SpringBoot 项目之后会默认在主类加上。 我们可以把 @Sprin</description>
    </item>
    
    <item>
      <title>启动流程和配置</title>
      <link>https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/8.%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%92%8C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 02 Apr 2021 14:50:22 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/8.%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%92%8C%E9%85%8D%E7%BD%AE/</guid>
      <description>springboot启动 springboot启动类上的注解 一般来说我们的启动类需要有下面这几个注解 @SpringBootApplication 这个是一个非常核心的注解，我们使用spr</description>
    </item>
    
    <item>
      <title>事务</title>
      <link>https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/7.%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Fri, 26 Mar 2021 09:08:06 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/7.%E4%BA%8B%E5%8A%A1/</guid>
      <description>spring事务传播 为什么要有事务传播呢？默认情况下，spring是使用aop来实现事务的，我们只需要在方法上面加上 @Transactional 注解就可以了，但是这个</description>
    </item>
    
    <item>
      <title>循环依赖</title>
      <link>https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/6.%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/</link>
      <pubDate>Fri, 26 Mar 2021 08:49:54 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/6.%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/</guid>
      <description>先说一下什么是循环依赖，循环依赖就是A引用了对象B，但是B对象又引用了A，如下图所示 springIOC就是我们不自己创建对象，而是使用spr</description>
    </item>
    
    <item>
      <title>面试问题</title>
      <link>https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/5.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 25 Mar 2021 16:40:09 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/5.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</guid>
      <description>基础 什么是 Spring 框架? 我们一般说 Spring 框架指的都是 Spring Framework，它是很多模块的集合，使用这些模块可以很方便地协助我们进行开发。这些模块是：核</description>
    </item>
    
    <item>
      <title>springSecurity</title>
      <link>https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/4.springsecurity/</link>
      <pubDate>Tue, 23 Mar 2021 21:14:49 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/4.springsecurity/</guid>
      <description>SpringSecurity 采用的是责任链的设计模式，它有一条很长的过滤器链。现在对这条过滤器链的各个进行说明: WebAsyncManagerIntegrationF</description>
    </item>
    
    <item>
      <title>spring MVC</title>
      <link>https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/3.spring-mvc/</link>
      <pubDate>Tue, 23 Mar 2021 18:57:30 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/3.spring-mvc/</guid>
      <description>说说自己对于 spring-mvc 了解 谈到这个问题，我们不得不提提之前 Model1 和 Model2 这两个没有 Spring MVC 的时代。 Model1 时代 : 很多学 Java 后端比较晚的朋友可能并没有接触过 Model1 模式下的 JavaWeb 应</description>
    </item>
    
    <item>
      <title>AOP</title>
      <link>https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/2.aop/</link>
      <pubDate>Tue, 23 Mar 2021 17:35:09 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/2.aop/</guid>
      <description>AOP(Aspect-Oriented Programming), 即 面向切面编程, 它与 OOP( Object-Oriented Programming, 面向对象编程) 相辅相成, 提供了与 OOP 不同的抽象软件结构的视角. 在 AOP 中, 我们以类(class)作为我们的基本单元,</description>
    </item>
    
    <item>
      <title>IOC</title>
      <link>https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/1.ioc/</link>
      <pubDate>Tue, 23 Mar 2021 17:35:09 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/04.%E6%A1%86%E6%9E%B6/01.spring%E5%85%A8%E5%AE%B6%E6%A1%B6/1.ioc/</guid>
      <description>IoC全称Inversion of Control，直译为控制反转 它不是什么技术，而是一种设计思想。在spring中，IOC就意味着我们把设计好的</description>
    </item>
    
  </channel>
</rss>
