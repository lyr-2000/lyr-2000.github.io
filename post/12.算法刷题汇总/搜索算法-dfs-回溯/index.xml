<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>搜索问题 on 凌冬的个人博客</title>
    <link>https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-dfs-%E5%9B%9E%E6%BA%AF/</link>
    <description>Recent content in 搜索问题 on 凌冬的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>LYR</copyright>
    <lastBuildDate>Fri, 11 Mar 2022 23:39:48 +0800</lastBuildDate>
    
	<atom:link href="https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-dfs-%E5%9B%9E%E6%BA%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>lc.22.括号生成算法</title>
      <link>https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-dfs-%E5%9B%9E%E6%BA%AF/dfs/lc.22.%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 19 Feb 2022 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-dfs-%E5%9B%9E%E6%BA%AF/dfs/lc.22.%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95/</guid>
      <description>lc.22.括号生成算法 ​ 数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。 示例 1： 输入：n = 3 输出：[</description>
    </item>
    
    <item>
      <title>有重复字符串的排列组合</title>
      <link>https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-dfs-%E5%9B%9E%E6%BA%AF/dfs/%E6%9C%89%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/</link>
      <pubDate>Sat, 19 Feb 2022 16:39:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-dfs-%E5%9B%9E%E6%BA%AF/dfs/%E6%9C%89%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/</guid>
      <description>有重复字符串的排列组合 ​ ​ 面试题 08.08. 有重复字符串的排列组合 Difficulty: **有重复字符串的排列组合。编写一种方法，计算某字符串的所有排列组合。 示例1: 输入</description>
    </item>
    
    <item>
      <title>lc.081.允许重复选择元素的组合</title>
      <link>https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-dfs-%E5%9B%9E%E6%BA%AF/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/lc.%E5%85%81%E8%AE%B8%E9%87%8D%E5%A4%8D%E9%80%89%E6%8B%A9%E5%85%83%E7%B4%A0%E7%9A%84%E7%BB%84%E5%90%88/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-dfs-%E5%9B%9E%E6%BA%AF/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/lc.%E5%85%81%E8%AE%B8%E9%87%8D%E5%A4%8D%E9%80%89%E6%8B%A9%E5%85%83%E7%B4%A0%E7%9A%84%E7%BB%84%E5%90%88/</guid>
      <description>剑指 Offer II 081. 允许重复选择元素的组合 Difficulty: **给定一个无重复元素的正整数数组 candidates 和一个正整数 target ，找出 candidates 中所有可以使数字和为目标数 target 的唯一组合。 candidates 中的数</description>
    </item>
    
    <item>
      <title>lc.289.生命游戏</title>
      <link>https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-dfs-%E5%9B%9E%E6%BA%AF/289.%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-dfs-%E5%9B%9E%E6%BA%AF/289.%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/</guid>
      <description>289. 生命游戏 Difficulty: **根据 百度百科 ，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在 1970 年发明的细胞自动机。 给定一个包含 m × n 个格子的面板，每一</description>
    </item>
    
    <item>
      <title>全排列算法</title>
      <link>https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-dfs-%E5%9B%9E%E6%BA%AF/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/%E5%85%A8%E6%8E%92%E5%88%97%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-dfs-%E5%9B%9E%E6%BA%AF/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/%E5%85%A8%E6%8E%92%E5%88%97%E7%AE%97%E6%B3%95/</guid>
      <description>class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; permuteUnique(vector&amp;lt;int&amp;gt;&amp;amp; nums) { sort(nums.begin(),nums.end()); s = nums; visited = vector&amp;lt;bool&amp;gt; (s.size(),false); dfs(0); return res; } vector&amp;lt;int&amp;gt; s; vector&amp;lt;int&amp;gt; path; vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res; vector&amp;lt;bool&amp;gt; visited; void dfs(int cur) { if(path.size() &amp;gt;= s.size()) { res.push_back(path); return; } int len= s.size(); for(int i=0;i&amp;lt;len;++i) { //因为上一轮已经全部搜索过了，没必要重复走一遍 if</description>
    </item>
    
    <item>
      <title>模拟退火算法</title>
      <link>https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-dfs-%E5%9B%9E%E6%BA%AF/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 14 Aug 2021 22:42:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/post/12.%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%B1%87%E6%80%BB/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-dfs-%E5%9B%9E%E6%BA%AF/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E7%AE%97%E6%B3%95/</guid>
      <description>模拟退火算法 入门 介绍模拟退火前，先介绍爬山算法。爬山算法是一种简单的贪心搜索算法，该算法每次从当前解的临近解空间中选择一个最优解作为当前解，</description>
    </item>
    
  </channel>
</rss>