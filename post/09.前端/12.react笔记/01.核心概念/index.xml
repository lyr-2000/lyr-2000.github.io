<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>01.核心概念 on 凌冬的个人博客</title>
    <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</link>
    <description>Recent content in 01.核心概念 on 凌冬的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>lyr</copyright>
    <lastBuildDate>Mon, 16 Aug 2021 00:45:28 +0800</lastBuildDate>
    
	<atom:link href="https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>React哲学</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/11.react%E5%93%B2%E5%AD%A6/</link>
      <pubDate>Fri, 26 Mar 2021 17:56:40 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/11.react%E5%93%B2%E5%AD%A6/</guid>
      <description>11.React哲学（编写一个复杂组件的原则） React 最棒的部分之一是引导我们思考如何构建一个应用。在这篇文档中，我们将会通过 React 构建一个可搜索的产</description>
    </item>
    
    <item>
      <title>组合vs继承</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/10.%E7%BB%84%E5%90%88vs%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Fri, 26 Mar 2021 12:56:40 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/10.%E7%BB%84%E5%90%88vs%E7%BB%A7%E6%89%BF/</guid>
      <description>10.组合vs继承 React 有十分强大的组合模式。我们推荐使用组合而非继承来实现组件间的代码重用。 包含关系 (组件组合) 有些组件无法提前知晓它们子组件</description>
    </item>
    
    <item>
      <title>状态提升 (共享状态)</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/09.%E7%8A%B6%E6%80%81%E6%8F%90%E5%8D%87/</link>
      <pubDate>Fri, 26 Mar 2021 09:56:40 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/09.%E7%8A%B6%E6%80%81%E6%8F%90%E5%8D%87/</guid>
      <description>09. 状态提升 (共享状态) 通常，多个组件需要反映相同的变化数据，这时我们建议将共享状态提升到最近的共同父组件中去。 在 React 中，将多个组件中需要共享的</description>
    </item>
    
    <item>
      <title>JSX简介</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/01.jsx%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 24 Mar 2021 17:56:40 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/01.jsx%E7%AE%80%E4%BB%8B/</guid>
      <description>01. JSX简介 什么是JSX？ 1 const element = &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;; 以类似模板语法的方式描述UI的一种语法。它是JS的语法糖，本质上也是JS。可以在其中使用变量或表达式、</description>
    </item>
    
    <item>
      <title>State&amp;生命周期</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/04.state%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Wed, 24 Mar 2021 17:56:40 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/04.state%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>04. State &amp;amp; 生命周期 State 与 props 类似，但是 state 是私有的，并且完全受控于当前组件. State类似于vue中的data选项 将函数组件转换成 class 组件 在没有useS</description>
    </item>
    
    <item>
      <title>事件处理</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/05.%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</link>
      <pubDate>Wed, 24 Mar 2021 17:56:40 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/05.%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</guid>
      <description>05. 事件处理 与传统HTML绑定事件的区别 传统的 HTML： 1 2 3 &amp;lt;button onclick=&amp;#34;activateLasers()&amp;#34;&amp;gt; Activate Lasers &amp;lt;/button&amp;gt; 在 React 中略微不同： 1 2 3 4 // 1.事件名为小驼峰； 2.传入函数以大括号包裹</description>
    </item>
    
    <item>
      <title>元素渲染</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/02.%E5%85%83%E7%B4%A0%E6%B8%B2%E6%9F%93/</link>
      <pubDate>Wed, 24 Mar 2021 17:56:40 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/02.%E5%85%83%E7%B4%A0%E6%B8%B2%E6%9F%93/</guid>
      <description>02. 元素渲染 元素是构成 React 应用的最小砖块，描述了你在屏幕上想看到的内容。 1 const element = &amp;lt;h1&amp;gt;Hello, world&amp;lt;/h1&amp;gt;; 与浏览器的 DOM 元素不同，React 元素是创建开销极小的普通对象</description>
    </item>
    
    <item>
      <title>列表&amp;Key</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/07.%E5%88%97%E8%A1%A8key/</link>
      <pubDate>Wed, 24 Mar 2021 17:56:40 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/07.%E5%88%97%E8%A1%A8key/</guid>
      <description>07. 列表 &amp;amp; Key 如下代码，我们使用 map() 函数让数组中的每一项变双倍，然后我们得到了一个新的列表 doubled 并打印出来： 1 2 3 const numbers = [1, 2, 3, 4, 5]; const doubled = numbers.map((number) =&amp;gt; number * 2); console.log(doubled); 在</description>
    </item>
    
    <item>
      <title>条件渲染</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/06.%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/</link>
      <pubDate>Wed, 24 Mar 2021 17:56:40 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/06.%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/</guid>
      <description>06. 条件渲染 React 中的条件渲染和 JavaScript 中的一样，使用 JavaScript 运算符 if 或者条件运算符去创建元素来表现当前的状态，然后让 React 根据它们来更新 UI。 观察这两个组件: 1</description>
    </item>
    
    <item>
      <title>组件&amp;Props</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/03.%E7%BB%84%E4%BB%B6props/</link>
      <pubDate>Wed, 24 Mar 2021 17:56:40 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/03.%E7%BB%84%E4%BB%B6props/</guid>
      <description>03. 组件 &amp;amp; Props 函数组件与 class 组件 1.函数组件 1 2 3 function Welcome(props){ return &amp;lt;h1&amp;gt;Hello, {props.name}&amp;lt;/h1&amp;gt; } 该函数是一个有效的React组件。接收唯一带有数据的props参数，并返回一个Rea</description>
    </item>
    
    <item>
      <title>表单</title>
      <link>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/08.%E8%A1%A8%E5%8D%95/</link>
      <pubDate>Wed, 24 Mar 2021 17:56:40 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/01.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/08.%E8%A1%A8%E5%8D%95/</guid>
      <description>08. 表单 受控组件（双向数据绑定） 在 HTML 中，表单元素（如&amp;lt;input&amp;gt;、 &amp;lt;textarea&amp;gt; 和 &amp;lt;select&amp;gt;）通常自己维护 state，并根</description>
    </item>
    
  </channel>
</rss>