<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>04.CMU硕士经典100题 on 凌冬的个人博客</title>
    <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/</link>
    <description>Recent content in 04.CMU硕士经典100题 on 凌冬的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>LYR</copyright>
    <lastBuildDate>Mon, 16 Aug 2021 00:45:23 +0800</lastBuildDate>
    
	<atom:link href="https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>位运算</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/09.%E4%BD%8D%E8%BF%90%E7%AE%97/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/09.%E4%BD%8D%E8%BF%90%E7%AE%97/</guid>
      <description>位运算的常用技巧 位运算是算法题里比较特殊的一种类型，它们利用二进制位运算的特性进行一些奇妙的优化 和计算。常用的位运算符号包括：“∧”按位异或</description>
    </item>
    
    <item>
      <title>分治法解题</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/07.%E5%88%86%E6%B2%BB%E6%B3%95%E8%A7%A3%E9%A2%98/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/07.%E5%88%86%E6%B2%BB%E6%B3%95%E8%A7%A3%E9%A2%98/</guid>
      <description>解释 顾名思义，分治问题由“分”（divide）和“治”（conquer）两部分组成，通过把原问题分为子 问题，再将子问题进行处理合并，从而实现</description>
    </item>
    
    <item>
      <title>图</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/14.%E5%9B%BE/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/14.%E5%9B%BE/</guid>
      <description>基本概念 图通常分为有向（directed）或无向（undirected），有 循环（cyclic）或无循环（acyclic），所有节点相连（c</description>
    </item>
    
    <item>
      <title>字符串</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/11.%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/11.%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>基本概念 字串 是在字符串中，取出一块（连续的），如：pik, ach, kac等 子序列 指的是从字符串中，顺序取出字符，但是可以不连续：如：pau, kch, ic</description>
    </item>
    
    <item>
      <title>数学问题</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/08.%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/08.%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/</guid>
      <description>这里主要是考一些数学概念之类的，这里我简单分分类 公倍数与公因数 利用辗转相除法，我们可以很方便地求得两个数的最大公因数（greatest common di</description>
    </item>
    
    <item>
      <title>数据结构</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/10.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/10.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>数组 找到所有数组中消失的数字 这题目想法可以借鉴一下，就是我们让数组作为数组的下标，然后根据当前数字的正负来判断数字是否出现。 1 2 3 4 5 6 7 8</description>
    </item>
    
    <item>
      <title>更加复杂的数据结构</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/15.%E6%9B%B4%E5%8A%A0%E5%A4%8D%E6%9D%82%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/15.%E6%9B%B4%E5%8A%A0%E5%A4%8D%E6%9D%82%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>并查集 复合数据结构</description>
    </item>
    
    <item>
      <title>树</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/13.%E6%A0%91/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/13.%E6%A0%91/</guid>
      <description>树的递归 二叉树的最大深度 104. 二叉树的最大深度 - 力扣（LeetCode） (leetcode-cn.com) 终于没看题解做对了一个，太难了，不过这题目比较简单，所以没啥炫耀的，害</description>
    </item>
    
    <item>
      <title>链表</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/12.%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Wed, 24 Mar 2021 21:55:29 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/12.%E9%93%BE%E8%A1%A8/</guid>
      <description>链表的基本操作 翻转链表 206. 反转链表 - 力扣（LeetCode） (leetcode-cn.com) 有递归法和非递归法这两种，先说一下递归法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</description>
    </item>
    
    <item>
      <title>二分查找</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/03.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/03.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
      <description>解释 二分查找也常被称为二分法或者折半查找，每次查找时通过将待查找区间分成两部分并只取 一部分继续查找，将查找的复杂度大大减少。对于一个长度为 O(n)</description>
    </item>
    
    <item>
      <title>动态规划</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/06.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/06.%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>算法解释 这里我们引用一下维基百科的描述：“动态规划（Dynamic Programming, DP）在查找有很多 重叠子问题的情况的最优解时有效。它将问题重新组合成子问</description>
    </item>
    
    <item>
      <title>双指针法</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/02.%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/02.%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95/</guid>
      <description>算法解释 双指针主要用于遍历数组，两个指针指向不同的元素，从而协同完成任务。也可以延伸到多个数组的多个指针。 若两个指针指向同一数组，遍历方向相</description>
    </item>
    
    <item>
      <title>各种排序</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/04.%E5%90%84%E7%A7%8D%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/04.%E5%90%84%E7%A7%8D%E6%8E%92%E5%BA%8F/</guid>
      <description>常用的排序算法 以下是一些最基本的排序算法。虽然在 C++ 里可以通过 std::sort() 快速排序，而且刷题 时很少需要自己手写排序算法，但是熟习各种排序算法可以加深自己</description>
    </item>
    
    <item>
      <title>各种搜索</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/05.%E5%90%84%E7%A7%8D%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/05.%E5%90%84%E7%A7%8D%E6%90%9C%E7%B4%A2/</guid>
      <description>解释 深度优先搜索和广度优先搜索是两种最常见的优先搜索方法，它们被广泛地运用在图和树等 结构中进行搜索。 深度优先搜索 深度优先搜索（depth-f</description>
    </item>
    
    <item>
      <title>贪心算法</title>
      <link>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/01.%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 24 Mar 2021 21:46:28 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04.cmu%E7%A1%95%E5%A3%AB%E7%BB%8F%E5%85%B8100%E9%A2%98/01.%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</guid>
      <description>算法解释 顾名思义，贪心算法或贪心思想采用贪心的策略，保证每次操作都是局部最优的，从而使最 后得到的结果是全局最优的。 举一个最简单的例子：小明和</description>
    </item>
    
  </channel>
</rss>