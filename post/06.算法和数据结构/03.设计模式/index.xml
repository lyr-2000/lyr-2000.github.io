<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>03.设计模式 on Even - A super concise theme for Hugo</title>
    <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 03.设计模式 on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>lyr</copyright>
    <lastBuildDate>Mon, 16 Aug 2021 00:45:22 +0800</lastBuildDate>
    
	<atom:link href="http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>面试问题</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/04.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 25 Mar 2021 15:56:50 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/04.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</guid>
      <description>设计模式的6大原则？ 1、开闭原则（Open Close Principle） 开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修</description>
    </item>
    
    <item>
      <title>创建型</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01.%E5%88%9B%E5%BB%BA%E5%9E%8B/</link>
      <pubDate>Sun, 21 Mar 2021 20:42:24 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01.%E5%88%9B%E5%BB%BA%E5%9E%8B/</guid>
      <description>创建型模式关注点是如何创建对象，其核心思想是要把对象的创建和使用相分离，这样使得两者能相对独立地变换。创建型模式包括： 工厂方法：Factor</description>
    </item>
    
    <item>
      <title>结构性</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02.%E7%BB%93%E6%9E%84%E5%9E%8B/</link>
      <pubDate>Sun, 21 Mar 2021 20:42:24 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02.%E7%BB%93%E6%9E%84%E5%9E%8B/</guid>
      <description>结构型模式主要涉及如何组合各种对象以便获得更好、更灵活的结构。虽然面向对象的继承机制提供了最基本的子类扩展父类的功能，但结构型模式不仅仅简单</description>
    </item>
    
    <item>
      <title>行为型</title>
      <link>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/03.%E8%A1%8C%E4%B8%BA%E5%9E%8B/</link>
      <pubDate>Sun, 21 Mar 2021 20:42:24 +0000</pubDate>
      
      <guid>http://doc.lyr-2000.xyz/post/06.%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/03.%E8%A1%8C%E4%B8%BA%E5%9E%8B/</guid>
      <description>行为型模式主要涉及算法和对象间的职责分配。通过使用对象组合，行为型模式可以描述一组对象应该如何协作来完成一个整体任务。 行为型模式有： 责任链 命</description>
    </item>
    
  </channel>
</rss>